
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programBOOL_TYPE COMMA DIVIDE DOT DOUBLEDOT DOUBLE_TYPE ELSE EQUAL EQUALEQUAL FLOAT FLOAT_TYPE FOR FUNCTION GREATERTHAN GREATERTHANOREQUAL IDK IF INT INT_TYPE LBRACKET LCURLY LESSTHAN LESSTHANOREQUAL LPARENTHESIS MINUS MODULUS NAME NOTEQUAL OWO PLUS RBRACKET RCURLY RPARENTHESIS SEMICOLON STRING STRING_TYPE TIMES VOID WHILE\n    empty :\n    \n    program : program_aux codeblock\n    \n    program_aux : IDK\n    | OWO\n    n_seen_type : \n    type : INT_TYPE n_seen_type\n    | STRING_TYPE n_seen_type\n    | DOUBLE_TYPE n_seen_type\n    | FLOAT_TYPE n_seen_type\n    | BOOL_TYPE n_seen_type\n    \n    logic_operator : GREATERTHAN\n    | LESSTHAN\n    | EQUALEQUAL\n    | LESSTHANOREQUAL\n    | GREATERTHANOREQUAL\n    | NOTEQUAL\n    \n    arithmetic_operator : PLUS\n    | MINUS\n    | TIMES\n    | DIVIDE\n    | MODULUS\n    \n    literal : FLOAT\n    | INT\n    | STRING\n    \n    function_type : type\n    | VOID\n    \n    function_definition : FUNCTION NAME parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY\n    \n    function_call : NAME LPARENTHESIS parameter_list RPARENTHESIS\n    \n    parameter_list : empty\n    | parameter\n    | parameter COMMA parameter_list\n    \n    parameter : type NAME\n    | assign\n    \n    expression : exp\n    | exp logic_operator exp\n    \n    exp : termino\n    | termino PLUS exp\n    | termino MINUS exp\n    \n    termino : factor\n    | factor TIMES termino\n    | factor DIVIDE termino\n    \n    factor : LPARENTHESIS expression RPARENTHESIS\n    | PLUS value\n    | MINUS value\n    | value\n    \n    value : function_call\n    | literal\n    | NAME\n    \n    assign : type NAME n_name_assign EQUAL expression\n    | NAME n_name_assign EQUAL expression\n    n_name_assign : \n    statement : statement_aux SEMICOLON\n    \n    statement_aux : assign\n    | function_call\n    \n    codeblock : empty\n    | codeblock_aux codeblock\n    \n    codeblock_aux : statement\n    | function_definition\n    | condition_if\n    | loop\n    \n    loop : forloop\n    | whileloop\n    \n    whileloop : WHILE LPARENTHESIS expression RPARENTHESIS LCURLY codeblock RCURLY\n    \n    forloop : FOR LPARENTHESIS assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY\n    \n    condition_if : IF LPARENTHESIS expression RPARENTHESIS LCURLY codeblock RCURLY condition_else\n    \n    condition_else : ELSE LCURLY codeblock RCURLY\n    | empty\n    '
    
_lr_action_items = {'IDK':([0,],[3,]),'OWO':([0,],[4,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,16,17,28,29,109,111,112,113,115,121,122,],[0,-1,-3,-4,-2,-55,-1,-57,-58,-59,-60,-61,-62,-56,-52,-1,-63,-27,-65,-67,-66,-64,]),'FUNCTION':([2,3,4,7,8,9,10,11,16,17,29,95,102,104,109,111,112,113,115,117,118,121,122,],[13,-3,-4,13,-57,-58,-59,-60,-61,-62,-52,13,13,13,-1,-63,-27,-65,-67,13,13,-66,-64,]),'IF':([2,3,4,7,8,9,10,11,16,17,29,95,102,104,109,111,112,113,115,117,118,121,122,],[15,-3,-4,15,-57,-58,-59,-60,-61,-62,-52,15,15,15,-1,-63,-27,-65,-67,15,15,-66,-64,]),'FOR':([2,3,4,7,8,9,10,11,16,17,29,95,102,104,109,111,112,113,115,117,118,121,122,],[20,-3,-4,20,-57,-58,-59,-60,-61,-62,-52,20,20,20,-1,-63,-27,-65,-67,20,20,-66,-64,]),'WHILE':([2,3,4,7,8,9,10,11,16,17,29,95,102,104,109,111,112,113,115,117,118,121,122,],[21,-3,-4,21,-57,-58,-59,-60,-61,-62,-52,21,21,21,-1,-63,-27,-65,-67,21,21,-66,-64,]),'NAME':([2,3,4,7,8,9,10,11,13,16,17,22,23,24,25,26,27,29,30,32,33,34,35,37,38,39,40,41,46,48,50,54,55,68,74,75,76,77,78,79,80,81,82,85,86,87,89,95,102,104,106,109,111,112,113,115,117,118,121,122,],[14,-3,-4,14,-57,-58,-59,-60,30,-61,-62,36,-5,-5,-5,-5,-5,-52,42,42,60,42,60,-6,-7,-8,-9,-10,69,60,60,60,60,42,60,-11,-12,-13,-14,-15,-16,60,60,60,60,60,60,14,14,14,42,-1,-63,-27,-65,-67,14,14,-66,-64,]),'INT_TYPE':([2,3,4,7,8,9,10,11,16,17,29,30,32,34,67,68,95,102,104,106,109,111,112,113,115,117,118,121,122,],[23,-3,-4,23,-57,-58,-59,-60,-61,-62,-52,23,23,23,23,23,23,23,23,23,-1,-63,-27,-65,-67,23,23,-66,-64,]),'STRING_TYPE':([2,3,4,7,8,9,10,11,16,17,29,30,32,34,67,68,95,102,104,106,109,111,112,113,115,117,118,121,122,],[24,-3,-4,24,-57,-58,-59,-60,-61,-62,-52,24,24,24,24,24,24,24,24,24,-1,-63,-27,-65,-67,24,24,-66,-64,]),'DOUBLE_TYPE':([2,3,4,7,8,9,10,11,16,17,29,30,32,34,67,68,95,102,104,106,109,111,112,113,115,117,118,121,122,],[25,-3,-4,25,-57,-58,-59,-60,-61,-62,-52,25,25,25,25,25,25,25,25,25,-1,-63,-27,-65,-67,25,25,-66,-64,]),'FLOAT_TYPE':([2,3,4,7,8,9,10,11,16,17,29,30,32,34,67,68,95,102,104,106,109,111,112,113,115,117,118,121,122,],[26,-3,-4,26,-57,-58,-59,-60,-61,-62,-52,26,26,26,26,26,26,26,26,26,-1,-63,-27,-65,-67,26,26,-66,-64,]),'BOOL_TYPE':([2,3,4,7,8,9,10,11,16,17,29,30,32,34,67,68,95,102,104,106,109,111,112,113,115,117,118,121,122,],[27,-3,-4,27,-57,-58,-59,-60,-61,-62,-52,27,27,27,27,27,27,27,27,27,-1,-63,-27,-65,-67,27,27,-66,-64,]),'RCURLY':([6,7,8,9,10,11,16,17,28,29,95,102,104,105,107,108,109,111,112,113,115,117,118,119,120,121,122,],[-55,-1,-57,-58,-59,-60,-61,-62,-56,-52,-1,-1,-1,109,111,112,-1,-63,-27,-65,-67,-1,-1,121,122,-66,-64,]),'SEMICOLON':([12,18,19,52,53,56,57,58,59,60,61,62,63,70,71,83,84,94,96,97,98,99,100,103,],[29,-53,-54,-34,-36,-39,-45,-46,-47,-48,-22,-23,-24,-50,-28,-43,-44,-42,-35,-37,-38,-40,-41,-49,]),'LPARENTHESIS':([14,15,20,21,33,35,48,50,60,74,75,76,77,78,79,80,81,82,85,86,87,89,],[32,33,34,35,50,50,50,50,32,50,-11,-12,-13,-14,-15,-16,50,50,50,50,50,50,]),'EQUAL':([14,31,36,42,66,69,],[-51,48,-51,-51,89,-51,]),'LCURLY':([23,24,25,26,27,37,38,39,40,41,73,88,90,91,92,114,116,],[-5,-5,-5,-5,-5,-6,-7,-8,-9,-10,95,102,104,-25,-26,117,118,]),'DOUBLEDOT':([30,43,44,45,47,52,53,56,57,58,59,60,61,62,63,64,68,69,70,71,83,84,93,94,96,97,98,99,100,101,103,],[-1,67,-29,-30,-33,-34,-36,-39,-45,-46,-47,-48,-22,-23,-24,87,-1,-32,-50,-28,-43,-44,-31,-42,-35,-37,-38,-40,-41,106,-49,]),'RPARENTHESIS':([32,44,45,47,49,51,52,53,56,57,58,59,60,61,62,63,65,68,69,70,71,72,83,84,93,94,96,97,98,99,100,103,110,],[-1,-29,-30,-33,71,73,-34,-36,-39,-45,-46,-47,-48,-22,-23,-24,88,-1,-32,-50,-28,94,-43,-44,-31,-42,-35,-37,-38,-40,-41,-49,116,]),'PLUS':([33,35,48,50,53,56,57,58,59,60,61,62,63,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,94,99,100,],[54,54,54,54,81,-39,-45,-46,-47,-48,-22,-23,-24,-28,54,-11,-12,-13,-14,-15,-16,54,54,-43,-44,54,54,54,54,-42,-40,-41,]),'MINUS':([33,35,48,50,53,56,57,58,59,60,61,62,63,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,94,99,100,],[55,55,55,55,82,-39,-45,-46,-47,-48,-22,-23,-24,-28,55,-11,-12,-13,-14,-15,-16,55,55,-43,-44,55,55,55,55,-42,-40,-41,]),'FLOAT':([33,35,48,50,54,55,74,75,76,77,78,79,80,81,82,85,86,87,89,],[61,61,61,61,61,61,61,-11,-12,-13,-14,-15,-16,61,61,61,61,61,61,]),'INT':([33,35,48,50,54,55,74,75,76,77,78,79,80,81,82,85,86,87,89,],[62,62,62,62,62,62,62,-11,-12,-13,-14,-15,-16,62,62,62,62,62,62,]),'STRING':([33,35,48,50,54,55,74,75,76,77,78,79,80,81,82,85,86,87,89,],[63,63,63,63,63,63,63,-11,-12,-13,-14,-15,-16,63,63,63,63,63,63,]),'COMMA':([45,47,52,53,56,57,58,59,60,61,62,63,69,70,71,83,84,94,96,97,98,99,100,103,],[68,-33,-34,-36,-39,-45,-46,-47,-48,-22,-23,-24,-32,-50,-28,-43,-44,-42,-35,-37,-38,-40,-41,-49,]),'GREATERTHAN':([52,53,56,57,58,59,60,61,62,63,71,83,84,94,97,98,99,100,],[75,-36,-39,-45,-46,-47,-48,-22,-23,-24,-28,-43,-44,-42,-37,-38,-40,-41,]),'LESSTHAN':([52,53,56,57,58,59,60,61,62,63,71,83,84,94,97,98,99,100,],[76,-36,-39,-45,-46,-47,-48,-22,-23,-24,-28,-43,-44,-42,-37,-38,-40,-41,]),'EQUALEQUAL':([52,53,56,57,58,59,60,61,62,63,71,83,84,94,97,98,99,100,],[77,-36,-39,-45,-46,-47,-48,-22,-23,-24,-28,-43,-44,-42,-37,-38,-40,-41,]),'LESSTHANOREQUAL':([52,53,56,57,58,59,60,61,62,63,71,83,84,94,97,98,99,100,],[78,-36,-39,-45,-46,-47,-48,-22,-23,-24,-28,-43,-44,-42,-37,-38,-40,-41,]),'GREATERTHANOREQUAL':([52,53,56,57,58,59,60,61,62,63,71,83,84,94,97,98,99,100,],[79,-36,-39,-45,-46,-47,-48,-22,-23,-24,-28,-43,-44,-42,-37,-38,-40,-41,]),'NOTEQUAL':([52,53,56,57,58,59,60,61,62,63,71,83,84,94,97,98,99,100,],[80,-36,-39,-45,-46,-47,-48,-22,-23,-24,-28,-43,-44,-42,-37,-38,-40,-41,]),'TIMES':([56,57,58,59,60,61,62,63,71,83,84,94,],[85,-45,-46,-47,-48,-22,-23,-24,-28,-43,-44,-42,]),'DIVIDE':([56,57,58,59,60,61,62,63,71,83,84,94,],[86,-45,-46,-47,-48,-22,-23,-24,-28,-43,-44,-42,]),'VOID':([67,],[92,]),'ELSE':([109,],[114,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'program_aux':([0,],[2,]),'codeblock':([2,7,95,102,104,117,118,],[5,28,105,107,108,119,120,]),'empty':([2,7,30,32,68,95,102,104,109,117,118,],[6,6,44,44,44,6,6,6,115,6,6,]),'codeblock_aux':([2,7,95,102,104,117,118,],[7,7,7,7,7,7,7,]),'statement':([2,7,95,102,104,117,118,],[8,8,8,8,8,8,8,]),'function_definition':([2,7,95,102,104,117,118,],[9,9,9,9,9,9,9,]),'condition_if':([2,7,95,102,104,117,118,],[10,10,10,10,10,10,10,]),'loop':([2,7,95,102,104,117,118,],[11,11,11,11,11,11,11,]),'statement_aux':([2,7,95,102,104,117,118,],[12,12,12,12,12,12,12,]),'forloop':([2,7,95,102,104,117,118,],[16,16,16,16,16,16,16,]),'whileloop':([2,7,95,102,104,117,118,],[17,17,17,17,17,17,17,]),'assign':([2,7,30,32,34,68,95,102,104,106,117,118,],[18,18,47,47,64,47,18,18,18,110,18,18,]),'function_call':([2,7,33,35,48,50,54,55,74,81,82,85,86,87,89,95,102,104,117,118,],[19,19,58,58,58,58,58,58,58,58,58,58,58,58,58,19,19,19,19,19,]),'type':([2,7,30,32,34,67,68,95,102,104,106,117,118,],[22,22,46,46,22,91,46,22,22,22,22,22,22,]),'n_name_assign':([14,36,42,69,],[31,66,31,66,]),'n_seen_type':([23,24,25,26,27,],[37,38,39,40,41,]),'parameter_list':([30,32,68,],[43,49,93,]),'parameter':([30,32,68,],[45,45,45,]),'expression':([33,35,48,50,87,89,],[51,65,70,72,101,103,]),'exp':([33,35,48,50,74,81,82,87,89,],[52,52,52,52,96,97,98,52,52,]),'termino':([33,35,48,50,74,81,82,85,86,87,89,],[53,53,53,53,53,53,53,99,100,53,53,]),'factor':([33,35,48,50,74,81,82,85,86,87,89,],[56,56,56,56,56,56,56,56,56,56,56,]),'value':([33,35,48,50,54,55,74,81,82,85,86,87,89,],[57,57,57,57,83,84,57,57,57,57,57,57,57,]),'literal':([33,35,48,50,54,55,74,81,82,85,86,87,89,],[59,59,59,59,59,59,59,59,59,59,59,59,59,]),'logic_operator':([52,],[74,]),'function_type':([67,],[90,]),'condition_else':([109,],[113,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('empty -> <empty>','empty',0,'p_empty','lang.py',107),
  ('program -> program_aux codeblock','program',2,'p_program','lang.py',113),
  ('program_aux -> IDK','program_aux',1,'p_program_aux','lang.py',119),
  ('program_aux -> OWO','program_aux',1,'p_program_aux','lang.py',120),
  ('n_seen_type -> <empty>','n_seen_type',0,'p_n_seen_type','lang.py',125),
  ('type -> INT_TYPE n_seen_type','type',2,'p_type','lang.py',132),
  ('type -> STRING_TYPE n_seen_type','type',2,'p_type','lang.py',133),
  ('type -> DOUBLE_TYPE n_seen_type','type',2,'p_type','lang.py',134),
  ('type -> FLOAT_TYPE n_seen_type','type',2,'p_type','lang.py',135),
  ('type -> BOOL_TYPE n_seen_type','type',2,'p_type','lang.py',136),
  ('logic_operator -> GREATERTHAN','logic_operator',1,'p_logic_operator','lang.py',142),
  ('logic_operator -> LESSTHAN','logic_operator',1,'p_logic_operator','lang.py',143),
  ('logic_operator -> EQUALEQUAL','logic_operator',1,'p_logic_operator','lang.py',144),
  ('logic_operator -> LESSTHANOREQUAL','logic_operator',1,'p_logic_operator','lang.py',145),
  ('logic_operator -> GREATERTHANOREQUAL','logic_operator',1,'p_logic_operator','lang.py',146),
  ('logic_operator -> NOTEQUAL','logic_operator',1,'p_logic_operator','lang.py',147),
  ('arithmetic_operator -> PLUS','arithmetic_operator',1,'p_arithmetic_operator','lang.py',164),
  ('arithmetic_operator -> MINUS','arithmetic_operator',1,'p_arithmetic_operator','lang.py',165),
  ('arithmetic_operator -> TIMES','arithmetic_operator',1,'p_arithmetic_operator','lang.py',166),
  ('arithmetic_operator -> DIVIDE','arithmetic_operator',1,'p_arithmetic_operator','lang.py',167),
  ('arithmetic_operator -> MODULUS','arithmetic_operator',1,'p_arithmetic_operator','lang.py',168),
  ('literal -> FLOAT','literal',1,'p_literal','lang.py',174),
  ('literal -> INT','literal',1,'p_literal','lang.py',175),
  ('literal -> STRING','literal',1,'p_literal','lang.py',176),
  ('function_type -> type','function_type',1,'p_function_type','lang.py',182),
  ('function_type -> VOID','function_type',1,'p_function_type','lang.py',183),
  ('function_definition -> FUNCTION NAME parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY','function_definition',8,'p_function_definition','lang.py',189),
  ('function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS','function_call',4,'p_function_call','lang.py',195),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','lang.py',201),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','lang.py',202),
  ('parameter_list -> parameter COMMA parameter_list','parameter_list',3,'p_parameter_list','lang.py',203),
  ('parameter -> type NAME','parameter',2,'p_parameter','lang.py',209),
  ('parameter -> assign','parameter',1,'p_parameter','lang.py',210),
  ('expression -> exp','expression',1,'p_expression','lang.py',216),
  ('expression -> exp logic_operator exp','expression',3,'p_expression','lang.py',217),
  ('exp -> termino','exp',1,'p_exp','lang.py',223),
  ('exp -> termino PLUS exp','exp',3,'p_exp','lang.py',224),
  ('exp -> termino MINUS exp','exp',3,'p_exp','lang.py',225),
  ('termino -> factor','termino',1,'p_termino','lang.py',231),
  ('termino -> factor TIMES termino','termino',3,'p_termino','lang.py',232),
  ('termino -> factor DIVIDE termino','termino',3,'p_termino','lang.py',233),
  ('factor -> LPARENTHESIS expression RPARENTHESIS','factor',3,'p_factor','lang.py',239),
  ('factor -> PLUS value','factor',2,'p_factor','lang.py',240),
  ('factor -> MINUS value','factor',2,'p_factor','lang.py',241),
  ('factor -> value','factor',1,'p_factor','lang.py',242),
  ('value -> function_call','value',1,'p_value','lang.py',248),
  ('value -> literal','value',1,'p_value','lang.py',249),
  ('value -> NAME','value',1,'p_value','lang.py',250),
  ('assign -> type NAME n_name_assign EQUAL expression','assign',5,'p_assign','lang.py',256),
  ('assign -> NAME n_name_assign EQUAL expression','assign',4,'p_assign','lang.py',257),
  ('n_name_assign -> <empty>','n_name_assign',0,'p_n_name_assign','lang.py',262),
  ('statement -> statement_aux SEMICOLON','statement',2,'p_statement','lang.py',271),
  ('statement_aux -> assign','statement_aux',1,'p_statement_aux','lang.py',277),
  ('statement_aux -> function_call','statement_aux',1,'p_statement_aux','lang.py',278),
  ('codeblock -> empty','codeblock',1,'p_codeblock','lang.py',285),
  ('codeblock -> codeblock_aux codeblock','codeblock',2,'p_codeblock','lang.py',286),
  ('codeblock_aux -> statement','codeblock_aux',1,'p_codeblock_aux','lang.py',292),
  ('codeblock_aux -> function_definition','codeblock_aux',1,'p_codeblock_aux','lang.py',293),
  ('codeblock_aux -> condition_if','codeblock_aux',1,'p_codeblock_aux','lang.py',294),
  ('codeblock_aux -> loop','codeblock_aux',1,'p_codeblock_aux','lang.py',295),
  ('loop -> forloop','loop',1,'p_loop','lang.py',301),
  ('loop -> whileloop','loop',1,'p_loop','lang.py',302),
  ('whileloop -> WHILE LPARENTHESIS expression RPARENTHESIS LCURLY codeblock RCURLY','whileloop',7,'p_whileloop','lang.py',308),
  ('forloop -> FOR LPARENTHESIS assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY','forloop',11,'p_forloop','lang.py',314),
  ('condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY codeblock RCURLY condition_else','condition_if',8,'p_condition_if','lang.py',320),
  ('condition_else -> ELSE LCURLY codeblock RCURLY','condition_else',4,'p_condition_else','lang.py',326),
  ('condition_else -> empty','condition_else',1,'p_condition_else','lang.py',327),
]
