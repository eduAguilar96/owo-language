Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DOT
    LBRACKET
    NOT
    RBRACKET

Grammar

Rule 0     S' -> program
Rule 1     n_seen_type -> <empty>
Rule 2     n_open_new_scope -> <empty>
Rule 3     n_close_scope -> <empty>
Rule 4     n_name -> <empty>
Rule 5     n_math_expression_1_int -> <empty>
Rule 6     n_math_expression_1_float -> <empty>
Rule 7     n_math_expression_1_string -> <empty>
Rule 8     n_math_expression_1_name -> <empty>
Rule 9     n_math_expression_2 -> <empty>
Rule 10    n_math_expression_3 -> <empty>
Rule 11    n_math_expression_4 -> <empty>
Rule 12    n_math_expression_5 -> <empty>
Rule 13    n_math_expression_6 -> <empty>
Rule 14    n_math_expression_7 -> <empty>
Rule 15    n_math_expression_8 -> <empty>
Rule 16    n_math_expression_9 -> <empty>
Rule 17    n_math_expression_10 -> <empty>
Rule 18    n_math_expression_11 -> <empty>
Rule 19    n_math_expression_12 -> <empty>
Rule 20    empty -> <empty>
Rule 21    program -> program_aux codeblock
Rule 22    program_aux -> IDK
Rule 23    program_aux -> OWO
Rule 24    type -> INT_TYPE n_seen_type
Rule 25    type -> STRING_TYPE n_seen_type
Rule 26    type -> DOUBLE_TYPE n_seen_type
Rule 27    type -> FLOAT_TYPE n_seen_type
Rule 28    type -> BOOL_TYPE n_seen_type
Rule 29    relational_operator -> GREATERTHAN n_math_expression_8
Rule 30    relational_operator -> LESSTHAN n_math_expression_8
Rule 31    relational_operator -> EQUALEQUAL n_math_expression_8
Rule 32    relational_operator -> LESSTHANOREQUAL n_math_expression_8
Rule 33    relational_operator -> GREATERTHANOREQUAL n_math_expression_8
Rule 34    relational_operator -> NOTEQUAL n_math_expression_8
Rule 35    literal -> FLOAT n_math_expression_1_float
Rule 36    literal -> INT n_math_expression_1_int
Rule 37    literal -> STRING n_math_expression_1_string
Rule 38    function_type -> type
Rule 39    function_type -> VOID
Rule 40    function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope
Rule 41    function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS
Rule 42    parameter_list -> empty
Rule 43    parameter_list -> parameter
Rule 44    parameter_list -> parameter COMMA parameter_list
Rule 45    parameter -> type NAME n_name
Rule 46    parameter -> assign
Rule 47    expression -> expression_or
Rule 48    expression -> expression_or AND n_math_expression_10 expression n_math_expression_11
Rule 49    expression_or -> expression_rel
Rule 50    expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12
Rule 51    expression_rel -> exp
Rule 52    expression_rel -> exp relational_operator exp n_math_expression_9
Rule 53    exp -> termino n_math_expression_4
Rule 54    exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp
Rule 55    exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp
Rule 56    termino -> factor n_math_expression_5
Rule 57    termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino
Rule 58    termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino
Rule 59    termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino
Rule 60    factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
Rule 61    factor -> PLUS value
Rule 62    factor -> MINUS value
Rule 63    factor -> value
Rule 64    value -> function_call
Rule 65    value -> literal
Rule 66    value -> NAME n_math_expression_1_name
Rule 67    assign -> type NAME n_name EQUAL expression
Rule 68    assign -> NAME n_name EQUAL expression
Rule 69    statement -> statement_aux SEMICOLON
Rule 70    statement_aux -> assign
Rule 71    statement_aux -> function_call
Rule 72    codeblock -> empty
Rule 73    codeblock -> codeblock_aux codeblock
Rule 74    codeblock_aux -> statement
Rule 75    codeblock_aux -> function_definition
Rule 76    codeblock_aux -> condition_if
Rule 77    codeblock_aux -> loop
Rule 78    loop -> forloop
Rule 79    loop -> whileloop
Rule 80    whileloop -> WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope
Rule 81    forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
Rule 82    condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else
Rule 83    condition_else -> ELSE LCURLY n_open_new_scope codeblock RCURLY n_close_scope
Rule 84    condition_else -> empty

Terminals, with rules where they appear

AND                  : 48
BOOL_TYPE            : 28
COMMA                : 44
DIVIDE               : 58
DOT                  : 
DOUBLEDOT            : 40 81 81
DOUBLE_TYPE          : 26
ELSE                 : 83
EQUAL                : 67 68
EQUALEQUAL           : 31
FLOAT                : 35
FLOAT_TYPE           : 27
FOR                  : 81
FUNCTION             : 40
GREATERTHAN          : 29
GREATERTHANOREQUAL   : 33
IDK                  : 22
IF                   : 82
INT                  : 36
INT_TYPE             : 24
LBRACKET             : 
LCURLY               : 40 80 81 82 83
LESSTHAN             : 30
LESSTHANOREQUAL      : 32
LPARENTHESIS         : 41 60 80 81 82
MINUS                : 55 62
MODULUS              : 59
NAME                 : 40 41 45 66 67 68
NOT                  : 
NOTEQUAL             : 34
OR                   : 50
OWO                  : 23
PLUS                 : 54 61
RBRACKET             : 
RCURLY               : 40 80 81 82 83
RPARENTHESIS         : 41 60 80 81 82
SEMICOLON            : 69
STRING               : 37
STRING_TYPE          : 25
TIMES                : 57
VOID                 : 39
WHILE                : 80
error                : 

Nonterminals, with rules where they appear

assign               : 46 70 81 81
codeblock            : 21 40 73 80 81 82 83
codeblock_aux        : 73
condition_else       : 82
condition_if         : 76
empty                : 42 72 84
exp                  : 51 52 52 54 55
expression           : 48 60 67 68 80 81 82
expression_or        : 47 48 50
expression_rel       : 49 50
factor               : 56 57 58 59
forloop              : 78
function_call        : 64 71
function_definition  : 75
function_type        : 40
literal              : 65
loop                 : 77
n_close_scope        : 40 80 81 82 83
n_math_expression_10 : 48 50
n_math_expression_11 : 48
n_math_expression_12 : 50
n_math_expression_1_float : 35
n_math_expression_1_int : 36
n_math_expression_1_name : 66
n_math_expression_1_string : 37
n_math_expression_2  : 54 55
n_math_expression_3  : 57 58 59
n_math_expression_4  : 53 54 55
n_math_expression_5  : 56 57 58 59
n_math_expression_6  : 60
n_math_expression_7  : 60
n_math_expression_8  : 29 30 31 32 33 34
n_math_expression_9  : 52
n_name               : 45 67 68
n_open_new_scope     : 40 80 81 82 83
n_seen_type          : 24 25 26 27 28
parameter            : 43 44
parameter_list       : 40 41 44
program              : 0
program_aux          : 21
relational_operator  : 52
statement            : 74
statement_aux        : 69
termino              : 53 54 55 57 58 59
type                 : 38 45 67
value                : 61 62 63
whileloop            : 79

Parsing method: LALR

state 0

    (0) S' -> . program
    (21) program -> . program_aux codeblock
    (22) program_aux -> . IDK
    (23) program_aux -> . OWO

    IDK             shift and go to state 3
    OWO             shift and go to state 4

    program                        shift and go to state 1
    program_aux                    shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (21) program -> program_aux . codeblock
    (72) codeblock -> . empty
    (73) codeblock -> . codeblock_aux codeblock
    (20) empty -> .
    (74) codeblock_aux -> . statement
    (75) codeblock_aux -> . function_definition
    (76) codeblock_aux -> . condition_if
    (77) codeblock_aux -> . loop
    (69) statement -> . statement_aux SEMICOLON
    (40) function_definition -> . FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope
    (82) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else
    (78) loop -> . forloop
    (79) loop -> . whileloop
    (70) statement_aux -> . assign
    (71) statement_aux -> . function_call
    (81) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (80) whileloop -> . WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope
    (67) assign -> . type NAME n_name EQUAL expression
    (68) assign -> . NAME n_name EQUAL expression
    (41) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (24) type -> . INT_TYPE n_seen_type
    (25) type -> . STRING_TYPE n_seen_type
    (26) type -> . DOUBLE_TYPE n_seen_type
    (27) type -> . FLOAT_TYPE n_seen_type
    (28) type -> . BOOL_TYPE n_seen_type

    $end            reduce using rule 20 (empty -> .)
    FUNCTION        shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    codeblock                      shift and go to state 5
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 3

    (22) program_aux -> IDK .

    FUNCTION        reduce using rule 22 (program_aux -> IDK .)
    IF              reduce using rule 22 (program_aux -> IDK .)
    FOR             reduce using rule 22 (program_aux -> IDK .)
    WHILE           reduce using rule 22 (program_aux -> IDK .)
    NAME            reduce using rule 22 (program_aux -> IDK .)
    INT_TYPE        reduce using rule 22 (program_aux -> IDK .)
    STRING_TYPE     reduce using rule 22 (program_aux -> IDK .)
    DOUBLE_TYPE     reduce using rule 22 (program_aux -> IDK .)
    FLOAT_TYPE      reduce using rule 22 (program_aux -> IDK .)
    BOOL_TYPE       reduce using rule 22 (program_aux -> IDK .)
    $end            reduce using rule 22 (program_aux -> IDK .)


state 4

    (23) program_aux -> OWO .

    FUNCTION        reduce using rule 23 (program_aux -> OWO .)
    IF              reduce using rule 23 (program_aux -> OWO .)
    FOR             reduce using rule 23 (program_aux -> OWO .)
    WHILE           reduce using rule 23 (program_aux -> OWO .)
    NAME            reduce using rule 23 (program_aux -> OWO .)
    INT_TYPE        reduce using rule 23 (program_aux -> OWO .)
    STRING_TYPE     reduce using rule 23 (program_aux -> OWO .)
    DOUBLE_TYPE     reduce using rule 23 (program_aux -> OWO .)
    FLOAT_TYPE      reduce using rule 23 (program_aux -> OWO .)
    BOOL_TYPE       reduce using rule 23 (program_aux -> OWO .)
    $end            reduce using rule 23 (program_aux -> OWO .)


state 5

    (21) program -> program_aux codeblock .

    $end            reduce using rule 21 (program -> program_aux codeblock .)


state 6

    (72) codeblock -> empty .

    $end            reduce using rule 72 (codeblock -> empty .)
    RCURLY          reduce using rule 72 (codeblock -> empty .)


state 7

    (73) codeblock -> codeblock_aux . codeblock
    (72) codeblock -> . empty
    (73) codeblock -> . codeblock_aux codeblock
    (20) empty -> .
    (74) codeblock_aux -> . statement
    (75) codeblock_aux -> . function_definition
    (76) codeblock_aux -> . condition_if
    (77) codeblock_aux -> . loop
    (69) statement -> . statement_aux SEMICOLON
    (40) function_definition -> . FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope
    (82) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else
    (78) loop -> . forloop
    (79) loop -> . whileloop
    (70) statement_aux -> . assign
    (71) statement_aux -> . function_call
    (81) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (80) whileloop -> . WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope
    (67) assign -> . type NAME n_name EQUAL expression
    (68) assign -> . NAME n_name EQUAL expression
    (41) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (24) type -> . INT_TYPE n_seen_type
    (25) type -> . STRING_TYPE n_seen_type
    (26) type -> . DOUBLE_TYPE n_seen_type
    (27) type -> . FLOAT_TYPE n_seen_type
    (28) type -> . BOOL_TYPE n_seen_type

    $end            reduce using rule 20 (empty -> .)
    RCURLY          reduce using rule 20 (empty -> .)
    FUNCTION        shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    codeblock_aux                  shift and go to state 7
    codeblock                      shift and go to state 28
    empty                          shift and go to state 6
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 8

    (74) codeblock_aux -> statement .

    FUNCTION        reduce using rule 74 (codeblock_aux -> statement .)
    IF              reduce using rule 74 (codeblock_aux -> statement .)
    FOR             reduce using rule 74 (codeblock_aux -> statement .)
    WHILE           reduce using rule 74 (codeblock_aux -> statement .)
    NAME            reduce using rule 74 (codeblock_aux -> statement .)
    INT_TYPE        reduce using rule 74 (codeblock_aux -> statement .)
    STRING_TYPE     reduce using rule 74 (codeblock_aux -> statement .)
    DOUBLE_TYPE     reduce using rule 74 (codeblock_aux -> statement .)
    FLOAT_TYPE      reduce using rule 74 (codeblock_aux -> statement .)
    BOOL_TYPE       reduce using rule 74 (codeblock_aux -> statement .)
    $end            reduce using rule 74 (codeblock_aux -> statement .)
    RCURLY          reduce using rule 74 (codeblock_aux -> statement .)


state 9

    (75) codeblock_aux -> function_definition .

    FUNCTION        reduce using rule 75 (codeblock_aux -> function_definition .)
    IF              reduce using rule 75 (codeblock_aux -> function_definition .)
    FOR             reduce using rule 75 (codeblock_aux -> function_definition .)
    WHILE           reduce using rule 75 (codeblock_aux -> function_definition .)
    NAME            reduce using rule 75 (codeblock_aux -> function_definition .)
    INT_TYPE        reduce using rule 75 (codeblock_aux -> function_definition .)
    STRING_TYPE     reduce using rule 75 (codeblock_aux -> function_definition .)
    DOUBLE_TYPE     reduce using rule 75 (codeblock_aux -> function_definition .)
    FLOAT_TYPE      reduce using rule 75 (codeblock_aux -> function_definition .)
    BOOL_TYPE       reduce using rule 75 (codeblock_aux -> function_definition .)
    $end            reduce using rule 75 (codeblock_aux -> function_definition .)
    RCURLY          reduce using rule 75 (codeblock_aux -> function_definition .)


state 10

    (76) codeblock_aux -> condition_if .

    FUNCTION        reduce using rule 76 (codeblock_aux -> condition_if .)
    IF              reduce using rule 76 (codeblock_aux -> condition_if .)
    FOR             reduce using rule 76 (codeblock_aux -> condition_if .)
    WHILE           reduce using rule 76 (codeblock_aux -> condition_if .)
    NAME            reduce using rule 76 (codeblock_aux -> condition_if .)
    INT_TYPE        reduce using rule 76 (codeblock_aux -> condition_if .)
    STRING_TYPE     reduce using rule 76 (codeblock_aux -> condition_if .)
    DOUBLE_TYPE     reduce using rule 76 (codeblock_aux -> condition_if .)
    FLOAT_TYPE      reduce using rule 76 (codeblock_aux -> condition_if .)
    BOOL_TYPE       reduce using rule 76 (codeblock_aux -> condition_if .)
    $end            reduce using rule 76 (codeblock_aux -> condition_if .)
    RCURLY          reduce using rule 76 (codeblock_aux -> condition_if .)


state 11

    (77) codeblock_aux -> loop .

    FUNCTION        reduce using rule 77 (codeblock_aux -> loop .)
    IF              reduce using rule 77 (codeblock_aux -> loop .)
    FOR             reduce using rule 77 (codeblock_aux -> loop .)
    WHILE           reduce using rule 77 (codeblock_aux -> loop .)
    NAME            reduce using rule 77 (codeblock_aux -> loop .)
    INT_TYPE        reduce using rule 77 (codeblock_aux -> loop .)
    STRING_TYPE     reduce using rule 77 (codeblock_aux -> loop .)
    DOUBLE_TYPE     reduce using rule 77 (codeblock_aux -> loop .)
    FLOAT_TYPE      reduce using rule 77 (codeblock_aux -> loop .)
    BOOL_TYPE       reduce using rule 77 (codeblock_aux -> loop .)
    $end            reduce using rule 77 (codeblock_aux -> loop .)
    RCURLY          reduce using rule 77 (codeblock_aux -> loop .)


state 12

    (69) statement -> statement_aux . SEMICOLON

    SEMICOLON       shift and go to state 29


state 13

    (40) function_definition -> FUNCTION . NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope

    NAME            shift and go to state 30


state 14

    (68) assign -> NAME . n_name EQUAL expression
    (41) function_call -> NAME . LPARENTHESIS parameter_list RPARENTHESIS
    (4) n_name -> .

    LPARENTHESIS    shift and go to state 32
    EQUAL           reduce using rule 4 (n_name -> .)

    n_name                         shift and go to state 31

state 15

    (82) condition_if -> IF . LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else

    LPARENTHESIS    shift and go to state 33


state 16

    (78) loop -> forloop .

    FUNCTION        reduce using rule 78 (loop -> forloop .)
    IF              reduce using rule 78 (loop -> forloop .)
    FOR             reduce using rule 78 (loop -> forloop .)
    WHILE           reduce using rule 78 (loop -> forloop .)
    NAME            reduce using rule 78 (loop -> forloop .)
    INT_TYPE        reduce using rule 78 (loop -> forloop .)
    STRING_TYPE     reduce using rule 78 (loop -> forloop .)
    DOUBLE_TYPE     reduce using rule 78 (loop -> forloop .)
    FLOAT_TYPE      reduce using rule 78 (loop -> forloop .)
    BOOL_TYPE       reduce using rule 78 (loop -> forloop .)
    $end            reduce using rule 78 (loop -> forloop .)
    RCURLY          reduce using rule 78 (loop -> forloop .)


state 17

    (79) loop -> whileloop .

    FUNCTION        reduce using rule 79 (loop -> whileloop .)
    IF              reduce using rule 79 (loop -> whileloop .)
    FOR             reduce using rule 79 (loop -> whileloop .)
    WHILE           reduce using rule 79 (loop -> whileloop .)
    NAME            reduce using rule 79 (loop -> whileloop .)
    INT_TYPE        reduce using rule 79 (loop -> whileloop .)
    STRING_TYPE     reduce using rule 79 (loop -> whileloop .)
    DOUBLE_TYPE     reduce using rule 79 (loop -> whileloop .)
    FLOAT_TYPE      reduce using rule 79 (loop -> whileloop .)
    BOOL_TYPE       reduce using rule 79 (loop -> whileloop .)
    $end            reduce using rule 79 (loop -> whileloop .)
    RCURLY          reduce using rule 79 (loop -> whileloop .)


state 18

    (70) statement_aux -> assign .

    SEMICOLON       reduce using rule 70 (statement_aux -> assign .)


state 19

    (71) statement_aux -> function_call .

    SEMICOLON       reduce using rule 71 (statement_aux -> function_call .)


state 20

    (81) forloop -> FOR . LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope

    LPARENTHESIS    shift and go to state 34


state 21

    (80) whileloop -> WHILE . LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope

    LPARENTHESIS    shift and go to state 35


state 22

    (67) assign -> type . NAME n_name EQUAL expression

    NAME            shift and go to state 36


state 23

    (24) type -> INT_TYPE . n_seen_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)
    LCURLY          reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 37

state 24

    (25) type -> STRING_TYPE . n_seen_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)
    LCURLY          reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 38

state 25

    (26) type -> DOUBLE_TYPE . n_seen_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)
    LCURLY          reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 39

state 26

    (27) type -> FLOAT_TYPE . n_seen_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)
    LCURLY          reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 40

state 27

    (28) type -> BOOL_TYPE . n_seen_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)
    LCURLY          reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 41

state 28

    (73) codeblock -> codeblock_aux codeblock .

    $end            reduce using rule 73 (codeblock -> codeblock_aux codeblock .)
    RCURLY          reduce using rule 73 (codeblock -> codeblock_aux codeblock .)


state 29

    (69) statement -> statement_aux SEMICOLON .

    FUNCTION        reduce using rule 69 (statement -> statement_aux SEMICOLON .)
    IF              reduce using rule 69 (statement -> statement_aux SEMICOLON .)
    FOR             reduce using rule 69 (statement -> statement_aux SEMICOLON .)
    WHILE           reduce using rule 69 (statement -> statement_aux SEMICOLON .)
    NAME            reduce using rule 69 (statement -> statement_aux SEMICOLON .)
    INT_TYPE        reduce using rule 69 (statement -> statement_aux SEMICOLON .)
    STRING_TYPE     reduce using rule 69 (statement -> statement_aux SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 69 (statement -> statement_aux SEMICOLON .)
    FLOAT_TYPE      reduce using rule 69 (statement -> statement_aux SEMICOLON .)
    BOOL_TYPE       reduce using rule 69 (statement -> statement_aux SEMICOLON .)
    $end            reduce using rule 69 (statement -> statement_aux SEMICOLON .)
    RCURLY          reduce using rule 69 (statement -> statement_aux SEMICOLON .)


state 30

    (40) function_definition -> FUNCTION NAME . n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope
    (2) n_open_new_scope -> .

    INT_TYPE        reduce using rule 2 (n_open_new_scope -> .)
    STRING_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    DOUBLE_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    FLOAT_TYPE      reduce using rule 2 (n_open_new_scope -> .)
    BOOL_TYPE       reduce using rule 2 (n_open_new_scope -> .)
    NAME            reduce using rule 2 (n_open_new_scope -> .)
    DOUBLEDOT       reduce using rule 2 (n_open_new_scope -> .)

    n_open_new_scope               shift and go to state 42

state 31

    (68) assign -> NAME n_name . EQUAL expression

    EQUAL           shift and go to state 43


state 32

    (41) function_call -> NAME LPARENTHESIS . parameter_list RPARENTHESIS
    (42) parameter_list -> . empty
    (43) parameter_list -> . parameter
    (44) parameter_list -> . parameter COMMA parameter_list
    (20) empty -> .
    (45) parameter -> . type NAME n_name
    (46) parameter -> . assign
    (24) type -> . INT_TYPE n_seen_type
    (25) type -> . STRING_TYPE n_seen_type
    (26) type -> . DOUBLE_TYPE n_seen_type
    (27) type -> . FLOAT_TYPE n_seen_type
    (28) type -> . BOOL_TYPE n_seen_type
    (67) assign -> . type NAME n_name EQUAL expression
    (68) assign -> . NAME n_name EQUAL expression

    RPARENTHESIS    reduce using rule 20 (empty -> .)
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27
    NAME            shift and go to state 44

    parameter_list                 shift and go to state 45
    empty                          shift and go to state 46
    parameter                      shift and go to state 47
    type                           shift and go to state 48
    assign                         shift and go to state 49

state 33

    (82) condition_if -> IF LPARENTHESIS . expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else
    (47) expression -> . expression_or
    (48) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (49) expression_or -> . expression_rel
    (50) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (51) expression_rel -> . exp
    (52) expression_rel -> . exp relational_operator exp n_math_expression_9
    (53) exp -> . termino n_math_expression_4
    (54) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (55) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (56) termino -> . factor n_math_expression_5
    (57) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (58) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (59) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (60) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (61) factor -> . PLUS value
    (62) factor -> . MINUS value
    (63) factor -> . value
    (64) value -> . function_call
    (65) value -> . literal
    (66) value -> . NAME n_math_expression_1_name
    (41) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (35) literal -> . FLOAT n_math_expression_1_float
    (36) literal -> . INT n_math_expression_1_int
    (37) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    expression                     shift and go to state 51
    expression_or                  shift and go to state 52
    expression_rel                 shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 55
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 34

    (81) forloop -> FOR LPARENTHESIS . n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (2) n_open_new_scope -> .

    NAME            reduce using rule 2 (n_open_new_scope -> .)
    INT_TYPE        reduce using rule 2 (n_open_new_scope -> .)
    STRING_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    DOUBLE_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    FLOAT_TYPE      reduce using rule 2 (n_open_new_scope -> .)
    BOOL_TYPE       reduce using rule 2 (n_open_new_scope -> .)

    n_open_new_scope               shift and go to state 66

state 35

    (80) whileloop -> WHILE LPARENTHESIS . expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope
    (47) expression -> . expression_or
    (48) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (49) expression_or -> . expression_rel
    (50) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (51) expression_rel -> . exp
    (52) expression_rel -> . exp relational_operator exp n_math_expression_9
    (53) exp -> . termino n_math_expression_4
    (54) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (55) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (56) termino -> . factor n_math_expression_5
    (57) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (58) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (59) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (60) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (61) factor -> . PLUS value
    (62) factor -> . MINUS value
    (63) factor -> . value
    (64) value -> . function_call
    (65) value -> . literal
    (66) value -> . NAME n_math_expression_1_name
    (41) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (35) literal -> . FLOAT n_math_expression_1_float
    (36) literal -> . INT n_math_expression_1_int
    (37) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    expression                     shift and go to state 67
    expression_or                  shift and go to state 52
    expression_rel                 shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 55
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 36

    (67) assign -> type NAME . n_name EQUAL expression
    (4) n_name -> .

    EQUAL           reduce using rule 4 (n_name -> .)

    n_name                         shift and go to state 68

state 37

    (24) type -> INT_TYPE n_seen_type .

    NAME            reduce using rule 24 (type -> INT_TYPE n_seen_type .)
    LCURLY          reduce using rule 24 (type -> INT_TYPE n_seen_type .)


state 38

    (25) type -> STRING_TYPE n_seen_type .

    NAME            reduce using rule 25 (type -> STRING_TYPE n_seen_type .)
    LCURLY          reduce using rule 25 (type -> STRING_TYPE n_seen_type .)


state 39

    (26) type -> DOUBLE_TYPE n_seen_type .

    NAME            reduce using rule 26 (type -> DOUBLE_TYPE n_seen_type .)
    LCURLY          reduce using rule 26 (type -> DOUBLE_TYPE n_seen_type .)


state 40

    (27) type -> FLOAT_TYPE n_seen_type .

    NAME            reduce using rule 27 (type -> FLOAT_TYPE n_seen_type .)
    LCURLY          reduce using rule 27 (type -> FLOAT_TYPE n_seen_type .)


state 41

    (28) type -> BOOL_TYPE n_seen_type .

    NAME            reduce using rule 28 (type -> BOOL_TYPE n_seen_type .)
    LCURLY          reduce using rule 28 (type -> BOOL_TYPE n_seen_type .)


state 42

    (40) function_definition -> FUNCTION NAME n_open_new_scope . parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope
    (42) parameter_list -> . empty
    (43) parameter_list -> . parameter
    (44) parameter_list -> . parameter COMMA parameter_list
    (20) empty -> .
    (45) parameter -> . type NAME n_name
    (46) parameter -> . assign
    (24) type -> . INT_TYPE n_seen_type
    (25) type -> . STRING_TYPE n_seen_type
    (26) type -> . DOUBLE_TYPE n_seen_type
    (27) type -> . FLOAT_TYPE n_seen_type
    (28) type -> . BOOL_TYPE n_seen_type
    (67) assign -> . type NAME n_name EQUAL expression
    (68) assign -> . NAME n_name EQUAL expression

    DOUBLEDOT       reduce using rule 20 (empty -> .)
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27
    NAME            shift and go to state 44

    parameter_list                 shift and go to state 69
    empty                          shift and go to state 46
    parameter                      shift and go to state 47
    type                           shift and go to state 48
    assign                         shift and go to state 49

state 43

    (68) assign -> NAME n_name EQUAL . expression
    (47) expression -> . expression_or
    (48) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (49) expression_or -> . expression_rel
    (50) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (51) expression_rel -> . exp
    (52) expression_rel -> . exp relational_operator exp n_math_expression_9
    (53) exp -> . termino n_math_expression_4
    (54) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (55) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (56) termino -> . factor n_math_expression_5
    (57) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (58) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (59) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (60) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (61) factor -> . PLUS value
    (62) factor -> . MINUS value
    (63) factor -> . value
    (64) value -> . function_call
    (65) value -> . literal
    (66) value -> . NAME n_math_expression_1_name
    (41) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (35) literal -> . FLOAT n_math_expression_1_float
    (36) literal -> . INT n_math_expression_1_int
    (37) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    expression                     shift and go to state 70
    expression_or                  shift and go to state 52
    expression_rel                 shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 55
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 44

    (68) assign -> NAME . n_name EQUAL expression
    (4) n_name -> .

    EQUAL           reduce using rule 4 (n_name -> .)

    n_name                         shift and go to state 31

state 45

    (41) function_call -> NAME LPARENTHESIS parameter_list . RPARENTHESIS

    RPARENTHESIS    shift and go to state 71


state 46

    (42) parameter_list -> empty .

    RPARENTHESIS    reduce using rule 42 (parameter_list -> empty .)
    DOUBLEDOT       reduce using rule 42 (parameter_list -> empty .)


state 47

    (43) parameter_list -> parameter .
    (44) parameter_list -> parameter . COMMA parameter_list

    RPARENTHESIS    reduce using rule 43 (parameter_list -> parameter .)
    DOUBLEDOT       reduce using rule 43 (parameter_list -> parameter .)
    COMMA           shift and go to state 72


state 48

    (45) parameter -> type . NAME n_name
    (67) assign -> type . NAME n_name EQUAL expression

    NAME            shift and go to state 73


state 49

    (46) parameter -> assign .

    COMMA           reduce using rule 46 (parameter -> assign .)
    RPARENTHESIS    reduce using rule 46 (parameter -> assign .)
    DOUBLEDOT       reduce using rule 46 (parameter -> assign .)


state 50

    (60) factor -> LPARENTHESIS . n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (13) n_math_expression_6 -> .

    LPARENTHESIS    reduce using rule 13 (n_math_expression_6 -> .)
    PLUS            reduce using rule 13 (n_math_expression_6 -> .)
    MINUS           reduce using rule 13 (n_math_expression_6 -> .)
    NAME            reduce using rule 13 (n_math_expression_6 -> .)
    FLOAT           reduce using rule 13 (n_math_expression_6 -> .)
    INT             reduce using rule 13 (n_math_expression_6 -> .)
    STRING          reduce using rule 13 (n_math_expression_6 -> .)

    n_math_expression_6            shift and go to state 74

state 51

    (82) condition_if -> IF LPARENTHESIS expression . RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else

    RPARENTHESIS    shift and go to state 75


state 52

    (47) expression -> expression_or .
    (48) expression -> expression_or . AND n_math_expression_10 expression n_math_expression_11

    RPARENTHESIS    reduce using rule 47 (expression -> expression_or .)
    SEMICOLON       reduce using rule 47 (expression -> expression_or .)
    COMMA           reduce using rule 47 (expression -> expression_or .)
    DOUBLEDOT       reduce using rule 47 (expression -> expression_or .)
    AND             shift and go to state 76


state 53

    (49) expression_or -> expression_rel .
    (50) expression_or -> expression_rel . OR n_math_expression_10 expression_or n_math_expression_12

    AND             reduce using rule 49 (expression_or -> expression_rel .)
    RPARENTHESIS    reduce using rule 49 (expression_or -> expression_rel .)
    SEMICOLON       reduce using rule 49 (expression_or -> expression_rel .)
    COMMA           reduce using rule 49 (expression_or -> expression_rel .)
    DOUBLEDOT       reduce using rule 49 (expression_or -> expression_rel .)
    OR              shift and go to state 77


state 54

    (51) expression_rel -> exp .
    (52) expression_rel -> exp . relational_operator exp n_math_expression_9
    (29) relational_operator -> . GREATERTHAN n_math_expression_8
    (30) relational_operator -> . LESSTHAN n_math_expression_8
    (31) relational_operator -> . EQUALEQUAL n_math_expression_8
    (32) relational_operator -> . LESSTHANOREQUAL n_math_expression_8
    (33) relational_operator -> . GREATERTHANOREQUAL n_math_expression_8
    (34) relational_operator -> . NOTEQUAL n_math_expression_8

    OR              reduce using rule 51 (expression_rel -> exp .)
    AND             reduce using rule 51 (expression_rel -> exp .)
    RPARENTHESIS    reduce using rule 51 (expression_rel -> exp .)
    SEMICOLON       reduce using rule 51 (expression_rel -> exp .)
    COMMA           reduce using rule 51 (expression_rel -> exp .)
    DOUBLEDOT       reduce using rule 51 (expression_rel -> exp .)
    GREATERTHAN     shift and go to state 79
    LESSTHAN        shift and go to state 80
    EQUALEQUAL      shift and go to state 81
    LESSTHANOREQUAL shift and go to state 82
    GREATERTHANOREQUAL shift and go to state 83
    NOTEQUAL        shift and go to state 84

    relational_operator            shift and go to state 78

state 55

    (53) exp -> termino . n_math_expression_4
    (54) exp -> termino . n_math_expression_4 PLUS n_math_expression_2 exp
    (55) exp -> termino . n_math_expression_4 MINUS n_math_expression_2 exp
    (11) n_math_expression_4 -> .

    PLUS            reduce using rule 11 (n_math_expression_4 -> .)
    MINUS           reduce using rule 11 (n_math_expression_4 -> .)
    GREATERTHAN     reduce using rule 11 (n_math_expression_4 -> .)
    LESSTHAN        reduce using rule 11 (n_math_expression_4 -> .)
    EQUALEQUAL      reduce using rule 11 (n_math_expression_4 -> .)
    LESSTHANOREQUAL reduce using rule 11 (n_math_expression_4 -> .)
    GREATERTHANOREQUAL reduce using rule 11 (n_math_expression_4 -> .)
    NOTEQUAL        reduce using rule 11 (n_math_expression_4 -> .)
    OR              reduce using rule 11 (n_math_expression_4 -> .)
    AND             reduce using rule 11 (n_math_expression_4 -> .)
    RPARENTHESIS    reduce using rule 11 (n_math_expression_4 -> .)
    SEMICOLON       reduce using rule 11 (n_math_expression_4 -> .)
    COMMA           reduce using rule 11 (n_math_expression_4 -> .)
    DOUBLEDOT       reduce using rule 11 (n_math_expression_4 -> .)

    n_math_expression_4            shift and go to state 85

state 56

    (61) factor -> PLUS . value
    (64) value -> . function_call
    (65) value -> . literal
    (66) value -> . NAME n_math_expression_1_name
    (41) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (35) literal -> . FLOAT n_math_expression_1_float
    (36) literal -> . INT n_math_expression_1_int
    (37) literal -> . STRING n_math_expression_1_string

    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    value                          shift and go to state 86
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 57

    (62) factor -> MINUS . value
    (64) value -> . function_call
    (65) value -> . literal
    (66) value -> . NAME n_math_expression_1_name
    (41) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (35) literal -> . FLOAT n_math_expression_1_float
    (36) literal -> . INT n_math_expression_1_int
    (37) literal -> . STRING n_math_expression_1_string

    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    value                          shift and go to state 87
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 58

    (56) termino -> factor . n_math_expression_5
    (57) termino -> factor . n_math_expression_5 TIMES n_math_expression_3 termino
    (58) termino -> factor . n_math_expression_5 DIVIDE n_math_expression_3 termino
    (59) termino -> factor . n_math_expression_5 MODULUS n_math_expression_3 termino
    (12) n_math_expression_5 -> .

    TIMES           reduce using rule 12 (n_math_expression_5 -> .)
    DIVIDE          reduce using rule 12 (n_math_expression_5 -> .)
    MODULUS         reduce using rule 12 (n_math_expression_5 -> .)
    PLUS            reduce using rule 12 (n_math_expression_5 -> .)
    MINUS           reduce using rule 12 (n_math_expression_5 -> .)
    GREATERTHAN     reduce using rule 12 (n_math_expression_5 -> .)
    LESSTHAN        reduce using rule 12 (n_math_expression_5 -> .)
    EQUALEQUAL      reduce using rule 12 (n_math_expression_5 -> .)
    LESSTHANOREQUAL reduce using rule 12 (n_math_expression_5 -> .)
    GREATERTHANOREQUAL reduce using rule 12 (n_math_expression_5 -> .)
    NOTEQUAL        reduce using rule 12 (n_math_expression_5 -> .)
    OR              reduce using rule 12 (n_math_expression_5 -> .)
    AND             reduce using rule 12 (n_math_expression_5 -> .)
    RPARENTHESIS    reduce using rule 12 (n_math_expression_5 -> .)
    SEMICOLON       reduce using rule 12 (n_math_expression_5 -> .)
    COMMA           reduce using rule 12 (n_math_expression_5 -> .)
    DOUBLEDOT       reduce using rule 12 (n_math_expression_5 -> .)

    n_math_expression_5            shift and go to state 88

state 59

    (63) factor -> value .

    TIMES           reduce using rule 63 (factor -> value .)
    DIVIDE          reduce using rule 63 (factor -> value .)
    MODULUS         reduce using rule 63 (factor -> value .)
    PLUS            reduce using rule 63 (factor -> value .)
    MINUS           reduce using rule 63 (factor -> value .)
    GREATERTHAN     reduce using rule 63 (factor -> value .)
    LESSTHAN        reduce using rule 63 (factor -> value .)
    EQUALEQUAL      reduce using rule 63 (factor -> value .)
    LESSTHANOREQUAL reduce using rule 63 (factor -> value .)
    GREATERTHANOREQUAL reduce using rule 63 (factor -> value .)
    NOTEQUAL        reduce using rule 63 (factor -> value .)
    OR              reduce using rule 63 (factor -> value .)
    AND             reduce using rule 63 (factor -> value .)
    RPARENTHESIS    reduce using rule 63 (factor -> value .)
    SEMICOLON       reduce using rule 63 (factor -> value .)
    COMMA           reduce using rule 63 (factor -> value .)
    DOUBLEDOT       reduce using rule 63 (factor -> value .)


state 60

    (64) value -> function_call .

    TIMES           reduce using rule 64 (value -> function_call .)
    DIVIDE          reduce using rule 64 (value -> function_call .)
    MODULUS         reduce using rule 64 (value -> function_call .)
    PLUS            reduce using rule 64 (value -> function_call .)
    MINUS           reduce using rule 64 (value -> function_call .)
    GREATERTHAN     reduce using rule 64 (value -> function_call .)
    LESSTHAN        reduce using rule 64 (value -> function_call .)
    EQUALEQUAL      reduce using rule 64 (value -> function_call .)
    LESSTHANOREQUAL reduce using rule 64 (value -> function_call .)
    GREATERTHANOREQUAL reduce using rule 64 (value -> function_call .)
    NOTEQUAL        reduce using rule 64 (value -> function_call .)
    OR              reduce using rule 64 (value -> function_call .)
    AND             reduce using rule 64 (value -> function_call .)
    RPARENTHESIS    reduce using rule 64 (value -> function_call .)
    SEMICOLON       reduce using rule 64 (value -> function_call .)
    COMMA           reduce using rule 64 (value -> function_call .)
    DOUBLEDOT       reduce using rule 64 (value -> function_call .)


state 61

    (65) value -> literal .

    TIMES           reduce using rule 65 (value -> literal .)
    DIVIDE          reduce using rule 65 (value -> literal .)
    MODULUS         reduce using rule 65 (value -> literal .)
    PLUS            reduce using rule 65 (value -> literal .)
    MINUS           reduce using rule 65 (value -> literal .)
    GREATERTHAN     reduce using rule 65 (value -> literal .)
    LESSTHAN        reduce using rule 65 (value -> literal .)
    EQUALEQUAL      reduce using rule 65 (value -> literal .)
    LESSTHANOREQUAL reduce using rule 65 (value -> literal .)
    GREATERTHANOREQUAL reduce using rule 65 (value -> literal .)
    NOTEQUAL        reduce using rule 65 (value -> literal .)
    OR              reduce using rule 65 (value -> literal .)
    AND             reduce using rule 65 (value -> literal .)
    RPARENTHESIS    reduce using rule 65 (value -> literal .)
    SEMICOLON       reduce using rule 65 (value -> literal .)
    COMMA           reduce using rule 65 (value -> literal .)
    DOUBLEDOT       reduce using rule 65 (value -> literal .)


state 62

    (66) value -> NAME . n_math_expression_1_name
    (41) function_call -> NAME . LPARENTHESIS parameter_list RPARENTHESIS
    (8) n_math_expression_1_name -> .

    LPARENTHESIS    shift and go to state 32
    TIMES           reduce using rule 8 (n_math_expression_1_name -> .)
    DIVIDE          reduce using rule 8 (n_math_expression_1_name -> .)
    MODULUS         reduce using rule 8 (n_math_expression_1_name -> .)
    PLUS            reduce using rule 8 (n_math_expression_1_name -> .)
    MINUS           reduce using rule 8 (n_math_expression_1_name -> .)
    GREATERTHAN     reduce using rule 8 (n_math_expression_1_name -> .)
    LESSTHAN        reduce using rule 8 (n_math_expression_1_name -> .)
    EQUALEQUAL      reduce using rule 8 (n_math_expression_1_name -> .)
    LESSTHANOREQUAL reduce using rule 8 (n_math_expression_1_name -> .)
    GREATERTHANOREQUAL reduce using rule 8 (n_math_expression_1_name -> .)
    NOTEQUAL        reduce using rule 8 (n_math_expression_1_name -> .)
    OR              reduce using rule 8 (n_math_expression_1_name -> .)
    AND             reduce using rule 8 (n_math_expression_1_name -> .)
    RPARENTHESIS    reduce using rule 8 (n_math_expression_1_name -> .)
    SEMICOLON       reduce using rule 8 (n_math_expression_1_name -> .)
    COMMA           reduce using rule 8 (n_math_expression_1_name -> .)
    DOUBLEDOT       reduce using rule 8 (n_math_expression_1_name -> .)

    n_math_expression_1_name       shift and go to state 89

state 63

    (35) literal -> FLOAT . n_math_expression_1_float
    (6) n_math_expression_1_float -> .

    TIMES           reduce using rule 6 (n_math_expression_1_float -> .)
    DIVIDE          reduce using rule 6 (n_math_expression_1_float -> .)
    MODULUS         reduce using rule 6 (n_math_expression_1_float -> .)
    PLUS            reduce using rule 6 (n_math_expression_1_float -> .)
    MINUS           reduce using rule 6 (n_math_expression_1_float -> .)
    GREATERTHAN     reduce using rule 6 (n_math_expression_1_float -> .)
    LESSTHAN        reduce using rule 6 (n_math_expression_1_float -> .)
    EQUALEQUAL      reduce using rule 6 (n_math_expression_1_float -> .)
    LESSTHANOREQUAL reduce using rule 6 (n_math_expression_1_float -> .)
    GREATERTHANOREQUAL reduce using rule 6 (n_math_expression_1_float -> .)
    NOTEQUAL        reduce using rule 6 (n_math_expression_1_float -> .)
    OR              reduce using rule 6 (n_math_expression_1_float -> .)
    AND             reduce using rule 6 (n_math_expression_1_float -> .)
    RPARENTHESIS    reduce using rule 6 (n_math_expression_1_float -> .)
    SEMICOLON       reduce using rule 6 (n_math_expression_1_float -> .)
    COMMA           reduce using rule 6 (n_math_expression_1_float -> .)
    DOUBLEDOT       reduce using rule 6 (n_math_expression_1_float -> .)

    n_math_expression_1_float      shift and go to state 90

state 64

    (36) literal -> INT . n_math_expression_1_int
    (5) n_math_expression_1_int -> .

    TIMES           reduce using rule 5 (n_math_expression_1_int -> .)
    DIVIDE          reduce using rule 5 (n_math_expression_1_int -> .)
    MODULUS         reduce using rule 5 (n_math_expression_1_int -> .)
    PLUS            reduce using rule 5 (n_math_expression_1_int -> .)
    MINUS           reduce using rule 5 (n_math_expression_1_int -> .)
    GREATERTHAN     reduce using rule 5 (n_math_expression_1_int -> .)
    LESSTHAN        reduce using rule 5 (n_math_expression_1_int -> .)
    EQUALEQUAL      reduce using rule 5 (n_math_expression_1_int -> .)
    LESSTHANOREQUAL reduce using rule 5 (n_math_expression_1_int -> .)
    GREATERTHANOREQUAL reduce using rule 5 (n_math_expression_1_int -> .)
    NOTEQUAL        reduce using rule 5 (n_math_expression_1_int -> .)
    OR              reduce using rule 5 (n_math_expression_1_int -> .)
    AND             reduce using rule 5 (n_math_expression_1_int -> .)
    RPARENTHESIS    reduce using rule 5 (n_math_expression_1_int -> .)
    SEMICOLON       reduce using rule 5 (n_math_expression_1_int -> .)
    COMMA           reduce using rule 5 (n_math_expression_1_int -> .)
    DOUBLEDOT       reduce using rule 5 (n_math_expression_1_int -> .)

    n_math_expression_1_int        shift and go to state 91

state 65

    (37) literal -> STRING . n_math_expression_1_string
    (7) n_math_expression_1_string -> .

    TIMES           reduce using rule 7 (n_math_expression_1_string -> .)
    DIVIDE          reduce using rule 7 (n_math_expression_1_string -> .)
    MODULUS         reduce using rule 7 (n_math_expression_1_string -> .)
    PLUS            reduce using rule 7 (n_math_expression_1_string -> .)
    MINUS           reduce using rule 7 (n_math_expression_1_string -> .)
    GREATERTHAN     reduce using rule 7 (n_math_expression_1_string -> .)
    LESSTHAN        reduce using rule 7 (n_math_expression_1_string -> .)
    EQUALEQUAL      reduce using rule 7 (n_math_expression_1_string -> .)
    LESSTHANOREQUAL reduce using rule 7 (n_math_expression_1_string -> .)
    GREATERTHANOREQUAL reduce using rule 7 (n_math_expression_1_string -> .)
    NOTEQUAL        reduce using rule 7 (n_math_expression_1_string -> .)
    OR              reduce using rule 7 (n_math_expression_1_string -> .)
    AND             reduce using rule 7 (n_math_expression_1_string -> .)
    RPARENTHESIS    reduce using rule 7 (n_math_expression_1_string -> .)
    SEMICOLON       reduce using rule 7 (n_math_expression_1_string -> .)
    COMMA           reduce using rule 7 (n_math_expression_1_string -> .)
    DOUBLEDOT       reduce using rule 7 (n_math_expression_1_string -> .)

    n_math_expression_1_string     shift and go to state 92

state 66

    (81) forloop -> FOR LPARENTHESIS n_open_new_scope . assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (67) assign -> . type NAME n_name EQUAL expression
    (68) assign -> . NAME n_name EQUAL expression
    (24) type -> . INT_TYPE n_seen_type
    (25) type -> . STRING_TYPE n_seen_type
    (26) type -> . DOUBLE_TYPE n_seen_type
    (27) type -> . FLOAT_TYPE n_seen_type
    (28) type -> . BOOL_TYPE n_seen_type

    NAME            shift and go to state 44
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    assign                         shift and go to state 93
    type                           shift and go to state 22

state 67

    (80) whileloop -> WHILE LPARENTHESIS expression . RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope

    RPARENTHESIS    shift and go to state 94


state 68

    (67) assign -> type NAME n_name . EQUAL expression

    EQUAL           shift and go to state 95


state 69

    (40) function_definition -> FUNCTION NAME n_open_new_scope parameter_list . DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope

    DOUBLEDOT       shift and go to state 96


state 70

    (68) assign -> NAME n_name EQUAL expression .

    SEMICOLON       reduce using rule 68 (assign -> NAME n_name EQUAL expression .)
    COMMA           reduce using rule 68 (assign -> NAME n_name EQUAL expression .)
    RPARENTHESIS    reduce using rule 68 (assign -> NAME n_name EQUAL expression .)
    DOUBLEDOT       reduce using rule 68 (assign -> NAME n_name EQUAL expression .)


state 71

    (41) function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .

    SEMICOLON       reduce using rule 41 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    TIMES           reduce using rule 41 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    DIVIDE          reduce using rule 41 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    MODULUS         reduce using rule 41 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    PLUS            reduce using rule 41 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    MINUS           reduce using rule 41 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    GREATERTHAN     reduce using rule 41 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    LESSTHAN        reduce using rule 41 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    EQUALEQUAL      reduce using rule 41 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    LESSTHANOREQUAL reduce using rule 41 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    GREATERTHANOREQUAL reduce using rule 41 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    NOTEQUAL        reduce using rule 41 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    OR              reduce using rule 41 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    AND             reduce using rule 41 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    RPARENTHESIS    reduce using rule 41 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    COMMA           reduce using rule 41 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    DOUBLEDOT       reduce using rule 41 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)


state 72

    (44) parameter_list -> parameter COMMA . parameter_list
    (42) parameter_list -> . empty
    (43) parameter_list -> . parameter
    (44) parameter_list -> . parameter COMMA parameter_list
    (20) empty -> .
    (45) parameter -> . type NAME n_name
    (46) parameter -> . assign
    (24) type -> . INT_TYPE n_seen_type
    (25) type -> . STRING_TYPE n_seen_type
    (26) type -> . DOUBLE_TYPE n_seen_type
    (27) type -> . FLOAT_TYPE n_seen_type
    (28) type -> . BOOL_TYPE n_seen_type
    (67) assign -> . type NAME n_name EQUAL expression
    (68) assign -> . NAME n_name EQUAL expression

    RPARENTHESIS    reduce using rule 20 (empty -> .)
    DOUBLEDOT       reduce using rule 20 (empty -> .)
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27
    NAME            shift and go to state 44

    parameter                      shift and go to state 47
    parameter_list                 shift and go to state 97
    empty                          shift and go to state 46
    type                           shift and go to state 48
    assign                         shift and go to state 49

state 73

    (45) parameter -> type NAME . n_name
    (67) assign -> type NAME . n_name EQUAL expression
    (4) n_name -> .

    EQUAL           reduce using rule 4 (n_name -> .)
    COMMA           reduce using rule 4 (n_name -> .)
    RPARENTHESIS    reduce using rule 4 (n_name -> .)
    DOUBLEDOT       reduce using rule 4 (n_name -> .)

    n_name                         shift and go to state 98

state 74

    (60) factor -> LPARENTHESIS n_math_expression_6 . expression RPARENTHESIS n_math_expression_7
    (47) expression -> . expression_or
    (48) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (49) expression_or -> . expression_rel
    (50) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (51) expression_rel -> . exp
    (52) expression_rel -> . exp relational_operator exp n_math_expression_9
    (53) exp -> . termino n_math_expression_4
    (54) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (55) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (56) termino -> . factor n_math_expression_5
    (57) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (58) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (59) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (60) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (61) factor -> . PLUS value
    (62) factor -> . MINUS value
    (63) factor -> . value
    (64) value -> . function_call
    (65) value -> . literal
    (66) value -> . NAME n_math_expression_1_name
    (41) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (35) literal -> . FLOAT n_math_expression_1_float
    (36) literal -> . INT n_math_expression_1_int
    (37) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    expression                     shift and go to state 99
    expression_or                  shift and go to state 52
    expression_rel                 shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 55
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 75

    (82) condition_if -> IF LPARENTHESIS expression RPARENTHESIS . LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else

    LCURLY          shift and go to state 100


state 76

    (48) expression -> expression_or AND . n_math_expression_10 expression n_math_expression_11
    (17) n_math_expression_10 -> .

    LPARENTHESIS    reduce using rule 17 (n_math_expression_10 -> .)
    PLUS            reduce using rule 17 (n_math_expression_10 -> .)
    MINUS           reduce using rule 17 (n_math_expression_10 -> .)
    NAME            reduce using rule 17 (n_math_expression_10 -> .)
    FLOAT           reduce using rule 17 (n_math_expression_10 -> .)
    INT             reduce using rule 17 (n_math_expression_10 -> .)
    STRING          reduce using rule 17 (n_math_expression_10 -> .)

    n_math_expression_10           shift and go to state 101

state 77

    (50) expression_or -> expression_rel OR . n_math_expression_10 expression_or n_math_expression_12
    (17) n_math_expression_10 -> .

    LPARENTHESIS    reduce using rule 17 (n_math_expression_10 -> .)
    PLUS            reduce using rule 17 (n_math_expression_10 -> .)
    MINUS           reduce using rule 17 (n_math_expression_10 -> .)
    NAME            reduce using rule 17 (n_math_expression_10 -> .)
    FLOAT           reduce using rule 17 (n_math_expression_10 -> .)
    INT             reduce using rule 17 (n_math_expression_10 -> .)
    STRING          reduce using rule 17 (n_math_expression_10 -> .)

    n_math_expression_10           shift and go to state 102

state 78

    (52) expression_rel -> exp relational_operator . exp n_math_expression_9
    (53) exp -> . termino n_math_expression_4
    (54) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (55) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (56) termino -> . factor n_math_expression_5
    (57) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (58) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (59) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (60) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (61) factor -> . PLUS value
    (62) factor -> . MINUS value
    (63) factor -> . value
    (64) value -> . function_call
    (65) value -> . literal
    (66) value -> . NAME n_math_expression_1_name
    (41) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (35) literal -> . FLOAT n_math_expression_1_float
    (36) literal -> . INT n_math_expression_1_int
    (37) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    exp                            shift and go to state 103
    termino                        shift and go to state 55
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 79

    (29) relational_operator -> GREATERTHAN . n_math_expression_8
    (15) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 15 (n_math_expression_8 -> .)
    PLUS            reduce using rule 15 (n_math_expression_8 -> .)
    MINUS           reduce using rule 15 (n_math_expression_8 -> .)
    NAME            reduce using rule 15 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 15 (n_math_expression_8 -> .)
    INT             reduce using rule 15 (n_math_expression_8 -> .)
    STRING          reduce using rule 15 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 104

state 80

    (30) relational_operator -> LESSTHAN . n_math_expression_8
    (15) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 15 (n_math_expression_8 -> .)
    PLUS            reduce using rule 15 (n_math_expression_8 -> .)
    MINUS           reduce using rule 15 (n_math_expression_8 -> .)
    NAME            reduce using rule 15 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 15 (n_math_expression_8 -> .)
    INT             reduce using rule 15 (n_math_expression_8 -> .)
    STRING          reduce using rule 15 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 105

state 81

    (31) relational_operator -> EQUALEQUAL . n_math_expression_8
    (15) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 15 (n_math_expression_8 -> .)
    PLUS            reduce using rule 15 (n_math_expression_8 -> .)
    MINUS           reduce using rule 15 (n_math_expression_8 -> .)
    NAME            reduce using rule 15 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 15 (n_math_expression_8 -> .)
    INT             reduce using rule 15 (n_math_expression_8 -> .)
    STRING          reduce using rule 15 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 106

state 82

    (32) relational_operator -> LESSTHANOREQUAL . n_math_expression_8
    (15) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 15 (n_math_expression_8 -> .)
    PLUS            reduce using rule 15 (n_math_expression_8 -> .)
    MINUS           reduce using rule 15 (n_math_expression_8 -> .)
    NAME            reduce using rule 15 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 15 (n_math_expression_8 -> .)
    INT             reduce using rule 15 (n_math_expression_8 -> .)
    STRING          reduce using rule 15 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 107

state 83

    (33) relational_operator -> GREATERTHANOREQUAL . n_math_expression_8
    (15) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 15 (n_math_expression_8 -> .)
    PLUS            reduce using rule 15 (n_math_expression_8 -> .)
    MINUS           reduce using rule 15 (n_math_expression_8 -> .)
    NAME            reduce using rule 15 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 15 (n_math_expression_8 -> .)
    INT             reduce using rule 15 (n_math_expression_8 -> .)
    STRING          reduce using rule 15 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 108

state 84

    (34) relational_operator -> NOTEQUAL . n_math_expression_8
    (15) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 15 (n_math_expression_8 -> .)
    PLUS            reduce using rule 15 (n_math_expression_8 -> .)
    MINUS           reduce using rule 15 (n_math_expression_8 -> .)
    NAME            reduce using rule 15 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 15 (n_math_expression_8 -> .)
    INT             reduce using rule 15 (n_math_expression_8 -> .)
    STRING          reduce using rule 15 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 109

state 85

    (53) exp -> termino n_math_expression_4 .
    (54) exp -> termino n_math_expression_4 . PLUS n_math_expression_2 exp
    (55) exp -> termino n_math_expression_4 . MINUS n_math_expression_2 exp

    GREATERTHAN     reduce using rule 53 (exp -> termino n_math_expression_4 .)
    LESSTHAN        reduce using rule 53 (exp -> termino n_math_expression_4 .)
    EQUALEQUAL      reduce using rule 53 (exp -> termino n_math_expression_4 .)
    LESSTHANOREQUAL reduce using rule 53 (exp -> termino n_math_expression_4 .)
    GREATERTHANOREQUAL reduce using rule 53 (exp -> termino n_math_expression_4 .)
    NOTEQUAL        reduce using rule 53 (exp -> termino n_math_expression_4 .)
    OR              reduce using rule 53 (exp -> termino n_math_expression_4 .)
    AND             reduce using rule 53 (exp -> termino n_math_expression_4 .)
    RPARENTHESIS    reduce using rule 53 (exp -> termino n_math_expression_4 .)
    SEMICOLON       reduce using rule 53 (exp -> termino n_math_expression_4 .)
    COMMA           reduce using rule 53 (exp -> termino n_math_expression_4 .)
    DOUBLEDOT       reduce using rule 53 (exp -> termino n_math_expression_4 .)
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111


state 86

    (61) factor -> PLUS value .

    TIMES           reduce using rule 61 (factor -> PLUS value .)
    DIVIDE          reduce using rule 61 (factor -> PLUS value .)
    MODULUS         reduce using rule 61 (factor -> PLUS value .)
    PLUS            reduce using rule 61 (factor -> PLUS value .)
    MINUS           reduce using rule 61 (factor -> PLUS value .)
    GREATERTHAN     reduce using rule 61 (factor -> PLUS value .)
    LESSTHAN        reduce using rule 61 (factor -> PLUS value .)
    EQUALEQUAL      reduce using rule 61 (factor -> PLUS value .)
    LESSTHANOREQUAL reduce using rule 61 (factor -> PLUS value .)
    GREATERTHANOREQUAL reduce using rule 61 (factor -> PLUS value .)
    NOTEQUAL        reduce using rule 61 (factor -> PLUS value .)
    OR              reduce using rule 61 (factor -> PLUS value .)
    AND             reduce using rule 61 (factor -> PLUS value .)
    RPARENTHESIS    reduce using rule 61 (factor -> PLUS value .)
    SEMICOLON       reduce using rule 61 (factor -> PLUS value .)
    COMMA           reduce using rule 61 (factor -> PLUS value .)
    DOUBLEDOT       reduce using rule 61 (factor -> PLUS value .)


state 87

    (62) factor -> MINUS value .

    TIMES           reduce using rule 62 (factor -> MINUS value .)
    DIVIDE          reduce using rule 62 (factor -> MINUS value .)
    MODULUS         reduce using rule 62 (factor -> MINUS value .)
    PLUS            reduce using rule 62 (factor -> MINUS value .)
    MINUS           reduce using rule 62 (factor -> MINUS value .)
    GREATERTHAN     reduce using rule 62 (factor -> MINUS value .)
    LESSTHAN        reduce using rule 62 (factor -> MINUS value .)
    EQUALEQUAL      reduce using rule 62 (factor -> MINUS value .)
    LESSTHANOREQUAL reduce using rule 62 (factor -> MINUS value .)
    GREATERTHANOREQUAL reduce using rule 62 (factor -> MINUS value .)
    NOTEQUAL        reduce using rule 62 (factor -> MINUS value .)
    OR              reduce using rule 62 (factor -> MINUS value .)
    AND             reduce using rule 62 (factor -> MINUS value .)
    RPARENTHESIS    reduce using rule 62 (factor -> MINUS value .)
    SEMICOLON       reduce using rule 62 (factor -> MINUS value .)
    COMMA           reduce using rule 62 (factor -> MINUS value .)
    DOUBLEDOT       reduce using rule 62 (factor -> MINUS value .)


state 88

    (56) termino -> factor n_math_expression_5 .
    (57) termino -> factor n_math_expression_5 . TIMES n_math_expression_3 termino
    (58) termino -> factor n_math_expression_5 . DIVIDE n_math_expression_3 termino
    (59) termino -> factor n_math_expression_5 . MODULUS n_math_expression_3 termino

    PLUS            reduce using rule 56 (termino -> factor n_math_expression_5 .)
    MINUS           reduce using rule 56 (termino -> factor n_math_expression_5 .)
    GREATERTHAN     reduce using rule 56 (termino -> factor n_math_expression_5 .)
    LESSTHAN        reduce using rule 56 (termino -> factor n_math_expression_5 .)
    EQUALEQUAL      reduce using rule 56 (termino -> factor n_math_expression_5 .)
    LESSTHANOREQUAL reduce using rule 56 (termino -> factor n_math_expression_5 .)
    GREATERTHANOREQUAL reduce using rule 56 (termino -> factor n_math_expression_5 .)
    NOTEQUAL        reduce using rule 56 (termino -> factor n_math_expression_5 .)
    OR              reduce using rule 56 (termino -> factor n_math_expression_5 .)
    AND             reduce using rule 56 (termino -> factor n_math_expression_5 .)
    RPARENTHESIS    reduce using rule 56 (termino -> factor n_math_expression_5 .)
    SEMICOLON       reduce using rule 56 (termino -> factor n_math_expression_5 .)
    COMMA           reduce using rule 56 (termino -> factor n_math_expression_5 .)
    DOUBLEDOT       reduce using rule 56 (termino -> factor n_math_expression_5 .)
    TIMES           shift and go to state 112
    DIVIDE          shift and go to state 113
    MODULUS         shift and go to state 114


state 89

    (66) value -> NAME n_math_expression_1_name .

    TIMES           reduce using rule 66 (value -> NAME n_math_expression_1_name .)
    DIVIDE          reduce using rule 66 (value -> NAME n_math_expression_1_name .)
    MODULUS         reduce using rule 66 (value -> NAME n_math_expression_1_name .)
    PLUS            reduce using rule 66 (value -> NAME n_math_expression_1_name .)
    MINUS           reduce using rule 66 (value -> NAME n_math_expression_1_name .)
    GREATERTHAN     reduce using rule 66 (value -> NAME n_math_expression_1_name .)
    LESSTHAN        reduce using rule 66 (value -> NAME n_math_expression_1_name .)
    EQUALEQUAL      reduce using rule 66 (value -> NAME n_math_expression_1_name .)
    LESSTHANOREQUAL reduce using rule 66 (value -> NAME n_math_expression_1_name .)
    GREATERTHANOREQUAL reduce using rule 66 (value -> NAME n_math_expression_1_name .)
    NOTEQUAL        reduce using rule 66 (value -> NAME n_math_expression_1_name .)
    OR              reduce using rule 66 (value -> NAME n_math_expression_1_name .)
    AND             reduce using rule 66 (value -> NAME n_math_expression_1_name .)
    RPARENTHESIS    reduce using rule 66 (value -> NAME n_math_expression_1_name .)
    SEMICOLON       reduce using rule 66 (value -> NAME n_math_expression_1_name .)
    COMMA           reduce using rule 66 (value -> NAME n_math_expression_1_name .)
    DOUBLEDOT       reduce using rule 66 (value -> NAME n_math_expression_1_name .)


state 90

    (35) literal -> FLOAT n_math_expression_1_float .

    TIMES           reduce using rule 35 (literal -> FLOAT n_math_expression_1_float .)
    DIVIDE          reduce using rule 35 (literal -> FLOAT n_math_expression_1_float .)
    MODULUS         reduce using rule 35 (literal -> FLOAT n_math_expression_1_float .)
    PLUS            reduce using rule 35 (literal -> FLOAT n_math_expression_1_float .)
    MINUS           reduce using rule 35 (literal -> FLOAT n_math_expression_1_float .)
    GREATERTHAN     reduce using rule 35 (literal -> FLOAT n_math_expression_1_float .)
    LESSTHAN        reduce using rule 35 (literal -> FLOAT n_math_expression_1_float .)
    EQUALEQUAL      reduce using rule 35 (literal -> FLOAT n_math_expression_1_float .)
    LESSTHANOREQUAL reduce using rule 35 (literal -> FLOAT n_math_expression_1_float .)
    GREATERTHANOREQUAL reduce using rule 35 (literal -> FLOAT n_math_expression_1_float .)
    NOTEQUAL        reduce using rule 35 (literal -> FLOAT n_math_expression_1_float .)
    OR              reduce using rule 35 (literal -> FLOAT n_math_expression_1_float .)
    AND             reduce using rule 35 (literal -> FLOAT n_math_expression_1_float .)
    RPARENTHESIS    reduce using rule 35 (literal -> FLOAT n_math_expression_1_float .)
    SEMICOLON       reduce using rule 35 (literal -> FLOAT n_math_expression_1_float .)
    COMMA           reduce using rule 35 (literal -> FLOAT n_math_expression_1_float .)
    DOUBLEDOT       reduce using rule 35 (literal -> FLOAT n_math_expression_1_float .)


state 91

    (36) literal -> INT n_math_expression_1_int .

    TIMES           reduce using rule 36 (literal -> INT n_math_expression_1_int .)
    DIVIDE          reduce using rule 36 (literal -> INT n_math_expression_1_int .)
    MODULUS         reduce using rule 36 (literal -> INT n_math_expression_1_int .)
    PLUS            reduce using rule 36 (literal -> INT n_math_expression_1_int .)
    MINUS           reduce using rule 36 (literal -> INT n_math_expression_1_int .)
    GREATERTHAN     reduce using rule 36 (literal -> INT n_math_expression_1_int .)
    LESSTHAN        reduce using rule 36 (literal -> INT n_math_expression_1_int .)
    EQUALEQUAL      reduce using rule 36 (literal -> INT n_math_expression_1_int .)
    LESSTHANOREQUAL reduce using rule 36 (literal -> INT n_math_expression_1_int .)
    GREATERTHANOREQUAL reduce using rule 36 (literal -> INT n_math_expression_1_int .)
    NOTEQUAL        reduce using rule 36 (literal -> INT n_math_expression_1_int .)
    OR              reduce using rule 36 (literal -> INT n_math_expression_1_int .)
    AND             reduce using rule 36 (literal -> INT n_math_expression_1_int .)
    RPARENTHESIS    reduce using rule 36 (literal -> INT n_math_expression_1_int .)
    SEMICOLON       reduce using rule 36 (literal -> INT n_math_expression_1_int .)
    COMMA           reduce using rule 36 (literal -> INT n_math_expression_1_int .)
    DOUBLEDOT       reduce using rule 36 (literal -> INT n_math_expression_1_int .)


state 92

    (37) literal -> STRING n_math_expression_1_string .

    TIMES           reduce using rule 37 (literal -> STRING n_math_expression_1_string .)
    DIVIDE          reduce using rule 37 (literal -> STRING n_math_expression_1_string .)
    MODULUS         reduce using rule 37 (literal -> STRING n_math_expression_1_string .)
    PLUS            reduce using rule 37 (literal -> STRING n_math_expression_1_string .)
    MINUS           reduce using rule 37 (literal -> STRING n_math_expression_1_string .)
    GREATERTHAN     reduce using rule 37 (literal -> STRING n_math_expression_1_string .)
    LESSTHAN        reduce using rule 37 (literal -> STRING n_math_expression_1_string .)
    EQUALEQUAL      reduce using rule 37 (literal -> STRING n_math_expression_1_string .)
    LESSTHANOREQUAL reduce using rule 37 (literal -> STRING n_math_expression_1_string .)
    GREATERTHANOREQUAL reduce using rule 37 (literal -> STRING n_math_expression_1_string .)
    NOTEQUAL        reduce using rule 37 (literal -> STRING n_math_expression_1_string .)
    OR              reduce using rule 37 (literal -> STRING n_math_expression_1_string .)
    AND             reduce using rule 37 (literal -> STRING n_math_expression_1_string .)
    RPARENTHESIS    reduce using rule 37 (literal -> STRING n_math_expression_1_string .)
    SEMICOLON       reduce using rule 37 (literal -> STRING n_math_expression_1_string .)
    COMMA           reduce using rule 37 (literal -> STRING n_math_expression_1_string .)
    DOUBLEDOT       reduce using rule 37 (literal -> STRING n_math_expression_1_string .)


state 93

    (81) forloop -> FOR LPARENTHESIS n_open_new_scope assign . DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope

    DOUBLEDOT       shift and go to state 115


state 94

    (80) whileloop -> WHILE LPARENTHESIS expression RPARENTHESIS . LCURLY n_open_new_scope codeblock RCURLY n_close_scope

    LCURLY          shift and go to state 116


state 95

    (67) assign -> type NAME n_name EQUAL . expression
    (47) expression -> . expression_or
    (48) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (49) expression_or -> . expression_rel
    (50) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (51) expression_rel -> . exp
    (52) expression_rel -> . exp relational_operator exp n_math_expression_9
    (53) exp -> . termino n_math_expression_4
    (54) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (55) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (56) termino -> . factor n_math_expression_5
    (57) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (58) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (59) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (60) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (61) factor -> . PLUS value
    (62) factor -> . MINUS value
    (63) factor -> . value
    (64) value -> . function_call
    (65) value -> . literal
    (66) value -> . NAME n_math_expression_1_name
    (41) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (35) literal -> . FLOAT n_math_expression_1_float
    (36) literal -> . INT n_math_expression_1_int
    (37) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    expression                     shift and go to state 117
    expression_or                  shift and go to state 52
    expression_rel                 shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 55
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 96

    (40) function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT . function_type LCURLY codeblock RCURLY n_close_scope
    (38) function_type -> . type
    (39) function_type -> . VOID
    (24) type -> . INT_TYPE n_seen_type
    (25) type -> . STRING_TYPE n_seen_type
    (26) type -> . DOUBLE_TYPE n_seen_type
    (27) type -> . FLOAT_TYPE n_seen_type
    (28) type -> . BOOL_TYPE n_seen_type

    VOID            shift and go to state 120
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    function_type                  shift and go to state 118
    type                           shift and go to state 119

state 97

    (44) parameter_list -> parameter COMMA parameter_list .

    RPARENTHESIS    reduce using rule 44 (parameter_list -> parameter COMMA parameter_list .)
    DOUBLEDOT       reduce using rule 44 (parameter_list -> parameter COMMA parameter_list .)


state 98

    (45) parameter -> type NAME n_name .
    (67) assign -> type NAME n_name . EQUAL expression

    COMMA           reduce using rule 45 (parameter -> type NAME n_name .)
    RPARENTHESIS    reduce using rule 45 (parameter -> type NAME n_name .)
    DOUBLEDOT       reduce using rule 45 (parameter -> type NAME n_name .)
    EQUAL           shift and go to state 95


state 99

    (60) factor -> LPARENTHESIS n_math_expression_6 expression . RPARENTHESIS n_math_expression_7

    RPARENTHESIS    shift and go to state 121


state 100

    (82) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY . n_open_new_scope codeblock RCURLY n_close_scope condition_else
    (2) n_open_new_scope -> .

    FUNCTION        reduce using rule 2 (n_open_new_scope -> .)
    IF              reduce using rule 2 (n_open_new_scope -> .)
    FOR             reduce using rule 2 (n_open_new_scope -> .)
    WHILE           reduce using rule 2 (n_open_new_scope -> .)
    NAME            reduce using rule 2 (n_open_new_scope -> .)
    INT_TYPE        reduce using rule 2 (n_open_new_scope -> .)
    STRING_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    DOUBLE_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    FLOAT_TYPE      reduce using rule 2 (n_open_new_scope -> .)
    BOOL_TYPE       reduce using rule 2 (n_open_new_scope -> .)
    RCURLY          reduce using rule 2 (n_open_new_scope -> .)

    n_open_new_scope               shift and go to state 122

state 101

    (48) expression -> expression_or AND n_math_expression_10 . expression n_math_expression_11
    (47) expression -> . expression_or
    (48) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (49) expression_or -> . expression_rel
    (50) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (51) expression_rel -> . exp
    (52) expression_rel -> . exp relational_operator exp n_math_expression_9
    (53) exp -> . termino n_math_expression_4
    (54) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (55) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (56) termino -> . factor n_math_expression_5
    (57) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (58) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (59) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (60) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (61) factor -> . PLUS value
    (62) factor -> . MINUS value
    (63) factor -> . value
    (64) value -> . function_call
    (65) value -> . literal
    (66) value -> . NAME n_math_expression_1_name
    (41) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (35) literal -> . FLOAT n_math_expression_1_float
    (36) literal -> . INT n_math_expression_1_int
    (37) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    expression_or                  shift and go to state 52
    expression                     shift and go to state 123
    expression_rel                 shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 55
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 102

    (50) expression_or -> expression_rel OR n_math_expression_10 . expression_or n_math_expression_12
    (49) expression_or -> . expression_rel
    (50) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (51) expression_rel -> . exp
    (52) expression_rel -> . exp relational_operator exp n_math_expression_9
    (53) exp -> . termino n_math_expression_4
    (54) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (55) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (56) termino -> . factor n_math_expression_5
    (57) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (58) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (59) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (60) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (61) factor -> . PLUS value
    (62) factor -> . MINUS value
    (63) factor -> . value
    (64) value -> . function_call
    (65) value -> . literal
    (66) value -> . NAME n_math_expression_1_name
    (41) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (35) literal -> . FLOAT n_math_expression_1_float
    (36) literal -> . INT n_math_expression_1_int
    (37) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    expression_rel                 shift and go to state 53
    expression_or                  shift and go to state 124
    exp                            shift and go to state 54
    termino                        shift and go to state 55
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 103

    (52) expression_rel -> exp relational_operator exp . n_math_expression_9
    (16) n_math_expression_9 -> .

    OR              reduce using rule 16 (n_math_expression_9 -> .)
    AND             reduce using rule 16 (n_math_expression_9 -> .)
    RPARENTHESIS    reduce using rule 16 (n_math_expression_9 -> .)
    SEMICOLON       reduce using rule 16 (n_math_expression_9 -> .)
    COMMA           reduce using rule 16 (n_math_expression_9 -> .)
    DOUBLEDOT       reduce using rule 16 (n_math_expression_9 -> .)

    n_math_expression_9            shift and go to state 125

state 104

    (29) relational_operator -> GREATERTHAN n_math_expression_8 .

    LPARENTHESIS    reduce using rule 29 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    PLUS            reduce using rule 29 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    MINUS           reduce using rule 29 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    NAME            reduce using rule 29 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    FLOAT           reduce using rule 29 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    INT             reduce using rule 29 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    STRING          reduce using rule 29 (relational_operator -> GREATERTHAN n_math_expression_8 .)


state 105

    (30) relational_operator -> LESSTHAN n_math_expression_8 .

    LPARENTHESIS    reduce using rule 30 (relational_operator -> LESSTHAN n_math_expression_8 .)
    PLUS            reduce using rule 30 (relational_operator -> LESSTHAN n_math_expression_8 .)
    MINUS           reduce using rule 30 (relational_operator -> LESSTHAN n_math_expression_8 .)
    NAME            reduce using rule 30 (relational_operator -> LESSTHAN n_math_expression_8 .)
    FLOAT           reduce using rule 30 (relational_operator -> LESSTHAN n_math_expression_8 .)
    INT             reduce using rule 30 (relational_operator -> LESSTHAN n_math_expression_8 .)
    STRING          reduce using rule 30 (relational_operator -> LESSTHAN n_math_expression_8 .)


state 106

    (31) relational_operator -> EQUALEQUAL n_math_expression_8 .

    LPARENTHESIS    reduce using rule 31 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    PLUS            reduce using rule 31 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    MINUS           reduce using rule 31 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    NAME            reduce using rule 31 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    FLOAT           reduce using rule 31 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    INT             reduce using rule 31 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    STRING          reduce using rule 31 (relational_operator -> EQUALEQUAL n_math_expression_8 .)


state 107

    (32) relational_operator -> LESSTHANOREQUAL n_math_expression_8 .

    LPARENTHESIS    reduce using rule 32 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    PLUS            reduce using rule 32 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    MINUS           reduce using rule 32 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    NAME            reduce using rule 32 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    FLOAT           reduce using rule 32 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    INT             reduce using rule 32 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    STRING          reduce using rule 32 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)


state 108

    (33) relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .

    LPARENTHESIS    reduce using rule 33 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    PLUS            reduce using rule 33 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    MINUS           reduce using rule 33 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    NAME            reduce using rule 33 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    FLOAT           reduce using rule 33 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    INT             reduce using rule 33 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    STRING          reduce using rule 33 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)


state 109

    (34) relational_operator -> NOTEQUAL n_math_expression_8 .

    LPARENTHESIS    reduce using rule 34 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    PLUS            reduce using rule 34 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    MINUS           reduce using rule 34 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    NAME            reduce using rule 34 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    FLOAT           reduce using rule 34 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    INT             reduce using rule 34 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    STRING          reduce using rule 34 (relational_operator -> NOTEQUAL n_math_expression_8 .)


state 110

    (54) exp -> termino n_math_expression_4 PLUS . n_math_expression_2 exp
    (9) n_math_expression_2 -> .

    LPARENTHESIS    reduce using rule 9 (n_math_expression_2 -> .)
    PLUS            reduce using rule 9 (n_math_expression_2 -> .)
    MINUS           reduce using rule 9 (n_math_expression_2 -> .)
    NAME            reduce using rule 9 (n_math_expression_2 -> .)
    FLOAT           reduce using rule 9 (n_math_expression_2 -> .)
    INT             reduce using rule 9 (n_math_expression_2 -> .)
    STRING          reduce using rule 9 (n_math_expression_2 -> .)

    n_math_expression_2            shift and go to state 126

state 111

    (55) exp -> termino n_math_expression_4 MINUS . n_math_expression_2 exp
    (9) n_math_expression_2 -> .

    LPARENTHESIS    reduce using rule 9 (n_math_expression_2 -> .)
    PLUS            reduce using rule 9 (n_math_expression_2 -> .)
    MINUS           reduce using rule 9 (n_math_expression_2 -> .)
    NAME            reduce using rule 9 (n_math_expression_2 -> .)
    FLOAT           reduce using rule 9 (n_math_expression_2 -> .)
    INT             reduce using rule 9 (n_math_expression_2 -> .)
    STRING          reduce using rule 9 (n_math_expression_2 -> .)

    n_math_expression_2            shift and go to state 127

state 112

    (57) termino -> factor n_math_expression_5 TIMES . n_math_expression_3 termino
    (10) n_math_expression_3 -> .

    LPARENTHESIS    reduce using rule 10 (n_math_expression_3 -> .)
    PLUS            reduce using rule 10 (n_math_expression_3 -> .)
    MINUS           reduce using rule 10 (n_math_expression_3 -> .)
    NAME            reduce using rule 10 (n_math_expression_3 -> .)
    FLOAT           reduce using rule 10 (n_math_expression_3 -> .)
    INT             reduce using rule 10 (n_math_expression_3 -> .)
    STRING          reduce using rule 10 (n_math_expression_3 -> .)

    n_math_expression_3            shift and go to state 128

state 113

    (58) termino -> factor n_math_expression_5 DIVIDE . n_math_expression_3 termino
    (10) n_math_expression_3 -> .

    LPARENTHESIS    reduce using rule 10 (n_math_expression_3 -> .)
    PLUS            reduce using rule 10 (n_math_expression_3 -> .)
    MINUS           reduce using rule 10 (n_math_expression_3 -> .)
    NAME            reduce using rule 10 (n_math_expression_3 -> .)
    FLOAT           reduce using rule 10 (n_math_expression_3 -> .)
    INT             reduce using rule 10 (n_math_expression_3 -> .)
    STRING          reduce using rule 10 (n_math_expression_3 -> .)

    n_math_expression_3            shift and go to state 129

state 114

    (59) termino -> factor n_math_expression_5 MODULUS . n_math_expression_3 termino
    (10) n_math_expression_3 -> .

    LPARENTHESIS    reduce using rule 10 (n_math_expression_3 -> .)
    PLUS            reduce using rule 10 (n_math_expression_3 -> .)
    MINUS           reduce using rule 10 (n_math_expression_3 -> .)
    NAME            reduce using rule 10 (n_math_expression_3 -> .)
    FLOAT           reduce using rule 10 (n_math_expression_3 -> .)
    INT             reduce using rule 10 (n_math_expression_3 -> .)
    STRING          reduce using rule 10 (n_math_expression_3 -> .)

    n_math_expression_3            shift and go to state 130

state 115

    (81) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT . expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (47) expression -> . expression_or
    (48) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (49) expression_or -> . expression_rel
    (50) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (51) expression_rel -> . exp
    (52) expression_rel -> . exp relational_operator exp n_math_expression_9
    (53) exp -> . termino n_math_expression_4
    (54) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (55) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (56) termino -> . factor n_math_expression_5
    (57) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (58) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (59) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (60) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (61) factor -> . PLUS value
    (62) factor -> . MINUS value
    (63) factor -> . value
    (64) value -> . function_call
    (65) value -> . literal
    (66) value -> . NAME n_math_expression_1_name
    (41) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (35) literal -> . FLOAT n_math_expression_1_float
    (36) literal -> . INT n_math_expression_1_int
    (37) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    expression                     shift and go to state 131
    expression_or                  shift and go to state 52
    expression_rel                 shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 55
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 116

    (80) whileloop -> WHILE LPARENTHESIS expression RPARENTHESIS LCURLY . n_open_new_scope codeblock RCURLY n_close_scope
    (2) n_open_new_scope -> .

    FUNCTION        reduce using rule 2 (n_open_new_scope -> .)
    IF              reduce using rule 2 (n_open_new_scope -> .)
    FOR             reduce using rule 2 (n_open_new_scope -> .)
    WHILE           reduce using rule 2 (n_open_new_scope -> .)
    NAME            reduce using rule 2 (n_open_new_scope -> .)
    INT_TYPE        reduce using rule 2 (n_open_new_scope -> .)
    STRING_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    DOUBLE_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    FLOAT_TYPE      reduce using rule 2 (n_open_new_scope -> .)
    BOOL_TYPE       reduce using rule 2 (n_open_new_scope -> .)
    RCURLY          reduce using rule 2 (n_open_new_scope -> .)

    n_open_new_scope               shift and go to state 132

state 117

    (67) assign -> type NAME n_name EQUAL expression .

    SEMICOLON       reduce using rule 67 (assign -> type NAME n_name EQUAL expression .)
    COMMA           reduce using rule 67 (assign -> type NAME n_name EQUAL expression .)
    RPARENTHESIS    reduce using rule 67 (assign -> type NAME n_name EQUAL expression .)
    DOUBLEDOT       reduce using rule 67 (assign -> type NAME n_name EQUAL expression .)


state 118

    (40) function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type . LCURLY codeblock RCURLY n_close_scope

    LCURLY          shift and go to state 133


state 119

    (38) function_type -> type .

    LCURLY          reduce using rule 38 (function_type -> type .)


state 120

    (39) function_type -> VOID .

    LCURLY          reduce using rule 39 (function_type -> VOID .)


state 121

    (60) factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS . n_math_expression_7
    (14) n_math_expression_7 -> .

    TIMES           reduce using rule 14 (n_math_expression_7 -> .)
    DIVIDE          reduce using rule 14 (n_math_expression_7 -> .)
    MODULUS         reduce using rule 14 (n_math_expression_7 -> .)
    PLUS            reduce using rule 14 (n_math_expression_7 -> .)
    MINUS           reduce using rule 14 (n_math_expression_7 -> .)
    GREATERTHAN     reduce using rule 14 (n_math_expression_7 -> .)
    LESSTHAN        reduce using rule 14 (n_math_expression_7 -> .)
    EQUALEQUAL      reduce using rule 14 (n_math_expression_7 -> .)
    LESSTHANOREQUAL reduce using rule 14 (n_math_expression_7 -> .)
    GREATERTHANOREQUAL reduce using rule 14 (n_math_expression_7 -> .)
    NOTEQUAL        reduce using rule 14 (n_math_expression_7 -> .)
    OR              reduce using rule 14 (n_math_expression_7 -> .)
    AND             reduce using rule 14 (n_math_expression_7 -> .)
    RPARENTHESIS    reduce using rule 14 (n_math_expression_7 -> .)
    SEMICOLON       reduce using rule 14 (n_math_expression_7 -> .)
    COMMA           reduce using rule 14 (n_math_expression_7 -> .)
    DOUBLEDOT       reduce using rule 14 (n_math_expression_7 -> .)

    n_math_expression_7            shift and go to state 134

state 122

    (82) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope . codeblock RCURLY n_close_scope condition_else
    (72) codeblock -> . empty
    (73) codeblock -> . codeblock_aux codeblock
    (20) empty -> .
    (74) codeblock_aux -> . statement
    (75) codeblock_aux -> . function_definition
    (76) codeblock_aux -> . condition_if
    (77) codeblock_aux -> . loop
    (69) statement -> . statement_aux SEMICOLON
    (40) function_definition -> . FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope
    (82) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else
    (78) loop -> . forloop
    (79) loop -> . whileloop
    (70) statement_aux -> . assign
    (71) statement_aux -> . function_call
    (81) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (80) whileloop -> . WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope
    (67) assign -> . type NAME n_name EQUAL expression
    (68) assign -> . NAME n_name EQUAL expression
    (41) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (24) type -> . INT_TYPE n_seen_type
    (25) type -> . STRING_TYPE n_seen_type
    (26) type -> . DOUBLE_TYPE n_seen_type
    (27) type -> . FLOAT_TYPE n_seen_type
    (28) type -> . BOOL_TYPE n_seen_type

    RCURLY          reduce using rule 20 (empty -> .)
    FUNCTION        shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    codeblock                      shift and go to state 135
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 123

    (48) expression -> expression_or AND n_math_expression_10 expression . n_math_expression_11
    (18) n_math_expression_11 -> .

    RPARENTHESIS    reduce using rule 18 (n_math_expression_11 -> .)
    SEMICOLON       reduce using rule 18 (n_math_expression_11 -> .)
    COMMA           reduce using rule 18 (n_math_expression_11 -> .)
    DOUBLEDOT       reduce using rule 18 (n_math_expression_11 -> .)

    n_math_expression_11           shift and go to state 136

state 124

    (50) expression_or -> expression_rel OR n_math_expression_10 expression_or . n_math_expression_12
    (19) n_math_expression_12 -> .

    AND             reduce using rule 19 (n_math_expression_12 -> .)
    RPARENTHESIS    reduce using rule 19 (n_math_expression_12 -> .)
    SEMICOLON       reduce using rule 19 (n_math_expression_12 -> .)
    COMMA           reduce using rule 19 (n_math_expression_12 -> .)
    DOUBLEDOT       reduce using rule 19 (n_math_expression_12 -> .)

    n_math_expression_12           shift and go to state 137

state 125

    (52) expression_rel -> exp relational_operator exp n_math_expression_9 .

    OR              reduce using rule 52 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    AND             reduce using rule 52 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    RPARENTHESIS    reduce using rule 52 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    SEMICOLON       reduce using rule 52 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    COMMA           reduce using rule 52 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    DOUBLEDOT       reduce using rule 52 (expression_rel -> exp relational_operator exp n_math_expression_9 .)


state 126

    (54) exp -> termino n_math_expression_4 PLUS n_math_expression_2 . exp
    (53) exp -> . termino n_math_expression_4
    (54) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (55) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (56) termino -> . factor n_math_expression_5
    (57) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (58) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (59) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (60) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (61) factor -> . PLUS value
    (62) factor -> . MINUS value
    (63) factor -> . value
    (64) value -> . function_call
    (65) value -> . literal
    (66) value -> . NAME n_math_expression_1_name
    (41) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (35) literal -> . FLOAT n_math_expression_1_float
    (36) literal -> . INT n_math_expression_1_int
    (37) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    termino                        shift and go to state 55
    exp                            shift and go to state 138
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 127

    (55) exp -> termino n_math_expression_4 MINUS n_math_expression_2 . exp
    (53) exp -> . termino n_math_expression_4
    (54) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (55) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (56) termino -> . factor n_math_expression_5
    (57) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (58) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (59) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (60) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (61) factor -> . PLUS value
    (62) factor -> . MINUS value
    (63) factor -> . value
    (64) value -> . function_call
    (65) value -> . literal
    (66) value -> . NAME n_math_expression_1_name
    (41) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (35) literal -> . FLOAT n_math_expression_1_float
    (36) literal -> . INT n_math_expression_1_int
    (37) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    termino                        shift and go to state 55
    exp                            shift and go to state 139
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 128

    (57) termino -> factor n_math_expression_5 TIMES n_math_expression_3 . termino
    (56) termino -> . factor n_math_expression_5
    (57) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (58) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (59) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (60) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (61) factor -> . PLUS value
    (62) factor -> . MINUS value
    (63) factor -> . value
    (64) value -> . function_call
    (65) value -> . literal
    (66) value -> . NAME n_math_expression_1_name
    (41) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (35) literal -> . FLOAT n_math_expression_1_float
    (36) literal -> . INT n_math_expression_1_int
    (37) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    factor                         shift and go to state 58
    termino                        shift and go to state 140
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 129

    (58) termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 . termino
    (56) termino -> . factor n_math_expression_5
    (57) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (58) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (59) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (60) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (61) factor -> . PLUS value
    (62) factor -> . MINUS value
    (63) factor -> . value
    (64) value -> . function_call
    (65) value -> . literal
    (66) value -> . NAME n_math_expression_1_name
    (41) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (35) literal -> . FLOAT n_math_expression_1_float
    (36) literal -> . INT n_math_expression_1_int
    (37) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    factor                         shift and go to state 58
    termino                        shift and go to state 141
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 130

    (59) termino -> factor n_math_expression_5 MODULUS n_math_expression_3 . termino
    (56) termino -> . factor n_math_expression_5
    (57) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (58) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (59) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (60) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (61) factor -> . PLUS value
    (62) factor -> . MINUS value
    (63) factor -> . value
    (64) value -> . function_call
    (65) value -> . literal
    (66) value -> . NAME n_math_expression_1_name
    (41) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (35) literal -> . FLOAT n_math_expression_1_float
    (36) literal -> . INT n_math_expression_1_int
    (37) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    factor                         shift and go to state 58
    termino                        shift and go to state 142
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 131

    (81) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression . DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope

    DOUBLEDOT       shift and go to state 143


state 132

    (80) whileloop -> WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope . codeblock RCURLY n_close_scope
    (72) codeblock -> . empty
    (73) codeblock -> . codeblock_aux codeblock
    (20) empty -> .
    (74) codeblock_aux -> . statement
    (75) codeblock_aux -> . function_definition
    (76) codeblock_aux -> . condition_if
    (77) codeblock_aux -> . loop
    (69) statement -> . statement_aux SEMICOLON
    (40) function_definition -> . FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope
    (82) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else
    (78) loop -> . forloop
    (79) loop -> . whileloop
    (70) statement_aux -> . assign
    (71) statement_aux -> . function_call
    (81) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (80) whileloop -> . WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope
    (67) assign -> . type NAME n_name EQUAL expression
    (68) assign -> . NAME n_name EQUAL expression
    (41) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (24) type -> . INT_TYPE n_seen_type
    (25) type -> . STRING_TYPE n_seen_type
    (26) type -> . DOUBLE_TYPE n_seen_type
    (27) type -> . FLOAT_TYPE n_seen_type
    (28) type -> . BOOL_TYPE n_seen_type

    RCURLY          reduce using rule 20 (empty -> .)
    FUNCTION        shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    codeblock                      shift and go to state 144
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 133

    (40) function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY . codeblock RCURLY n_close_scope
    (72) codeblock -> . empty
    (73) codeblock -> . codeblock_aux codeblock
    (20) empty -> .
    (74) codeblock_aux -> . statement
    (75) codeblock_aux -> . function_definition
    (76) codeblock_aux -> . condition_if
    (77) codeblock_aux -> . loop
    (69) statement -> . statement_aux SEMICOLON
    (40) function_definition -> . FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope
    (82) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else
    (78) loop -> . forloop
    (79) loop -> . whileloop
    (70) statement_aux -> . assign
    (71) statement_aux -> . function_call
    (81) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (80) whileloop -> . WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope
    (67) assign -> . type NAME n_name EQUAL expression
    (68) assign -> . NAME n_name EQUAL expression
    (41) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (24) type -> . INT_TYPE n_seen_type
    (25) type -> . STRING_TYPE n_seen_type
    (26) type -> . DOUBLE_TYPE n_seen_type
    (27) type -> . FLOAT_TYPE n_seen_type
    (28) type -> . BOOL_TYPE n_seen_type

    RCURLY          reduce using rule 20 (empty -> .)
    FUNCTION        shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    codeblock                      shift and go to state 145
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 134

    (60) factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .

    TIMES           reduce using rule 60 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    DIVIDE          reduce using rule 60 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    MODULUS         reduce using rule 60 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    PLUS            reduce using rule 60 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    MINUS           reduce using rule 60 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    GREATERTHAN     reduce using rule 60 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    LESSTHAN        reduce using rule 60 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    EQUALEQUAL      reduce using rule 60 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    LESSTHANOREQUAL reduce using rule 60 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    GREATERTHANOREQUAL reduce using rule 60 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    NOTEQUAL        reduce using rule 60 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    OR              reduce using rule 60 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    AND             reduce using rule 60 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    RPARENTHESIS    reduce using rule 60 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    SEMICOLON       reduce using rule 60 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    COMMA           reduce using rule 60 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    DOUBLEDOT       reduce using rule 60 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)


state 135

    (82) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock . RCURLY n_close_scope condition_else

    RCURLY          shift and go to state 146


state 136

    (48) expression -> expression_or AND n_math_expression_10 expression n_math_expression_11 .

    RPARENTHESIS    reduce using rule 48 (expression -> expression_or AND n_math_expression_10 expression n_math_expression_11 .)
    SEMICOLON       reduce using rule 48 (expression -> expression_or AND n_math_expression_10 expression n_math_expression_11 .)
    COMMA           reduce using rule 48 (expression -> expression_or AND n_math_expression_10 expression n_math_expression_11 .)
    DOUBLEDOT       reduce using rule 48 (expression -> expression_or AND n_math_expression_10 expression n_math_expression_11 .)


state 137

    (50) expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .

    AND             reduce using rule 50 (expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .)
    RPARENTHESIS    reduce using rule 50 (expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .)
    SEMICOLON       reduce using rule 50 (expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .)
    COMMA           reduce using rule 50 (expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .)
    DOUBLEDOT       reduce using rule 50 (expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .)


state 138

    (54) exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .

    GREATERTHAN     reduce using rule 54 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    LESSTHAN        reduce using rule 54 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    EQUALEQUAL      reduce using rule 54 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    LESSTHANOREQUAL reduce using rule 54 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    GREATERTHANOREQUAL reduce using rule 54 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    NOTEQUAL        reduce using rule 54 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    OR              reduce using rule 54 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    AND             reduce using rule 54 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    RPARENTHESIS    reduce using rule 54 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    SEMICOLON       reduce using rule 54 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    COMMA           reduce using rule 54 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    DOUBLEDOT       reduce using rule 54 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)


state 139

    (55) exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .

    GREATERTHAN     reduce using rule 55 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    LESSTHAN        reduce using rule 55 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    EQUALEQUAL      reduce using rule 55 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    LESSTHANOREQUAL reduce using rule 55 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    GREATERTHANOREQUAL reduce using rule 55 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    NOTEQUAL        reduce using rule 55 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    OR              reduce using rule 55 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    AND             reduce using rule 55 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    RPARENTHESIS    reduce using rule 55 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    SEMICOLON       reduce using rule 55 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    COMMA           reduce using rule 55 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    DOUBLEDOT       reduce using rule 55 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)


state 140

    (57) termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .

    PLUS            reduce using rule 57 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    MINUS           reduce using rule 57 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    GREATERTHAN     reduce using rule 57 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    LESSTHAN        reduce using rule 57 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    EQUALEQUAL      reduce using rule 57 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    LESSTHANOREQUAL reduce using rule 57 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    GREATERTHANOREQUAL reduce using rule 57 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    NOTEQUAL        reduce using rule 57 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    OR              reduce using rule 57 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    AND             reduce using rule 57 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    RPARENTHESIS    reduce using rule 57 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    SEMICOLON       reduce using rule 57 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    COMMA           reduce using rule 57 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    DOUBLEDOT       reduce using rule 57 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)


state 141

    (58) termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .

    PLUS            reduce using rule 58 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    MINUS           reduce using rule 58 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    GREATERTHAN     reduce using rule 58 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    LESSTHAN        reduce using rule 58 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    EQUALEQUAL      reduce using rule 58 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    LESSTHANOREQUAL reduce using rule 58 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    GREATERTHANOREQUAL reduce using rule 58 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    NOTEQUAL        reduce using rule 58 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    OR              reduce using rule 58 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    AND             reduce using rule 58 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    RPARENTHESIS    reduce using rule 58 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    SEMICOLON       reduce using rule 58 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    COMMA           reduce using rule 58 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    DOUBLEDOT       reduce using rule 58 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)


state 142

    (59) termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .

    PLUS            reduce using rule 59 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    MINUS           reduce using rule 59 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    GREATERTHAN     reduce using rule 59 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    LESSTHAN        reduce using rule 59 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    EQUALEQUAL      reduce using rule 59 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    LESSTHANOREQUAL reduce using rule 59 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    GREATERTHANOREQUAL reduce using rule 59 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    NOTEQUAL        reduce using rule 59 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    OR              reduce using rule 59 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    AND             reduce using rule 59 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    RPARENTHESIS    reduce using rule 59 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    SEMICOLON       reduce using rule 59 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    COMMA           reduce using rule 59 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    DOUBLEDOT       reduce using rule 59 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)


state 143

    (81) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT . assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (67) assign -> . type NAME n_name EQUAL expression
    (68) assign -> . NAME n_name EQUAL expression
    (24) type -> . INT_TYPE n_seen_type
    (25) type -> . STRING_TYPE n_seen_type
    (26) type -> . DOUBLE_TYPE n_seen_type
    (27) type -> . FLOAT_TYPE n_seen_type
    (28) type -> . BOOL_TYPE n_seen_type

    NAME            shift and go to state 44
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    assign                         shift and go to state 147
    type                           shift and go to state 22

state 144

    (80) whileloop -> WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock . RCURLY n_close_scope

    RCURLY          shift and go to state 148


state 145

    (40) function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock . RCURLY n_close_scope

    RCURLY          shift and go to state 149


state 146

    (82) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY . n_close_scope condition_else
    (3) n_close_scope -> .

    ELSE            reduce using rule 3 (n_close_scope -> .)
    FUNCTION        reduce using rule 3 (n_close_scope -> .)
    IF              reduce using rule 3 (n_close_scope -> .)
    FOR             reduce using rule 3 (n_close_scope -> .)
    WHILE           reduce using rule 3 (n_close_scope -> .)
    NAME            reduce using rule 3 (n_close_scope -> .)
    INT_TYPE        reduce using rule 3 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 3 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 3 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 3 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 3 (n_close_scope -> .)
    $end            reduce using rule 3 (n_close_scope -> .)
    RCURLY          reduce using rule 3 (n_close_scope -> .)

    n_close_scope                  shift and go to state 150

state 147

    (81) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign . RPARENTHESIS LCURLY codeblock RCURLY n_close_scope

    RPARENTHESIS    shift and go to state 151


state 148

    (80) whileloop -> WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY . n_close_scope
    (3) n_close_scope -> .

    FUNCTION        reduce using rule 3 (n_close_scope -> .)
    IF              reduce using rule 3 (n_close_scope -> .)
    FOR             reduce using rule 3 (n_close_scope -> .)
    WHILE           reduce using rule 3 (n_close_scope -> .)
    NAME            reduce using rule 3 (n_close_scope -> .)
    INT_TYPE        reduce using rule 3 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 3 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 3 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 3 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 3 (n_close_scope -> .)
    $end            reduce using rule 3 (n_close_scope -> .)
    RCURLY          reduce using rule 3 (n_close_scope -> .)

    n_close_scope                  shift and go to state 152

state 149

    (40) function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY . n_close_scope
    (3) n_close_scope -> .

    FUNCTION        reduce using rule 3 (n_close_scope -> .)
    IF              reduce using rule 3 (n_close_scope -> .)
    FOR             reduce using rule 3 (n_close_scope -> .)
    WHILE           reduce using rule 3 (n_close_scope -> .)
    NAME            reduce using rule 3 (n_close_scope -> .)
    INT_TYPE        reduce using rule 3 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 3 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 3 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 3 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 3 (n_close_scope -> .)
    $end            reduce using rule 3 (n_close_scope -> .)
    RCURLY          reduce using rule 3 (n_close_scope -> .)

    n_close_scope                  shift and go to state 153

state 150

    (82) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope . condition_else
    (83) condition_else -> . ELSE LCURLY n_open_new_scope codeblock RCURLY n_close_scope
    (84) condition_else -> . empty
    (20) empty -> .

    ELSE            shift and go to state 155
    FUNCTION        reduce using rule 20 (empty -> .)
    IF              reduce using rule 20 (empty -> .)
    FOR             reduce using rule 20 (empty -> .)
    WHILE           reduce using rule 20 (empty -> .)
    NAME            reduce using rule 20 (empty -> .)
    INT_TYPE        reduce using rule 20 (empty -> .)
    STRING_TYPE     reduce using rule 20 (empty -> .)
    DOUBLE_TYPE     reduce using rule 20 (empty -> .)
    FLOAT_TYPE      reduce using rule 20 (empty -> .)
    BOOL_TYPE       reduce using rule 20 (empty -> .)
    $end            reduce using rule 20 (empty -> .)
    RCURLY          reduce using rule 20 (empty -> .)

    condition_else                 shift and go to state 154
    empty                          shift and go to state 156

state 151

    (81) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS . LCURLY codeblock RCURLY n_close_scope

    LCURLY          shift and go to state 157


state 152

    (80) whileloop -> WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope .

    FUNCTION        reduce using rule 80 (whileloop -> WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    IF              reduce using rule 80 (whileloop -> WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    FOR             reduce using rule 80 (whileloop -> WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    WHILE           reduce using rule 80 (whileloop -> WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    NAME            reduce using rule 80 (whileloop -> WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    INT_TYPE        reduce using rule 80 (whileloop -> WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    STRING_TYPE     reduce using rule 80 (whileloop -> WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    DOUBLE_TYPE     reduce using rule 80 (whileloop -> WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    FLOAT_TYPE      reduce using rule 80 (whileloop -> WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    BOOL_TYPE       reduce using rule 80 (whileloop -> WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    $end            reduce using rule 80 (whileloop -> WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    RCURLY          reduce using rule 80 (whileloop -> WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)


state 153

    (40) function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .

    FUNCTION        reduce using rule 40 (function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    IF              reduce using rule 40 (function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    FOR             reduce using rule 40 (function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    WHILE           reduce using rule 40 (function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    NAME            reduce using rule 40 (function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    INT_TYPE        reduce using rule 40 (function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    STRING_TYPE     reduce using rule 40 (function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    DOUBLE_TYPE     reduce using rule 40 (function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    FLOAT_TYPE      reduce using rule 40 (function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    BOOL_TYPE       reduce using rule 40 (function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    $end            reduce using rule 40 (function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    RCURLY          reduce using rule 40 (function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)


state 154

    (82) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else .

    FUNCTION        reduce using rule 82 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else .)
    IF              reduce using rule 82 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else .)
    FOR             reduce using rule 82 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else .)
    WHILE           reduce using rule 82 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else .)
    NAME            reduce using rule 82 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else .)
    INT_TYPE        reduce using rule 82 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else .)
    STRING_TYPE     reduce using rule 82 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else .)
    DOUBLE_TYPE     reduce using rule 82 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else .)
    FLOAT_TYPE      reduce using rule 82 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else .)
    BOOL_TYPE       reduce using rule 82 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else .)
    $end            reduce using rule 82 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else .)
    RCURLY          reduce using rule 82 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else .)


state 155

    (83) condition_else -> ELSE . LCURLY n_open_new_scope codeblock RCURLY n_close_scope

    LCURLY          shift and go to state 158


state 156

    (84) condition_else -> empty .

    FUNCTION        reduce using rule 84 (condition_else -> empty .)
    IF              reduce using rule 84 (condition_else -> empty .)
    FOR             reduce using rule 84 (condition_else -> empty .)
    WHILE           reduce using rule 84 (condition_else -> empty .)
    NAME            reduce using rule 84 (condition_else -> empty .)
    INT_TYPE        reduce using rule 84 (condition_else -> empty .)
    STRING_TYPE     reduce using rule 84 (condition_else -> empty .)
    DOUBLE_TYPE     reduce using rule 84 (condition_else -> empty .)
    FLOAT_TYPE      reduce using rule 84 (condition_else -> empty .)
    BOOL_TYPE       reduce using rule 84 (condition_else -> empty .)
    $end            reduce using rule 84 (condition_else -> empty .)
    RCURLY          reduce using rule 84 (condition_else -> empty .)


state 157

    (81) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY . codeblock RCURLY n_close_scope
    (72) codeblock -> . empty
    (73) codeblock -> . codeblock_aux codeblock
    (20) empty -> .
    (74) codeblock_aux -> . statement
    (75) codeblock_aux -> . function_definition
    (76) codeblock_aux -> . condition_if
    (77) codeblock_aux -> . loop
    (69) statement -> . statement_aux SEMICOLON
    (40) function_definition -> . FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope
    (82) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else
    (78) loop -> . forloop
    (79) loop -> . whileloop
    (70) statement_aux -> . assign
    (71) statement_aux -> . function_call
    (81) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (80) whileloop -> . WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope
    (67) assign -> . type NAME n_name EQUAL expression
    (68) assign -> . NAME n_name EQUAL expression
    (41) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (24) type -> . INT_TYPE n_seen_type
    (25) type -> . STRING_TYPE n_seen_type
    (26) type -> . DOUBLE_TYPE n_seen_type
    (27) type -> . FLOAT_TYPE n_seen_type
    (28) type -> . BOOL_TYPE n_seen_type

    RCURLY          reduce using rule 20 (empty -> .)
    FUNCTION        shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    assign                         shift and go to state 18
    codeblock                      shift and go to state 159
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 158

    (83) condition_else -> ELSE LCURLY . n_open_new_scope codeblock RCURLY n_close_scope
    (2) n_open_new_scope -> .

    FUNCTION        reduce using rule 2 (n_open_new_scope -> .)
    IF              reduce using rule 2 (n_open_new_scope -> .)
    FOR             reduce using rule 2 (n_open_new_scope -> .)
    WHILE           reduce using rule 2 (n_open_new_scope -> .)
    NAME            reduce using rule 2 (n_open_new_scope -> .)
    INT_TYPE        reduce using rule 2 (n_open_new_scope -> .)
    STRING_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    DOUBLE_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    FLOAT_TYPE      reduce using rule 2 (n_open_new_scope -> .)
    BOOL_TYPE       reduce using rule 2 (n_open_new_scope -> .)
    RCURLY          reduce using rule 2 (n_open_new_scope -> .)

    n_open_new_scope               shift and go to state 160

state 159

    (81) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock . RCURLY n_close_scope

    RCURLY          shift and go to state 161


state 160

    (83) condition_else -> ELSE LCURLY n_open_new_scope . codeblock RCURLY n_close_scope
    (72) codeblock -> . empty
    (73) codeblock -> . codeblock_aux codeblock
    (20) empty -> .
    (74) codeblock_aux -> . statement
    (75) codeblock_aux -> . function_definition
    (76) codeblock_aux -> . condition_if
    (77) codeblock_aux -> . loop
    (69) statement -> . statement_aux SEMICOLON
    (40) function_definition -> . FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope
    (82) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else
    (78) loop -> . forloop
    (79) loop -> . whileloop
    (70) statement_aux -> . assign
    (71) statement_aux -> . function_call
    (81) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (80) whileloop -> . WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope
    (67) assign -> . type NAME n_name EQUAL expression
    (68) assign -> . NAME n_name EQUAL expression
    (41) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (24) type -> . INT_TYPE n_seen_type
    (25) type -> . STRING_TYPE n_seen_type
    (26) type -> . DOUBLE_TYPE n_seen_type
    (27) type -> . FLOAT_TYPE n_seen_type
    (28) type -> . BOOL_TYPE n_seen_type

    RCURLY          reduce using rule 20 (empty -> .)
    FUNCTION        shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    codeblock                      shift and go to state 162
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 161

    (81) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY . n_close_scope
    (3) n_close_scope -> .

    FUNCTION        reduce using rule 3 (n_close_scope -> .)
    IF              reduce using rule 3 (n_close_scope -> .)
    FOR             reduce using rule 3 (n_close_scope -> .)
    WHILE           reduce using rule 3 (n_close_scope -> .)
    NAME            reduce using rule 3 (n_close_scope -> .)
    INT_TYPE        reduce using rule 3 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 3 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 3 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 3 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 3 (n_close_scope -> .)
    $end            reduce using rule 3 (n_close_scope -> .)
    RCURLY          reduce using rule 3 (n_close_scope -> .)

    n_close_scope                  shift and go to state 163

state 162

    (83) condition_else -> ELSE LCURLY n_open_new_scope codeblock . RCURLY n_close_scope

    RCURLY          shift and go to state 164


state 163

    (81) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .

    FUNCTION        reduce using rule 81 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    IF              reduce using rule 81 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    FOR             reduce using rule 81 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    WHILE           reduce using rule 81 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    NAME            reduce using rule 81 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    INT_TYPE        reduce using rule 81 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    STRING_TYPE     reduce using rule 81 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    DOUBLE_TYPE     reduce using rule 81 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    FLOAT_TYPE      reduce using rule 81 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    BOOL_TYPE       reduce using rule 81 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    $end            reduce using rule 81 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    RCURLY          reduce using rule 81 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)


state 164

    (83) condition_else -> ELSE LCURLY n_open_new_scope codeblock RCURLY . n_close_scope
    (3) n_close_scope -> .

    FUNCTION        reduce using rule 3 (n_close_scope -> .)
    IF              reduce using rule 3 (n_close_scope -> .)
    FOR             reduce using rule 3 (n_close_scope -> .)
    WHILE           reduce using rule 3 (n_close_scope -> .)
    NAME            reduce using rule 3 (n_close_scope -> .)
    INT_TYPE        reduce using rule 3 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 3 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 3 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 3 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 3 (n_close_scope -> .)
    $end            reduce using rule 3 (n_close_scope -> .)
    RCURLY          reduce using rule 3 (n_close_scope -> .)

    n_close_scope                  shift and go to state 165

state 165

    (83) condition_else -> ELSE LCURLY n_open_new_scope codeblock RCURLY n_close_scope .

    FUNCTION        reduce using rule 83 (condition_else -> ELSE LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    IF              reduce using rule 83 (condition_else -> ELSE LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    FOR             reduce using rule 83 (condition_else -> ELSE LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    WHILE           reduce using rule 83 (condition_else -> ELSE LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    NAME            reduce using rule 83 (condition_else -> ELSE LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    INT_TYPE        reduce using rule 83 (condition_else -> ELSE LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    STRING_TYPE     reduce using rule 83 (condition_else -> ELSE LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    DOUBLE_TYPE     reduce using rule 83 (condition_else -> ELSE LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    FLOAT_TYPE      reduce using rule 83 (condition_else -> ELSE LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    BOOL_TYPE       reduce using rule 83 (condition_else -> ELSE LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    $end            reduce using rule 83 (condition_else -> ELSE LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    RCURLY          reduce using rule 83 (condition_else -> ELSE LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)

