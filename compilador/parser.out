Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DOT
    LBRACKET
    NOT
    RBRACKET

Grammar

Rule 0     S' -> program
Rule 1     n_seen_type -> <empty>
Rule 2     n_open_new_scope -> <empty>
Rule 3     n_open_new_scope_function -> <empty>
Rule 4     n_close_scope -> <empty>
Rule 5     n_variable_reference -> <empty>
Rule 6     n_variable_instantiate -> <empty>
Rule 7     n_variable_instantiate_param -> <empty>
Rule 8     n_math_expression_1_int -> <empty>
Rule 9     n_math_expression_1_float -> <empty>
Rule 10    n_math_expression_1_string -> <empty>
Rule 11    n_math_expression_1_name -> <empty>
Rule 12    n_math_expression_2 -> <empty>
Rule 13    n_math_expression_3 -> <empty>
Rule 14    n_math_expression_4 -> <empty>
Rule 15    n_math_expression_5 -> <empty>
Rule 16    n_math_expression_6 -> <empty>
Rule 17    n_math_expression_7 -> <empty>
Rule 18    n_math_expression_8 -> <empty>
Rule 19    n_math_expression_9 -> <empty>
Rule 20    n_math_expression_10 -> <empty>
Rule 21    n_math_expression_11 -> <empty>
Rule 22    n_math_expression_12 -> <empty>
Rule 23    n_two_way_conditional_1 -> <empty>
Rule 24    n_two_way_conditional_2 -> <empty>
Rule 25    n_two_way_conditional_3 -> <empty>
Rule 26    p_n_pre_condition_loop_1 -> <empty>
Rule 27    p_n_pre_condition_loop_2 -> <empty>
Rule 28    p_n_pre_condition_loop_3 -> <empty>
Rule 29    n_seen_equal_op -> <empty>
Rule 30    n_before_function_definition -> <empty>
Rule 31    n_function_block_start -> <empty>
Rule 32    n_function_block_end -> <empty>
Rule 33    n_function_type -> <empty>
Rule 34    n_function_call_1 -> <empty>
Rule 35    n_function_call_2 -> <empty>
Rule 36    n_function_call_3 -> <empty>
Rule 37    n_function_call_4 -> <empty>
Rule 38    n_function_call_5 -> <empty>
Rule 39    n_function_call_6 -> <empty>
Rule 40    n_return -> <empty>
Rule 41    n_return_void -> <empty>
Rule 42    n_end -> <empty>
Rule 43    empty -> <empty>
Rule 44    program -> program_aux codeblock n_end
Rule 45    program_aux -> IDK
Rule 46    program_aux -> OWO
Rule 47    type -> INT_TYPE n_seen_type
Rule 48    type -> STRING_TYPE n_seen_type
Rule 49    type -> DOUBLE_TYPE n_seen_type
Rule 50    type -> FLOAT_TYPE n_seen_type
Rule 51    type -> BOOL_TYPE n_seen_type
Rule 52    relational_operator -> GREATERTHAN n_math_expression_8
Rule 53    relational_operator -> LESSTHAN n_math_expression_8
Rule 54    relational_operator -> EQUALEQUAL n_math_expression_8
Rule 55    relational_operator -> LESSTHANOREQUAL n_math_expression_8
Rule 56    relational_operator -> GREATERTHANOREQUAL n_math_expression_8
Rule 57    relational_operator -> NOTEQUAL n_math_expression_8
Rule 58    literal -> FLOAT n_math_expression_1_float
Rule 59    literal -> INT n_math_expression_1_int
Rule 60    literal -> STRING n_math_expression_1_string
Rule 61    function_type -> VOID n_function_type
Rule 62    function_type -> INT_TYPE n_function_type
Rule 63    function_type -> STRING_TYPE n_function_type
Rule 64    function_type -> DOUBLE_TYPE n_function_type
Rule 65    function_type -> FLOAT_TYPE n_function_type
Rule 66    function_type -> BOOL_TYPE n_function_type
Rule 67    function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end
Rule 68    return -> RETURN expression n_return SEMICOLON
Rule 69    return -> RETURN n_return_void SEMICOLON
Rule 70    return -> empty
Rule 71    function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
Rule 72    function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
Rule 73    arg_list -> arg
Rule 74    arg_list -> arg COMMA n_function_call_4 arg_list
Rule 75    parameter_list -> empty
Rule 76    parameter_list -> parameter
Rule 77    parameter_list -> parameter COMMA parameter_list
Rule 78    arg -> expression n_function_call_3
Rule 79    parameter -> type NAME n_variable_instantiate_param
Rule 80    expression -> expression_or
Rule 81    expression -> expression_or AND n_math_expression_10 expression n_math_expression_11
Rule 82    expression_or -> expression_rel
Rule 83    expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12
Rule 84    expression_rel -> exp
Rule 85    expression_rel -> exp relational_operator exp n_math_expression_9
Rule 86    exp -> termino n_math_expression_4
Rule 87    exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp
Rule 88    exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp
Rule 89    termino -> factor n_math_expression_5
Rule 90    termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino
Rule 91    termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino
Rule 92    termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino
Rule 93    factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
Rule 94    factor -> PLUS value
Rule 95    factor -> MINUS value
Rule 96    factor -> value
Rule 97    value -> function_call
Rule 98    value -> literal
Rule 99    value -> NAME n_variable_reference n_math_expression_1_name
Rule 100   assign -> type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
Rule 101   assign -> NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
Rule 102   statement -> statement_aux SEMICOLON
Rule 103   statement_aux -> assign
Rule 104   statement_aux -> function_call
Rule 105   codeblock -> empty
Rule 106   codeblock -> codeblock_aux codeblock
Rule 107   codeblock_aux -> statement
Rule 108   codeblock_aux -> function_definition
Rule 109   codeblock_aux -> condition_if
Rule 110   codeblock_aux -> loop
Rule 111   loop -> forloop
Rule 112   loop -> whileloop
Rule 113   whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
Rule 114   forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
Rule 115   condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
Rule 116   condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope
Rule 117   condition_else -> empty

Terminals, with rules where they appear

AND                  : 81
BOOL_TYPE            : 51 66
COMMA                : 74 77
DIVIDE               : 91
DOT                  : 
DOUBLEDOT            : 67 114 114
DOUBLE_TYPE          : 49 64
ELSE                 : 116
EQUAL                : 100 101
EQUALEQUAL           : 54
FLOAT                : 58
FLOAT_TYPE           : 50 65
FOR                  : 114
FUNCTION             : 67
GREATERTHAN          : 52
GREATERTHANOREQUAL   : 56
IDK                  : 45
IF                   : 115
INT                  : 59
INT_TYPE             : 47 62
LBRACKET             : 
LCURLY               : 67 113 114 115 116
LESSTHAN             : 53
LESSTHANOREQUAL      : 55
LPARENTHESIS         : 71 72 93 113 114 115
MINUS                : 88 95
MODULUS              : 92
NAME                 : 67 71 72 79 99 100 101
NOT                  : 
NOTEQUAL             : 57
OR                   : 83
OWO                  : 46
PLUS                 : 87 94
RBRACKET             : 
RCURLY               : 67 113 114 115 116
RETURN               : 68 69
RPARENTHESIS         : 71 72 93 113 114 115
SEMICOLON            : 68 69 102
STRING               : 60
STRING_TYPE          : 48 63
TIMES                : 90
VOID                 : 61
WHILE                : 113
error                : 

Nonterminals, with rules where they appear

arg                  : 73 74
arg_list             : 71 74
assign               : 103 114 114
codeblock            : 44 67 106 113 114 115 116
codeblock_aux        : 106
condition_else       : 115
condition_if         : 109
empty                : 70 75 105 117
exp                  : 84 85 85 87 88
expression           : 68 78 81 93 100 101 113 114 115
expression_or        : 80 81 83
expression_rel       : 82 83
factor               : 89 90 91 92
forloop              : 111
function_call        : 97 104
function_definition  : 108
function_type        : 67
literal              : 98
loop                 : 110
n_before_function_definition : 67
n_close_scope        : 67 113 114 115 116
n_end                : 44
n_function_block_end : 67
n_function_block_start : 67
n_function_call_1    : 71 72
n_function_call_2    : 71
n_function_call_3    : 78
n_function_call_4    : 74
n_function_call_5    : 71
n_function_call_6    : 71 72
n_function_type      : 61 62 63 64 65 66
n_math_expression_10 : 81 83
n_math_expression_11 : 81
n_math_expression_12 : 83
n_math_expression_1_float : 58
n_math_expression_1_int : 59
n_math_expression_1_name : 99 100 101
n_math_expression_1_string : 60
n_math_expression_2  : 87 88
n_math_expression_3  : 90 91 92
n_math_expression_4  : 86 87 88
n_math_expression_5  : 89 90 91 92
n_math_expression_6  : 93
n_math_expression_7  : 93
n_math_expression_8  : 52 53 54 55 56 57
n_math_expression_9  : 85
n_open_new_scope     : 113 114 115 116
n_open_new_scope_function : 67
n_return             : 68
n_return_void        : 69
n_seen_equal_op      : 100 101
n_seen_type          : 47 48 49 50 51
n_two_way_conditional_1 : 115
n_two_way_conditional_2 : 115
n_two_way_conditional_3 : 116
n_variable_instantiate : 100
n_variable_instantiate_param : 79
n_variable_reference : 99 101
p_n_pre_condition_loop_1 : 113
p_n_pre_condition_loop_2 : 113
p_n_pre_condition_loop_3 : 113
parameter            : 76 77
parameter_list       : 67 77
program              : 0
program_aux          : 44
relational_operator  : 85
return               : 67
statement            : 107
statement_aux        : 102
termino              : 86 87 88 90 91 92
type                 : 79 100
value                : 94 95 96
whileloop            : 112

Parsing method: LALR

state 0

    (0) S' -> . program
    (44) program -> . program_aux codeblock n_end
    (45) program_aux -> . IDK
    (46) program_aux -> . OWO

    IDK             shift and go to state 3
    OWO             shift and go to state 4

    program                        shift and go to state 1
    program_aux                    shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (44) program -> program_aux . codeblock n_end
    (105) codeblock -> . empty
    (106) codeblock -> . codeblock_aux codeblock
    (43) empty -> .
    (107) codeblock_aux -> . statement
    (108) codeblock_aux -> . function_definition
    (109) codeblock_aux -> . condition_if
    (110) codeblock_aux -> . loop
    (102) statement -> . statement_aux SEMICOLON
    (67) function_definition -> . n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end
    (115) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (111) loop -> . forloop
    (112) loop -> . whileloop
    (103) statement_aux -> . assign
    (104) statement_aux -> . function_call
    (30) n_before_function_definition -> .
    (114) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (113) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (100) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (101) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (71) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (72) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (47) type -> . INT_TYPE n_seen_type
    (48) type -> . STRING_TYPE n_seen_type
    (49) type -> . DOUBLE_TYPE n_seen_type
    (50) type -> . FLOAT_TYPE n_seen_type
    (51) type -> . BOOL_TYPE n_seen_type

    $end            reduce using rule 43 (empty -> .)
    IF              shift and go to state 15
    FUNCTION        reduce using rule 30 (n_before_function_definition -> .)
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    codeblock                      shift and go to state 5
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    n_before_function_definition   shift and go to state 13
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 3

    (45) program_aux -> IDK .

    IF              reduce using rule 45 (program_aux -> IDK .)
    FOR             reduce using rule 45 (program_aux -> IDK .)
    WHILE           reduce using rule 45 (program_aux -> IDK .)
    NAME            reduce using rule 45 (program_aux -> IDK .)
    INT_TYPE        reduce using rule 45 (program_aux -> IDK .)
    STRING_TYPE     reduce using rule 45 (program_aux -> IDK .)
    DOUBLE_TYPE     reduce using rule 45 (program_aux -> IDK .)
    FLOAT_TYPE      reduce using rule 45 (program_aux -> IDK .)
    BOOL_TYPE       reduce using rule 45 (program_aux -> IDK .)
    FUNCTION        reduce using rule 45 (program_aux -> IDK .)
    $end            reduce using rule 45 (program_aux -> IDK .)


state 4

    (46) program_aux -> OWO .

    IF              reduce using rule 46 (program_aux -> OWO .)
    FOR             reduce using rule 46 (program_aux -> OWO .)
    WHILE           reduce using rule 46 (program_aux -> OWO .)
    NAME            reduce using rule 46 (program_aux -> OWO .)
    INT_TYPE        reduce using rule 46 (program_aux -> OWO .)
    STRING_TYPE     reduce using rule 46 (program_aux -> OWO .)
    DOUBLE_TYPE     reduce using rule 46 (program_aux -> OWO .)
    FLOAT_TYPE      reduce using rule 46 (program_aux -> OWO .)
    BOOL_TYPE       reduce using rule 46 (program_aux -> OWO .)
    FUNCTION        reduce using rule 46 (program_aux -> OWO .)
    $end            reduce using rule 46 (program_aux -> OWO .)


state 5

    (44) program -> program_aux codeblock . n_end
    (42) n_end -> .

    $end            reduce using rule 42 (n_end -> .)

    n_end                          shift and go to state 28

state 6

    (105) codeblock -> empty .

    $end            reduce using rule 105 (codeblock -> empty .)
    RCURLY          reduce using rule 105 (codeblock -> empty .)
    RETURN          reduce using rule 105 (codeblock -> empty .)


state 7

    (106) codeblock -> codeblock_aux . codeblock
    (105) codeblock -> . empty
    (106) codeblock -> . codeblock_aux codeblock
    (43) empty -> .
    (107) codeblock_aux -> . statement
    (108) codeblock_aux -> . function_definition
    (109) codeblock_aux -> . condition_if
    (110) codeblock_aux -> . loop
    (102) statement -> . statement_aux SEMICOLON
    (67) function_definition -> . n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end
    (115) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (111) loop -> . forloop
    (112) loop -> . whileloop
    (103) statement_aux -> . assign
    (104) statement_aux -> . function_call
    (30) n_before_function_definition -> .
    (114) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (113) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (100) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (101) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (71) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (72) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (47) type -> . INT_TYPE n_seen_type
    (48) type -> . STRING_TYPE n_seen_type
    (49) type -> . DOUBLE_TYPE n_seen_type
    (50) type -> . FLOAT_TYPE n_seen_type
    (51) type -> . BOOL_TYPE n_seen_type

    $end            reduce using rule 43 (empty -> .)
    RCURLY          reduce using rule 43 (empty -> .)
    RETURN          reduce using rule 43 (empty -> .)
    IF              shift and go to state 15
    FUNCTION        reduce using rule 30 (n_before_function_definition -> .)
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    codeblock_aux                  shift and go to state 7
    codeblock                      shift and go to state 29
    empty                          shift and go to state 6
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    n_before_function_definition   shift and go to state 13
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 8

    (107) codeblock_aux -> statement .

    IF              reduce using rule 107 (codeblock_aux -> statement .)
    FOR             reduce using rule 107 (codeblock_aux -> statement .)
    WHILE           reduce using rule 107 (codeblock_aux -> statement .)
    NAME            reduce using rule 107 (codeblock_aux -> statement .)
    INT_TYPE        reduce using rule 107 (codeblock_aux -> statement .)
    STRING_TYPE     reduce using rule 107 (codeblock_aux -> statement .)
    DOUBLE_TYPE     reduce using rule 107 (codeblock_aux -> statement .)
    FLOAT_TYPE      reduce using rule 107 (codeblock_aux -> statement .)
    BOOL_TYPE       reduce using rule 107 (codeblock_aux -> statement .)
    FUNCTION        reduce using rule 107 (codeblock_aux -> statement .)
    $end            reduce using rule 107 (codeblock_aux -> statement .)
    RCURLY          reduce using rule 107 (codeblock_aux -> statement .)
    RETURN          reduce using rule 107 (codeblock_aux -> statement .)


state 9

    (108) codeblock_aux -> function_definition .

    IF              reduce using rule 108 (codeblock_aux -> function_definition .)
    FOR             reduce using rule 108 (codeblock_aux -> function_definition .)
    WHILE           reduce using rule 108 (codeblock_aux -> function_definition .)
    NAME            reduce using rule 108 (codeblock_aux -> function_definition .)
    INT_TYPE        reduce using rule 108 (codeblock_aux -> function_definition .)
    STRING_TYPE     reduce using rule 108 (codeblock_aux -> function_definition .)
    DOUBLE_TYPE     reduce using rule 108 (codeblock_aux -> function_definition .)
    FLOAT_TYPE      reduce using rule 108 (codeblock_aux -> function_definition .)
    BOOL_TYPE       reduce using rule 108 (codeblock_aux -> function_definition .)
    FUNCTION        reduce using rule 108 (codeblock_aux -> function_definition .)
    $end            reduce using rule 108 (codeblock_aux -> function_definition .)
    RCURLY          reduce using rule 108 (codeblock_aux -> function_definition .)
    RETURN          reduce using rule 108 (codeblock_aux -> function_definition .)


state 10

    (109) codeblock_aux -> condition_if .

    IF              reduce using rule 109 (codeblock_aux -> condition_if .)
    FOR             reduce using rule 109 (codeblock_aux -> condition_if .)
    WHILE           reduce using rule 109 (codeblock_aux -> condition_if .)
    NAME            reduce using rule 109 (codeblock_aux -> condition_if .)
    INT_TYPE        reduce using rule 109 (codeblock_aux -> condition_if .)
    STRING_TYPE     reduce using rule 109 (codeblock_aux -> condition_if .)
    DOUBLE_TYPE     reduce using rule 109 (codeblock_aux -> condition_if .)
    FLOAT_TYPE      reduce using rule 109 (codeblock_aux -> condition_if .)
    BOOL_TYPE       reduce using rule 109 (codeblock_aux -> condition_if .)
    FUNCTION        reduce using rule 109 (codeblock_aux -> condition_if .)
    $end            reduce using rule 109 (codeblock_aux -> condition_if .)
    RCURLY          reduce using rule 109 (codeblock_aux -> condition_if .)
    RETURN          reduce using rule 109 (codeblock_aux -> condition_if .)


state 11

    (110) codeblock_aux -> loop .

    IF              reduce using rule 110 (codeblock_aux -> loop .)
    FOR             reduce using rule 110 (codeblock_aux -> loop .)
    WHILE           reduce using rule 110 (codeblock_aux -> loop .)
    NAME            reduce using rule 110 (codeblock_aux -> loop .)
    INT_TYPE        reduce using rule 110 (codeblock_aux -> loop .)
    STRING_TYPE     reduce using rule 110 (codeblock_aux -> loop .)
    DOUBLE_TYPE     reduce using rule 110 (codeblock_aux -> loop .)
    FLOAT_TYPE      reduce using rule 110 (codeblock_aux -> loop .)
    BOOL_TYPE       reduce using rule 110 (codeblock_aux -> loop .)
    FUNCTION        reduce using rule 110 (codeblock_aux -> loop .)
    $end            reduce using rule 110 (codeblock_aux -> loop .)
    RCURLY          reduce using rule 110 (codeblock_aux -> loop .)
    RETURN          reduce using rule 110 (codeblock_aux -> loop .)


state 12

    (102) statement -> statement_aux . SEMICOLON

    SEMICOLON       shift and go to state 30


state 13

    (67) function_definition -> n_before_function_definition . FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end

    FUNCTION        shift and go to state 31


state 14

    (101) assign -> NAME . n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (71) function_call -> NAME . n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (72) function_call -> NAME . n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (5) n_variable_reference -> .
    (34) n_function_call_1 -> .

    EQUAL           reduce using rule 5 (n_variable_reference -> .)
    LPARENTHESIS    reduce using rule 34 (n_function_call_1 -> .)

    n_variable_reference           shift and go to state 32
    n_function_call_1              shift and go to state 33

state 15

    (115) condition_if -> IF . LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2

    LPARENTHESIS    shift and go to state 34


state 16

    (111) loop -> forloop .

    IF              reduce using rule 111 (loop -> forloop .)
    FOR             reduce using rule 111 (loop -> forloop .)
    WHILE           reduce using rule 111 (loop -> forloop .)
    NAME            reduce using rule 111 (loop -> forloop .)
    INT_TYPE        reduce using rule 111 (loop -> forloop .)
    STRING_TYPE     reduce using rule 111 (loop -> forloop .)
    DOUBLE_TYPE     reduce using rule 111 (loop -> forloop .)
    FLOAT_TYPE      reduce using rule 111 (loop -> forloop .)
    BOOL_TYPE       reduce using rule 111 (loop -> forloop .)
    FUNCTION        reduce using rule 111 (loop -> forloop .)
    $end            reduce using rule 111 (loop -> forloop .)
    RCURLY          reduce using rule 111 (loop -> forloop .)
    RETURN          reduce using rule 111 (loop -> forloop .)


state 17

    (112) loop -> whileloop .

    IF              reduce using rule 112 (loop -> whileloop .)
    FOR             reduce using rule 112 (loop -> whileloop .)
    WHILE           reduce using rule 112 (loop -> whileloop .)
    NAME            reduce using rule 112 (loop -> whileloop .)
    INT_TYPE        reduce using rule 112 (loop -> whileloop .)
    STRING_TYPE     reduce using rule 112 (loop -> whileloop .)
    DOUBLE_TYPE     reduce using rule 112 (loop -> whileloop .)
    FLOAT_TYPE      reduce using rule 112 (loop -> whileloop .)
    BOOL_TYPE       reduce using rule 112 (loop -> whileloop .)
    FUNCTION        reduce using rule 112 (loop -> whileloop .)
    $end            reduce using rule 112 (loop -> whileloop .)
    RCURLY          reduce using rule 112 (loop -> whileloop .)
    RETURN          reduce using rule 112 (loop -> whileloop .)


state 18

    (103) statement_aux -> assign .

    SEMICOLON       reduce using rule 103 (statement_aux -> assign .)


state 19

    (104) statement_aux -> function_call .

    SEMICOLON       reduce using rule 104 (statement_aux -> function_call .)


state 20

    (114) forloop -> FOR . LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope

    LPARENTHESIS    shift and go to state 35


state 21

    (113) whileloop -> WHILE . p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (26) p_n_pre_condition_loop_1 -> .

    LPARENTHESIS    reduce using rule 26 (p_n_pre_condition_loop_1 -> .)

    p_n_pre_condition_loop_1       shift and go to state 36

state 22

    (100) assign -> type . NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression

    NAME            shift and go to state 37


state 23

    (47) type -> INT_TYPE . n_seen_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 38

state 24

    (48) type -> STRING_TYPE . n_seen_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 39

state 25

    (49) type -> DOUBLE_TYPE . n_seen_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 40

state 26

    (50) type -> FLOAT_TYPE . n_seen_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 41

state 27

    (51) type -> BOOL_TYPE . n_seen_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 42

state 28

    (44) program -> program_aux codeblock n_end .

    $end            reduce using rule 44 (program -> program_aux codeblock n_end .)


state 29

    (106) codeblock -> codeblock_aux codeblock .

    $end            reduce using rule 106 (codeblock -> codeblock_aux codeblock .)
    RCURLY          reduce using rule 106 (codeblock -> codeblock_aux codeblock .)
    RETURN          reduce using rule 106 (codeblock -> codeblock_aux codeblock .)


state 30

    (102) statement -> statement_aux SEMICOLON .

    IF              reduce using rule 102 (statement -> statement_aux SEMICOLON .)
    FOR             reduce using rule 102 (statement -> statement_aux SEMICOLON .)
    WHILE           reduce using rule 102 (statement -> statement_aux SEMICOLON .)
    NAME            reduce using rule 102 (statement -> statement_aux SEMICOLON .)
    INT_TYPE        reduce using rule 102 (statement -> statement_aux SEMICOLON .)
    STRING_TYPE     reduce using rule 102 (statement -> statement_aux SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 102 (statement -> statement_aux SEMICOLON .)
    FLOAT_TYPE      reduce using rule 102 (statement -> statement_aux SEMICOLON .)
    BOOL_TYPE       reduce using rule 102 (statement -> statement_aux SEMICOLON .)
    FUNCTION        reduce using rule 102 (statement -> statement_aux SEMICOLON .)
    $end            reduce using rule 102 (statement -> statement_aux SEMICOLON .)
    RCURLY          reduce using rule 102 (statement -> statement_aux SEMICOLON .)
    RETURN          reduce using rule 102 (statement -> statement_aux SEMICOLON .)


state 31

    (67) function_definition -> n_before_function_definition FUNCTION . NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end

    NAME            shift and go to state 43


state 32

    (101) assign -> NAME n_variable_reference . n_math_expression_1_name EQUAL n_seen_equal_op expression
    (11) n_math_expression_1_name -> .

    EQUAL           reduce using rule 11 (n_math_expression_1_name -> .)

    n_math_expression_1_name       shift and go to state 44

state 33

    (71) function_call -> NAME n_function_call_1 . LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (72) function_call -> NAME n_function_call_1 . LPARENTHESIS RPARENTHESIS n_function_call_6

    LPARENTHESIS    shift and go to state 45


state 34

    (115) condition_if -> IF LPARENTHESIS . expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (80) expression -> . expression_or
    (81) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (82) expression_or -> . expression_rel
    (83) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (84) expression_rel -> . exp
    (85) expression_rel -> . exp relational_operator exp n_math_expression_9
    (86) exp -> . termino n_math_expression_4
    (87) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (88) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (89) termino -> . factor n_math_expression_5
    (90) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (91) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (92) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (93) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (94) factor -> . PLUS value
    (95) factor -> . MINUS value
    (96) factor -> . value
    (97) value -> . function_call
    (98) value -> . literal
    (99) value -> . NAME n_variable_reference n_math_expression_1_name
    (71) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (72) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (58) literal -> . FLOAT n_math_expression_1_float
    (59) literal -> . INT n_math_expression_1_int
    (60) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 46
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    NAME            shift and go to state 58
    FLOAT           shift and go to state 59
    INT             shift and go to state 60
    STRING          shift and go to state 61

    expression                     shift and go to state 47
    expression_or                  shift and go to state 48
    expression_rel                 shift and go to state 49
    exp                            shift and go to state 50
    termino                        shift and go to state 51
    factor                         shift and go to state 54
    value                          shift and go to state 55
    function_call                  shift and go to state 56
    literal                        shift and go to state 57

state 35

    (114) forloop -> FOR LPARENTHESIS . n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (2) n_open_new_scope -> .

    NAME            reduce using rule 2 (n_open_new_scope -> .)
    INT_TYPE        reduce using rule 2 (n_open_new_scope -> .)
    STRING_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    DOUBLE_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    FLOAT_TYPE      reduce using rule 2 (n_open_new_scope -> .)
    BOOL_TYPE       reduce using rule 2 (n_open_new_scope -> .)

    n_open_new_scope               shift and go to state 62

state 36

    (113) whileloop -> WHILE p_n_pre_condition_loop_1 . LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope

    LPARENTHESIS    shift and go to state 63


state 37

    (100) assign -> type NAME . n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (6) n_variable_instantiate -> .

    EQUAL           reduce using rule 6 (n_variable_instantiate -> .)

    n_variable_instantiate         shift and go to state 64

state 38

    (47) type -> INT_TYPE n_seen_type .

    NAME            reduce using rule 47 (type -> INT_TYPE n_seen_type .)


state 39

    (48) type -> STRING_TYPE n_seen_type .

    NAME            reduce using rule 48 (type -> STRING_TYPE n_seen_type .)


state 40

    (49) type -> DOUBLE_TYPE n_seen_type .

    NAME            reduce using rule 49 (type -> DOUBLE_TYPE n_seen_type .)


state 41

    (50) type -> FLOAT_TYPE n_seen_type .

    NAME            reduce using rule 50 (type -> FLOAT_TYPE n_seen_type .)


state 42

    (51) type -> BOOL_TYPE n_seen_type .

    NAME            reduce using rule 51 (type -> BOOL_TYPE n_seen_type .)


state 43

    (67) function_definition -> n_before_function_definition FUNCTION NAME . n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end
    (3) n_open_new_scope_function -> .

    INT_TYPE        reduce using rule 3 (n_open_new_scope_function -> .)
    STRING_TYPE     reduce using rule 3 (n_open_new_scope_function -> .)
    DOUBLE_TYPE     reduce using rule 3 (n_open_new_scope_function -> .)
    FLOAT_TYPE      reduce using rule 3 (n_open_new_scope_function -> .)
    BOOL_TYPE       reduce using rule 3 (n_open_new_scope_function -> .)
    DOUBLEDOT       reduce using rule 3 (n_open_new_scope_function -> .)

    n_open_new_scope_function      shift and go to state 65

state 44

    (101) assign -> NAME n_variable_reference n_math_expression_1_name . EQUAL n_seen_equal_op expression

    EQUAL           shift and go to state 66


state 45

    (71) function_call -> NAME n_function_call_1 LPARENTHESIS . n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (72) function_call -> NAME n_function_call_1 LPARENTHESIS . RPARENTHESIS n_function_call_6
    (35) n_function_call_2 -> .

    RPARENTHESIS    shift and go to state 68
    LPARENTHESIS    reduce using rule 35 (n_function_call_2 -> .)
    PLUS            reduce using rule 35 (n_function_call_2 -> .)
    MINUS           reduce using rule 35 (n_function_call_2 -> .)
    NAME            reduce using rule 35 (n_function_call_2 -> .)
    FLOAT           reduce using rule 35 (n_function_call_2 -> .)
    INT             reduce using rule 35 (n_function_call_2 -> .)
    STRING          reduce using rule 35 (n_function_call_2 -> .)

    n_function_call_2              shift and go to state 67

state 46

    (93) factor -> LPARENTHESIS . n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (16) n_math_expression_6 -> .

    LPARENTHESIS    reduce using rule 16 (n_math_expression_6 -> .)
    PLUS            reduce using rule 16 (n_math_expression_6 -> .)
    MINUS           reduce using rule 16 (n_math_expression_6 -> .)
    NAME            reduce using rule 16 (n_math_expression_6 -> .)
    FLOAT           reduce using rule 16 (n_math_expression_6 -> .)
    INT             reduce using rule 16 (n_math_expression_6 -> .)
    STRING          reduce using rule 16 (n_math_expression_6 -> .)

    n_math_expression_6            shift and go to state 69

state 47

    (115) condition_if -> IF LPARENTHESIS expression . RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2

    RPARENTHESIS    shift and go to state 70


state 48

    (80) expression -> expression_or .
    (81) expression -> expression_or . AND n_math_expression_10 expression n_math_expression_11

    RPARENTHESIS    reduce using rule 80 (expression -> expression_or .)
    COMMA           reduce using rule 80 (expression -> expression_or .)
    SEMICOLON       reduce using rule 80 (expression -> expression_or .)
    DOUBLEDOT       reduce using rule 80 (expression -> expression_or .)
    AND             shift and go to state 71


state 49

    (82) expression_or -> expression_rel .
    (83) expression_or -> expression_rel . OR n_math_expression_10 expression_or n_math_expression_12

    AND             reduce using rule 82 (expression_or -> expression_rel .)
    RPARENTHESIS    reduce using rule 82 (expression_or -> expression_rel .)
    COMMA           reduce using rule 82 (expression_or -> expression_rel .)
    SEMICOLON       reduce using rule 82 (expression_or -> expression_rel .)
    DOUBLEDOT       reduce using rule 82 (expression_or -> expression_rel .)
    OR              shift and go to state 72


state 50

    (84) expression_rel -> exp .
    (85) expression_rel -> exp . relational_operator exp n_math_expression_9
    (52) relational_operator -> . GREATERTHAN n_math_expression_8
    (53) relational_operator -> . LESSTHAN n_math_expression_8
    (54) relational_operator -> . EQUALEQUAL n_math_expression_8
    (55) relational_operator -> . LESSTHANOREQUAL n_math_expression_8
    (56) relational_operator -> . GREATERTHANOREQUAL n_math_expression_8
    (57) relational_operator -> . NOTEQUAL n_math_expression_8

    OR              reduce using rule 84 (expression_rel -> exp .)
    AND             reduce using rule 84 (expression_rel -> exp .)
    RPARENTHESIS    reduce using rule 84 (expression_rel -> exp .)
    COMMA           reduce using rule 84 (expression_rel -> exp .)
    SEMICOLON       reduce using rule 84 (expression_rel -> exp .)
    DOUBLEDOT       reduce using rule 84 (expression_rel -> exp .)
    GREATERTHAN     shift and go to state 74
    LESSTHAN        shift and go to state 75
    EQUALEQUAL      shift and go to state 76
    LESSTHANOREQUAL shift and go to state 77
    GREATERTHANOREQUAL shift and go to state 78
    NOTEQUAL        shift and go to state 79

    relational_operator            shift and go to state 73

state 51

    (86) exp -> termino . n_math_expression_4
    (87) exp -> termino . n_math_expression_4 PLUS n_math_expression_2 exp
    (88) exp -> termino . n_math_expression_4 MINUS n_math_expression_2 exp
    (14) n_math_expression_4 -> .

    PLUS            reduce using rule 14 (n_math_expression_4 -> .)
    MINUS           reduce using rule 14 (n_math_expression_4 -> .)
    GREATERTHAN     reduce using rule 14 (n_math_expression_4 -> .)
    LESSTHAN        reduce using rule 14 (n_math_expression_4 -> .)
    EQUALEQUAL      reduce using rule 14 (n_math_expression_4 -> .)
    LESSTHANOREQUAL reduce using rule 14 (n_math_expression_4 -> .)
    GREATERTHANOREQUAL reduce using rule 14 (n_math_expression_4 -> .)
    NOTEQUAL        reduce using rule 14 (n_math_expression_4 -> .)
    OR              reduce using rule 14 (n_math_expression_4 -> .)
    AND             reduce using rule 14 (n_math_expression_4 -> .)
    RPARENTHESIS    reduce using rule 14 (n_math_expression_4 -> .)
    COMMA           reduce using rule 14 (n_math_expression_4 -> .)
    SEMICOLON       reduce using rule 14 (n_math_expression_4 -> .)
    DOUBLEDOT       reduce using rule 14 (n_math_expression_4 -> .)

    n_math_expression_4            shift and go to state 80

state 52

    (94) factor -> PLUS . value
    (97) value -> . function_call
    (98) value -> . literal
    (99) value -> . NAME n_variable_reference n_math_expression_1_name
    (71) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (72) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (58) literal -> . FLOAT n_math_expression_1_float
    (59) literal -> . INT n_math_expression_1_int
    (60) literal -> . STRING n_math_expression_1_string

    NAME            shift and go to state 58
    FLOAT           shift and go to state 59
    INT             shift and go to state 60
    STRING          shift and go to state 61

    value                          shift and go to state 81
    function_call                  shift and go to state 56
    literal                        shift and go to state 57

state 53

    (95) factor -> MINUS . value
    (97) value -> . function_call
    (98) value -> . literal
    (99) value -> . NAME n_variable_reference n_math_expression_1_name
    (71) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (72) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (58) literal -> . FLOAT n_math_expression_1_float
    (59) literal -> . INT n_math_expression_1_int
    (60) literal -> . STRING n_math_expression_1_string

    NAME            shift and go to state 58
    FLOAT           shift and go to state 59
    INT             shift and go to state 60
    STRING          shift and go to state 61

    value                          shift and go to state 82
    function_call                  shift and go to state 56
    literal                        shift and go to state 57

state 54

    (89) termino -> factor . n_math_expression_5
    (90) termino -> factor . n_math_expression_5 TIMES n_math_expression_3 termino
    (91) termino -> factor . n_math_expression_5 DIVIDE n_math_expression_3 termino
    (92) termino -> factor . n_math_expression_5 MODULUS n_math_expression_3 termino
    (15) n_math_expression_5 -> .

    TIMES           reduce using rule 15 (n_math_expression_5 -> .)
    DIVIDE          reduce using rule 15 (n_math_expression_5 -> .)
    MODULUS         reduce using rule 15 (n_math_expression_5 -> .)
    PLUS            reduce using rule 15 (n_math_expression_5 -> .)
    MINUS           reduce using rule 15 (n_math_expression_5 -> .)
    GREATERTHAN     reduce using rule 15 (n_math_expression_5 -> .)
    LESSTHAN        reduce using rule 15 (n_math_expression_5 -> .)
    EQUALEQUAL      reduce using rule 15 (n_math_expression_5 -> .)
    LESSTHANOREQUAL reduce using rule 15 (n_math_expression_5 -> .)
    GREATERTHANOREQUAL reduce using rule 15 (n_math_expression_5 -> .)
    NOTEQUAL        reduce using rule 15 (n_math_expression_5 -> .)
    OR              reduce using rule 15 (n_math_expression_5 -> .)
    AND             reduce using rule 15 (n_math_expression_5 -> .)
    RPARENTHESIS    reduce using rule 15 (n_math_expression_5 -> .)
    COMMA           reduce using rule 15 (n_math_expression_5 -> .)
    SEMICOLON       reduce using rule 15 (n_math_expression_5 -> .)
    DOUBLEDOT       reduce using rule 15 (n_math_expression_5 -> .)

    n_math_expression_5            shift and go to state 83

state 55

    (96) factor -> value .

    TIMES           reduce using rule 96 (factor -> value .)
    DIVIDE          reduce using rule 96 (factor -> value .)
    MODULUS         reduce using rule 96 (factor -> value .)
    PLUS            reduce using rule 96 (factor -> value .)
    MINUS           reduce using rule 96 (factor -> value .)
    GREATERTHAN     reduce using rule 96 (factor -> value .)
    LESSTHAN        reduce using rule 96 (factor -> value .)
    EQUALEQUAL      reduce using rule 96 (factor -> value .)
    LESSTHANOREQUAL reduce using rule 96 (factor -> value .)
    GREATERTHANOREQUAL reduce using rule 96 (factor -> value .)
    NOTEQUAL        reduce using rule 96 (factor -> value .)
    OR              reduce using rule 96 (factor -> value .)
    AND             reduce using rule 96 (factor -> value .)
    RPARENTHESIS    reduce using rule 96 (factor -> value .)
    COMMA           reduce using rule 96 (factor -> value .)
    SEMICOLON       reduce using rule 96 (factor -> value .)
    DOUBLEDOT       reduce using rule 96 (factor -> value .)


state 56

    (97) value -> function_call .

    TIMES           reduce using rule 97 (value -> function_call .)
    DIVIDE          reduce using rule 97 (value -> function_call .)
    MODULUS         reduce using rule 97 (value -> function_call .)
    PLUS            reduce using rule 97 (value -> function_call .)
    MINUS           reduce using rule 97 (value -> function_call .)
    GREATERTHAN     reduce using rule 97 (value -> function_call .)
    LESSTHAN        reduce using rule 97 (value -> function_call .)
    EQUALEQUAL      reduce using rule 97 (value -> function_call .)
    LESSTHANOREQUAL reduce using rule 97 (value -> function_call .)
    GREATERTHANOREQUAL reduce using rule 97 (value -> function_call .)
    NOTEQUAL        reduce using rule 97 (value -> function_call .)
    OR              reduce using rule 97 (value -> function_call .)
    AND             reduce using rule 97 (value -> function_call .)
    RPARENTHESIS    reduce using rule 97 (value -> function_call .)
    COMMA           reduce using rule 97 (value -> function_call .)
    SEMICOLON       reduce using rule 97 (value -> function_call .)
    DOUBLEDOT       reduce using rule 97 (value -> function_call .)


state 57

    (98) value -> literal .

    TIMES           reduce using rule 98 (value -> literal .)
    DIVIDE          reduce using rule 98 (value -> literal .)
    MODULUS         reduce using rule 98 (value -> literal .)
    PLUS            reduce using rule 98 (value -> literal .)
    MINUS           reduce using rule 98 (value -> literal .)
    GREATERTHAN     reduce using rule 98 (value -> literal .)
    LESSTHAN        reduce using rule 98 (value -> literal .)
    EQUALEQUAL      reduce using rule 98 (value -> literal .)
    LESSTHANOREQUAL reduce using rule 98 (value -> literal .)
    GREATERTHANOREQUAL reduce using rule 98 (value -> literal .)
    NOTEQUAL        reduce using rule 98 (value -> literal .)
    OR              reduce using rule 98 (value -> literal .)
    AND             reduce using rule 98 (value -> literal .)
    RPARENTHESIS    reduce using rule 98 (value -> literal .)
    COMMA           reduce using rule 98 (value -> literal .)
    SEMICOLON       reduce using rule 98 (value -> literal .)
    DOUBLEDOT       reduce using rule 98 (value -> literal .)


state 58

    (99) value -> NAME . n_variable_reference n_math_expression_1_name
    (71) function_call -> NAME . n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (72) function_call -> NAME . n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (5) n_variable_reference -> .
    (34) n_function_call_1 -> .

    TIMES           reduce using rule 5 (n_variable_reference -> .)
    DIVIDE          reduce using rule 5 (n_variable_reference -> .)
    MODULUS         reduce using rule 5 (n_variable_reference -> .)
    PLUS            reduce using rule 5 (n_variable_reference -> .)
    MINUS           reduce using rule 5 (n_variable_reference -> .)
    GREATERTHAN     reduce using rule 5 (n_variable_reference -> .)
    LESSTHAN        reduce using rule 5 (n_variable_reference -> .)
    EQUALEQUAL      reduce using rule 5 (n_variable_reference -> .)
    LESSTHANOREQUAL reduce using rule 5 (n_variable_reference -> .)
    GREATERTHANOREQUAL reduce using rule 5 (n_variable_reference -> .)
    NOTEQUAL        reduce using rule 5 (n_variable_reference -> .)
    OR              reduce using rule 5 (n_variable_reference -> .)
    AND             reduce using rule 5 (n_variable_reference -> .)
    RPARENTHESIS    reduce using rule 5 (n_variable_reference -> .)
    COMMA           reduce using rule 5 (n_variable_reference -> .)
    SEMICOLON       reduce using rule 5 (n_variable_reference -> .)
    DOUBLEDOT       reduce using rule 5 (n_variable_reference -> .)
    LPARENTHESIS    reduce using rule 34 (n_function_call_1 -> .)

    n_variable_reference           shift and go to state 84
    n_function_call_1              shift and go to state 33

state 59

    (58) literal -> FLOAT . n_math_expression_1_float
    (9) n_math_expression_1_float -> .

    TIMES           reduce using rule 9 (n_math_expression_1_float -> .)
    DIVIDE          reduce using rule 9 (n_math_expression_1_float -> .)
    MODULUS         reduce using rule 9 (n_math_expression_1_float -> .)
    PLUS            reduce using rule 9 (n_math_expression_1_float -> .)
    MINUS           reduce using rule 9 (n_math_expression_1_float -> .)
    GREATERTHAN     reduce using rule 9 (n_math_expression_1_float -> .)
    LESSTHAN        reduce using rule 9 (n_math_expression_1_float -> .)
    EQUALEQUAL      reduce using rule 9 (n_math_expression_1_float -> .)
    LESSTHANOREQUAL reduce using rule 9 (n_math_expression_1_float -> .)
    GREATERTHANOREQUAL reduce using rule 9 (n_math_expression_1_float -> .)
    NOTEQUAL        reduce using rule 9 (n_math_expression_1_float -> .)
    OR              reduce using rule 9 (n_math_expression_1_float -> .)
    AND             reduce using rule 9 (n_math_expression_1_float -> .)
    RPARENTHESIS    reduce using rule 9 (n_math_expression_1_float -> .)
    COMMA           reduce using rule 9 (n_math_expression_1_float -> .)
    SEMICOLON       reduce using rule 9 (n_math_expression_1_float -> .)
    DOUBLEDOT       reduce using rule 9 (n_math_expression_1_float -> .)

    n_math_expression_1_float      shift and go to state 85

state 60

    (59) literal -> INT . n_math_expression_1_int
    (8) n_math_expression_1_int -> .

    TIMES           reduce using rule 8 (n_math_expression_1_int -> .)
    DIVIDE          reduce using rule 8 (n_math_expression_1_int -> .)
    MODULUS         reduce using rule 8 (n_math_expression_1_int -> .)
    PLUS            reduce using rule 8 (n_math_expression_1_int -> .)
    MINUS           reduce using rule 8 (n_math_expression_1_int -> .)
    GREATERTHAN     reduce using rule 8 (n_math_expression_1_int -> .)
    LESSTHAN        reduce using rule 8 (n_math_expression_1_int -> .)
    EQUALEQUAL      reduce using rule 8 (n_math_expression_1_int -> .)
    LESSTHANOREQUAL reduce using rule 8 (n_math_expression_1_int -> .)
    GREATERTHANOREQUAL reduce using rule 8 (n_math_expression_1_int -> .)
    NOTEQUAL        reduce using rule 8 (n_math_expression_1_int -> .)
    OR              reduce using rule 8 (n_math_expression_1_int -> .)
    AND             reduce using rule 8 (n_math_expression_1_int -> .)
    RPARENTHESIS    reduce using rule 8 (n_math_expression_1_int -> .)
    COMMA           reduce using rule 8 (n_math_expression_1_int -> .)
    SEMICOLON       reduce using rule 8 (n_math_expression_1_int -> .)
    DOUBLEDOT       reduce using rule 8 (n_math_expression_1_int -> .)

    n_math_expression_1_int        shift and go to state 86

state 61

    (60) literal -> STRING . n_math_expression_1_string
    (10) n_math_expression_1_string -> .

    TIMES           reduce using rule 10 (n_math_expression_1_string -> .)
    DIVIDE          reduce using rule 10 (n_math_expression_1_string -> .)
    MODULUS         reduce using rule 10 (n_math_expression_1_string -> .)
    PLUS            reduce using rule 10 (n_math_expression_1_string -> .)
    MINUS           reduce using rule 10 (n_math_expression_1_string -> .)
    GREATERTHAN     reduce using rule 10 (n_math_expression_1_string -> .)
    LESSTHAN        reduce using rule 10 (n_math_expression_1_string -> .)
    EQUALEQUAL      reduce using rule 10 (n_math_expression_1_string -> .)
    LESSTHANOREQUAL reduce using rule 10 (n_math_expression_1_string -> .)
    GREATERTHANOREQUAL reduce using rule 10 (n_math_expression_1_string -> .)
    NOTEQUAL        reduce using rule 10 (n_math_expression_1_string -> .)
    OR              reduce using rule 10 (n_math_expression_1_string -> .)
    AND             reduce using rule 10 (n_math_expression_1_string -> .)
    RPARENTHESIS    reduce using rule 10 (n_math_expression_1_string -> .)
    COMMA           reduce using rule 10 (n_math_expression_1_string -> .)
    SEMICOLON       reduce using rule 10 (n_math_expression_1_string -> .)
    DOUBLEDOT       reduce using rule 10 (n_math_expression_1_string -> .)

    n_math_expression_1_string     shift and go to state 87

state 62

    (114) forloop -> FOR LPARENTHESIS n_open_new_scope . assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (100) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (101) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (47) type -> . INT_TYPE n_seen_type
    (48) type -> . STRING_TYPE n_seen_type
    (49) type -> . DOUBLE_TYPE n_seen_type
    (50) type -> . FLOAT_TYPE n_seen_type
    (51) type -> . BOOL_TYPE n_seen_type

    NAME            shift and go to state 89
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    assign                         shift and go to state 88
    type                           shift and go to state 22

state 63

    (113) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS . expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (80) expression -> . expression_or
    (81) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (82) expression_or -> . expression_rel
    (83) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (84) expression_rel -> . exp
    (85) expression_rel -> . exp relational_operator exp n_math_expression_9
    (86) exp -> . termino n_math_expression_4
    (87) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (88) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (89) termino -> . factor n_math_expression_5
    (90) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (91) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (92) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (93) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (94) factor -> . PLUS value
    (95) factor -> . MINUS value
    (96) factor -> . value
    (97) value -> . function_call
    (98) value -> . literal
    (99) value -> . NAME n_variable_reference n_math_expression_1_name
    (71) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (72) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (58) literal -> . FLOAT n_math_expression_1_float
    (59) literal -> . INT n_math_expression_1_int
    (60) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 46
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    NAME            shift and go to state 58
    FLOAT           shift and go to state 59
    INT             shift and go to state 60
    STRING          shift and go to state 61

    expression                     shift and go to state 90
    expression_or                  shift and go to state 48
    expression_rel                 shift and go to state 49
    exp                            shift and go to state 50
    termino                        shift and go to state 51
    factor                         shift and go to state 54
    value                          shift and go to state 55
    function_call                  shift and go to state 56
    literal                        shift and go to state 57

state 64

    (100) assign -> type NAME n_variable_instantiate . n_math_expression_1_name EQUAL n_seen_equal_op expression
    (11) n_math_expression_1_name -> .

    EQUAL           reduce using rule 11 (n_math_expression_1_name -> .)

    n_math_expression_1_name       shift and go to state 91

state 65

    (67) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function . parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end
    (75) parameter_list -> . empty
    (76) parameter_list -> . parameter
    (77) parameter_list -> . parameter COMMA parameter_list
    (43) empty -> .
    (79) parameter -> . type NAME n_variable_instantiate_param
    (47) type -> . INT_TYPE n_seen_type
    (48) type -> . STRING_TYPE n_seen_type
    (49) type -> . DOUBLE_TYPE n_seen_type
    (50) type -> . FLOAT_TYPE n_seen_type
    (51) type -> . BOOL_TYPE n_seen_type

    DOUBLEDOT       reduce using rule 43 (empty -> .)
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    parameter_list                 shift and go to state 92
    empty                          shift and go to state 93
    parameter                      shift and go to state 94
    type                           shift and go to state 95

state 66

    (101) assign -> NAME n_variable_reference n_math_expression_1_name EQUAL . n_seen_equal_op expression
    (29) n_seen_equal_op -> .

    LPARENTHESIS    reduce using rule 29 (n_seen_equal_op -> .)
    PLUS            reduce using rule 29 (n_seen_equal_op -> .)
    MINUS           reduce using rule 29 (n_seen_equal_op -> .)
    NAME            reduce using rule 29 (n_seen_equal_op -> .)
    FLOAT           reduce using rule 29 (n_seen_equal_op -> .)
    INT             reduce using rule 29 (n_seen_equal_op -> .)
    STRING          reduce using rule 29 (n_seen_equal_op -> .)

    n_seen_equal_op                shift and go to state 96

state 67

    (71) function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 . arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (73) arg_list -> . arg
    (74) arg_list -> . arg COMMA n_function_call_4 arg_list
    (78) arg -> . expression n_function_call_3
    (80) expression -> . expression_or
    (81) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (82) expression_or -> . expression_rel
    (83) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (84) expression_rel -> . exp
    (85) expression_rel -> . exp relational_operator exp n_math_expression_9
    (86) exp -> . termino n_math_expression_4
    (87) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (88) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (89) termino -> . factor n_math_expression_5
    (90) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (91) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (92) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (93) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (94) factor -> . PLUS value
    (95) factor -> . MINUS value
    (96) factor -> . value
    (97) value -> . function_call
    (98) value -> . literal
    (99) value -> . NAME n_variable_reference n_math_expression_1_name
    (71) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (72) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (58) literal -> . FLOAT n_math_expression_1_float
    (59) literal -> . INT n_math_expression_1_int
    (60) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 46
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    NAME            shift and go to state 58
    FLOAT           shift and go to state 59
    INT             shift and go to state 60
    STRING          shift and go to state 61

    arg_list                       shift and go to state 97
    arg                            shift and go to state 98
    expression                     shift and go to state 99
    expression_or                  shift and go to state 48
    expression_rel                 shift and go to state 49
    exp                            shift and go to state 50
    termino                        shift and go to state 51
    factor                         shift and go to state 54
    value                          shift and go to state 55
    function_call                  shift and go to state 56
    literal                        shift and go to state 57

state 68

    (72) function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS . n_function_call_6
    (39) n_function_call_6 -> .

    SEMICOLON       reduce using rule 39 (n_function_call_6 -> .)
    TIMES           reduce using rule 39 (n_function_call_6 -> .)
    DIVIDE          reduce using rule 39 (n_function_call_6 -> .)
    MODULUS         reduce using rule 39 (n_function_call_6 -> .)
    PLUS            reduce using rule 39 (n_function_call_6 -> .)
    MINUS           reduce using rule 39 (n_function_call_6 -> .)
    GREATERTHAN     reduce using rule 39 (n_function_call_6 -> .)
    LESSTHAN        reduce using rule 39 (n_function_call_6 -> .)
    EQUALEQUAL      reduce using rule 39 (n_function_call_6 -> .)
    LESSTHANOREQUAL reduce using rule 39 (n_function_call_6 -> .)
    GREATERTHANOREQUAL reduce using rule 39 (n_function_call_6 -> .)
    NOTEQUAL        reduce using rule 39 (n_function_call_6 -> .)
    OR              reduce using rule 39 (n_function_call_6 -> .)
    AND             reduce using rule 39 (n_function_call_6 -> .)
    RPARENTHESIS    reduce using rule 39 (n_function_call_6 -> .)
    COMMA           reduce using rule 39 (n_function_call_6 -> .)
    DOUBLEDOT       reduce using rule 39 (n_function_call_6 -> .)

    n_function_call_6              shift and go to state 100

state 69

    (93) factor -> LPARENTHESIS n_math_expression_6 . expression RPARENTHESIS n_math_expression_7
    (80) expression -> . expression_or
    (81) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (82) expression_or -> . expression_rel
    (83) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (84) expression_rel -> . exp
    (85) expression_rel -> . exp relational_operator exp n_math_expression_9
    (86) exp -> . termino n_math_expression_4
    (87) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (88) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (89) termino -> . factor n_math_expression_5
    (90) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (91) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (92) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (93) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (94) factor -> . PLUS value
    (95) factor -> . MINUS value
    (96) factor -> . value
    (97) value -> . function_call
    (98) value -> . literal
    (99) value -> . NAME n_variable_reference n_math_expression_1_name
    (71) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (72) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (58) literal -> . FLOAT n_math_expression_1_float
    (59) literal -> . INT n_math_expression_1_int
    (60) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 46
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    NAME            shift and go to state 58
    FLOAT           shift and go to state 59
    INT             shift and go to state 60
    STRING          shift and go to state 61

    expression                     shift and go to state 101
    expression_or                  shift and go to state 48
    expression_rel                 shift and go to state 49
    exp                            shift and go to state 50
    termino                        shift and go to state 51
    factor                         shift and go to state 54
    value                          shift and go to state 55
    function_call                  shift and go to state 56
    literal                        shift and go to state 57

state 70

    (115) condition_if -> IF LPARENTHESIS expression RPARENTHESIS . LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2

    LCURLY          shift and go to state 102


state 71

    (81) expression -> expression_or AND . n_math_expression_10 expression n_math_expression_11
    (20) n_math_expression_10 -> .

    LPARENTHESIS    reduce using rule 20 (n_math_expression_10 -> .)
    PLUS            reduce using rule 20 (n_math_expression_10 -> .)
    MINUS           reduce using rule 20 (n_math_expression_10 -> .)
    NAME            reduce using rule 20 (n_math_expression_10 -> .)
    FLOAT           reduce using rule 20 (n_math_expression_10 -> .)
    INT             reduce using rule 20 (n_math_expression_10 -> .)
    STRING          reduce using rule 20 (n_math_expression_10 -> .)

    n_math_expression_10           shift and go to state 103

state 72

    (83) expression_or -> expression_rel OR . n_math_expression_10 expression_or n_math_expression_12
    (20) n_math_expression_10 -> .

    LPARENTHESIS    reduce using rule 20 (n_math_expression_10 -> .)
    PLUS            reduce using rule 20 (n_math_expression_10 -> .)
    MINUS           reduce using rule 20 (n_math_expression_10 -> .)
    NAME            reduce using rule 20 (n_math_expression_10 -> .)
    FLOAT           reduce using rule 20 (n_math_expression_10 -> .)
    INT             reduce using rule 20 (n_math_expression_10 -> .)
    STRING          reduce using rule 20 (n_math_expression_10 -> .)

    n_math_expression_10           shift and go to state 104

state 73

    (85) expression_rel -> exp relational_operator . exp n_math_expression_9
    (86) exp -> . termino n_math_expression_4
    (87) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (88) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (89) termino -> . factor n_math_expression_5
    (90) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (91) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (92) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (93) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (94) factor -> . PLUS value
    (95) factor -> . MINUS value
    (96) factor -> . value
    (97) value -> . function_call
    (98) value -> . literal
    (99) value -> . NAME n_variable_reference n_math_expression_1_name
    (71) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (72) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (58) literal -> . FLOAT n_math_expression_1_float
    (59) literal -> . INT n_math_expression_1_int
    (60) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 46
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    NAME            shift and go to state 58
    FLOAT           shift and go to state 59
    INT             shift and go to state 60
    STRING          shift and go to state 61

    exp                            shift and go to state 105
    termino                        shift and go to state 51
    factor                         shift and go to state 54
    value                          shift and go to state 55
    function_call                  shift and go to state 56
    literal                        shift and go to state 57

state 74

    (52) relational_operator -> GREATERTHAN . n_math_expression_8
    (18) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 18 (n_math_expression_8 -> .)
    PLUS            reduce using rule 18 (n_math_expression_8 -> .)
    MINUS           reduce using rule 18 (n_math_expression_8 -> .)
    NAME            reduce using rule 18 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 18 (n_math_expression_8 -> .)
    INT             reduce using rule 18 (n_math_expression_8 -> .)
    STRING          reduce using rule 18 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 106

state 75

    (53) relational_operator -> LESSTHAN . n_math_expression_8
    (18) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 18 (n_math_expression_8 -> .)
    PLUS            reduce using rule 18 (n_math_expression_8 -> .)
    MINUS           reduce using rule 18 (n_math_expression_8 -> .)
    NAME            reduce using rule 18 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 18 (n_math_expression_8 -> .)
    INT             reduce using rule 18 (n_math_expression_8 -> .)
    STRING          reduce using rule 18 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 107

state 76

    (54) relational_operator -> EQUALEQUAL . n_math_expression_8
    (18) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 18 (n_math_expression_8 -> .)
    PLUS            reduce using rule 18 (n_math_expression_8 -> .)
    MINUS           reduce using rule 18 (n_math_expression_8 -> .)
    NAME            reduce using rule 18 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 18 (n_math_expression_8 -> .)
    INT             reduce using rule 18 (n_math_expression_8 -> .)
    STRING          reduce using rule 18 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 108

state 77

    (55) relational_operator -> LESSTHANOREQUAL . n_math_expression_8
    (18) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 18 (n_math_expression_8 -> .)
    PLUS            reduce using rule 18 (n_math_expression_8 -> .)
    MINUS           reduce using rule 18 (n_math_expression_8 -> .)
    NAME            reduce using rule 18 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 18 (n_math_expression_8 -> .)
    INT             reduce using rule 18 (n_math_expression_8 -> .)
    STRING          reduce using rule 18 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 109

state 78

    (56) relational_operator -> GREATERTHANOREQUAL . n_math_expression_8
    (18) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 18 (n_math_expression_8 -> .)
    PLUS            reduce using rule 18 (n_math_expression_8 -> .)
    MINUS           reduce using rule 18 (n_math_expression_8 -> .)
    NAME            reduce using rule 18 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 18 (n_math_expression_8 -> .)
    INT             reduce using rule 18 (n_math_expression_8 -> .)
    STRING          reduce using rule 18 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 110

state 79

    (57) relational_operator -> NOTEQUAL . n_math_expression_8
    (18) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 18 (n_math_expression_8 -> .)
    PLUS            reduce using rule 18 (n_math_expression_8 -> .)
    MINUS           reduce using rule 18 (n_math_expression_8 -> .)
    NAME            reduce using rule 18 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 18 (n_math_expression_8 -> .)
    INT             reduce using rule 18 (n_math_expression_8 -> .)
    STRING          reduce using rule 18 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 111

state 80

    (86) exp -> termino n_math_expression_4 .
    (87) exp -> termino n_math_expression_4 . PLUS n_math_expression_2 exp
    (88) exp -> termino n_math_expression_4 . MINUS n_math_expression_2 exp

    GREATERTHAN     reduce using rule 86 (exp -> termino n_math_expression_4 .)
    LESSTHAN        reduce using rule 86 (exp -> termino n_math_expression_4 .)
    EQUALEQUAL      reduce using rule 86 (exp -> termino n_math_expression_4 .)
    LESSTHANOREQUAL reduce using rule 86 (exp -> termino n_math_expression_4 .)
    GREATERTHANOREQUAL reduce using rule 86 (exp -> termino n_math_expression_4 .)
    NOTEQUAL        reduce using rule 86 (exp -> termino n_math_expression_4 .)
    OR              reduce using rule 86 (exp -> termino n_math_expression_4 .)
    AND             reduce using rule 86 (exp -> termino n_math_expression_4 .)
    RPARENTHESIS    reduce using rule 86 (exp -> termino n_math_expression_4 .)
    COMMA           reduce using rule 86 (exp -> termino n_math_expression_4 .)
    SEMICOLON       reduce using rule 86 (exp -> termino n_math_expression_4 .)
    DOUBLEDOT       reduce using rule 86 (exp -> termino n_math_expression_4 .)
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113


state 81

    (94) factor -> PLUS value .

    TIMES           reduce using rule 94 (factor -> PLUS value .)
    DIVIDE          reduce using rule 94 (factor -> PLUS value .)
    MODULUS         reduce using rule 94 (factor -> PLUS value .)
    PLUS            reduce using rule 94 (factor -> PLUS value .)
    MINUS           reduce using rule 94 (factor -> PLUS value .)
    GREATERTHAN     reduce using rule 94 (factor -> PLUS value .)
    LESSTHAN        reduce using rule 94 (factor -> PLUS value .)
    EQUALEQUAL      reduce using rule 94 (factor -> PLUS value .)
    LESSTHANOREQUAL reduce using rule 94 (factor -> PLUS value .)
    GREATERTHANOREQUAL reduce using rule 94 (factor -> PLUS value .)
    NOTEQUAL        reduce using rule 94 (factor -> PLUS value .)
    OR              reduce using rule 94 (factor -> PLUS value .)
    AND             reduce using rule 94 (factor -> PLUS value .)
    RPARENTHESIS    reduce using rule 94 (factor -> PLUS value .)
    COMMA           reduce using rule 94 (factor -> PLUS value .)
    SEMICOLON       reduce using rule 94 (factor -> PLUS value .)
    DOUBLEDOT       reduce using rule 94 (factor -> PLUS value .)


state 82

    (95) factor -> MINUS value .

    TIMES           reduce using rule 95 (factor -> MINUS value .)
    DIVIDE          reduce using rule 95 (factor -> MINUS value .)
    MODULUS         reduce using rule 95 (factor -> MINUS value .)
    PLUS            reduce using rule 95 (factor -> MINUS value .)
    MINUS           reduce using rule 95 (factor -> MINUS value .)
    GREATERTHAN     reduce using rule 95 (factor -> MINUS value .)
    LESSTHAN        reduce using rule 95 (factor -> MINUS value .)
    EQUALEQUAL      reduce using rule 95 (factor -> MINUS value .)
    LESSTHANOREQUAL reduce using rule 95 (factor -> MINUS value .)
    GREATERTHANOREQUAL reduce using rule 95 (factor -> MINUS value .)
    NOTEQUAL        reduce using rule 95 (factor -> MINUS value .)
    OR              reduce using rule 95 (factor -> MINUS value .)
    AND             reduce using rule 95 (factor -> MINUS value .)
    RPARENTHESIS    reduce using rule 95 (factor -> MINUS value .)
    COMMA           reduce using rule 95 (factor -> MINUS value .)
    SEMICOLON       reduce using rule 95 (factor -> MINUS value .)
    DOUBLEDOT       reduce using rule 95 (factor -> MINUS value .)


state 83

    (89) termino -> factor n_math_expression_5 .
    (90) termino -> factor n_math_expression_5 . TIMES n_math_expression_3 termino
    (91) termino -> factor n_math_expression_5 . DIVIDE n_math_expression_3 termino
    (92) termino -> factor n_math_expression_5 . MODULUS n_math_expression_3 termino

    PLUS            reduce using rule 89 (termino -> factor n_math_expression_5 .)
    MINUS           reduce using rule 89 (termino -> factor n_math_expression_5 .)
    GREATERTHAN     reduce using rule 89 (termino -> factor n_math_expression_5 .)
    LESSTHAN        reduce using rule 89 (termino -> factor n_math_expression_5 .)
    EQUALEQUAL      reduce using rule 89 (termino -> factor n_math_expression_5 .)
    LESSTHANOREQUAL reduce using rule 89 (termino -> factor n_math_expression_5 .)
    GREATERTHANOREQUAL reduce using rule 89 (termino -> factor n_math_expression_5 .)
    NOTEQUAL        reduce using rule 89 (termino -> factor n_math_expression_5 .)
    OR              reduce using rule 89 (termino -> factor n_math_expression_5 .)
    AND             reduce using rule 89 (termino -> factor n_math_expression_5 .)
    RPARENTHESIS    reduce using rule 89 (termino -> factor n_math_expression_5 .)
    COMMA           reduce using rule 89 (termino -> factor n_math_expression_5 .)
    SEMICOLON       reduce using rule 89 (termino -> factor n_math_expression_5 .)
    DOUBLEDOT       reduce using rule 89 (termino -> factor n_math_expression_5 .)
    TIMES           shift and go to state 114
    DIVIDE          shift and go to state 115
    MODULUS         shift and go to state 116


state 84

    (99) value -> NAME n_variable_reference . n_math_expression_1_name
    (11) n_math_expression_1_name -> .

    TIMES           reduce using rule 11 (n_math_expression_1_name -> .)
    DIVIDE          reduce using rule 11 (n_math_expression_1_name -> .)
    MODULUS         reduce using rule 11 (n_math_expression_1_name -> .)
    PLUS            reduce using rule 11 (n_math_expression_1_name -> .)
    MINUS           reduce using rule 11 (n_math_expression_1_name -> .)
    GREATERTHAN     reduce using rule 11 (n_math_expression_1_name -> .)
    LESSTHAN        reduce using rule 11 (n_math_expression_1_name -> .)
    EQUALEQUAL      reduce using rule 11 (n_math_expression_1_name -> .)
    LESSTHANOREQUAL reduce using rule 11 (n_math_expression_1_name -> .)
    GREATERTHANOREQUAL reduce using rule 11 (n_math_expression_1_name -> .)
    NOTEQUAL        reduce using rule 11 (n_math_expression_1_name -> .)
    OR              reduce using rule 11 (n_math_expression_1_name -> .)
    AND             reduce using rule 11 (n_math_expression_1_name -> .)
    RPARENTHESIS    reduce using rule 11 (n_math_expression_1_name -> .)
    COMMA           reduce using rule 11 (n_math_expression_1_name -> .)
    SEMICOLON       reduce using rule 11 (n_math_expression_1_name -> .)
    DOUBLEDOT       reduce using rule 11 (n_math_expression_1_name -> .)

    n_math_expression_1_name       shift and go to state 117

state 85

    (58) literal -> FLOAT n_math_expression_1_float .

    TIMES           reduce using rule 58 (literal -> FLOAT n_math_expression_1_float .)
    DIVIDE          reduce using rule 58 (literal -> FLOAT n_math_expression_1_float .)
    MODULUS         reduce using rule 58 (literal -> FLOAT n_math_expression_1_float .)
    PLUS            reduce using rule 58 (literal -> FLOAT n_math_expression_1_float .)
    MINUS           reduce using rule 58 (literal -> FLOAT n_math_expression_1_float .)
    GREATERTHAN     reduce using rule 58 (literal -> FLOAT n_math_expression_1_float .)
    LESSTHAN        reduce using rule 58 (literal -> FLOAT n_math_expression_1_float .)
    EQUALEQUAL      reduce using rule 58 (literal -> FLOAT n_math_expression_1_float .)
    LESSTHANOREQUAL reduce using rule 58 (literal -> FLOAT n_math_expression_1_float .)
    GREATERTHANOREQUAL reduce using rule 58 (literal -> FLOAT n_math_expression_1_float .)
    NOTEQUAL        reduce using rule 58 (literal -> FLOAT n_math_expression_1_float .)
    OR              reduce using rule 58 (literal -> FLOAT n_math_expression_1_float .)
    AND             reduce using rule 58 (literal -> FLOAT n_math_expression_1_float .)
    RPARENTHESIS    reduce using rule 58 (literal -> FLOAT n_math_expression_1_float .)
    COMMA           reduce using rule 58 (literal -> FLOAT n_math_expression_1_float .)
    SEMICOLON       reduce using rule 58 (literal -> FLOAT n_math_expression_1_float .)
    DOUBLEDOT       reduce using rule 58 (literal -> FLOAT n_math_expression_1_float .)


state 86

    (59) literal -> INT n_math_expression_1_int .

    TIMES           reduce using rule 59 (literal -> INT n_math_expression_1_int .)
    DIVIDE          reduce using rule 59 (literal -> INT n_math_expression_1_int .)
    MODULUS         reduce using rule 59 (literal -> INT n_math_expression_1_int .)
    PLUS            reduce using rule 59 (literal -> INT n_math_expression_1_int .)
    MINUS           reduce using rule 59 (literal -> INT n_math_expression_1_int .)
    GREATERTHAN     reduce using rule 59 (literal -> INT n_math_expression_1_int .)
    LESSTHAN        reduce using rule 59 (literal -> INT n_math_expression_1_int .)
    EQUALEQUAL      reduce using rule 59 (literal -> INT n_math_expression_1_int .)
    LESSTHANOREQUAL reduce using rule 59 (literal -> INT n_math_expression_1_int .)
    GREATERTHANOREQUAL reduce using rule 59 (literal -> INT n_math_expression_1_int .)
    NOTEQUAL        reduce using rule 59 (literal -> INT n_math_expression_1_int .)
    OR              reduce using rule 59 (literal -> INT n_math_expression_1_int .)
    AND             reduce using rule 59 (literal -> INT n_math_expression_1_int .)
    RPARENTHESIS    reduce using rule 59 (literal -> INT n_math_expression_1_int .)
    COMMA           reduce using rule 59 (literal -> INT n_math_expression_1_int .)
    SEMICOLON       reduce using rule 59 (literal -> INT n_math_expression_1_int .)
    DOUBLEDOT       reduce using rule 59 (literal -> INT n_math_expression_1_int .)


state 87

    (60) literal -> STRING n_math_expression_1_string .

    TIMES           reduce using rule 60 (literal -> STRING n_math_expression_1_string .)
    DIVIDE          reduce using rule 60 (literal -> STRING n_math_expression_1_string .)
    MODULUS         reduce using rule 60 (literal -> STRING n_math_expression_1_string .)
    PLUS            reduce using rule 60 (literal -> STRING n_math_expression_1_string .)
    MINUS           reduce using rule 60 (literal -> STRING n_math_expression_1_string .)
    GREATERTHAN     reduce using rule 60 (literal -> STRING n_math_expression_1_string .)
    LESSTHAN        reduce using rule 60 (literal -> STRING n_math_expression_1_string .)
    EQUALEQUAL      reduce using rule 60 (literal -> STRING n_math_expression_1_string .)
    LESSTHANOREQUAL reduce using rule 60 (literal -> STRING n_math_expression_1_string .)
    GREATERTHANOREQUAL reduce using rule 60 (literal -> STRING n_math_expression_1_string .)
    NOTEQUAL        reduce using rule 60 (literal -> STRING n_math_expression_1_string .)
    OR              reduce using rule 60 (literal -> STRING n_math_expression_1_string .)
    AND             reduce using rule 60 (literal -> STRING n_math_expression_1_string .)
    RPARENTHESIS    reduce using rule 60 (literal -> STRING n_math_expression_1_string .)
    COMMA           reduce using rule 60 (literal -> STRING n_math_expression_1_string .)
    SEMICOLON       reduce using rule 60 (literal -> STRING n_math_expression_1_string .)
    DOUBLEDOT       reduce using rule 60 (literal -> STRING n_math_expression_1_string .)


state 88

    (114) forloop -> FOR LPARENTHESIS n_open_new_scope assign . DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope

    DOUBLEDOT       shift and go to state 118


state 89

    (101) assign -> NAME . n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (5) n_variable_reference -> .

    EQUAL           reduce using rule 5 (n_variable_reference -> .)

    n_variable_reference           shift and go to state 32

state 90

    (113) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression . RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope

    RPARENTHESIS    shift and go to state 119


state 91

    (100) assign -> type NAME n_variable_instantiate n_math_expression_1_name . EQUAL n_seen_equal_op expression

    EQUAL           shift and go to state 120


state 92

    (67) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list . DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end

    DOUBLEDOT       shift and go to state 121


state 93

    (75) parameter_list -> empty .

    DOUBLEDOT       reduce using rule 75 (parameter_list -> empty .)


state 94

    (76) parameter_list -> parameter .
    (77) parameter_list -> parameter . COMMA parameter_list

    DOUBLEDOT       reduce using rule 76 (parameter_list -> parameter .)
    COMMA           shift and go to state 122


state 95

    (79) parameter -> type . NAME n_variable_instantiate_param

    NAME            shift and go to state 123


state 96

    (101) assign -> NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op . expression
    (80) expression -> . expression_or
    (81) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (82) expression_or -> . expression_rel
    (83) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (84) expression_rel -> . exp
    (85) expression_rel -> . exp relational_operator exp n_math_expression_9
    (86) exp -> . termino n_math_expression_4
    (87) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (88) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (89) termino -> . factor n_math_expression_5
    (90) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (91) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (92) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (93) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (94) factor -> . PLUS value
    (95) factor -> . MINUS value
    (96) factor -> . value
    (97) value -> . function_call
    (98) value -> . literal
    (99) value -> . NAME n_variable_reference n_math_expression_1_name
    (71) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (72) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (58) literal -> . FLOAT n_math_expression_1_float
    (59) literal -> . INT n_math_expression_1_int
    (60) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 46
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    NAME            shift and go to state 58
    FLOAT           shift and go to state 59
    INT             shift and go to state 60
    STRING          shift and go to state 61

    expression                     shift and go to state 124
    expression_or                  shift and go to state 48
    expression_rel                 shift and go to state 49
    exp                            shift and go to state 50
    termino                        shift and go to state 51
    factor                         shift and go to state 54
    value                          shift and go to state 55
    function_call                  shift and go to state 56
    literal                        shift and go to state 57

state 97

    (71) function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list . RPARENTHESIS n_function_call_5 n_function_call_6

    RPARENTHESIS    shift and go to state 125


state 98

    (73) arg_list -> arg .
    (74) arg_list -> arg . COMMA n_function_call_4 arg_list

    RPARENTHESIS    reduce using rule 73 (arg_list -> arg .)
    COMMA           shift and go to state 126


state 99

    (78) arg -> expression . n_function_call_3
    (36) n_function_call_3 -> .

    COMMA           reduce using rule 36 (n_function_call_3 -> .)
    RPARENTHESIS    reduce using rule 36 (n_function_call_3 -> .)

    n_function_call_3              shift and go to state 127

state 100

    (72) function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .

    SEMICOLON       reduce using rule 72 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    TIMES           reduce using rule 72 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    DIVIDE          reduce using rule 72 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    MODULUS         reduce using rule 72 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    PLUS            reduce using rule 72 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    MINUS           reduce using rule 72 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    GREATERTHAN     reduce using rule 72 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    LESSTHAN        reduce using rule 72 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    EQUALEQUAL      reduce using rule 72 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    LESSTHANOREQUAL reduce using rule 72 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    GREATERTHANOREQUAL reduce using rule 72 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    NOTEQUAL        reduce using rule 72 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    OR              reduce using rule 72 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    AND             reduce using rule 72 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    RPARENTHESIS    reduce using rule 72 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    COMMA           reduce using rule 72 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    DOUBLEDOT       reduce using rule 72 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)


state 101

    (93) factor -> LPARENTHESIS n_math_expression_6 expression . RPARENTHESIS n_math_expression_7

    RPARENTHESIS    shift and go to state 128


state 102

    (115) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY . n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (23) n_two_way_conditional_1 -> .

    IF              reduce using rule 23 (n_two_way_conditional_1 -> .)
    FOR             reduce using rule 23 (n_two_way_conditional_1 -> .)
    WHILE           reduce using rule 23 (n_two_way_conditional_1 -> .)
    NAME            reduce using rule 23 (n_two_way_conditional_1 -> .)
    INT_TYPE        reduce using rule 23 (n_two_way_conditional_1 -> .)
    STRING_TYPE     reduce using rule 23 (n_two_way_conditional_1 -> .)
    DOUBLE_TYPE     reduce using rule 23 (n_two_way_conditional_1 -> .)
    FLOAT_TYPE      reduce using rule 23 (n_two_way_conditional_1 -> .)
    BOOL_TYPE       reduce using rule 23 (n_two_way_conditional_1 -> .)
    RCURLY          reduce using rule 23 (n_two_way_conditional_1 -> .)
    FUNCTION        reduce using rule 23 (n_two_way_conditional_1 -> .)

    n_two_way_conditional_1        shift and go to state 129

state 103

    (81) expression -> expression_or AND n_math_expression_10 . expression n_math_expression_11
    (80) expression -> . expression_or
    (81) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (82) expression_or -> . expression_rel
    (83) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (84) expression_rel -> . exp
    (85) expression_rel -> . exp relational_operator exp n_math_expression_9
    (86) exp -> . termino n_math_expression_4
    (87) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (88) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (89) termino -> . factor n_math_expression_5
    (90) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (91) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (92) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (93) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (94) factor -> . PLUS value
    (95) factor -> . MINUS value
    (96) factor -> . value
    (97) value -> . function_call
    (98) value -> . literal
    (99) value -> . NAME n_variable_reference n_math_expression_1_name
    (71) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (72) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (58) literal -> . FLOAT n_math_expression_1_float
    (59) literal -> . INT n_math_expression_1_int
    (60) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 46
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    NAME            shift and go to state 58
    FLOAT           shift and go to state 59
    INT             shift and go to state 60
    STRING          shift and go to state 61

    expression_or                  shift and go to state 48
    expression                     shift and go to state 130
    expression_rel                 shift and go to state 49
    exp                            shift and go to state 50
    termino                        shift and go to state 51
    factor                         shift and go to state 54
    value                          shift and go to state 55
    function_call                  shift and go to state 56
    literal                        shift and go to state 57

state 104

    (83) expression_or -> expression_rel OR n_math_expression_10 . expression_or n_math_expression_12
    (82) expression_or -> . expression_rel
    (83) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (84) expression_rel -> . exp
    (85) expression_rel -> . exp relational_operator exp n_math_expression_9
    (86) exp -> . termino n_math_expression_4
    (87) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (88) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (89) termino -> . factor n_math_expression_5
    (90) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (91) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (92) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (93) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (94) factor -> . PLUS value
    (95) factor -> . MINUS value
    (96) factor -> . value
    (97) value -> . function_call
    (98) value -> . literal
    (99) value -> . NAME n_variable_reference n_math_expression_1_name
    (71) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (72) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (58) literal -> . FLOAT n_math_expression_1_float
    (59) literal -> . INT n_math_expression_1_int
    (60) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 46
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    NAME            shift and go to state 58
    FLOAT           shift and go to state 59
    INT             shift and go to state 60
    STRING          shift and go to state 61

    expression_rel                 shift and go to state 49
    expression_or                  shift and go to state 131
    exp                            shift and go to state 50
    termino                        shift and go to state 51
    factor                         shift and go to state 54
    value                          shift and go to state 55
    function_call                  shift and go to state 56
    literal                        shift and go to state 57

state 105

    (85) expression_rel -> exp relational_operator exp . n_math_expression_9
    (19) n_math_expression_9 -> .

    OR              reduce using rule 19 (n_math_expression_9 -> .)
    AND             reduce using rule 19 (n_math_expression_9 -> .)
    RPARENTHESIS    reduce using rule 19 (n_math_expression_9 -> .)
    COMMA           reduce using rule 19 (n_math_expression_9 -> .)
    SEMICOLON       reduce using rule 19 (n_math_expression_9 -> .)
    DOUBLEDOT       reduce using rule 19 (n_math_expression_9 -> .)

    n_math_expression_9            shift and go to state 132

state 106

    (52) relational_operator -> GREATERTHAN n_math_expression_8 .

    LPARENTHESIS    reduce using rule 52 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    PLUS            reduce using rule 52 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    MINUS           reduce using rule 52 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    NAME            reduce using rule 52 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    FLOAT           reduce using rule 52 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    INT             reduce using rule 52 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    STRING          reduce using rule 52 (relational_operator -> GREATERTHAN n_math_expression_8 .)


state 107

    (53) relational_operator -> LESSTHAN n_math_expression_8 .

    LPARENTHESIS    reduce using rule 53 (relational_operator -> LESSTHAN n_math_expression_8 .)
    PLUS            reduce using rule 53 (relational_operator -> LESSTHAN n_math_expression_8 .)
    MINUS           reduce using rule 53 (relational_operator -> LESSTHAN n_math_expression_8 .)
    NAME            reduce using rule 53 (relational_operator -> LESSTHAN n_math_expression_8 .)
    FLOAT           reduce using rule 53 (relational_operator -> LESSTHAN n_math_expression_8 .)
    INT             reduce using rule 53 (relational_operator -> LESSTHAN n_math_expression_8 .)
    STRING          reduce using rule 53 (relational_operator -> LESSTHAN n_math_expression_8 .)


state 108

    (54) relational_operator -> EQUALEQUAL n_math_expression_8 .

    LPARENTHESIS    reduce using rule 54 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    PLUS            reduce using rule 54 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    MINUS           reduce using rule 54 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    NAME            reduce using rule 54 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    FLOAT           reduce using rule 54 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    INT             reduce using rule 54 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    STRING          reduce using rule 54 (relational_operator -> EQUALEQUAL n_math_expression_8 .)


state 109

    (55) relational_operator -> LESSTHANOREQUAL n_math_expression_8 .

    LPARENTHESIS    reduce using rule 55 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    PLUS            reduce using rule 55 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    MINUS           reduce using rule 55 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    NAME            reduce using rule 55 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    FLOAT           reduce using rule 55 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    INT             reduce using rule 55 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    STRING          reduce using rule 55 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)


state 110

    (56) relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .

    LPARENTHESIS    reduce using rule 56 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    PLUS            reduce using rule 56 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    MINUS           reduce using rule 56 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    NAME            reduce using rule 56 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    FLOAT           reduce using rule 56 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    INT             reduce using rule 56 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    STRING          reduce using rule 56 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)


state 111

    (57) relational_operator -> NOTEQUAL n_math_expression_8 .

    LPARENTHESIS    reduce using rule 57 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    PLUS            reduce using rule 57 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    MINUS           reduce using rule 57 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    NAME            reduce using rule 57 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    FLOAT           reduce using rule 57 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    INT             reduce using rule 57 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    STRING          reduce using rule 57 (relational_operator -> NOTEQUAL n_math_expression_8 .)


state 112

    (87) exp -> termino n_math_expression_4 PLUS . n_math_expression_2 exp
    (12) n_math_expression_2 -> .

    LPARENTHESIS    reduce using rule 12 (n_math_expression_2 -> .)
    PLUS            reduce using rule 12 (n_math_expression_2 -> .)
    MINUS           reduce using rule 12 (n_math_expression_2 -> .)
    NAME            reduce using rule 12 (n_math_expression_2 -> .)
    FLOAT           reduce using rule 12 (n_math_expression_2 -> .)
    INT             reduce using rule 12 (n_math_expression_2 -> .)
    STRING          reduce using rule 12 (n_math_expression_2 -> .)

    n_math_expression_2            shift and go to state 133

state 113

    (88) exp -> termino n_math_expression_4 MINUS . n_math_expression_2 exp
    (12) n_math_expression_2 -> .

    LPARENTHESIS    reduce using rule 12 (n_math_expression_2 -> .)
    PLUS            reduce using rule 12 (n_math_expression_2 -> .)
    MINUS           reduce using rule 12 (n_math_expression_2 -> .)
    NAME            reduce using rule 12 (n_math_expression_2 -> .)
    FLOAT           reduce using rule 12 (n_math_expression_2 -> .)
    INT             reduce using rule 12 (n_math_expression_2 -> .)
    STRING          reduce using rule 12 (n_math_expression_2 -> .)

    n_math_expression_2            shift and go to state 134

state 114

    (90) termino -> factor n_math_expression_5 TIMES . n_math_expression_3 termino
    (13) n_math_expression_3 -> .

    LPARENTHESIS    reduce using rule 13 (n_math_expression_3 -> .)
    PLUS            reduce using rule 13 (n_math_expression_3 -> .)
    MINUS           reduce using rule 13 (n_math_expression_3 -> .)
    NAME            reduce using rule 13 (n_math_expression_3 -> .)
    FLOAT           reduce using rule 13 (n_math_expression_3 -> .)
    INT             reduce using rule 13 (n_math_expression_3 -> .)
    STRING          reduce using rule 13 (n_math_expression_3 -> .)

    n_math_expression_3            shift and go to state 135

state 115

    (91) termino -> factor n_math_expression_5 DIVIDE . n_math_expression_3 termino
    (13) n_math_expression_3 -> .

    LPARENTHESIS    reduce using rule 13 (n_math_expression_3 -> .)
    PLUS            reduce using rule 13 (n_math_expression_3 -> .)
    MINUS           reduce using rule 13 (n_math_expression_3 -> .)
    NAME            reduce using rule 13 (n_math_expression_3 -> .)
    FLOAT           reduce using rule 13 (n_math_expression_3 -> .)
    INT             reduce using rule 13 (n_math_expression_3 -> .)
    STRING          reduce using rule 13 (n_math_expression_3 -> .)

    n_math_expression_3            shift and go to state 136

state 116

    (92) termino -> factor n_math_expression_5 MODULUS . n_math_expression_3 termino
    (13) n_math_expression_3 -> .

    LPARENTHESIS    reduce using rule 13 (n_math_expression_3 -> .)
    PLUS            reduce using rule 13 (n_math_expression_3 -> .)
    MINUS           reduce using rule 13 (n_math_expression_3 -> .)
    NAME            reduce using rule 13 (n_math_expression_3 -> .)
    FLOAT           reduce using rule 13 (n_math_expression_3 -> .)
    INT             reduce using rule 13 (n_math_expression_3 -> .)
    STRING          reduce using rule 13 (n_math_expression_3 -> .)

    n_math_expression_3            shift and go to state 137

state 117

    (99) value -> NAME n_variable_reference n_math_expression_1_name .

    TIMES           reduce using rule 99 (value -> NAME n_variable_reference n_math_expression_1_name .)
    DIVIDE          reduce using rule 99 (value -> NAME n_variable_reference n_math_expression_1_name .)
    MODULUS         reduce using rule 99 (value -> NAME n_variable_reference n_math_expression_1_name .)
    PLUS            reduce using rule 99 (value -> NAME n_variable_reference n_math_expression_1_name .)
    MINUS           reduce using rule 99 (value -> NAME n_variable_reference n_math_expression_1_name .)
    GREATERTHAN     reduce using rule 99 (value -> NAME n_variable_reference n_math_expression_1_name .)
    LESSTHAN        reduce using rule 99 (value -> NAME n_variable_reference n_math_expression_1_name .)
    EQUALEQUAL      reduce using rule 99 (value -> NAME n_variable_reference n_math_expression_1_name .)
    LESSTHANOREQUAL reduce using rule 99 (value -> NAME n_variable_reference n_math_expression_1_name .)
    GREATERTHANOREQUAL reduce using rule 99 (value -> NAME n_variable_reference n_math_expression_1_name .)
    NOTEQUAL        reduce using rule 99 (value -> NAME n_variable_reference n_math_expression_1_name .)
    OR              reduce using rule 99 (value -> NAME n_variable_reference n_math_expression_1_name .)
    AND             reduce using rule 99 (value -> NAME n_variable_reference n_math_expression_1_name .)
    RPARENTHESIS    reduce using rule 99 (value -> NAME n_variable_reference n_math_expression_1_name .)
    COMMA           reduce using rule 99 (value -> NAME n_variable_reference n_math_expression_1_name .)
    SEMICOLON       reduce using rule 99 (value -> NAME n_variable_reference n_math_expression_1_name .)
    DOUBLEDOT       reduce using rule 99 (value -> NAME n_variable_reference n_math_expression_1_name .)


state 118

    (114) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT . expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (80) expression -> . expression_or
    (81) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (82) expression_or -> . expression_rel
    (83) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (84) expression_rel -> . exp
    (85) expression_rel -> . exp relational_operator exp n_math_expression_9
    (86) exp -> . termino n_math_expression_4
    (87) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (88) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (89) termino -> . factor n_math_expression_5
    (90) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (91) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (92) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (93) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (94) factor -> . PLUS value
    (95) factor -> . MINUS value
    (96) factor -> . value
    (97) value -> . function_call
    (98) value -> . literal
    (99) value -> . NAME n_variable_reference n_math_expression_1_name
    (71) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (72) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (58) literal -> . FLOAT n_math_expression_1_float
    (59) literal -> . INT n_math_expression_1_int
    (60) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 46
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    NAME            shift and go to state 58
    FLOAT           shift and go to state 59
    INT             shift and go to state 60
    STRING          shift and go to state 61

    expression                     shift and go to state 138
    expression_or                  shift and go to state 48
    expression_rel                 shift and go to state 49
    exp                            shift and go to state 50
    termino                        shift and go to state 51
    factor                         shift and go to state 54
    value                          shift and go to state 55
    function_call                  shift and go to state 56
    literal                        shift and go to state 57

state 119

    (113) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS . p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (27) p_n_pre_condition_loop_2 -> .

    LCURLY          reduce using rule 27 (p_n_pre_condition_loop_2 -> .)

    p_n_pre_condition_loop_2       shift and go to state 139

state 120

    (100) assign -> type NAME n_variable_instantiate n_math_expression_1_name EQUAL . n_seen_equal_op expression
    (29) n_seen_equal_op -> .

    LPARENTHESIS    reduce using rule 29 (n_seen_equal_op -> .)
    PLUS            reduce using rule 29 (n_seen_equal_op -> .)
    MINUS           reduce using rule 29 (n_seen_equal_op -> .)
    NAME            reduce using rule 29 (n_seen_equal_op -> .)
    FLOAT           reduce using rule 29 (n_seen_equal_op -> .)
    INT             reduce using rule 29 (n_seen_equal_op -> .)
    STRING          reduce using rule 29 (n_seen_equal_op -> .)

    n_seen_equal_op                shift and go to state 140

state 121

    (67) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT . function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end
    (61) function_type -> . VOID n_function_type
    (62) function_type -> . INT_TYPE n_function_type
    (63) function_type -> . STRING_TYPE n_function_type
    (64) function_type -> . DOUBLE_TYPE n_function_type
    (65) function_type -> . FLOAT_TYPE n_function_type
    (66) function_type -> . BOOL_TYPE n_function_type

    VOID            shift and go to state 142
    INT_TYPE        shift and go to state 143
    STRING_TYPE     shift and go to state 144
    DOUBLE_TYPE     shift and go to state 145
    FLOAT_TYPE      shift and go to state 146
    BOOL_TYPE       shift and go to state 147

    function_type                  shift and go to state 141

state 122

    (77) parameter_list -> parameter COMMA . parameter_list
    (75) parameter_list -> . empty
    (76) parameter_list -> . parameter
    (77) parameter_list -> . parameter COMMA parameter_list
    (43) empty -> .
    (79) parameter -> . type NAME n_variable_instantiate_param
    (47) type -> . INT_TYPE n_seen_type
    (48) type -> . STRING_TYPE n_seen_type
    (49) type -> . DOUBLE_TYPE n_seen_type
    (50) type -> . FLOAT_TYPE n_seen_type
    (51) type -> . BOOL_TYPE n_seen_type

    DOUBLEDOT       reduce using rule 43 (empty -> .)
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    parameter                      shift and go to state 94
    parameter_list                 shift and go to state 148
    empty                          shift and go to state 93
    type                           shift and go to state 95

state 123

    (79) parameter -> type NAME . n_variable_instantiate_param
    (7) n_variable_instantiate_param -> .

    COMMA           reduce using rule 7 (n_variable_instantiate_param -> .)
    DOUBLEDOT       reduce using rule 7 (n_variable_instantiate_param -> .)

    n_variable_instantiate_param   shift and go to state 149

state 124

    (101) assign -> NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression .

    SEMICOLON       reduce using rule 101 (assign -> NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression .)
    DOUBLEDOT       reduce using rule 101 (assign -> NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression .)
    RPARENTHESIS    reduce using rule 101 (assign -> NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression .)


state 125

    (71) function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS . n_function_call_5 n_function_call_6
    (38) n_function_call_5 -> .

    SEMICOLON       reduce using rule 38 (n_function_call_5 -> .)
    TIMES           reduce using rule 38 (n_function_call_5 -> .)
    DIVIDE          reduce using rule 38 (n_function_call_5 -> .)
    MODULUS         reduce using rule 38 (n_function_call_5 -> .)
    PLUS            reduce using rule 38 (n_function_call_5 -> .)
    MINUS           reduce using rule 38 (n_function_call_5 -> .)
    GREATERTHAN     reduce using rule 38 (n_function_call_5 -> .)
    LESSTHAN        reduce using rule 38 (n_function_call_5 -> .)
    EQUALEQUAL      reduce using rule 38 (n_function_call_5 -> .)
    LESSTHANOREQUAL reduce using rule 38 (n_function_call_5 -> .)
    GREATERTHANOREQUAL reduce using rule 38 (n_function_call_5 -> .)
    NOTEQUAL        reduce using rule 38 (n_function_call_5 -> .)
    OR              reduce using rule 38 (n_function_call_5 -> .)
    AND             reduce using rule 38 (n_function_call_5 -> .)
    RPARENTHESIS    reduce using rule 38 (n_function_call_5 -> .)
    COMMA           reduce using rule 38 (n_function_call_5 -> .)
    DOUBLEDOT       reduce using rule 38 (n_function_call_5 -> .)

    n_function_call_5              shift and go to state 150

state 126

    (74) arg_list -> arg COMMA . n_function_call_4 arg_list
    (37) n_function_call_4 -> .

    LPARENTHESIS    reduce using rule 37 (n_function_call_4 -> .)
    PLUS            reduce using rule 37 (n_function_call_4 -> .)
    MINUS           reduce using rule 37 (n_function_call_4 -> .)
    NAME            reduce using rule 37 (n_function_call_4 -> .)
    FLOAT           reduce using rule 37 (n_function_call_4 -> .)
    INT             reduce using rule 37 (n_function_call_4 -> .)
    STRING          reduce using rule 37 (n_function_call_4 -> .)

    n_function_call_4              shift and go to state 151

state 127

    (78) arg -> expression n_function_call_3 .

    COMMA           reduce using rule 78 (arg -> expression n_function_call_3 .)
    RPARENTHESIS    reduce using rule 78 (arg -> expression n_function_call_3 .)


state 128

    (93) factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS . n_math_expression_7
    (17) n_math_expression_7 -> .

    TIMES           reduce using rule 17 (n_math_expression_7 -> .)
    DIVIDE          reduce using rule 17 (n_math_expression_7 -> .)
    MODULUS         reduce using rule 17 (n_math_expression_7 -> .)
    PLUS            reduce using rule 17 (n_math_expression_7 -> .)
    MINUS           reduce using rule 17 (n_math_expression_7 -> .)
    GREATERTHAN     reduce using rule 17 (n_math_expression_7 -> .)
    LESSTHAN        reduce using rule 17 (n_math_expression_7 -> .)
    EQUALEQUAL      reduce using rule 17 (n_math_expression_7 -> .)
    LESSTHANOREQUAL reduce using rule 17 (n_math_expression_7 -> .)
    GREATERTHANOREQUAL reduce using rule 17 (n_math_expression_7 -> .)
    NOTEQUAL        reduce using rule 17 (n_math_expression_7 -> .)
    OR              reduce using rule 17 (n_math_expression_7 -> .)
    AND             reduce using rule 17 (n_math_expression_7 -> .)
    RPARENTHESIS    reduce using rule 17 (n_math_expression_7 -> .)
    COMMA           reduce using rule 17 (n_math_expression_7 -> .)
    SEMICOLON       reduce using rule 17 (n_math_expression_7 -> .)
    DOUBLEDOT       reduce using rule 17 (n_math_expression_7 -> .)

    n_math_expression_7            shift and go to state 152

state 129

    (115) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 . n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (2) n_open_new_scope -> .

    IF              reduce using rule 2 (n_open_new_scope -> .)
    FOR             reduce using rule 2 (n_open_new_scope -> .)
    WHILE           reduce using rule 2 (n_open_new_scope -> .)
    NAME            reduce using rule 2 (n_open_new_scope -> .)
    INT_TYPE        reduce using rule 2 (n_open_new_scope -> .)
    STRING_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    DOUBLE_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    FLOAT_TYPE      reduce using rule 2 (n_open_new_scope -> .)
    BOOL_TYPE       reduce using rule 2 (n_open_new_scope -> .)
    RCURLY          reduce using rule 2 (n_open_new_scope -> .)
    FUNCTION        reduce using rule 2 (n_open_new_scope -> .)

    n_open_new_scope               shift and go to state 153

state 130

    (81) expression -> expression_or AND n_math_expression_10 expression . n_math_expression_11
    (21) n_math_expression_11 -> .

    RPARENTHESIS    reduce using rule 21 (n_math_expression_11 -> .)
    COMMA           reduce using rule 21 (n_math_expression_11 -> .)
    SEMICOLON       reduce using rule 21 (n_math_expression_11 -> .)
    DOUBLEDOT       reduce using rule 21 (n_math_expression_11 -> .)

    n_math_expression_11           shift and go to state 154

state 131

    (83) expression_or -> expression_rel OR n_math_expression_10 expression_or . n_math_expression_12
    (22) n_math_expression_12 -> .

    AND             reduce using rule 22 (n_math_expression_12 -> .)
    RPARENTHESIS    reduce using rule 22 (n_math_expression_12 -> .)
    COMMA           reduce using rule 22 (n_math_expression_12 -> .)
    SEMICOLON       reduce using rule 22 (n_math_expression_12 -> .)
    DOUBLEDOT       reduce using rule 22 (n_math_expression_12 -> .)

    n_math_expression_12           shift and go to state 155

state 132

    (85) expression_rel -> exp relational_operator exp n_math_expression_9 .

    OR              reduce using rule 85 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    AND             reduce using rule 85 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    RPARENTHESIS    reduce using rule 85 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    COMMA           reduce using rule 85 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    SEMICOLON       reduce using rule 85 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    DOUBLEDOT       reduce using rule 85 (expression_rel -> exp relational_operator exp n_math_expression_9 .)


state 133

    (87) exp -> termino n_math_expression_4 PLUS n_math_expression_2 . exp
    (86) exp -> . termino n_math_expression_4
    (87) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (88) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (89) termino -> . factor n_math_expression_5
    (90) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (91) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (92) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (93) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (94) factor -> . PLUS value
    (95) factor -> . MINUS value
    (96) factor -> . value
    (97) value -> . function_call
    (98) value -> . literal
    (99) value -> . NAME n_variable_reference n_math_expression_1_name
    (71) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (72) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (58) literal -> . FLOAT n_math_expression_1_float
    (59) literal -> . INT n_math_expression_1_int
    (60) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 46
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    NAME            shift and go to state 58
    FLOAT           shift and go to state 59
    INT             shift and go to state 60
    STRING          shift and go to state 61

    termino                        shift and go to state 51
    exp                            shift and go to state 156
    factor                         shift and go to state 54
    value                          shift and go to state 55
    function_call                  shift and go to state 56
    literal                        shift and go to state 57

state 134

    (88) exp -> termino n_math_expression_4 MINUS n_math_expression_2 . exp
    (86) exp -> . termino n_math_expression_4
    (87) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (88) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (89) termino -> . factor n_math_expression_5
    (90) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (91) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (92) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (93) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (94) factor -> . PLUS value
    (95) factor -> . MINUS value
    (96) factor -> . value
    (97) value -> . function_call
    (98) value -> . literal
    (99) value -> . NAME n_variable_reference n_math_expression_1_name
    (71) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (72) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (58) literal -> . FLOAT n_math_expression_1_float
    (59) literal -> . INT n_math_expression_1_int
    (60) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 46
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    NAME            shift and go to state 58
    FLOAT           shift and go to state 59
    INT             shift and go to state 60
    STRING          shift and go to state 61

    termino                        shift and go to state 51
    exp                            shift and go to state 157
    factor                         shift and go to state 54
    value                          shift and go to state 55
    function_call                  shift and go to state 56
    literal                        shift and go to state 57

state 135

    (90) termino -> factor n_math_expression_5 TIMES n_math_expression_3 . termino
    (89) termino -> . factor n_math_expression_5
    (90) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (91) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (92) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (93) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (94) factor -> . PLUS value
    (95) factor -> . MINUS value
    (96) factor -> . value
    (97) value -> . function_call
    (98) value -> . literal
    (99) value -> . NAME n_variable_reference n_math_expression_1_name
    (71) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (72) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (58) literal -> . FLOAT n_math_expression_1_float
    (59) literal -> . INT n_math_expression_1_int
    (60) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 46
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    NAME            shift and go to state 58
    FLOAT           shift and go to state 59
    INT             shift and go to state 60
    STRING          shift and go to state 61

    factor                         shift and go to state 54
    termino                        shift and go to state 158
    value                          shift and go to state 55
    function_call                  shift and go to state 56
    literal                        shift and go to state 57

state 136

    (91) termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 . termino
    (89) termino -> . factor n_math_expression_5
    (90) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (91) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (92) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (93) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (94) factor -> . PLUS value
    (95) factor -> . MINUS value
    (96) factor -> . value
    (97) value -> . function_call
    (98) value -> . literal
    (99) value -> . NAME n_variable_reference n_math_expression_1_name
    (71) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (72) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (58) literal -> . FLOAT n_math_expression_1_float
    (59) literal -> . INT n_math_expression_1_int
    (60) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 46
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    NAME            shift and go to state 58
    FLOAT           shift and go to state 59
    INT             shift and go to state 60
    STRING          shift and go to state 61

    factor                         shift and go to state 54
    termino                        shift and go to state 159
    value                          shift and go to state 55
    function_call                  shift and go to state 56
    literal                        shift and go to state 57

state 137

    (92) termino -> factor n_math_expression_5 MODULUS n_math_expression_3 . termino
    (89) termino -> . factor n_math_expression_5
    (90) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (91) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (92) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (93) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (94) factor -> . PLUS value
    (95) factor -> . MINUS value
    (96) factor -> . value
    (97) value -> . function_call
    (98) value -> . literal
    (99) value -> . NAME n_variable_reference n_math_expression_1_name
    (71) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (72) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (58) literal -> . FLOAT n_math_expression_1_float
    (59) literal -> . INT n_math_expression_1_int
    (60) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 46
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    NAME            shift and go to state 58
    FLOAT           shift and go to state 59
    INT             shift and go to state 60
    STRING          shift and go to state 61

    factor                         shift and go to state 54
    termino                        shift and go to state 160
    value                          shift and go to state 55
    function_call                  shift and go to state 56
    literal                        shift and go to state 57

state 138

    (114) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression . DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope

    DOUBLEDOT       shift and go to state 161


state 139

    (113) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 . LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope

    LCURLY          shift and go to state 162


state 140

    (100) assign -> type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op . expression
    (80) expression -> . expression_or
    (81) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (82) expression_or -> . expression_rel
    (83) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (84) expression_rel -> . exp
    (85) expression_rel -> . exp relational_operator exp n_math_expression_9
    (86) exp -> . termino n_math_expression_4
    (87) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (88) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (89) termino -> . factor n_math_expression_5
    (90) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (91) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (92) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (93) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (94) factor -> . PLUS value
    (95) factor -> . MINUS value
    (96) factor -> . value
    (97) value -> . function_call
    (98) value -> . literal
    (99) value -> . NAME n_variable_reference n_math_expression_1_name
    (71) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (72) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (58) literal -> . FLOAT n_math_expression_1_float
    (59) literal -> . INT n_math_expression_1_int
    (60) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 46
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    NAME            shift and go to state 58
    FLOAT           shift and go to state 59
    INT             shift and go to state 60
    STRING          shift and go to state 61

    expression                     shift and go to state 163
    expression_or                  shift and go to state 48
    expression_rel                 shift and go to state 49
    exp                            shift and go to state 50
    termino                        shift and go to state 51
    factor                         shift and go to state 54
    value                          shift and go to state 55
    function_call                  shift and go to state 56
    literal                        shift and go to state 57

state 141

    (67) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type . LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end

    LCURLY          shift and go to state 164


state 142

    (61) function_type -> VOID . n_function_type
    (33) n_function_type -> .

    LCURLY          reduce using rule 33 (n_function_type -> .)

    n_function_type                shift and go to state 165

state 143

    (62) function_type -> INT_TYPE . n_function_type
    (33) n_function_type -> .

    LCURLY          reduce using rule 33 (n_function_type -> .)

    n_function_type                shift and go to state 166

state 144

    (63) function_type -> STRING_TYPE . n_function_type
    (33) n_function_type -> .

    LCURLY          reduce using rule 33 (n_function_type -> .)

    n_function_type                shift and go to state 167

state 145

    (64) function_type -> DOUBLE_TYPE . n_function_type
    (33) n_function_type -> .

    LCURLY          reduce using rule 33 (n_function_type -> .)

    n_function_type                shift and go to state 168

state 146

    (65) function_type -> FLOAT_TYPE . n_function_type
    (33) n_function_type -> .

    LCURLY          reduce using rule 33 (n_function_type -> .)

    n_function_type                shift and go to state 169

state 147

    (66) function_type -> BOOL_TYPE . n_function_type
    (33) n_function_type -> .

    LCURLY          reduce using rule 33 (n_function_type -> .)

    n_function_type                shift and go to state 170

state 148

    (77) parameter_list -> parameter COMMA parameter_list .

    DOUBLEDOT       reduce using rule 77 (parameter_list -> parameter COMMA parameter_list .)


state 149

    (79) parameter -> type NAME n_variable_instantiate_param .

    COMMA           reduce using rule 79 (parameter -> type NAME n_variable_instantiate_param .)
    DOUBLEDOT       reduce using rule 79 (parameter -> type NAME n_variable_instantiate_param .)


state 150

    (71) function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 . n_function_call_6
    (39) n_function_call_6 -> .

    SEMICOLON       reduce using rule 39 (n_function_call_6 -> .)
    TIMES           reduce using rule 39 (n_function_call_6 -> .)
    DIVIDE          reduce using rule 39 (n_function_call_6 -> .)
    MODULUS         reduce using rule 39 (n_function_call_6 -> .)
    PLUS            reduce using rule 39 (n_function_call_6 -> .)
    MINUS           reduce using rule 39 (n_function_call_6 -> .)
    GREATERTHAN     reduce using rule 39 (n_function_call_6 -> .)
    LESSTHAN        reduce using rule 39 (n_function_call_6 -> .)
    EQUALEQUAL      reduce using rule 39 (n_function_call_6 -> .)
    LESSTHANOREQUAL reduce using rule 39 (n_function_call_6 -> .)
    GREATERTHANOREQUAL reduce using rule 39 (n_function_call_6 -> .)
    NOTEQUAL        reduce using rule 39 (n_function_call_6 -> .)
    OR              reduce using rule 39 (n_function_call_6 -> .)
    AND             reduce using rule 39 (n_function_call_6 -> .)
    RPARENTHESIS    reduce using rule 39 (n_function_call_6 -> .)
    COMMA           reduce using rule 39 (n_function_call_6 -> .)
    DOUBLEDOT       reduce using rule 39 (n_function_call_6 -> .)

    n_function_call_6              shift and go to state 171

state 151

    (74) arg_list -> arg COMMA n_function_call_4 . arg_list
    (73) arg_list -> . arg
    (74) arg_list -> . arg COMMA n_function_call_4 arg_list
    (78) arg -> . expression n_function_call_3
    (80) expression -> . expression_or
    (81) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (82) expression_or -> . expression_rel
    (83) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (84) expression_rel -> . exp
    (85) expression_rel -> . exp relational_operator exp n_math_expression_9
    (86) exp -> . termino n_math_expression_4
    (87) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (88) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (89) termino -> . factor n_math_expression_5
    (90) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (91) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (92) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (93) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (94) factor -> . PLUS value
    (95) factor -> . MINUS value
    (96) factor -> . value
    (97) value -> . function_call
    (98) value -> . literal
    (99) value -> . NAME n_variable_reference n_math_expression_1_name
    (71) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (72) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (58) literal -> . FLOAT n_math_expression_1_float
    (59) literal -> . INT n_math_expression_1_int
    (60) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 46
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    NAME            shift and go to state 58
    FLOAT           shift and go to state 59
    INT             shift and go to state 60
    STRING          shift and go to state 61

    arg                            shift and go to state 98
    arg_list                       shift and go to state 172
    expression                     shift and go to state 99
    expression_or                  shift and go to state 48
    expression_rel                 shift and go to state 49
    exp                            shift and go to state 50
    termino                        shift and go to state 51
    factor                         shift and go to state 54
    value                          shift and go to state 55
    function_call                  shift and go to state 56
    literal                        shift and go to state 57

state 152

    (93) factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .

    TIMES           reduce using rule 93 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    DIVIDE          reduce using rule 93 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    MODULUS         reduce using rule 93 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    PLUS            reduce using rule 93 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    MINUS           reduce using rule 93 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    GREATERTHAN     reduce using rule 93 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    LESSTHAN        reduce using rule 93 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    EQUALEQUAL      reduce using rule 93 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    LESSTHANOREQUAL reduce using rule 93 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    GREATERTHANOREQUAL reduce using rule 93 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    NOTEQUAL        reduce using rule 93 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    OR              reduce using rule 93 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    AND             reduce using rule 93 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    RPARENTHESIS    reduce using rule 93 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    COMMA           reduce using rule 93 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    SEMICOLON       reduce using rule 93 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    DOUBLEDOT       reduce using rule 93 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)


state 153

    (115) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope . codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (105) codeblock -> . empty
    (106) codeblock -> . codeblock_aux codeblock
    (43) empty -> .
    (107) codeblock_aux -> . statement
    (108) codeblock_aux -> . function_definition
    (109) codeblock_aux -> . condition_if
    (110) codeblock_aux -> . loop
    (102) statement -> . statement_aux SEMICOLON
    (67) function_definition -> . n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end
    (115) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (111) loop -> . forloop
    (112) loop -> . whileloop
    (103) statement_aux -> . assign
    (104) statement_aux -> . function_call
    (30) n_before_function_definition -> .
    (114) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (113) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (100) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (101) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (71) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (72) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (47) type -> . INT_TYPE n_seen_type
    (48) type -> . STRING_TYPE n_seen_type
    (49) type -> . DOUBLE_TYPE n_seen_type
    (50) type -> . FLOAT_TYPE n_seen_type
    (51) type -> . BOOL_TYPE n_seen_type

    RCURLY          reduce using rule 43 (empty -> .)
    IF              shift and go to state 15
    FUNCTION        reduce using rule 30 (n_before_function_definition -> .)
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    codeblock                      shift and go to state 173
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    n_before_function_definition   shift and go to state 13
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 154

    (81) expression -> expression_or AND n_math_expression_10 expression n_math_expression_11 .

    RPARENTHESIS    reduce using rule 81 (expression -> expression_or AND n_math_expression_10 expression n_math_expression_11 .)
    COMMA           reduce using rule 81 (expression -> expression_or AND n_math_expression_10 expression n_math_expression_11 .)
    SEMICOLON       reduce using rule 81 (expression -> expression_or AND n_math_expression_10 expression n_math_expression_11 .)
    DOUBLEDOT       reduce using rule 81 (expression -> expression_or AND n_math_expression_10 expression n_math_expression_11 .)


state 155

    (83) expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .

    AND             reduce using rule 83 (expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .)
    RPARENTHESIS    reduce using rule 83 (expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .)
    COMMA           reduce using rule 83 (expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .)
    SEMICOLON       reduce using rule 83 (expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .)
    DOUBLEDOT       reduce using rule 83 (expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .)


state 156

    (87) exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .

    GREATERTHAN     reduce using rule 87 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    LESSTHAN        reduce using rule 87 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    EQUALEQUAL      reduce using rule 87 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    LESSTHANOREQUAL reduce using rule 87 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    GREATERTHANOREQUAL reduce using rule 87 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    NOTEQUAL        reduce using rule 87 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    OR              reduce using rule 87 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    AND             reduce using rule 87 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    RPARENTHESIS    reduce using rule 87 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    COMMA           reduce using rule 87 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    SEMICOLON       reduce using rule 87 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    DOUBLEDOT       reduce using rule 87 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)


state 157

    (88) exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .

    GREATERTHAN     reduce using rule 88 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    LESSTHAN        reduce using rule 88 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    EQUALEQUAL      reduce using rule 88 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    LESSTHANOREQUAL reduce using rule 88 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    GREATERTHANOREQUAL reduce using rule 88 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    NOTEQUAL        reduce using rule 88 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    OR              reduce using rule 88 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    AND             reduce using rule 88 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    RPARENTHESIS    reduce using rule 88 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    COMMA           reduce using rule 88 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    SEMICOLON       reduce using rule 88 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    DOUBLEDOT       reduce using rule 88 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)


state 158

    (90) termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .

    PLUS            reduce using rule 90 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    MINUS           reduce using rule 90 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    GREATERTHAN     reduce using rule 90 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    LESSTHAN        reduce using rule 90 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    EQUALEQUAL      reduce using rule 90 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    LESSTHANOREQUAL reduce using rule 90 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    GREATERTHANOREQUAL reduce using rule 90 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    NOTEQUAL        reduce using rule 90 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    OR              reduce using rule 90 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    AND             reduce using rule 90 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    RPARENTHESIS    reduce using rule 90 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    COMMA           reduce using rule 90 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    SEMICOLON       reduce using rule 90 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    DOUBLEDOT       reduce using rule 90 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)


state 159

    (91) termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .

    PLUS            reduce using rule 91 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    MINUS           reduce using rule 91 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    GREATERTHAN     reduce using rule 91 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    LESSTHAN        reduce using rule 91 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    EQUALEQUAL      reduce using rule 91 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    LESSTHANOREQUAL reduce using rule 91 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    GREATERTHANOREQUAL reduce using rule 91 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    NOTEQUAL        reduce using rule 91 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    OR              reduce using rule 91 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    AND             reduce using rule 91 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    RPARENTHESIS    reduce using rule 91 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    COMMA           reduce using rule 91 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    SEMICOLON       reduce using rule 91 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    DOUBLEDOT       reduce using rule 91 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)


state 160

    (92) termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .

    PLUS            reduce using rule 92 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    MINUS           reduce using rule 92 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    GREATERTHAN     reduce using rule 92 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    LESSTHAN        reduce using rule 92 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    EQUALEQUAL      reduce using rule 92 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    LESSTHANOREQUAL reduce using rule 92 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    GREATERTHANOREQUAL reduce using rule 92 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    NOTEQUAL        reduce using rule 92 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    OR              reduce using rule 92 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    AND             reduce using rule 92 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    RPARENTHESIS    reduce using rule 92 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    COMMA           reduce using rule 92 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    SEMICOLON       reduce using rule 92 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    DOUBLEDOT       reduce using rule 92 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)


state 161

    (114) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT . assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (100) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (101) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (47) type -> . INT_TYPE n_seen_type
    (48) type -> . STRING_TYPE n_seen_type
    (49) type -> . DOUBLE_TYPE n_seen_type
    (50) type -> . FLOAT_TYPE n_seen_type
    (51) type -> . BOOL_TYPE n_seen_type

    NAME            shift and go to state 89
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    assign                         shift and go to state 174
    type                           shift and go to state 22

state 162

    (113) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY . n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (2) n_open_new_scope -> .

    IF              reduce using rule 2 (n_open_new_scope -> .)
    FOR             reduce using rule 2 (n_open_new_scope -> .)
    WHILE           reduce using rule 2 (n_open_new_scope -> .)
    NAME            reduce using rule 2 (n_open_new_scope -> .)
    INT_TYPE        reduce using rule 2 (n_open_new_scope -> .)
    STRING_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    DOUBLE_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    FLOAT_TYPE      reduce using rule 2 (n_open_new_scope -> .)
    BOOL_TYPE       reduce using rule 2 (n_open_new_scope -> .)
    RCURLY          reduce using rule 2 (n_open_new_scope -> .)
    FUNCTION        reduce using rule 2 (n_open_new_scope -> .)

    n_open_new_scope               shift and go to state 175

state 163

    (100) assign -> type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression .

    SEMICOLON       reduce using rule 100 (assign -> type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression .)
    DOUBLEDOT       reduce using rule 100 (assign -> type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression .)
    RPARENTHESIS    reduce using rule 100 (assign -> type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression .)


state 164

    (67) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY . n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end
    (31) n_function_block_start -> .

    IF              reduce using rule 31 (n_function_block_start -> .)
    FOR             reduce using rule 31 (n_function_block_start -> .)
    WHILE           reduce using rule 31 (n_function_block_start -> .)
    NAME            reduce using rule 31 (n_function_block_start -> .)
    INT_TYPE        reduce using rule 31 (n_function_block_start -> .)
    STRING_TYPE     reduce using rule 31 (n_function_block_start -> .)
    DOUBLE_TYPE     reduce using rule 31 (n_function_block_start -> .)
    FLOAT_TYPE      reduce using rule 31 (n_function_block_start -> .)
    BOOL_TYPE       reduce using rule 31 (n_function_block_start -> .)
    RETURN          reduce using rule 31 (n_function_block_start -> .)
    RCURLY          reduce using rule 31 (n_function_block_start -> .)
    FUNCTION        reduce using rule 31 (n_function_block_start -> .)

    n_function_block_start         shift and go to state 176

state 165

    (61) function_type -> VOID n_function_type .

    LCURLY          reduce using rule 61 (function_type -> VOID n_function_type .)


state 166

    (62) function_type -> INT_TYPE n_function_type .

    LCURLY          reduce using rule 62 (function_type -> INT_TYPE n_function_type .)


state 167

    (63) function_type -> STRING_TYPE n_function_type .

    LCURLY          reduce using rule 63 (function_type -> STRING_TYPE n_function_type .)


state 168

    (64) function_type -> DOUBLE_TYPE n_function_type .

    LCURLY          reduce using rule 64 (function_type -> DOUBLE_TYPE n_function_type .)


state 169

    (65) function_type -> FLOAT_TYPE n_function_type .

    LCURLY          reduce using rule 65 (function_type -> FLOAT_TYPE n_function_type .)


state 170

    (66) function_type -> BOOL_TYPE n_function_type .

    LCURLY          reduce using rule 66 (function_type -> BOOL_TYPE n_function_type .)


state 171

    (71) function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .

    SEMICOLON       reduce using rule 71 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    TIMES           reduce using rule 71 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    DIVIDE          reduce using rule 71 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    MODULUS         reduce using rule 71 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    PLUS            reduce using rule 71 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    MINUS           reduce using rule 71 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    GREATERTHAN     reduce using rule 71 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    LESSTHAN        reduce using rule 71 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    EQUALEQUAL      reduce using rule 71 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    LESSTHANOREQUAL reduce using rule 71 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    GREATERTHANOREQUAL reduce using rule 71 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    NOTEQUAL        reduce using rule 71 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    OR              reduce using rule 71 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    AND             reduce using rule 71 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    RPARENTHESIS    reduce using rule 71 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    COMMA           reduce using rule 71 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    DOUBLEDOT       reduce using rule 71 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)


state 172

    (74) arg_list -> arg COMMA n_function_call_4 arg_list .

    RPARENTHESIS    reduce using rule 74 (arg_list -> arg COMMA n_function_call_4 arg_list .)


state 173

    (115) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock . RCURLY n_close_scope condition_else n_two_way_conditional_2

    RCURLY          shift and go to state 177


state 174

    (114) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign . RPARENTHESIS LCURLY codeblock RCURLY n_close_scope

    RPARENTHESIS    shift and go to state 178


state 175

    (113) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope . codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (105) codeblock -> . empty
    (106) codeblock -> . codeblock_aux codeblock
    (43) empty -> .
    (107) codeblock_aux -> . statement
    (108) codeblock_aux -> . function_definition
    (109) codeblock_aux -> . condition_if
    (110) codeblock_aux -> . loop
    (102) statement -> . statement_aux SEMICOLON
    (67) function_definition -> . n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end
    (115) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (111) loop -> . forloop
    (112) loop -> . whileloop
    (103) statement_aux -> . assign
    (104) statement_aux -> . function_call
    (30) n_before_function_definition -> .
    (114) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (113) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (100) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (101) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (71) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (72) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (47) type -> . INT_TYPE n_seen_type
    (48) type -> . STRING_TYPE n_seen_type
    (49) type -> . DOUBLE_TYPE n_seen_type
    (50) type -> . FLOAT_TYPE n_seen_type
    (51) type -> . BOOL_TYPE n_seen_type

    RCURLY          reduce using rule 43 (empty -> .)
    IF              shift and go to state 15
    FUNCTION        reduce using rule 30 (n_before_function_definition -> .)
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    codeblock                      shift and go to state 179
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    n_before_function_definition   shift and go to state 13
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 176

    (67) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start . codeblock return RCURLY n_close_scope n_function_block_end
    (105) codeblock -> . empty
    (106) codeblock -> . codeblock_aux codeblock
    (43) empty -> .
    (107) codeblock_aux -> . statement
    (108) codeblock_aux -> . function_definition
    (109) codeblock_aux -> . condition_if
    (110) codeblock_aux -> . loop
    (102) statement -> . statement_aux SEMICOLON
    (67) function_definition -> . n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end
    (115) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (111) loop -> . forloop
    (112) loop -> . whileloop
    (103) statement_aux -> . assign
    (104) statement_aux -> . function_call
    (30) n_before_function_definition -> .
    (114) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (113) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (100) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (101) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (71) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (72) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (47) type -> . INT_TYPE n_seen_type
    (48) type -> . STRING_TYPE n_seen_type
    (49) type -> . DOUBLE_TYPE n_seen_type
    (50) type -> . FLOAT_TYPE n_seen_type
    (51) type -> . BOOL_TYPE n_seen_type

    RETURN          reduce using rule 43 (empty -> .)
    RCURLY          reduce using rule 43 (empty -> .)
    IF              shift and go to state 15
    FUNCTION        reduce using rule 30 (n_before_function_definition -> .)
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    n_before_function_definition   shift and go to state 13
    codeblock                      shift and go to state 180
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 177

    (115) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY . n_close_scope condition_else n_two_way_conditional_2
    (4) n_close_scope -> .

    ELSE            reduce using rule 4 (n_close_scope -> .)
    IF              reduce using rule 4 (n_close_scope -> .)
    FOR             reduce using rule 4 (n_close_scope -> .)
    WHILE           reduce using rule 4 (n_close_scope -> .)
    NAME            reduce using rule 4 (n_close_scope -> .)
    INT_TYPE        reduce using rule 4 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 4 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 4 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 4 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 4 (n_close_scope -> .)
    FUNCTION        reduce using rule 4 (n_close_scope -> .)
    $end            reduce using rule 4 (n_close_scope -> .)
    RCURLY          reduce using rule 4 (n_close_scope -> .)
    RETURN          reduce using rule 4 (n_close_scope -> .)

    n_close_scope                  shift and go to state 181

state 178

    (114) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS . LCURLY codeblock RCURLY n_close_scope

    LCURLY          shift and go to state 182


state 179

    (113) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock . RCURLY p_n_pre_condition_loop_3 n_close_scope

    RCURLY          shift and go to state 183


state 180

    (67) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock . return RCURLY n_close_scope n_function_block_end
    (68) return -> . RETURN expression n_return SEMICOLON
    (69) return -> . RETURN n_return_void SEMICOLON
    (70) return -> . empty
    (43) empty -> .

    RETURN          shift and go to state 185
    RCURLY          reduce using rule 43 (empty -> .)

    return                         shift and go to state 184
    empty                          shift and go to state 186

state 181

    (115) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope . condition_else n_two_way_conditional_2
    (116) condition_else -> . ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope
    (117) condition_else -> . empty
    (43) empty -> .

    ELSE            shift and go to state 188
    IF              reduce using rule 43 (empty -> .)
    FOR             reduce using rule 43 (empty -> .)
    WHILE           reduce using rule 43 (empty -> .)
    NAME            reduce using rule 43 (empty -> .)
    INT_TYPE        reduce using rule 43 (empty -> .)
    STRING_TYPE     reduce using rule 43 (empty -> .)
    DOUBLE_TYPE     reduce using rule 43 (empty -> .)
    FLOAT_TYPE      reduce using rule 43 (empty -> .)
    BOOL_TYPE       reduce using rule 43 (empty -> .)
    FUNCTION        reduce using rule 43 (empty -> .)
    $end            reduce using rule 43 (empty -> .)
    RCURLY          reduce using rule 43 (empty -> .)
    RETURN          reduce using rule 43 (empty -> .)

    condition_else                 shift and go to state 187
    empty                          shift and go to state 189

state 182

    (114) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY . codeblock RCURLY n_close_scope
    (105) codeblock -> . empty
    (106) codeblock -> . codeblock_aux codeblock
    (43) empty -> .
    (107) codeblock_aux -> . statement
    (108) codeblock_aux -> . function_definition
    (109) codeblock_aux -> . condition_if
    (110) codeblock_aux -> . loop
    (102) statement -> . statement_aux SEMICOLON
    (67) function_definition -> . n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end
    (115) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (111) loop -> . forloop
    (112) loop -> . whileloop
    (103) statement_aux -> . assign
    (104) statement_aux -> . function_call
    (30) n_before_function_definition -> .
    (114) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (113) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (100) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (101) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (71) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (72) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (47) type -> . INT_TYPE n_seen_type
    (48) type -> . STRING_TYPE n_seen_type
    (49) type -> . DOUBLE_TYPE n_seen_type
    (50) type -> . FLOAT_TYPE n_seen_type
    (51) type -> . BOOL_TYPE n_seen_type

    RCURLY          reduce using rule 43 (empty -> .)
    IF              shift and go to state 15
    FUNCTION        reduce using rule 30 (n_before_function_definition -> .)
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    assign                         shift and go to state 18
    codeblock                      shift and go to state 190
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    n_before_function_definition   shift and go to state 13
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 183

    (113) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY . p_n_pre_condition_loop_3 n_close_scope
    (28) p_n_pre_condition_loop_3 -> .

    IF              reduce using rule 28 (p_n_pre_condition_loop_3 -> .)
    FOR             reduce using rule 28 (p_n_pre_condition_loop_3 -> .)
    WHILE           reduce using rule 28 (p_n_pre_condition_loop_3 -> .)
    NAME            reduce using rule 28 (p_n_pre_condition_loop_3 -> .)
    INT_TYPE        reduce using rule 28 (p_n_pre_condition_loop_3 -> .)
    STRING_TYPE     reduce using rule 28 (p_n_pre_condition_loop_3 -> .)
    DOUBLE_TYPE     reduce using rule 28 (p_n_pre_condition_loop_3 -> .)
    FLOAT_TYPE      reduce using rule 28 (p_n_pre_condition_loop_3 -> .)
    BOOL_TYPE       reduce using rule 28 (p_n_pre_condition_loop_3 -> .)
    FUNCTION        reduce using rule 28 (p_n_pre_condition_loop_3 -> .)
    $end            reduce using rule 28 (p_n_pre_condition_loop_3 -> .)
    RCURLY          reduce using rule 28 (p_n_pre_condition_loop_3 -> .)
    RETURN          reduce using rule 28 (p_n_pre_condition_loop_3 -> .)

    p_n_pre_condition_loop_3       shift and go to state 191

state 184

    (67) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return . RCURLY n_close_scope n_function_block_end

    RCURLY          shift and go to state 192


state 185

    (68) return -> RETURN . expression n_return SEMICOLON
    (69) return -> RETURN . n_return_void SEMICOLON
    (80) expression -> . expression_or
    (81) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (41) n_return_void -> .
    (82) expression_or -> . expression_rel
    (83) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (84) expression_rel -> . exp
    (85) expression_rel -> . exp relational_operator exp n_math_expression_9
    (86) exp -> . termino n_math_expression_4
    (87) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (88) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (89) termino -> . factor n_math_expression_5
    (90) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (91) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (92) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (93) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (94) factor -> . PLUS value
    (95) factor -> . MINUS value
    (96) factor -> . value
    (97) value -> . function_call
    (98) value -> . literal
    (99) value -> . NAME n_variable_reference n_math_expression_1_name
    (71) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (72) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (58) literal -> . FLOAT n_math_expression_1_float
    (59) literal -> . INT n_math_expression_1_int
    (60) literal -> . STRING n_math_expression_1_string

    SEMICOLON       reduce using rule 41 (n_return_void -> .)
    LPARENTHESIS    shift and go to state 46
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    NAME            shift and go to state 58
    FLOAT           shift and go to state 59
    INT             shift and go to state 60
    STRING          shift and go to state 61

    expression                     shift and go to state 193
    n_return_void                  shift and go to state 194
    expression_or                  shift and go to state 48
    expression_rel                 shift and go to state 49
    exp                            shift and go to state 50
    termino                        shift and go to state 51
    factor                         shift and go to state 54
    value                          shift and go to state 55
    function_call                  shift and go to state 56
    literal                        shift and go to state 57

state 186

    (70) return -> empty .

    RCURLY          reduce using rule 70 (return -> empty .)


state 187

    (115) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else . n_two_way_conditional_2
    (24) n_two_way_conditional_2 -> .

    IF              reduce using rule 24 (n_two_way_conditional_2 -> .)
    FOR             reduce using rule 24 (n_two_way_conditional_2 -> .)
    WHILE           reduce using rule 24 (n_two_way_conditional_2 -> .)
    NAME            reduce using rule 24 (n_two_way_conditional_2 -> .)
    INT_TYPE        reduce using rule 24 (n_two_way_conditional_2 -> .)
    STRING_TYPE     reduce using rule 24 (n_two_way_conditional_2 -> .)
    DOUBLE_TYPE     reduce using rule 24 (n_two_way_conditional_2 -> .)
    FLOAT_TYPE      reduce using rule 24 (n_two_way_conditional_2 -> .)
    BOOL_TYPE       reduce using rule 24 (n_two_way_conditional_2 -> .)
    FUNCTION        reduce using rule 24 (n_two_way_conditional_2 -> .)
    $end            reduce using rule 24 (n_two_way_conditional_2 -> .)
    RCURLY          reduce using rule 24 (n_two_way_conditional_2 -> .)
    RETURN          reduce using rule 24 (n_two_way_conditional_2 -> .)

    n_two_way_conditional_2        shift and go to state 195

state 188

    (116) condition_else -> ELSE . n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope
    (25) n_two_way_conditional_3 -> .

    LCURLY          reduce using rule 25 (n_two_way_conditional_3 -> .)

    n_two_way_conditional_3        shift and go to state 196

state 189

    (117) condition_else -> empty .

    IF              reduce using rule 117 (condition_else -> empty .)
    FOR             reduce using rule 117 (condition_else -> empty .)
    WHILE           reduce using rule 117 (condition_else -> empty .)
    NAME            reduce using rule 117 (condition_else -> empty .)
    INT_TYPE        reduce using rule 117 (condition_else -> empty .)
    STRING_TYPE     reduce using rule 117 (condition_else -> empty .)
    DOUBLE_TYPE     reduce using rule 117 (condition_else -> empty .)
    FLOAT_TYPE      reduce using rule 117 (condition_else -> empty .)
    BOOL_TYPE       reduce using rule 117 (condition_else -> empty .)
    FUNCTION        reduce using rule 117 (condition_else -> empty .)
    $end            reduce using rule 117 (condition_else -> empty .)
    RCURLY          reduce using rule 117 (condition_else -> empty .)
    RETURN          reduce using rule 117 (condition_else -> empty .)


state 190

    (114) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock . RCURLY n_close_scope

    RCURLY          shift and go to state 197


state 191

    (113) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 . n_close_scope
    (4) n_close_scope -> .

    IF              reduce using rule 4 (n_close_scope -> .)
    FOR             reduce using rule 4 (n_close_scope -> .)
    WHILE           reduce using rule 4 (n_close_scope -> .)
    NAME            reduce using rule 4 (n_close_scope -> .)
    INT_TYPE        reduce using rule 4 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 4 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 4 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 4 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 4 (n_close_scope -> .)
    FUNCTION        reduce using rule 4 (n_close_scope -> .)
    $end            reduce using rule 4 (n_close_scope -> .)
    RCURLY          reduce using rule 4 (n_close_scope -> .)
    RETURN          reduce using rule 4 (n_close_scope -> .)

    n_close_scope                  shift and go to state 198

state 192

    (67) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY . n_close_scope n_function_block_end
    (4) n_close_scope -> .

    IF              reduce using rule 4 (n_close_scope -> .)
    FOR             reduce using rule 4 (n_close_scope -> .)
    WHILE           reduce using rule 4 (n_close_scope -> .)
    NAME            reduce using rule 4 (n_close_scope -> .)
    INT_TYPE        reduce using rule 4 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 4 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 4 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 4 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 4 (n_close_scope -> .)
    FUNCTION        reduce using rule 4 (n_close_scope -> .)
    $end            reduce using rule 4 (n_close_scope -> .)
    RCURLY          reduce using rule 4 (n_close_scope -> .)
    RETURN          reduce using rule 4 (n_close_scope -> .)

    n_close_scope                  shift and go to state 199

state 193

    (68) return -> RETURN expression . n_return SEMICOLON
    (40) n_return -> .

    SEMICOLON       reduce using rule 40 (n_return -> .)

    n_return                       shift and go to state 200

state 194

    (69) return -> RETURN n_return_void . SEMICOLON

    SEMICOLON       shift and go to state 201


state 195

    (115) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .

    IF              reduce using rule 115 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    FOR             reduce using rule 115 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    WHILE           reduce using rule 115 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    NAME            reduce using rule 115 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    INT_TYPE        reduce using rule 115 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    STRING_TYPE     reduce using rule 115 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    DOUBLE_TYPE     reduce using rule 115 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    FLOAT_TYPE      reduce using rule 115 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    BOOL_TYPE       reduce using rule 115 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    FUNCTION        reduce using rule 115 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    $end            reduce using rule 115 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    RCURLY          reduce using rule 115 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    RETURN          reduce using rule 115 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)


state 196

    (116) condition_else -> ELSE n_two_way_conditional_3 . LCURLY n_open_new_scope codeblock RCURLY n_close_scope

    LCURLY          shift and go to state 202


state 197

    (114) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY . n_close_scope
    (4) n_close_scope -> .

    IF              reduce using rule 4 (n_close_scope -> .)
    FOR             reduce using rule 4 (n_close_scope -> .)
    WHILE           reduce using rule 4 (n_close_scope -> .)
    NAME            reduce using rule 4 (n_close_scope -> .)
    INT_TYPE        reduce using rule 4 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 4 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 4 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 4 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 4 (n_close_scope -> .)
    FUNCTION        reduce using rule 4 (n_close_scope -> .)
    $end            reduce using rule 4 (n_close_scope -> .)
    RCURLY          reduce using rule 4 (n_close_scope -> .)
    RETURN          reduce using rule 4 (n_close_scope -> .)

    n_close_scope                  shift and go to state 203

state 198

    (113) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .

    IF              reduce using rule 113 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    FOR             reduce using rule 113 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    WHILE           reduce using rule 113 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    NAME            reduce using rule 113 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    INT_TYPE        reduce using rule 113 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    STRING_TYPE     reduce using rule 113 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    DOUBLE_TYPE     reduce using rule 113 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    FLOAT_TYPE      reduce using rule 113 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    BOOL_TYPE       reduce using rule 113 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    FUNCTION        reduce using rule 113 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    $end            reduce using rule 113 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    RCURLY          reduce using rule 113 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    RETURN          reduce using rule 113 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)


state 199

    (67) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope . n_function_block_end
    (32) n_function_block_end -> .

    IF              reduce using rule 32 (n_function_block_end -> .)
    FOR             reduce using rule 32 (n_function_block_end -> .)
    WHILE           reduce using rule 32 (n_function_block_end -> .)
    NAME            reduce using rule 32 (n_function_block_end -> .)
    INT_TYPE        reduce using rule 32 (n_function_block_end -> .)
    STRING_TYPE     reduce using rule 32 (n_function_block_end -> .)
    DOUBLE_TYPE     reduce using rule 32 (n_function_block_end -> .)
    FLOAT_TYPE      reduce using rule 32 (n_function_block_end -> .)
    BOOL_TYPE       reduce using rule 32 (n_function_block_end -> .)
    FUNCTION        reduce using rule 32 (n_function_block_end -> .)
    $end            reduce using rule 32 (n_function_block_end -> .)
    RCURLY          reduce using rule 32 (n_function_block_end -> .)
    RETURN          reduce using rule 32 (n_function_block_end -> .)

    n_function_block_end           shift and go to state 204

state 200

    (68) return -> RETURN expression n_return . SEMICOLON

    SEMICOLON       shift and go to state 205


state 201

    (69) return -> RETURN n_return_void SEMICOLON .

    RCURLY          reduce using rule 69 (return -> RETURN n_return_void SEMICOLON .)


state 202

    (116) condition_else -> ELSE n_two_way_conditional_3 LCURLY . n_open_new_scope codeblock RCURLY n_close_scope
    (2) n_open_new_scope -> .

    IF              reduce using rule 2 (n_open_new_scope -> .)
    FOR             reduce using rule 2 (n_open_new_scope -> .)
    WHILE           reduce using rule 2 (n_open_new_scope -> .)
    NAME            reduce using rule 2 (n_open_new_scope -> .)
    INT_TYPE        reduce using rule 2 (n_open_new_scope -> .)
    STRING_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    DOUBLE_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    FLOAT_TYPE      reduce using rule 2 (n_open_new_scope -> .)
    BOOL_TYPE       reduce using rule 2 (n_open_new_scope -> .)
    RCURLY          reduce using rule 2 (n_open_new_scope -> .)
    FUNCTION        reduce using rule 2 (n_open_new_scope -> .)

    n_open_new_scope               shift and go to state 206

state 203

    (114) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .

    IF              reduce using rule 114 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    FOR             reduce using rule 114 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    WHILE           reduce using rule 114 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    NAME            reduce using rule 114 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    INT_TYPE        reduce using rule 114 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    STRING_TYPE     reduce using rule 114 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    DOUBLE_TYPE     reduce using rule 114 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    FLOAT_TYPE      reduce using rule 114 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    BOOL_TYPE       reduce using rule 114 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    FUNCTION        reduce using rule 114 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    $end            reduce using rule 114 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    RCURLY          reduce using rule 114 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    RETURN          reduce using rule 114 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)


state 204

    (67) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end .

    IF              reduce using rule 67 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end .)
    FOR             reduce using rule 67 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end .)
    WHILE           reduce using rule 67 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end .)
    NAME            reduce using rule 67 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end .)
    INT_TYPE        reduce using rule 67 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end .)
    STRING_TYPE     reduce using rule 67 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end .)
    DOUBLE_TYPE     reduce using rule 67 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end .)
    FLOAT_TYPE      reduce using rule 67 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end .)
    BOOL_TYPE       reduce using rule 67 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end .)
    FUNCTION        reduce using rule 67 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end .)
    $end            reduce using rule 67 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end .)
    RCURLY          reduce using rule 67 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end .)
    RETURN          reduce using rule 67 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end .)


state 205

    (68) return -> RETURN expression n_return SEMICOLON .

    RCURLY          reduce using rule 68 (return -> RETURN expression n_return SEMICOLON .)


state 206

    (116) condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope . codeblock RCURLY n_close_scope
    (105) codeblock -> . empty
    (106) codeblock -> . codeblock_aux codeblock
    (43) empty -> .
    (107) codeblock_aux -> . statement
    (108) codeblock_aux -> . function_definition
    (109) codeblock_aux -> . condition_if
    (110) codeblock_aux -> . loop
    (102) statement -> . statement_aux SEMICOLON
    (67) function_definition -> . n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end
    (115) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (111) loop -> . forloop
    (112) loop -> . whileloop
    (103) statement_aux -> . assign
    (104) statement_aux -> . function_call
    (30) n_before_function_definition -> .
    (114) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (113) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (100) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (101) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (71) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (72) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (47) type -> . INT_TYPE n_seen_type
    (48) type -> . STRING_TYPE n_seen_type
    (49) type -> . DOUBLE_TYPE n_seen_type
    (50) type -> . FLOAT_TYPE n_seen_type
    (51) type -> . BOOL_TYPE n_seen_type

    RCURLY          reduce using rule 43 (empty -> .)
    IF              shift and go to state 15
    FUNCTION        reduce using rule 30 (n_before_function_definition -> .)
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    codeblock                      shift and go to state 207
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    n_before_function_definition   shift and go to state 13
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 207

    (116) condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock . RCURLY n_close_scope

    RCURLY          shift and go to state 208


state 208

    (116) condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY . n_close_scope
    (4) n_close_scope -> .

    IF              reduce using rule 4 (n_close_scope -> .)
    FOR             reduce using rule 4 (n_close_scope -> .)
    WHILE           reduce using rule 4 (n_close_scope -> .)
    NAME            reduce using rule 4 (n_close_scope -> .)
    INT_TYPE        reduce using rule 4 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 4 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 4 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 4 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 4 (n_close_scope -> .)
    FUNCTION        reduce using rule 4 (n_close_scope -> .)
    $end            reduce using rule 4 (n_close_scope -> .)
    RCURLY          reduce using rule 4 (n_close_scope -> .)
    RETURN          reduce using rule 4 (n_close_scope -> .)

    n_close_scope                  shift and go to state 209

state 209

    (116) condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .

    IF              reduce using rule 116 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    FOR             reduce using rule 116 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    WHILE           reduce using rule 116 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    NAME            reduce using rule 116 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    INT_TYPE        reduce using rule 116 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    STRING_TYPE     reduce using rule 116 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    DOUBLE_TYPE     reduce using rule 116 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    FLOAT_TYPE      reduce using rule 116 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    BOOL_TYPE       reduce using rule 116 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    FUNCTION        reduce using rule 116 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    $end            reduce using rule 116 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    RCURLY          reduce using rule 116 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    RETURN          reduce using rule 116 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)

