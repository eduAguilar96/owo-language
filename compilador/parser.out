Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DOT
    LBRACKET
    NOT
    RBRACKET

Grammar

Rule 0     S' -> program
Rule 1     n_seen_type -> <empty>
Rule 2     n_open_new_scope -> <empty>
Rule 3     n_open_new_scope_function -> <empty>
Rule 4     n_close_scope -> <empty>
Rule 5     n_variable_reference -> <empty>
Rule 6     n_variable_instantiate -> <empty>
Rule 7     n_math_expression_1_int -> <empty>
Rule 8     n_math_expression_1_float -> <empty>
Rule 9     n_math_expression_1_string -> <empty>
Rule 10    n_math_expression_1_name -> <empty>
Rule 11    n_math_expression_2 -> <empty>
Rule 12    n_math_expression_3 -> <empty>
Rule 13    n_math_expression_4 -> <empty>
Rule 14    n_math_expression_5 -> <empty>
Rule 15    n_math_expression_6 -> <empty>
Rule 16    n_math_expression_7 -> <empty>
Rule 17    n_math_expression_8 -> <empty>
Rule 18    n_math_expression_9 -> <empty>
Rule 19    n_math_expression_10 -> <empty>
Rule 20    n_math_expression_11 -> <empty>
Rule 21    n_math_expression_12 -> <empty>
Rule 22    n_two_way_conditional_1 -> <empty>
Rule 23    n_two_way_conditional_2 -> <empty>
Rule 24    n_two_way_conditional_3 -> <empty>
Rule 25    p_n_pre_condition_loop_1 -> <empty>
Rule 26    p_n_pre_condition_loop_2 -> <empty>
Rule 27    p_n_pre_condition_loop_3 -> <empty>
Rule 28    n_seen_equal_op -> <empty>
Rule 29    empty -> <empty>
Rule 30    program -> program_aux codeblock
Rule 31    program_aux -> IDK
Rule 32    program_aux -> OWO
Rule 33    type -> INT_TYPE n_seen_type
Rule 34    type -> STRING_TYPE n_seen_type
Rule 35    type -> DOUBLE_TYPE n_seen_type
Rule 36    type -> FLOAT_TYPE n_seen_type
Rule 37    type -> BOOL_TYPE n_seen_type
Rule 38    relational_operator -> GREATERTHAN n_math_expression_8
Rule 39    relational_operator -> LESSTHAN n_math_expression_8
Rule 40    relational_operator -> EQUALEQUAL n_math_expression_8
Rule 41    relational_operator -> LESSTHANOREQUAL n_math_expression_8
Rule 42    relational_operator -> GREATERTHANOREQUAL n_math_expression_8
Rule 43    relational_operator -> NOTEQUAL n_math_expression_8
Rule 44    literal -> FLOAT n_math_expression_1_float
Rule 45    literal -> INT n_math_expression_1_int
Rule 46    literal -> STRING n_math_expression_1_string
Rule 47    function_type -> type
Rule 48    function_type -> VOID
Rule 49    function_definition -> FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope
Rule 50    function_call -> NAME LPARENTHESIS arg_list RPARENTHESIS
Rule 51    arg_list -> empty
Rule 52    arg_list -> arg
Rule 53    arg_list -> arg COMMA arg_list
Rule 54    parameter_list -> empty
Rule 55    parameter_list -> parameter
Rule 56    parameter_list -> parameter COMMA parameter_list
Rule 57    arg -> expression
Rule 58    parameter -> type NAME n_variable_instantiate
Rule 59    expression -> expression_or
Rule 60    expression -> expression_or AND n_math_expression_10 expression n_math_expression_11
Rule 61    expression_or -> expression_rel
Rule 62    expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12
Rule 63    expression_rel -> exp
Rule 64    expression_rel -> exp relational_operator exp n_math_expression_9
Rule 65    exp -> termino n_math_expression_4
Rule 66    exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp
Rule 67    exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp
Rule 68    termino -> factor n_math_expression_5
Rule 69    termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino
Rule 70    termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino
Rule 71    termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino
Rule 72    factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
Rule 73    factor -> PLUS value
Rule 74    factor -> MINUS value
Rule 75    factor -> value
Rule 76    value -> function_call
Rule 77    value -> literal
Rule 78    value -> NAME n_variable_reference n_math_expression_1_name
Rule 79    assign -> type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
Rule 80    assign -> NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
Rule 81    statement -> statement_aux SEMICOLON
Rule 82    statement_aux -> assign
Rule 83    statement_aux -> function_call
Rule 84    codeblock -> empty
Rule 85    codeblock -> codeblock_aux codeblock
Rule 86    codeblock_aux -> statement
Rule 87    codeblock_aux -> function_definition
Rule 88    codeblock_aux -> condition_if
Rule 89    codeblock_aux -> loop
Rule 90    loop -> forloop
Rule 91    loop -> whileloop
Rule 92    whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
Rule 93    forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
Rule 94    condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
Rule 95    condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope
Rule 96    condition_else -> empty

Terminals, with rules where they appear

AND                  : 60
BOOL_TYPE            : 37
COMMA                : 53 56
DIVIDE               : 70
DOT                  : 
DOUBLEDOT            : 49 93 93
DOUBLE_TYPE          : 35
ELSE                 : 95
EQUAL                : 79 80
EQUALEQUAL           : 40
FLOAT                : 44
FLOAT_TYPE           : 36
FOR                  : 93
FUNCTION             : 49
GREATERTHAN          : 38
GREATERTHANOREQUAL   : 42
IDK                  : 31
IF                   : 94
INT                  : 45
INT_TYPE             : 33
LBRACKET             : 
LCURLY               : 49 92 93 94 95
LESSTHAN             : 39
LESSTHANOREQUAL      : 41
LPARENTHESIS         : 50 72 92 93 94
MINUS                : 67 74
MODULUS              : 71
NAME                 : 49 50 58 78 79 80
NOT                  : 
NOTEQUAL             : 43
OR                   : 62
OWO                  : 32
PLUS                 : 66 73
RBRACKET             : 
RCURLY               : 49 92 93 94 95
RPARENTHESIS         : 50 72 92 93 94
SEMICOLON            : 81
STRING               : 46
STRING_TYPE          : 34
TIMES                : 69
VOID                 : 48
WHILE                : 92
error                : 

Nonterminals, with rules where they appear

arg                  : 52 53
arg_list             : 50 53
assign               : 82 93 93
codeblock            : 30 49 85 92 93 94 95
codeblock_aux        : 85
condition_else       : 94
condition_if         : 88
empty                : 51 54 84 96
exp                  : 63 64 64 66 67
expression           : 57 60 72 79 80 92 93 94
expression_or        : 59 60 62
expression_rel       : 61 62
factor               : 68 69 70 71
forloop              : 90
function_call        : 76 83
function_definition  : 87
function_type        : 49
literal              : 77
loop                 : 89
n_close_scope        : 49 92 93 94 95
n_math_expression_10 : 60 62
n_math_expression_11 : 60
n_math_expression_12 : 62
n_math_expression_1_float : 44
n_math_expression_1_int : 45
n_math_expression_1_name : 78 79 80
n_math_expression_1_string : 46
n_math_expression_2  : 66 67
n_math_expression_3  : 69 70 71
n_math_expression_4  : 65 66 67
n_math_expression_5  : 68 69 70 71
n_math_expression_6  : 72
n_math_expression_7  : 72
n_math_expression_8  : 38 39 40 41 42 43
n_math_expression_9  : 64
n_open_new_scope     : 92 93 94 95
n_open_new_scope_function : 49
n_seen_equal_op      : 79 80
n_seen_type          : 33 34 35 36 37
n_two_way_conditional_1 : 94
n_two_way_conditional_2 : 94
n_two_way_conditional_3 : 95
n_variable_instantiate : 58 79
n_variable_reference : 78 80
p_n_pre_condition_loop_1 : 92
p_n_pre_condition_loop_2 : 92
p_n_pre_condition_loop_3 : 92
parameter            : 55 56
parameter_list       : 49 56
program              : 0
program_aux          : 30
relational_operator  : 64
statement            : 86
statement_aux        : 81
termino              : 65 66 67 69 70 71
type                 : 47 58 79
value                : 73 74 75
whileloop            : 91

Parsing method: LALR

state 0

    (0) S' -> . program
    (30) program -> . program_aux codeblock
    (31) program_aux -> . IDK
    (32) program_aux -> . OWO

    IDK             shift and go to state 3
    OWO             shift and go to state 4

    program                        shift and go to state 1
    program_aux                    shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (30) program -> program_aux . codeblock
    (84) codeblock -> . empty
    (85) codeblock -> . codeblock_aux codeblock
    (29) empty -> .
    (86) codeblock_aux -> . statement
    (87) codeblock_aux -> . function_definition
    (88) codeblock_aux -> . condition_if
    (89) codeblock_aux -> . loop
    (81) statement -> . statement_aux SEMICOLON
    (49) function_definition -> . FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope
    (94) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (90) loop -> . forloop
    (91) loop -> . whileloop
    (82) statement_aux -> . assign
    (83) statement_aux -> . function_call
    (93) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (92) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (79) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (80) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (50) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (33) type -> . INT_TYPE n_seen_type
    (34) type -> . STRING_TYPE n_seen_type
    (35) type -> . DOUBLE_TYPE n_seen_type
    (36) type -> . FLOAT_TYPE n_seen_type
    (37) type -> . BOOL_TYPE n_seen_type

    $end            reduce using rule 29 (empty -> .)
    FUNCTION        shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    codeblock                      shift and go to state 5
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 3

    (31) program_aux -> IDK .

    FUNCTION        reduce using rule 31 (program_aux -> IDK .)
    IF              reduce using rule 31 (program_aux -> IDK .)
    FOR             reduce using rule 31 (program_aux -> IDK .)
    WHILE           reduce using rule 31 (program_aux -> IDK .)
    NAME            reduce using rule 31 (program_aux -> IDK .)
    INT_TYPE        reduce using rule 31 (program_aux -> IDK .)
    STRING_TYPE     reduce using rule 31 (program_aux -> IDK .)
    DOUBLE_TYPE     reduce using rule 31 (program_aux -> IDK .)
    FLOAT_TYPE      reduce using rule 31 (program_aux -> IDK .)
    BOOL_TYPE       reduce using rule 31 (program_aux -> IDK .)
    $end            reduce using rule 31 (program_aux -> IDK .)


state 4

    (32) program_aux -> OWO .

    FUNCTION        reduce using rule 32 (program_aux -> OWO .)
    IF              reduce using rule 32 (program_aux -> OWO .)
    FOR             reduce using rule 32 (program_aux -> OWO .)
    WHILE           reduce using rule 32 (program_aux -> OWO .)
    NAME            reduce using rule 32 (program_aux -> OWO .)
    INT_TYPE        reduce using rule 32 (program_aux -> OWO .)
    STRING_TYPE     reduce using rule 32 (program_aux -> OWO .)
    DOUBLE_TYPE     reduce using rule 32 (program_aux -> OWO .)
    FLOAT_TYPE      reduce using rule 32 (program_aux -> OWO .)
    BOOL_TYPE       reduce using rule 32 (program_aux -> OWO .)
    $end            reduce using rule 32 (program_aux -> OWO .)


state 5

    (30) program -> program_aux codeblock .

    $end            reduce using rule 30 (program -> program_aux codeblock .)


state 6

    (84) codeblock -> empty .

    $end            reduce using rule 84 (codeblock -> empty .)
    RCURLY          reduce using rule 84 (codeblock -> empty .)


state 7

    (85) codeblock -> codeblock_aux . codeblock
    (84) codeblock -> . empty
    (85) codeblock -> . codeblock_aux codeblock
    (29) empty -> .
    (86) codeblock_aux -> . statement
    (87) codeblock_aux -> . function_definition
    (88) codeblock_aux -> . condition_if
    (89) codeblock_aux -> . loop
    (81) statement -> . statement_aux SEMICOLON
    (49) function_definition -> . FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope
    (94) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (90) loop -> . forloop
    (91) loop -> . whileloop
    (82) statement_aux -> . assign
    (83) statement_aux -> . function_call
    (93) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (92) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (79) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (80) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (50) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (33) type -> . INT_TYPE n_seen_type
    (34) type -> . STRING_TYPE n_seen_type
    (35) type -> . DOUBLE_TYPE n_seen_type
    (36) type -> . FLOAT_TYPE n_seen_type
    (37) type -> . BOOL_TYPE n_seen_type

    $end            reduce using rule 29 (empty -> .)
    RCURLY          reduce using rule 29 (empty -> .)
    FUNCTION        shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    codeblock_aux                  shift and go to state 7
    codeblock                      shift and go to state 28
    empty                          shift and go to state 6
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 8

    (86) codeblock_aux -> statement .

    FUNCTION        reduce using rule 86 (codeblock_aux -> statement .)
    IF              reduce using rule 86 (codeblock_aux -> statement .)
    FOR             reduce using rule 86 (codeblock_aux -> statement .)
    WHILE           reduce using rule 86 (codeblock_aux -> statement .)
    NAME            reduce using rule 86 (codeblock_aux -> statement .)
    INT_TYPE        reduce using rule 86 (codeblock_aux -> statement .)
    STRING_TYPE     reduce using rule 86 (codeblock_aux -> statement .)
    DOUBLE_TYPE     reduce using rule 86 (codeblock_aux -> statement .)
    FLOAT_TYPE      reduce using rule 86 (codeblock_aux -> statement .)
    BOOL_TYPE       reduce using rule 86 (codeblock_aux -> statement .)
    $end            reduce using rule 86 (codeblock_aux -> statement .)
    RCURLY          reduce using rule 86 (codeblock_aux -> statement .)


state 9

    (87) codeblock_aux -> function_definition .

    FUNCTION        reduce using rule 87 (codeblock_aux -> function_definition .)
    IF              reduce using rule 87 (codeblock_aux -> function_definition .)
    FOR             reduce using rule 87 (codeblock_aux -> function_definition .)
    WHILE           reduce using rule 87 (codeblock_aux -> function_definition .)
    NAME            reduce using rule 87 (codeblock_aux -> function_definition .)
    INT_TYPE        reduce using rule 87 (codeblock_aux -> function_definition .)
    STRING_TYPE     reduce using rule 87 (codeblock_aux -> function_definition .)
    DOUBLE_TYPE     reduce using rule 87 (codeblock_aux -> function_definition .)
    FLOAT_TYPE      reduce using rule 87 (codeblock_aux -> function_definition .)
    BOOL_TYPE       reduce using rule 87 (codeblock_aux -> function_definition .)
    $end            reduce using rule 87 (codeblock_aux -> function_definition .)
    RCURLY          reduce using rule 87 (codeblock_aux -> function_definition .)


state 10

    (88) codeblock_aux -> condition_if .

    FUNCTION        reduce using rule 88 (codeblock_aux -> condition_if .)
    IF              reduce using rule 88 (codeblock_aux -> condition_if .)
    FOR             reduce using rule 88 (codeblock_aux -> condition_if .)
    WHILE           reduce using rule 88 (codeblock_aux -> condition_if .)
    NAME            reduce using rule 88 (codeblock_aux -> condition_if .)
    INT_TYPE        reduce using rule 88 (codeblock_aux -> condition_if .)
    STRING_TYPE     reduce using rule 88 (codeblock_aux -> condition_if .)
    DOUBLE_TYPE     reduce using rule 88 (codeblock_aux -> condition_if .)
    FLOAT_TYPE      reduce using rule 88 (codeblock_aux -> condition_if .)
    BOOL_TYPE       reduce using rule 88 (codeblock_aux -> condition_if .)
    $end            reduce using rule 88 (codeblock_aux -> condition_if .)
    RCURLY          reduce using rule 88 (codeblock_aux -> condition_if .)


state 11

    (89) codeblock_aux -> loop .

    FUNCTION        reduce using rule 89 (codeblock_aux -> loop .)
    IF              reduce using rule 89 (codeblock_aux -> loop .)
    FOR             reduce using rule 89 (codeblock_aux -> loop .)
    WHILE           reduce using rule 89 (codeblock_aux -> loop .)
    NAME            reduce using rule 89 (codeblock_aux -> loop .)
    INT_TYPE        reduce using rule 89 (codeblock_aux -> loop .)
    STRING_TYPE     reduce using rule 89 (codeblock_aux -> loop .)
    DOUBLE_TYPE     reduce using rule 89 (codeblock_aux -> loop .)
    FLOAT_TYPE      reduce using rule 89 (codeblock_aux -> loop .)
    BOOL_TYPE       reduce using rule 89 (codeblock_aux -> loop .)
    $end            reduce using rule 89 (codeblock_aux -> loop .)
    RCURLY          reduce using rule 89 (codeblock_aux -> loop .)


state 12

    (81) statement -> statement_aux . SEMICOLON

    SEMICOLON       shift and go to state 29


state 13

    (49) function_definition -> FUNCTION . NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope

    NAME            shift and go to state 30


state 14

    (80) assign -> NAME . n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (50) function_call -> NAME . LPARENTHESIS arg_list RPARENTHESIS
    (5) n_variable_reference -> .

    LPARENTHESIS    shift and go to state 32
    EQUAL           reduce using rule 5 (n_variable_reference -> .)

    n_variable_reference           shift and go to state 31

state 15

    (94) condition_if -> IF . LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2

    LPARENTHESIS    shift and go to state 33


state 16

    (90) loop -> forloop .

    FUNCTION        reduce using rule 90 (loop -> forloop .)
    IF              reduce using rule 90 (loop -> forloop .)
    FOR             reduce using rule 90 (loop -> forloop .)
    WHILE           reduce using rule 90 (loop -> forloop .)
    NAME            reduce using rule 90 (loop -> forloop .)
    INT_TYPE        reduce using rule 90 (loop -> forloop .)
    STRING_TYPE     reduce using rule 90 (loop -> forloop .)
    DOUBLE_TYPE     reduce using rule 90 (loop -> forloop .)
    FLOAT_TYPE      reduce using rule 90 (loop -> forloop .)
    BOOL_TYPE       reduce using rule 90 (loop -> forloop .)
    $end            reduce using rule 90 (loop -> forloop .)
    RCURLY          reduce using rule 90 (loop -> forloop .)


state 17

    (91) loop -> whileloop .

    FUNCTION        reduce using rule 91 (loop -> whileloop .)
    IF              reduce using rule 91 (loop -> whileloop .)
    FOR             reduce using rule 91 (loop -> whileloop .)
    WHILE           reduce using rule 91 (loop -> whileloop .)
    NAME            reduce using rule 91 (loop -> whileloop .)
    INT_TYPE        reduce using rule 91 (loop -> whileloop .)
    STRING_TYPE     reduce using rule 91 (loop -> whileloop .)
    DOUBLE_TYPE     reduce using rule 91 (loop -> whileloop .)
    FLOAT_TYPE      reduce using rule 91 (loop -> whileloop .)
    BOOL_TYPE       reduce using rule 91 (loop -> whileloop .)
    $end            reduce using rule 91 (loop -> whileloop .)
    RCURLY          reduce using rule 91 (loop -> whileloop .)


state 18

    (82) statement_aux -> assign .

    SEMICOLON       reduce using rule 82 (statement_aux -> assign .)


state 19

    (83) statement_aux -> function_call .

    SEMICOLON       reduce using rule 83 (statement_aux -> function_call .)


state 20

    (93) forloop -> FOR . LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope

    LPARENTHESIS    shift and go to state 34


state 21

    (92) whileloop -> WHILE . p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (25) p_n_pre_condition_loop_1 -> .

    LPARENTHESIS    reduce using rule 25 (p_n_pre_condition_loop_1 -> .)

    p_n_pre_condition_loop_1       shift and go to state 35

state 22

    (79) assign -> type . NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression

    NAME            shift and go to state 36


state 23

    (33) type -> INT_TYPE . n_seen_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)
    LCURLY          reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 37

state 24

    (34) type -> STRING_TYPE . n_seen_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)
    LCURLY          reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 38

state 25

    (35) type -> DOUBLE_TYPE . n_seen_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)
    LCURLY          reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 39

state 26

    (36) type -> FLOAT_TYPE . n_seen_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)
    LCURLY          reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 40

state 27

    (37) type -> BOOL_TYPE . n_seen_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)
    LCURLY          reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 41

state 28

    (85) codeblock -> codeblock_aux codeblock .

    $end            reduce using rule 85 (codeblock -> codeblock_aux codeblock .)
    RCURLY          reduce using rule 85 (codeblock -> codeblock_aux codeblock .)


state 29

    (81) statement -> statement_aux SEMICOLON .

    FUNCTION        reduce using rule 81 (statement -> statement_aux SEMICOLON .)
    IF              reduce using rule 81 (statement -> statement_aux SEMICOLON .)
    FOR             reduce using rule 81 (statement -> statement_aux SEMICOLON .)
    WHILE           reduce using rule 81 (statement -> statement_aux SEMICOLON .)
    NAME            reduce using rule 81 (statement -> statement_aux SEMICOLON .)
    INT_TYPE        reduce using rule 81 (statement -> statement_aux SEMICOLON .)
    STRING_TYPE     reduce using rule 81 (statement -> statement_aux SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 81 (statement -> statement_aux SEMICOLON .)
    FLOAT_TYPE      reduce using rule 81 (statement -> statement_aux SEMICOLON .)
    BOOL_TYPE       reduce using rule 81 (statement -> statement_aux SEMICOLON .)
    $end            reduce using rule 81 (statement -> statement_aux SEMICOLON .)
    RCURLY          reduce using rule 81 (statement -> statement_aux SEMICOLON .)


state 30

    (49) function_definition -> FUNCTION NAME . n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope
    (3) n_open_new_scope_function -> .

    INT_TYPE        reduce using rule 3 (n_open_new_scope_function -> .)
    STRING_TYPE     reduce using rule 3 (n_open_new_scope_function -> .)
    DOUBLE_TYPE     reduce using rule 3 (n_open_new_scope_function -> .)
    FLOAT_TYPE      reduce using rule 3 (n_open_new_scope_function -> .)
    BOOL_TYPE       reduce using rule 3 (n_open_new_scope_function -> .)
    DOUBLEDOT       reduce using rule 3 (n_open_new_scope_function -> .)

    n_open_new_scope_function      shift and go to state 42

state 31

    (80) assign -> NAME n_variable_reference . n_math_expression_1_name EQUAL n_seen_equal_op expression
    (10) n_math_expression_1_name -> .

    EQUAL           reduce using rule 10 (n_math_expression_1_name -> .)

    n_math_expression_1_name       shift and go to state 43

state 32

    (50) function_call -> NAME LPARENTHESIS . arg_list RPARENTHESIS
    (51) arg_list -> . empty
    (52) arg_list -> . arg
    (53) arg_list -> . arg COMMA arg_list
    (29) empty -> .
    (57) arg -> . expression
    (59) expression -> . expression_or
    (60) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (61) expression_or -> . expression_rel
    (62) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (63) expression_rel -> . exp
    (64) expression_rel -> . exp relational_operator exp n_math_expression_9
    (65) exp -> . termino n_math_expression_4
    (66) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (67) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (68) termino -> . factor n_math_expression_5
    (69) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (70) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (71) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (72) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (73) factor -> . PLUS value
    (74) factor -> . MINUS value
    (75) factor -> . value
    (76) value -> . function_call
    (77) value -> . literal
    (78) value -> . NAME n_variable_reference n_math_expression_1_name
    (50) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (44) literal -> . FLOAT n_math_expression_1_float
    (45) literal -> . INT n_math_expression_1_int
    (46) literal -> . STRING n_math_expression_1_string

    RPARENTHESIS    reduce using rule 29 (empty -> .)
    LPARENTHESIS    shift and go to state 45
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    NAME            shift and go to state 44
    FLOAT           shift and go to state 60
    INT             shift and go to state 61
    STRING          shift and go to state 62

    arg_list                       shift and go to state 46
    empty                          shift and go to state 47
    arg                            shift and go to state 48
    expression                     shift and go to state 49
    expression_or                  shift and go to state 50
    expression_rel                 shift and go to state 51
    exp                            shift and go to state 52
    termino                        shift and go to state 53
    factor                         shift and go to state 56
    value                          shift and go to state 57
    function_call                  shift and go to state 58
    literal                        shift and go to state 59

state 33

    (94) condition_if -> IF LPARENTHESIS . expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (59) expression -> . expression_or
    (60) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (61) expression_or -> . expression_rel
    (62) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (63) expression_rel -> . exp
    (64) expression_rel -> . exp relational_operator exp n_math_expression_9
    (65) exp -> . termino n_math_expression_4
    (66) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (67) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (68) termino -> . factor n_math_expression_5
    (69) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (70) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (71) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (72) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (73) factor -> . PLUS value
    (74) factor -> . MINUS value
    (75) factor -> . value
    (76) value -> . function_call
    (77) value -> . literal
    (78) value -> . NAME n_variable_reference n_math_expression_1_name
    (50) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (44) literal -> . FLOAT n_math_expression_1_float
    (45) literal -> . INT n_math_expression_1_int
    (46) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 45
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    NAME            shift and go to state 44
    FLOAT           shift and go to state 60
    INT             shift and go to state 61
    STRING          shift and go to state 62

    expression                     shift and go to state 63
    expression_or                  shift and go to state 50
    expression_rel                 shift and go to state 51
    exp                            shift and go to state 52
    termino                        shift and go to state 53
    factor                         shift and go to state 56
    value                          shift and go to state 57
    function_call                  shift and go to state 58
    literal                        shift and go to state 59

state 34

    (93) forloop -> FOR LPARENTHESIS . n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (2) n_open_new_scope -> .

    NAME            reduce using rule 2 (n_open_new_scope -> .)
    INT_TYPE        reduce using rule 2 (n_open_new_scope -> .)
    STRING_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    DOUBLE_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    FLOAT_TYPE      reduce using rule 2 (n_open_new_scope -> .)
    BOOL_TYPE       reduce using rule 2 (n_open_new_scope -> .)

    n_open_new_scope               shift and go to state 64

state 35

    (92) whileloop -> WHILE p_n_pre_condition_loop_1 . LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope

    LPARENTHESIS    shift and go to state 65


state 36

    (79) assign -> type NAME . n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (6) n_variable_instantiate -> .

    EQUAL           reduce using rule 6 (n_variable_instantiate -> .)

    n_variable_instantiate         shift and go to state 66

state 37

    (33) type -> INT_TYPE n_seen_type .

    NAME            reduce using rule 33 (type -> INT_TYPE n_seen_type .)
    LCURLY          reduce using rule 33 (type -> INT_TYPE n_seen_type .)


state 38

    (34) type -> STRING_TYPE n_seen_type .

    NAME            reduce using rule 34 (type -> STRING_TYPE n_seen_type .)
    LCURLY          reduce using rule 34 (type -> STRING_TYPE n_seen_type .)


state 39

    (35) type -> DOUBLE_TYPE n_seen_type .

    NAME            reduce using rule 35 (type -> DOUBLE_TYPE n_seen_type .)
    LCURLY          reduce using rule 35 (type -> DOUBLE_TYPE n_seen_type .)


state 40

    (36) type -> FLOAT_TYPE n_seen_type .

    NAME            reduce using rule 36 (type -> FLOAT_TYPE n_seen_type .)
    LCURLY          reduce using rule 36 (type -> FLOAT_TYPE n_seen_type .)


state 41

    (37) type -> BOOL_TYPE n_seen_type .

    NAME            reduce using rule 37 (type -> BOOL_TYPE n_seen_type .)
    LCURLY          reduce using rule 37 (type -> BOOL_TYPE n_seen_type .)


state 42

    (49) function_definition -> FUNCTION NAME n_open_new_scope_function . parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope
    (54) parameter_list -> . empty
    (55) parameter_list -> . parameter
    (56) parameter_list -> . parameter COMMA parameter_list
    (29) empty -> .
    (58) parameter -> . type NAME n_variable_instantiate
    (33) type -> . INT_TYPE n_seen_type
    (34) type -> . STRING_TYPE n_seen_type
    (35) type -> . DOUBLE_TYPE n_seen_type
    (36) type -> . FLOAT_TYPE n_seen_type
    (37) type -> . BOOL_TYPE n_seen_type

    DOUBLEDOT       reduce using rule 29 (empty -> .)
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    parameter_list                 shift and go to state 67
    empty                          shift and go to state 68
    parameter                      shift and go to state 69
    type                           shift and go to state 70

state 43

    (80) assign -> NAME n_variable_reference n_math_expression_1_name . EQUAL n_seen_equal_op expression

    EQUAL           shift and go to state 71


state 44

    (78) value -> NAME . n_variable_reference n_math_expression_1_name
    (50) function_call -> NAME . LPARENTHESIS arg_list RPARENTHESIS
    (5) n_variable_reference -> .

    LPARENTHESIS    shift and go to state 32
    TIMES           reduce using rule 5 (n_variable_reference -> .)
    DIVIDE          reduce using rule 5 (n_variable_reference -> .)
    MODULUS         reduce using rule 5 (n_variable_reference -> .)
    PLUS            reduce using rule 5 (n_variable_reference -> .)
    MINUS           reduce using rule 5 (n_variable_reference -> .)
    GREATERTHAN     reduce using rule 5 (n_variable_reference -> .)
    LESSTHAN        reduce using rule 5 (n_variable_reference -> .)
    EQUALEQUAL      reduce using rule 5 (n_variable_reference -> .)
    LESSTHANOREQUAL reduce using rule 5 (n_variable_reference -> .)
    GREATERTHANOREQUAL reduce using rule 5 (n_variable_reference -> .)
    NOTEQUAL        reduce using rule 5 (n_variable_reference -> .)
    OR              reduce using rule 5 (n_variable_reference -> .)
    AND             reduce using rule 5 (n_variable_reference -> .)
    COMMA           reduce using rule 5 (n_variable_reference -> .)
    RPARENTHESIS    reduce using rule 5 (n_variable_reference -> .)
    SEMICOLON       reduce using rule 5 (n_variable_reference -> .)
    DOUBLEDOT       reduce using rule 5 (n_variable_reference -> .)

    n_variable_reference           shift and go to state 72

state 45

    (72) factor -> LPARENTHESIS . n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (15) n_math_expression_6 -> .

    LPARENTHESIS    reduce using rule 15 (n_math_expression_6 -> .)
    PLUS            reduce using rule 15 (n_math_expression_6 -> .)
    MINUS           reduce using rule 15 (n_math_expression_6 -> .)
    NAME            reduce using rule 15 (n_math_expression_6 -> .)
    FLOAT           reduce using rule 15 (n_math_expression_6 -> .)
    INT             reduce using rule 15 (n_math_expression_6 -> .)
    STRING          reduce using rule 15 (n_math_expression_6 -> .)

    n_math_expression_6            shift and go to state 73

state 46

    (50) function_call -> NAME LPARENTHESIS arg_list . RPARENTHESIS

    RPARENTHESIS    shift and go to state 74


state 47

    (51) arg_list -> empty .

    RPARENTHESIS    reduce using rule 51 (arg_list -> empty .)


state 48

    (52) arg_list -> arg .
    (53) arg_list -> arg . COMMA arg_list

    RPARENTHESIS    reduce using rule 52 (arg_list -> arg .)
    COMMA           shift and go to state 75


state 49

    (57) arg -> expression .

    COMMA           reduce using rule 57 (arg -> expression .)
    RPARENTHESIS    reduce using rule 57 (arg -> expression .)


state 50

    (59) expression -> expression_or .
    (60) expression -> expression_or . AND n_math_expression_10 expression n_math_expression_11

    COMMA           reduce using rule 59 (expression -> expression_or .)
    RPARENTHESIS    reduce using rule 59 (expression -> expression_or .)
    SEMICOLON       reduce using rule 59 (expression -> expression_or .)
    DOUBLEDOT       reduce using rule 59 (expression -> expression_or .)
    AND             shift and go to state 76


state 51

    (61) expression_or -> expression_rel .
    (62) expression_or -> expression_rel . OR n_math_expression_10 expression_or n_math_expression_12

    AND             reduce using rule 61 (expression_or -> expression_rel .)
    COMMA           reduce using rule 61 (expression_or -> expression_rel .)
    RPARENTHESIS    reduce using rule 61 (expression_or -> expression_rel .)
    SEMICOLON       reduce using rule 61 (expression_or -> expression_rel .)
    DOUBLEDOT       reduce using rule 61 (expression_or -> expression_rel .)
    OR              shift and go to state 77


state 52

    (63) expression_rel -> exp .
    (64) expression_rel -> exp . relational_operator exp n_math_expression_9
    (38) relational_operator -> . GREATERTHAN n_math_expression_8
    (39) relational_operator -> . LESSTHAN n_math_expression_8
    (40) relational_operator -> . EQUALEQUAL n_math_expression_8
    (41) relational_operator -> . LESSTHANOREQUAL n_math_expression_8
    (42) relational_operator -> . GREATERTHANOREQUAL n_math_expression_8
    (43) relational_operator -> . NOTEQUAL n_math_expression_8

    OR              reduce using rule 63 (expression_rel -> exp .)
    AND             reduce using rule 63 (expression_rel -> exp .)
    COMMA           reduce using rule 63 (expression_rel -> exp .)
    RPARENTHESIS    reduce using rule 63 (expression_rel -> exp .)
    SEMICOLON       reduce using rule 63 (expression_rel -> exp .)
    DOUBLEDOT       reduce using rule 63 (expression_rel -> exp .)
    GREATERTHAN     shift and go to state 79
    LESSTHAN        shift and go to state 80
    EQUALEQUAL      shift and go to state 81
    LESSTHANOREQUAL shift and go to state 82
    GREATERTHANOREQUAL shift and go to state 83
    NOTEQUAL        shift and go to state 84

    relational_operator            shift and go to state 78

state 53

    (65) exp -> termino . n_math_expression_4
    (66) exp -> termino . n_math_expression_4 PLUS n_math_expression_2 exp
    (67) exp -> termino . n_math_expression_4 MINUS n_math_expression_2 exp
    (13) n_math_expression_4 -> .

    PLUS            reduce using rule 13 (n_math_expression_4 -> .)
    MINUS           reduce using rule 13 (n_math_expression_4 -> .)
    GREATERTHAN     reduce using rule 13 (n_math_expression_4 -> .)
    LESSTHAN        reduce using rule 13 (n_math_expression_4 -> .)
    EQUALEQUAL      reduce using rule 13 (n_math_expression_4 -> .)
    LESSTHANOREQUAL reduce using rule 13 (n_math_expression_4 -> .)
    GREATERTHANOREQUAL reduce using rule 13 (n_math_expression_4 -> .)
    NOTEQUAL        reduce using rule 13 (n_math_expression_4 -> .)
    OR              reduce using rule 13 (n_math_expression_4 -> .)
    AND             reduce using rule 13 (n_math_expression_4 -> .)
    COMMA           reduce using rule 13 (n_math_expression_4 -> .)
    RPARENTHESIS    reduce using rule 13 (n_math_expression_4 -> .)
    SEMICOLON       reduce using rule 13 (n_math_expression_4 -> .)
    DOUBLEDOT       reduce using rule 13 (n_math_expression_4 -> .)

    n_math_expression_4            shift and go to state 85

state 54

    (73) factor -> PLUS . value
    (76) value -> . function_call
    (77) value -> . literal
    (78) value -> . NAME n_variable_reference n_math_expression_1_name
    (50) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (44) literal -> . FLOAT n_math_expression_1_float
    (45) literal -> . INT n_math_expression_1_int
    (46) literal -> . STRING n_math_expression_1_string

    NAME            shift and go to state 44
    FLOAT           shift and go to state 60
    INT             shift and go to state 61
    STRING          shift and go to state 62

    value                          shift and go to state 86
    function_call                  shift and go to state 58
    literal                        shift and go to state 59

state 55

    (74) factor -> MINUS . value
    (76) value -> . function_call
    (77) value -> . literal
    (78) value -> . NAME n_variable_reference n_math_expression_1_name
    (50) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (44) literal -> . FLOAT n_math_expression_1_float
    (45) literal -> . INT n_math_expression_1_int
    (46) literal -> . STRING n_math_expression_1_string

    NAME            shift and go to state 44
    FLOAT           shift and go to state 60
    INT             shift and go to state 61
    STRING          shift and go to state 62

    value                          shift and go to state 87
    function_call                  shift and go to state 58
    literal                        shift and go to state 59

state 56

    (68) termino -> factor . n_math_expression_5
    (69) termino -> factor . n_math_expression_5 TIMES n_math_expression_3 termino
    (70) termino -> factor . n_math_expression_5 DIVIDE n_math_expression_3 termino
    (71) termino -> factor . n_math_expression_5 MODULUS n_math_expression_3 termino
    (14) n_math_expression_5 -> .

    TIMES           reduce using rule 14 (n_math_expression_5 -> .)
    DIVIDE          reduce using rule 14 (n_math_expression_5 -> .)
    MODULUS         reduce using rule 14 (n_math_expression_5 -> .)
    PLUS            reduce using rule 14 (n_math_expression_5 -> .)
    MINUS           reduce using rule 14 (n_math_expression_5 -> .)
    GREATERTHAN     reduce using rule 14 (n_math_expression_5 -> .)
    LESSTHAN        reduce using rule 14 (n_math_expression_5 -> .)
    EQUALEQUAL      reduce using rule 14 (n_math_expression_5 -> .)
    LESSTHANOREQUAL reduce using rule 14 (n_math_expression_5 -> .)
    GREATERTHANOREQUAL reduce using rule 14 (n_math_expression_5 -> .)
    NOTEQUAL        reduce using rule 14 (n_math_expression_5 -> .)
    OR              reduce using rule 14 (n_math_expression_5 -> .)
    AND             reduce using rule 14 (n_math_expression_5 -> .)
    COMMA           reduce using rule 14 (n_math_expression_5 -> .)
    RPARENTHESIS    reduce using rule 14 (n_math_expression_5 -> .)
    SEMICOLON       reduce using rule 14 (n_math_expression_5 -> .)
    DOUBLEDOT       reduce using rule 14 (n_math_expression_5 -> .)

    n_math_expression_5            shift and go to state 88

state 57

    (75) factor -> value .

    TIMES           reduce using rule 75 (factor -> value .)
    DIVIDE          reduce using rule 75 (factor -> value .)
    MODULUS         reduce using rule 75 (factor -> value .)
    PLUS            reduce using rule 75 (factor -> value .)
    MINUS           reduce using rule 75 (factor -> value .)
    GREATERTHAN     reduce using rule 75 (factor -> value .)
    LESSTHAN        reduce using rule 75 (factor -> value .)
    EQUALEQUAL      reduce using rule 75 (factor -> value .)
    LESSTHANOREQUAL reduce using rule 75 (factor -> value .)
    GREATERTHANOREQUAL reduce using rule 75 (factor -> value .)
    NOTEQUAL        reduce using rule 75 (factor -> value .)
    OR              reduce using rule 75 (factor -> value .)
    AND             reduce using rule 75 (factor -> value .)
    COMMA           reduce using rule 75 (factor -> value .)
    RPARENTHESIS    reduce using rule 75 (factor -> value .)
    SEMICOLON       reduce using rule 75 (factor -> value .)
    DOUBLEDOT       reduce using rule 75 (factor -> value .)


state 58

    (76) value -> function_call .

    TIMES           reduce using rule 76 (value -> function_call .)
    DIVIDE          reduce using rule 76 (value -> function_call .)
    MODULUS         reduce using rule 76 (value -> function_call .)
    PLUS            reduce using rule 76 (value -> function_call .)
    MINUS           reduce using rule 76 (value -> function_call .)
    GREATERTHAN     reduce using rule 76 (value -> function_call .)
    LESSTHAN        reduce using rule 76 (value -> function_call .)
    EQUALEQUAL      reduce using rule 76 (value -> function_call .)
    LESSTHANOREQUAL reduce using rule 76 (value -> function_call .)
    GREATERTHANOREQUAL reduce using rule 76 (value -> function_call .)
    NOTEQUAL        reduce using rule 76 (value -> function_call .)
    OR              reduce using rule 76 (value -> function_call .)
    AND             reduce using rule 76 (value -> function_call .)
    COMMA           reduce using rule 76 (value -> function_call .)
    RPARENTHESIS    reduce using rule 76 (value -> function_call .)
    SEMICOLON       reduce using rule 76 (value -> function_call .)
    DOUBLEDOT       reduce using rule 76 (value -> function_call .)


state 59

    (77) value -> literal .

    TIMES           reduce using rule 77 (value -> literal .)
    DIVIDE          reduce using rule 77 (value -> literal .)
    MODULUS         reduce using rule 77 (value -> literal .)
    PLUS            reduce using rule 77 (value -> literal .)
    MINUS           reduce using rule 77 (value -> literal .)
    GREATERTHAN     reduce using rule 77 (value -> literal .)
    LESSTHAN        reduce using rule 77 (value -> literal .)
    EQUALEQUAL      reduce using rule 77 (value -> literal .)
    LESSTHANOREQUAL reduce using rule 77 (value -> literal .)
    GREATERTHANOREQUAL reduce using rule 77 (value -> literal .)
    NOTEQUAL        reduce using rule 77 (value -> literal .)
    OR              reduce using rule 77 (value -> literal .)
    AND             reduce using rule 77 (value -> literal .)
    COMMA           reduce using rule 77 (value -> literal .)
    RPARENTHESIS    reduce using rule 77 (value -> literal .)
    SEMICOLON       reduce using rule 77 (value -> literal .)
    DOUBLEDOT       reduce using rule 77 (value -> literal .)


state 60

    (44) literal -> FLOAT . n_math_expression_1_float
    (8) n_math_expression_1_float -> .

    TIMES           reduce using rule 8 (n_math_expression_1_float -> .)
    DIVIDE          reduce using rule 8 (n_math_expression_1_float -> .)
    MODULUS         reduce using rule 8 (n_math_expression_1_float -> .)
    PLUS            reduce using rule 8 (n_math_expression_1_float -> .)
    MINUS           reduce using rule 8 (n_math_expression_1_float -> .)
    GREATERTHAN     reduce using rule 8 (n_math_expression_1_float -> .)
    LESSTHAN        reduce using rule 8 (n_math_expression_1_float -> .)
    EQUALEQUAL      reduce using rule 8 (n_math_expression_1_float -> .)
    LESSTHANOREQUAL reduce using rule 8 (n_math_expression_1_float -> .)
    GREATERTHANOREQUAL reduce using rule 8 (n_math_expression_1_float -> .)
    NOTEQUAL        reduce using rule 8 (n_math_expression_1_float -> .)
    OR              reduce using rule 8 (n_math_expression_1_float -> .)
    AND             reduce using rule 8 (n_math_expression_1_float -> .)
    COMMA           reduce using rule 8 (n_math_expression_1_float -> .)
    RPARENTHESIS    reduce using rule 8 (n_math_expression_1_float -> .)
    SEMICOLON       reduce using rule 8 (n_math_expression_1_float -> .)
    DOUBLEDOT       reduce using rule 8 (n_math_expression_1_float -> .)

    n_math_expression_1_float      shift and go to state 89

state 61

    (45) literal -> INT . n_math_expression_1_int
    (7) n_math_expression_1_int -> .

    TIMES           reduce using rule 7 (n_math_expression_1_int -> .)
    DIVIDE          reduce using rule 7 (n_math_expression_1_int -> .)
    MODULUS         reduce using rule 7 (n_math_expression_1_int -> .)
    PLUS            reduce using rule 7 (n_math_expression_1_int -> .)
    MINUS           reduce using rule 7 (n_math_expression_1_int -> .)
    GREATERTHAN     reduce using rule 7 (n_math_expression_1_int -> .)
    LESSTHAN        reduce using rule 7 (n_math_expression_1_int -> .)
    EQUALEQUAL      reduce using rule 7 (n_math_expression_1_int -> .)
    LESSTHANOREQUAL reduce using rule 7 (n_math_expression_1_int -> .)
    GREATERTHANOREQUAL reduce using rule 7 (n_math_expression_1_int -> .)
    NOTEQUAL        reduce using rule 7 (n_math_expression_1_int -> .)
    OR              reduce using rule 7 (n_math_expression_1_int -> .)
    AND             reduce using rule 7 (n_math_expression_1_int -> .)
    COMMA           reduce using rule 7 (n_math_expression_1_int -> .)
    RPARENTHESIS    reduce using rule 7 (n_math_expression_1_int -> .)
    SEMICOLON       reduce using rule 7 (n_math_expression_1_int -> .)
    DOUBLEDOT       reduce using rule 7 (n_math_expression_1_int -> .)

    n_math_expression_1_int        shift and go to state 90

state 62

    (46) literal -> STRING . n_math_expression_1_string
    (9) n_math_expression_1_string -> .

    TIMES           reduce using rule 9 (n_math_expression_1_string -> .)
    DIVIDE          reduce using rule 9 (n_math_expression_1_string -> .)
    MODULUS         reduce using rule 9 (n_math_expression_1_string -> .)
    PLUS            reduce using rule 9 (n_math_expression_1_string -> .)
    MINUS           reduce using rule 9 (n_math_expression_1_string -> .)
    GREATERTHAN     reduce using rule 9 (n_math_expression_1_string -> .)
    LESSTHAN        reduce using rule 9 (n_math_expression_1_string -> .)
    EQUALEQUAL      reduce using rule 9 (n_math_expression_1_string -> .)
    LESSTHANOREQUAL reduce using rule 9 (n_math_expression_1_string -> .)
    GREATERTHANOREQUAL reduce using rule 9 (n_math_expression_1_string -> .)
    NOTEQUAL        reduce using rule 9 (n_math_expression_1_string -> .)
    OR              reduce using rule 9 (n_math_expression_1_string -> .)
    AND             reduce using rule 9 (n_math_expression_1_string -> .)
    COMMA           reduce using rule 9 (n_math_expression_1_string -> .)
    RPARENTHESIS    reduce using rule 9 (n_math_expression_1_string -> .)
    SEMICOLON       reduce using rule 9 (n_math_expression_1_string -> .)
    DOUBLEDOT       reduce using rule 9 (n_math_expression_1_string -> .)

    n_math_expression_1_string     shift and go to state 91

state 63

    (94) condition_if -> IF LPARENTHESIS expression . RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2

    RPARENTHESIS    shift and go to state 92


state 64

    (93) forloop -> FOR LPARENTHESIS n_open_new_scope . assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (79) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (80) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (33) type -> . INT_TYPE n_seen_type
    (34) type -> . STRING_TYPE n_seen_type
    (35) type -> . DOUBLE_TYPE n_seen_type
    (36) type -> . FLOAT_TYPE n_seen_type
    (37) type -> . BOOL_TYPE n_seen_type

    NAME            shift and go to state 94
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    assign                         shift and go to state 93
    type                           shift and go to state 22

state 65

    (92) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS . expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (59) expression -> . expression_or
    (60) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (61) expression_or -> . expression_rel
    (62) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (63) expression_rel -> . exp
    (64) expression_rel -> . exp relational_operator exp n_math_expression_9
    (65) exp -> . termino n_math_expression_4
    (66) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (67) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (68) termino -> . factor n_math_expression_5
    (69) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (70) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (71) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (72) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (73) factor -> . PLUS value
    (74) factor -> . MINUS value
    (75) factor -> . value
    (76) value -> . function_call
    (77) value -> . literal
    (78) value -> . NAME n_variable_reference n_math_expression_1_name
    (50) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (44) literal -> . FLOAT n_math_expression_1_float
    (45) literal -> . INT n_math_expression_1_int
    (46) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 45
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    NAME            shift and go to state 44
    FLOAT           shift and go to state 60
    INT             shift and go to state 61
    STRING          shift and go to state 62

    expression                     shift and go to state 95
    expression_or                  shift and go to state 50
    expression_rel                 shift and go to state 51
    exp                            shift and go to state 52
    termino                        shift and go to state 53
    factor                         shift and go to state 56
    value                          shift and go to state 57
    function_call                  shift and go to state 58
    literal                        shift and go to state 59

state 66

    (79) assign -> type NAME n_variable_instantiate . n_math_expression_1_name EQUAL n_seen_equal_op expression
    (10) n_math_expression_1_name -> .

    EQUAL           reduce using rule 10 (n_math_expression_1_name -> .)

    n_math_expression_1_name       shift and go to state 96

state 67

    (49) function_definition -> FUNCTION NAME n_open_new_scope_function parameter_list . DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope

    DOUBLEDOT       shift and go to state 97


state 68

    (54) parameter_list -> empty .

    DOUBLEDOT       reduce using rule 54 (parameter_list -> empty .)


state 69

    (55) parameter_list -> parameter .
    (56) parameter_list -> parameter . COMMA parameter_list

    DOUBLEDOT       reduce using rule 55 (parameter_list -> parameter .)
    COMMA           shift and go to state 98


state 70

    (58) parameter -> type . NAME n_variable_instantiate

    NAME            shift and go to state 99


state 71

    (80) assign -> NAME n_variable_reference n_math_expression_1_name EQUAL . n_seen_equal_op expression
    (28) n_seen_equal_op -> .

    LPARENTHESIS    reduce using rule 28 (n_seen_equal_op -> .)
    PLUS            reduce using rule 28 (n_seen_equal_op -> .)
    MINUS           reduce using rule 28 (n_seen_equal_op -> .)
    NAME            reduce using rule 28 (n_seen_equal_op -> .)
    FLOAT           reduce using rule 28 (n_seen_equal_op -> .)
    INT             reduce using rule 28 (n_seen_equal_op -> .)
    STRING          reduce using rule 28 (n_seen_equal_op -> .)

    n_seen_equal_op                shift and go to state 100

state 72

    (78) value -> NAME n_variable_reference . n_math_expression_1_name
    (10) n_math_expression_1_name -> .

    TIMES           reduce using rule 10 (n_math_expression_1_name -> .)
    DIVIDE          reduce using rule 10 (n_math_expression_1_name -> .)
    MODULUS         reduce using rule 10 (n_math_expression_1_name -> .)
    PLUS            reduce using rule 10 (n_math_expression_1_name -> .)
    MINUS           reduce using rule 10 (n_math_expression_1_name -> .)
    GREATERTHAN     reduce using rule 10 (n_math_expression_1_name -> .)
    LESSTHAN        reduce using rule 10 (n_math_expression_1_name -> .)
    EQUALEQUAL      reduce using rule 10 (n_math_expression_1_name -> .)
    LESSTHANOREQUAL reduce using rule 10 (n_math_expression_1_name -> .)
    GREATERTHANOREQUAL reduce using rule 10 (n_math_expression_1_name -> .)
    NOTEQUAL        reduce using rule 10 (n_math_expression_1_name -> .)
    OR              reduce using rule 10 (n_math_expression_1_name -> .)
    AND             reduce using rule 10 (n_math_expression_1_name -> .)
    COMMA           reduce using rule 10 (n_math_expression_1_name -> .)
    RPARENTHESIS    reduce using rule 10 (n_math_expression_1_name -> .)
    SEMICOLON       reduce using rule 10 (n_math_expression_1_name -> .)
    DOUBLEDOT       reduce using rule 10 (n_math_expression_1_name -> .)

    n_math_expression_1_name       shift and go to state 101

state 73

    (72) factor -> LPARENTHESIS n_math_expression_6 . expression RPARENTHESIS n_math_expression_7
    (59) expression -> . expression_or
    (60) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (61) expression_or -> . expression_rel
    (62) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (63) expression_rel -> . exp
    (64) expression_rel -> . exp relational_operator exp n_math_expression_9
    (65) exp -> . termino n_math_expression_4
    (66) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (67) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (68) termino -> . factor n_math_expression_5
    (69) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (70) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (71) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (72) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (73) factor -> . PLUS value
    (74) factor -> . MINUS value
    (75) factor -> . value
    (76) value -> . function_call
    (77) value -> . literal
    (78) value -> . NAME n_variable_reference n_math_expression_1_name
    (50) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (44) literal -> . FLOAT n_math_expression_1_float
    (45) literal -> . INT n_math_expression_1_int
    (46) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 45
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    NAME            shift and go to state 44
    FLOAT           shift and go to state 60
    INT             shift and go to state 61
    STRING          shift and go to state 62

    expression                     shift and go to state 102
    expression_or                  shift and go to state 50
    expression_rel                 shift and go to state 51
    exp                            shift and go to state 52
    termino                        shift and go to state 53
    factor                         shift and go to state 56
    value                          shift and go to state 57
    function_call                  shift and go to state 58
    literal                        shift and go to state 59

state 74

    (50) function_call -> NAME LPARENTHESIS arg_list RPARENTHESIS .

    SEMICOLON       reduce using rule 50 (function_call -> NAME LPARENTHESIS arg_list RPARENTHESIS .)
    TIMES           reduce using rule 50 (function_call -> NAME LPARENTHESIS arg_list RPARENTHESIS .)
    DIVIDE          reduce using rule 50 (function_call -> NAME LPARENTHESIS arg_list RPARENTHESIS .)
    MODULUS         reduce using rule 50 (function_call -> NAME LPARENTHESIS arg_list RPARENTHESIS .)
    PLUS            reduce using rule 50 (function_call -> NAME LPARENTHESIS arg_list RPARENTHESIS .)
    MINUS           reduce using rule 50 (function_call -> NAME LPARENTHESIS arg_list RPARENTHESIS .)
    GREATERTHAN     reduce using rule 50 (function_call -> NAME LPARENTHESIS arg_list RPARENTHESIS .)
    LESSTHAN        reduce using rule 50 (function_call -> NAME LPARENTHESIS arg_list RPARENTHESIS .)
    EQUALEQUAL      reduce using rule 50 (function_call -> NAME LPARENTHESIS arg_list RPARENTHESIS .)
    LESSTHANOREQUAL reduce using rule 50 (function_call -> NAME LPARENTHESIS arg_list RPARENTHESIS .)
    GREATERTHANOREQUAL reduce using rule 50 (function_call -> NAME LPARENTHESIS arg_list RPARENTHESIS .)
    NOTEQUAL        reduce using rule 50 (function_call -> NAME LPARENTHESIS arg_list RPARENTHESIS .)
    OR              reduce using rule 50 (function_call -> NAME LPARENTHESIS arg_list RPARENTHESIS .)
    AND             reduce using rule 50 (function_call -> NAME LPARENTHESIS arg_list RPARENTHESIS .)
    COMMA           reduce using rule 50 (function_call -> NAME LPARENTHESIS arg_list RPARENTHESIS .)
    RPARENTHESIS    reduce using rule 50 (function_call -> NAME LPARENTHESIS arg_list RPARENTHESIS .)
    DOUBLEDOT       reduce using rule 50 (function_call -> NAME LPARENTHESIS arg_list RPARENTHESIS .)


state 75

    (53) arg_list -> arg COMMA . arg_list
    (51) arg_list -> . empty
    (52) arg_list -> . arg
    (53) arg_list -> . arg COMMA arg_list
    (29) empty -> .
    (57) arg -> . expression
    (59) expression -> . expression_or
    (60) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (61) expression_or -> . expression_rel
    (62) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (63) expression_rel -> . exp
    (64) expression_rel -> . exp relational_operator exp n_math_expression_9
    (65) exp -> . termino n_math_expression_4
    (66) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (67) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (68) termino -> . factor n_math_expression_5
    (69) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (70) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (71) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (72) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (73) factor -> . PLUS value
    (74) factor -> . MINUS value
    (75) factor -> . value
    (76) value -> . function_call
    (77) value -> . literal
    (78) value -> . NAME n_variable_reference n_math_expression_1_name
    (50) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (44) literal -> . FLOAT n_math_expression_1_float
    (45) literal -> . INT n_math_expression_1_int
    (46) literal -> . STRING n_math_expression_1_string

    RPARENTHESIS    reduce using rule 29 (empty -> .)
    LPARENTHESIS    shift and go to state 45
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    NAME            shift and go to state 44
    FLOAT           shift and go to state 60
    INT             shift and go to state 61
    STRING          shift and go to state 62

    arg                            shift and go to state 48
    arg_list                       shift and go to state 103
    empty                          shift and go to state 47
    expression                     shift and go to state 49
    expression_or                  shift and go to state 50
    expression_rel                 shift and go to state 51
    exp                            shift and go to state 52
    termino                        shift and go to state 53
    factor                         shift and go to state 56
    value                          shift and go to state 57
    function_call                  shift and go to state 58
    literal                        shift and go to state 59

state 76

    (60) expression -> expression_or AND . n_math_expression_10 expression n_math_expression_11
    (19) n_math_expression_10 -> .

    LPARENTHESIS    reduce using rule 19 (n_math_expression_10 -> .)
    PLUS            reduce using rule 19 (n_math_expression_10 -> .)
    MINUS           reduce using rule 19 (n_math_expression_10 -> .)
    NAME            reduce using rule 19 (n_math_expression_10 -> .)
    FLOAT           reduce using rule 19 (n_math_expression_10 -> .)
    INT             reduce using rule 19 (n_math_expression_10 -> .)
    STRING          reduce using rule 19 (n_math_expression_10 -> .)

    n_math_expression_10           shift and go to state 104

state 77

    (62) expression_or -> expression_rel OR . n_math_expression_10 expression_or n_math_expression_12
    (19) n_math_expression_10 -> .

    LPARENTHESIS    reduce using rule 19 (n_math_expression_10 -> .)
    PLUS            reduce using rule 19 (n_math_expression_10 -> .)
    MINUS           reduce using rule 19 (n_math_expression_10 -> .)
    NAME            reduce using rule 19 (n_math_expression_10 -> .)
    FLOAT           reduce using rule 19 (n_math_expression_10 -> .)
    INT             reduce using rule 19 (n_math_expression_10 -> .)
    STRING          reduce using rule 19 (n_math_expression_10 -> .)

    n_math_expression_10           shift and go to state 105

state 78

    (64) expression_rel -> exp relational_operator . exp n_math_expression_9
    (65) exp -> . termino n_math_expression_4
    (66) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (67) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (68) termino -> . factor n_math_expression_5
    (69) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (70) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (71) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (72) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (73) factor -> . PLUS value
    (74) factor -> . MINUS value
    (75) factor -> . value
    (76) value -> . function_call
    (77) value -> . literal
    (78) value -> . NAME n_variable_reference n_math_expression_1_name
    (50) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (44) literal -> . FLOAT n_math_expression_1_float
    (45) literal -> . INT n_math_expression_1_int
    (46) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 45
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    NAME            shift and go to state 44
    FLOAT           shift and go to state 60
    INT             shift and go to state 61
    STRING          shift and go to state 62

    exp                            shift and go to state 106
    termino                        shift and go to state 53
    factor                         shift and go to state 56
    value                          shift and go to state 57
    function_call                  shift and go to state 58
    literal                        shift and go to state 59

state 79

    (38) relational_operator -> GREATERTHAN . n_math_expression_8
    (17) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 17 (n_math_expression_8 -> .)
    PLUS            reduce using rule 17 (n_math_expression_8 -> .)
    MINUS           reduce using rule 17 (n_math_expression_8 -> .)
    NAME            reduce using rule 17 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 17 (n_math_expression_8 -> .)
    INT             reduce using rule 17 (n_math_expression_8 -> .)
    STRING          reduce using rule 17 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 107

state 80

    (39) relational_operator -> LESSTHAN . n_math_expression_8
    (17) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 17 (n_math_expression_8 -> .)
    PLUS            reduce using rule 17 (n_math_expression_8 -> .)
    MINUS           reduce using rule 17 (n_math_expression_8 -> .)
    NAME            reduce using rule 17 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 17 (n_math_expression_8 -> .)
    INT             reduce using rule 17 (n_math_expression_8 -> .)
    STRING          reduce using rule 17 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 108

state 81

    (40) relational_operator -> EQUALEQUAL . n_math_expression_8
    (17) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 17 (n_math_expression_8 -> .)
    PLUS            reduce using rule 17 (n_math_expression_8 -> .)
    MINUS           reduce using rule 17 (n_math_expression_8 -> .)
    NAME            reduce using rule 17 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 17 (n_math_expression_8 -> .)
    INT             reduce using rule 17 (n_math_expression_8 -> .)
    STRING          reduce using rule 17 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 109

state 82

    (41) relational_operator -> LESSTHANOREQUAL . n_math_expression_8
    (17) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 17 (n_math_expression_8 -> .)
    PLUS            reduce using rule 17 (n_math_expression_8 -> .)
    MINUS           reduce using rule 17 (n_math_expression_8 -> .)
    NAME            reduce using rule 17 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 17 (n_math_expression_8 -> .)
    INT             reduce using rule 17 (n_math_expression_8 -> .)
    STRING          reduce using rule 17 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 110

state 83

    (42) relational_operator -> GREATERTHANOREQUAL . n_math_expression_8
    (17) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 17 (n_math_expression_8 -> .)
    PLUS            reduce using rule 17 (n_math_expression_8 -> .)
    MINUS           reduce using rule 17 (n_math_expression_8 -> .)
    NAME            reduce using rule 17 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 17 (n_math_expression_8 -> .)
    INT             reduce using rule 17 (n_math_expression_8 -> .)
    STRING          reduce using rule 17 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 111

state 84

    (43) relational_operator -> NOTEQUAL . n_math_expression_8
    (17) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 17 (n_math_expression_8 -> .)
    PLUS            reduce using rule 17 (n_math_expression_8 -> .)
    MINUS           reduce using rule 17 (n_math_expression_8 -> .)
    NAME            reduce using rule 17 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 17 (n_math_expression_8 -> .)
    INT             reduce using rule 17 (n_math_expression_8 -> .)
    STRING          reduce using rule 17 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 112

state 85

    (65) exp -> termino n_math_expression_4 .
    (66) exp -> termino n_math_expression_4 . PLUS n_math_expression_2 exp
    (67) exp -> termino n_math_expression_4 . MINUS n_math_expression_2 exp

    GREATERTHAN     reduce using rule 65 (exp -> termino n_math_expression_4 .)
    LESSTHAN        reduce using rule 65 (exp -> termino n_math_expression_4 .)
    EQUALEQUAL      reduce using rule 65 (exp -> termino n_math_expression_4 .)
    LESSTHANOREQUAL reduce using rule 65 (exp -> termino n_math_expression_4 .)
    GREATERTHANOREQUAL reduce using rule 65 (exp -> termino n_math_expression_4 .)
    NOTEQUAL        reduce using rule 65 (exp -> termino n_math_expression_4 .)
    OR              reduce using rule 65 (exp -> termino n_math_expression_4 .)
    AND             reduce using rule 65 (exp -> termino n_math_expression_4 .)
    COMMA           reduce using rule 65 (exp -> termino n_math_expression_4 .)
    RPARENTHESIS    reduce using rule 65 (exp -> termino n_math_expression_4 .)
    SEMICOLON       reduce using rule 65 (exp -> termino n_math_expression_4 .)
    DOUBLEDOT       reduce using rule 65 (exp -> termino n_math_expression_4 .)
    PLUS            shift and go to state 113
    MINUS           shift and go to state 114


state 86

    (73) factor -> PLUS value .

    TIMES           reduce using rule 73 (factor -> PLUS value .)
    DIVIDE          reduce using rule 73 (factor -> PLUS value .)
    MODULUS         reduce using rule 73 (factor -> PLUS value .)
    PLUS            reduce using rule 73 (factor -> PLUS value .)
    MINUS           reduce using rule 73 (factor -> PLUS value .)
    GREATERTHAN     reduce using rule 73 (factor -> PLUS value .)
    LESSTHAN        reduce using rule 73 (factor -> PLUS value .)
    EQUALEQUAL      reduce using rule 73 (factor -> PLUS value .)
    LESSTHANOREQUAL reduce using rule 73 (factor -> PLUS value .)
    GREATERTHANOREQUAL reduce using rule 73 (factor -> PLUS value .)
    NOTEQUAL        reduce using rule 73 (factor -> PLUS value .)
    OR              reduce using rule 73 (factor -> PLUS value .)
    AND             reduce using rule 73 (factor -> PLUS value .)
    COMMA           reduce using rule 73 (factor -> PLUS value .)
    RPARENTHESIS    reduce using rule 73 (factor -> PLUS value .)
    SEMICOLON       reduce using rule 73 (factor -> PLUS value .)
    DOUBLEDOT       reduce using rule 73 (factor -> PLUS value .)


state 87

    (74) factor -> MINUS value .

    TIMES           reduce using rule 74 (factor -> MINUS value .)
    DIVIDE          reduce using rule 74 (factor -> MINUS value .)
    MODULUS         reduce using rule 74 (factor -> MINUS value .)
    PLUS            reduce using rule 74 (factor -> MINUS value .)
    MINUS           reduce using rule 74 (factor -> MINUS value .)
    GREATERTHAN     reduce using rule 74 (factor -> MINUS value .)
    LESSTHAN        reduce using rule 74 (factor -> MINUS value .)
    EQUALEQUAL      reduce using rule 74 (factor -> MINUS value .)
    LESSTHANOREQUAL reduce using rule 74 (factor -> MINUS value .)
    GREATERTHANOREQUAL reduce using rule 74 (factor -> MINUS value .)
    NOTEQUAL        reduce using rule 74 (factor -> MINUS value .)
    OR              reduce using rule 74 (factor -> MINUS value .)
    AND             reduce using rule 74 (factor -> MINUS value .)
    COMMA           reduce using rule 74 (factor -> MINUS value .)
    RPARENTHESIS    reduce using rule 74 (factor -> MINUS value .)
    SEMICOLON       reduce using rule 74 (factor -> MINUS value .)
    DOUBLEDOT       reduce using rule 74 (factor -> MINUS value .)


state 88

    (68) termino -> factor n_math_expression_5 .
    (69) termino -> factor n_math_expression_5 . TIMES n_math_expression_3 termino
    (70) termino -> factor n_math_expression_5 . DIVIDE n_math_expression_3 termino
    (71) termino -> factor n_math_expression_5 . MODULUS n_math_expression_3 termino

    PLUS            reduce using rule 68 (termino -> factor n_math_expression_5 .)
    MINUS           reduce using rule 68 (termino -> factor n_math_expression_5 .)
    GREATERTHAN     reduce using rule 68 (termino -> factor n_math_expression_5 .)
    LESSTHAN        reduce using rule 68 (termino -> factor n_math_expression_5 .)
    EQUALEQUAL      reduce using rule 68 (termino -> factor n_math_expression_5 .)
    LESSTHANOREQUAL reduce using rule 68 (termino -> factor n_math_expression_5 .)
    GREATERTHANOREQUAL reduce using rule 68 (termino -> factor n_math_expression_5 .)
    NOTEQUAL        reduce using rule 68 (termino -> factor n_math_expression_5 .)
    OR              reduce using rule 68 (termino -> factor n_math_expression_5 .)
    AND             reduce using rule 68 (termino -> factor n_math_expression_5 .)
    COMMA           reduce using rule 68 (termino -> factor n_math_expression_5 .)
    RPARENTHESIS    reduce using rule 68 (termino -> factor n_math_expression_5 .)
    SEMICOLON       reduce using rule 68 (termino -> factor n_math_expression_5 .)
    DOUBLEDOT       reduce using rule 68 (termino -> factor n_math_expression_5 .)
    TIMES           shift and go to state 115
    DIVIDE          shift and go to state 116
    MODULUS         shift and go to state 117


state 89

    (44) literal -> FLOAT n_math_expression_1_float .

    TIMES           reduce using rule 44 (literal -> FLOAT n_math_expression_1_float .)
    DIVIDE          reduce using rule 44 (literal -> FLOAT n_math_expression_1_float .)
    MODULUS         reduce using rule 44 (literal -> FLOAT n_math_expression_1_float .)
    PLUS            reduce using rule 44 (literal -> FLOAT n_math_expression_1_float .)
    MINUS           reduce using rule 44 (literal -> FLOAT n_math_expression_1_float .)
    GREATERTHAN     reduce using rule 44 (literal -> FLOAT n_math_expression_1_float .)
    LESSTHAN        reduce using rule 44 (literal -> FLOAT n_math_expression_1_float .)
    EQUALEQUAL      reduce using rule 44 (literal -> FLOAT n_math_expression_1_float .)
    LESSTHANOREQUAL reduce using rule 44 (literal -> FLOAT n_math_expression_1_float .)
    GREATERTHANOREQUAL reduce using rule 44 (literal -> FLOAT n_math_expression_1_float .)
    NOTEQUAL        reduce using rule 44 (literal -> FLOAT n_math_expression_1_float .)
    OR              reduce using rule 44 (literal -> FLOAT n_math_expression_1_float .)
    AND             reduce using rule 44 (literal -> FLOAT n_math_expression_1_float .)
    COMMA           reduce using rule 44 (literal -> FLOAT n_math_expression_1_float .)
    RPARENTHESIS    reduce using rule 44 (literal -> FLOAT n_math_expression_1_float .)
    SEMICOLON       reduce using rule 44 (literal -> FLOAT n_math_expression_1_float .)
    DOUBLEDOT       reduce using rule 44 (literal -> FLOAT n_math_expression_1_float .)


state 90

    (45) literal -> INT n_math_expression_1_int .

    TIMES           reduce using rule 45 (literal -> INT n_math_expression_1_int .)
    DIVIDE          reduce using rule 45 (literal -> INT n_math_expression_1_int .)
    MODULUS         reduce using rule 45 (literal -> INT n_math_expression_1_int .)
    PLUS            reduce using rule 45 (literal -> INT n_math_expression_1_int .)
    MINUS           reduce using rule 45 (literal -> INT n_math_expression_1_int .)
    GREATERTHAN     reduce using rule 45 (literal -> INT n_math_expression_1_int .)
    LESSTHAN        reduce using rule 45 (literal -> INT n_math_expression_1_int .)
    EQUALEQUAL      reduce using rule 45 (literal -> INT n_math_expression_1_int .)
    LESSTHANOREQUAL reduce using rule 45 (literal -> INT n_math_expression_1_int .)
    GREATERTHANOREQUAL reduce using rule 45 (literal -> INT n_math_expression_1_int .)
    NOTEQUAL        reduce using rule 45 (literal -> INT n_math_expression_1_int .)
    OR              reduce using rule 45 (literal -> INT n_math_expression_1_int .)
    AND             reduce using rule 45 (literal -> INT n_math_expression_1_int .)
    COMMA           reduce using rule 45 (literal -> INT n_math_expression_1_int .)
    RPARENTHESIS    reduce using rule 45 (literal -> INT n_math_expression_1_int .)
    SEMICOLON       reduce using rule 45 (literal -> INT n_math_expression_1_int .)
    DOUBLEDOT       reduce using rule 45 (literal -> INT n_math_expression_1_int .)


state 91

    (46) literal -> STRING n_math_expression_1_string .

    TIMES           reduce using rule 46 (literal -> STRING n_math_expression_1_string .)
    DIVIDE          reduce using rule 46 (literal -> STRING n_math_expression_1_string .)
    MODULUS         reduce using rule 46 (literal -> STRING n_math_expression_1_string .)
    PLUS            reduce using rule 46 (literal -> STRING n_math_expression_1_string .)
    MINUS           reduce using rule 46 (literal -> STRING n_math_expression_1_string .)
    GREATERTHAN     reduce using rule 46 (literal -> STRING n_math_expression_1_string .)
    LESSTHAN        reduce using rule 46 (literal -> STRING n_math_expression_1_string .)
    EQUALEQUAL      reduce using rule 46 (literal -> STRING n_math_expression_1_string .)
    LESSTHANOREQUAL reduce using rule 46 (literal -> STRING n_math_expression_1_string .)
    GREATERTHANOREQUAL reduce using rule 46 (literal -> STRING n_math_expression_1_string .)
    NOTEQUAL        reduce using rule 46 (literal -> STRING n_math_expression_1_string .)
    OR              reduce using rule 46 (literal -> STRING n_math_expression_1_string .)
    AND             reduce using rule 46 (literal -> STRING n_math_expression_1_string .)
    COMMA           reduce using rule 46 (literal -> STRING n_math_expression_1_string .)
    RPARENTHESIS    reduce using rule 46 (literal -> STRING n_math_expression_1_string .)
    SEMICOLON       reduce using rule 46 (literal -> STRING n_math_expression_1_string .)
    DOUBLEDOT       reduce using rule 46 (literal -> STRING n_math_expression_1_string .)


state 92

    (94) condition_if -> IF LPARENTHESIS expression RPARENTHESIS . LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2

    LCURLY          shift and go to state 118


state 93

    (93) forloop -> FOR LPARENTHESIS n_open_new_scope assign . DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope

    DOUBLEDOT       shift and go to state 119


state 94

    (80) assign -> NAME . n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (5) n_variable_reference -> .

    EQUAL           reduce using rule 5 (n_variable_reference -> .)

    n_variable_reference           shift and go to state 31

state 95

    (92) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression . RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope

    RPARENTHESIS    shift and go to state 120


state 96

    (79) assign -> type NAME n_variable_instantiate n_math_expression_1_name . EQUAL n_seen_equal_op expression

    EQUAL           shift and go to state 121


state 97

    (49) function_definition -> FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT . function_type LCURLY codeblock RCURLY n_close_scope
    (47) function_type -> . type
    (48) function_type -> . VOID
    (33) type -> . INT_TYPE n_seen_type
    (34) type -> . STRING_TYPE n_seen_type
    (35) type -> . DOUBLE_TYPE n_seen_type
    (36) type -> . FLOAT_TYPE n_seen_type
    (37) type -> . BOOL_TYPE n_seen_type

    VOID            shift and go to state 124
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    function_type                  shift and go to state 122
    type                           shift and go to state 123

state 98

    (56) parameter_list -> parameter COMMA . parameter_list
    (54) parameter_list -> . empty
    (55) parameter_list -> . parameter
    (56) parameter_list -> . parameter COMMA parameter_list
    (29) empty -> .
    (58) parameter -> . type NAME n_variable_instantiate
    (33) type -> . INT_TYPE n_seen_type
    (34) type -> . STRING_TYPE n_seen_type
    (35) type -> . DOUBLE_TYPE n_seen_type
    (36) type -> . FLOAT_TYPE n_seen_type
    (37) type -> . BOOL_TYPE n_seen_type

    DOUBLEDOT       reduce using rule 29 (empty -> .)
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    parameter                      shift and go to state 69
    parameter_list                 shift and go to state 125
    empty                          shift and go to state 68
    type                           shift and go to state 70

state 99

    (58) parameter -> type NAME . n_variable_instantiate
    (6) n_variable_instantiate -> .

    COMMA           reduce using rule 6 (n_variable_instantiate -> .)
    DOUBLEDOT       reduce using rule 6 (n_variable_instantiate -> .)

    n_variable_instantiate         shift and go to state 126

state 100

    (80) assign -> NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op . expression
    (59) expression -> . expression_or
    (60) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (61) expression_or -> . expression_rel
    (62) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (63) expression_rel -> . exp
    (64) expression_rel -> . exp relational_operator exp n_math_expression_9
    (65) exp -> . termino n_math_expression_4
    (66) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (67) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (68) termino -> . factor n_math_expression_5
    (69) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (70) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (71) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (72) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (73) factor -> . PLUS value
    (74) factor -> . MINUS value
    (75) factor -> . value
    (76) value -> . function_call
    (77) value -> . literal
    (78) value -> . NAME n_variable_reference n_math_expression_1_name
    (50) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (44) literal -> . FLOAT n_math_expression_1_float
    (45) literal -> . INT n_math_expression_1_int
    (46) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 45
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    NAME            shift and go to state 44
    FLOAT           shift and go to state 60
    INT             shift and go to state 61
    STRING          shift and go to state 62

    expression                     shift and go to state 127
    expression_or                  shift and go to state 50
    expression_rel                 shift and go to state 51
    exp                            shift and go to state 52
    termino                        shift and go to state 53
    factor                         shift and go to state 56
    value                          shift and go to state 57
    function_call                  shift and go to state 58
    literal                        shift and go to state 59

state 101

    (78) value -> NAME n_variable_reference n_math_expression_1_name .

    TIMES           reduce using rule 78 (value -> NAME n_variable_reference n_math_expression_1_name .)
    DIVIDE          reduce using rule 78 (value -> NAME n_variable_reference n_math_expression_1_name .)
    MODULUS         reduce using rule 78 (value -> NAME n_variable_reference n_math_expression_1_name .)
    PLUS            reduce using rule 78 (value -> NAME n_variable_reference n_math_expression_1_name .)
    MINUS           reduce using rule 78 (value -> NAME n_variable_reference n_math_expression_1_name .)
    GREATERTHAN     reduce using rule 78 (value -> NAME n_variable_reference n_math_expression_1_name .)
    LESSTHAN        reduce using rule 78 (value -> NAME n_variable_reference n_math_expression_1_name .)
    EQUALEQUAL      reduce using rule 78 (value -> NAME n_variable_reference n_math_expression_1_name .)
    LESSTHANOREQUAL reduce using rule 78 (value -> NAME n_variable_reference n_math_expression_1_name .)
    GREATERTHANOREQUAL reduce using rule 78 (value -> NAME n_variable_reference n_math_expression_1_name .)
    NOTEQUAL        reduce using rule 78 (value -> NAME n_variable_reference n_math_expression_1_name .)
    OR              reduce using rule 78 (value -> NAME n_variable_reference n_math_expression_1_name .)
    AND             reduce using rule 78 (value -> NAME n_variable_reference n_math_expression_1_name .)
    COMMA           reduce using rule 78 (value -> NAME n_variable_reference n_math_expression_1_name .)
    RPARENTHESIS    reduce using rule 78 (value -> NAME n_variable_reference n_math_expression_1_name .)
    SEMICOLON       reduce using rule 78 (value -> NAME n_variable_reference n_math_expression_1_name .)
    DOUBLEDOT       reduce using rule 78 (value -> NAME n_variable_reference n_math_expression_1_name .)


state 102

    (72) factor -> LPARENTHESIS n_math_expression_6 expression . RPARENTHESIS n_math_expression_7

    RPARENTHESIS    shift and go to state 128


state 103

    (53) arg_list -> arg COMMA arg_list .

    RPARENTHESIS    reduce using rule 53 (arg_list -> arg COMMA arg_list .)


state 104

    (60) expression -> expression_or AND n_math_expression_10 . expression n_math_expression_11
    (59) expression -> . expression_or
    (60) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (61) expression_or -> . expression_rel
    (62) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (63) expression_rel -> . exp
    (64) expression_rel -> . exp relational_operator exp n_math_expression_9
    (65) exp -> . termino n_math_expression_4
    (66) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (67) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (68) termino -> . factor n_math_expression_5
    (69) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (70) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (71) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (72) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (73) factor -> . PLUS value
    (74) factor -> . MINUS value
    (75) factor -> . value
    (76) value -> . function_call
    (77) value -> . literal
    (78) value -> . NAME n_variable_reference n_math_expression_1_name
    (50) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (44) literal -> . FLOAT n_math_expression_1_float
    (45) literal -> . INT n_math_expression_1_int
    (46) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 45
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    NAME            shift and go to state 44
    FLOAT           shift and go to state 60
    INT             shift and go to state 61
    STRING          shift and go to state 62

    expression_or                  shift and go to state 50
    expression                     shift and go to state 129
    expression_rel                 shift and go to state 51
    exp                            shift and go to state 52
    termino                        shift and go to state 53
    factor                         shift and go to state 56
    value                          shift and go to state 57
    function_call                  shift and go to state 58
    literal                        shift and go to state 59

state 105

    (62) expression_or -> expression_rel OR n_math_expression_10 . expression_or n_math_expression_12
    (61) expression_or -> . expression_rel
    (62) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (63) expression_rel -> . exp
    (64) expression_rel -> . exp relational_operator exp n_math_expression_9
    (65) exp -> . termino n_math_expression_4
    (66) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (67) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (68) termino -> . factor n_math_expression_5
    (69) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (70) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (71) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (72) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (73) factor -> . PLUS value
    (74) factor -> . MINUS value
    (75) factor -> . value
    (76) value -> . function_call
    (77) value -> . literal
    (78) value -> . NAME n_variable_reference n_math_expression_1_name
    (50) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (44) literal -> . FLOAT n_math_expression_1_float
    (45) literal -> . INT n_math_expression_1_int
    (46) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 45
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    NAME            shift and go to state 44
    FLOAT           shift and go to state 60
    INT             shift and go to state 61
    STRING          shift and go to state 62

    expression_rel                 shift and go to state 51
    expression_or                  shift and go to state 130
    exp                            shift and go to state 52
    termino                        shift and go to state 53
    factor                         shift and go to state 56
    value                          shift and go to state 57
    function_call                  shift and go to state 58
    literal                        shift and go to state 59

state 106

    (64) expression_rel -> exp relational_operator exp . n_math_expression_9
    (18) n_math_expression_9 -> .

    OR              reduce using rule 18 (n_math_expression_9 -> .)
    AND             reduce using rule 18 (n_math_expression_9 -> .)
    COMMA           reduce using rule 18 (n_math_expression_9 -> .)
    RPARENTHESIS    reduce using rule 18 (n_math_expression_9 -> .)
    SEMICOLON       reduce using rule 18 (n_math_expression_9 -> .)
    DOUBLEDOT       reduce using rule 18 (n_math_expression_9 -> .)

    n_math_expression_9            shift and go to state 131

state 107

    (38) relational_operator -> GREATERTHAN n_math_expression_8 .

    LPARENTHESIS    reduce using rule 38 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    PLUS            reduce using rule 38 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    MINUS           reduce using rule 38 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    NAME            reduce using rule 38 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    FLOAT           reduce using rule 38 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    INT             reduce using rule 38 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    STRING          reduce using rule 38 (relational_operator -> GREATERTHAN n_math_expression_8 .)


state 108

    (39) relational_operator -> LESSTHAN n_math_expression_8 .

    LPARENTHESIS    reduce using rule 39 (relational_operator -> LESSTHAN n_math_expression_8 .)
    PLUS            reduce using rule 39 (relational_operator -> LESSTHAN n_math_expression_8 .)
    MINUS           reduce using rule 39 (relational_operator -> LESSTHAN n_math_expression_8 .)
    NAME            reduce using rule 39 (relational_operator -> LESSTHAN n_math_expression_8 .)
    FLOAT           reduce using rule 39 (relational_operator -> LESSTHAN n_math_expression_8 .)
    INT             reduce using rule 39 (relational_operator -> LESSTHAN n_math_expression_8 .)
    STRING          reduce using rule 39 (relational_operator -> LESSTHAN n_math_expression_8 .)


state 109

    (40) relational_operator -> EQUALEQUAL n_math_expression_8 .

    LPARENTHESIS    reduce using rule 40 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    PLUS            reduce using rule 40 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    MINUS           reduce using rule 40 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    NAME            reduce using rule 40 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    FLOAT           reduce using rule 40 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    INT             reduce using rule 40 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    STRING          reduce using rule 40 (relational_operator -> EQUALEQUAL n_math_expression_8 .)


state 110

    (41) relational_operator -> LESSTHANOREQUAL n_math_expression_8 .

    LPARENTHESIS    reduce using rule 41 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    PLUS            reduce using rule 41 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    MINUS           reduce using rule 41 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    NAME            reduce using rule 41 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    FLOAT           reduce using rule 41 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    INT             reduce using rule 41 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    STRING          reduce using rule 41 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)


state 111

    (42) relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .

    LPARENTHESIS    reduce using rule 42 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    PLUS            reduce using rule 42 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    MINUS           reduce using rule 42 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    NAME            reduce using rule 42 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    FLOAT           reduce using rule 42 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    INT             reduce using rule 42 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    STRING          reduce using rule 42 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)


state 112

    (43) relational_operator -> NOTEQUAL n_math_expression_8 .

    LPARENTHESIS    reduce using rule 43 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    PLUS            reduce using rule 43 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    MINUS           reduce using rule 43 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    NAME            reduce using rule 43 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    FLOAT           reduce using rule 43 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    INT             reduce using rule 43 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    STRING          reduce using rule 43 (relational_operator -> NOTEQUAL n_math_expression_8 .)


state 113

    (66) exp -> termino n_math_expression_4 PLUS . n_math_expression_2 exp
    (11) n_math_expression_2 -> .

    LPARENTHESIS    reduce using rule 11 (n_math_expression_2 -> .)
    PLUS            reduce using rule 11 (n_math_expression_2 -> .)
    MINUS           reduce using rule 11 (n_math_expression_2 -> .)
    NAME            reduce using rule 11 (n_math_expression_2 -> .)
    FLOAT           reduce using rule 11 (n_math_expression_2 -> .)
    INT             reduce using rule 11 (n_math_expression_2 -> .)
    STRING          reduce using rule 11 (n_math_expression_2 -> .)

    n_math_expression_2            shift and go to state 132

state 114

    (67) exp -> termino n_math_expression_4 MINUS . n_math_expression_2 exp
    (11) n_math_expression_2 -> .

    LPARENTHESIS    reduce using rule 11 (n_math_expression_2 -> .)
    PLUS            reduce using rule 11 (n_math_expression_2 -> .)
    MINUS           reduce using rule 11 (n_math_expression_2 -> .)
    NAME            reduce using rule 11 (n_math_expression_2 -> .)
    FLOAT           reduce using rule 11 (n_math_expression_2 -> .)
    INT             reduce using rule 11 (n_math_expression_2 -> .)
    STRING          reduce using rule 11 (n_math_expression_2 -> .)

    n_math_expression_2            shift and go to state 133

state 115

    (69) termino -> factor n_math_expression_5 TIMES . n_math_expression_3 termino
    (12) n_math_expression_3 -> .

    LPARENTHESIS    reduce using rule 12 (n_math_expression_3 -> .)
    PLUS            reduce using rule 12 (n_math_expression_3 -> .)
    MINUS           reduce using rule 12 (n_math_expression_3 -> .)
    NAME            reduce using rule 12 (n_math_expression_3 -> .)
    FLOAT           reduce using rule 12 (n_math_expression_3 -> .)
    INT             reduce using rule 12 (n_math_expression_3 -> .)
    STRING          reduce using rule 12 (n_math_expression_3 -> .)

    n_math_expression_3            shift and go to state 134

state 116

    (70) termino -> factor n_math_expression_5 DIVIDE . n_math_expression_3 termino
    (12) n_math_expression_3 -> .

    LPARENTHESIS    reduce using rule 12 (n_math_expression_3 -> .)
    PLUS            reduce using rule 12 (n_math_expression_3 -> .)
    MINUS           reduce using rule 12 (n_math_expression_3 -> .)
    NAME            reduce using rule 12 (n_math_expression_3 -> .)
    FLOAT           reduce using rule 12 (n_math_expression_3 -> .)
    INT             reduce using rule 12 (n_math_expression_3 -> .)
    STRING          reduce using rule 12 (n_math_expression_3 -> .)

    n_math_expression_3            shift and go to state 135

state 117

    (71) termino -> factor n_math_expression_5 MODULUS . n_math_expression_3 termino
    (12) n_math_expression_3 -> .

    LPARENTHESIS    reduce using rule 12 (n_math_expression_3 -> .)
    PLUS            reduce using rule 12 (n_math_expression_3 -> .)
    MINUS           reduce using rule 12 (n_math_expression_3 -> .)
    NAME            reduce using rule 12 (n_math_expression_3 -> .)
    FLOAT           reduce using rule 12 (n_math_expression_3 -> .)
    INT             reduce using rule 12 (n_math_expression_3 -> .)
    STRING          reduce using rule 12 (n_math_expression_3 -> .)

    n_math_expression_3            shift and go to state 136

state 118

    (94) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY . n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (22) n_two_way_conditional_1 -> .

    FUNCTION        reduce using rule 22 (n_two_way_conditional_1 -> .)
    IF              reduce using rule 22 (n_two_way_conditional_1 -> .)
    FOR             reduce using rule 22 (n_two_way_conditional_1 -> .)
    WHILE           reduce using rule 22 (n_two_way_conditional_1 -> .)
    NAME            reduce using rule 22 (n_two_way_conditional_1 -> .)
    INT_TYPE        reduce using rule 22 (n_two_way_conditional_1 -> .)
    STRING_TYPE     reduce using rule 22 (n_two_way_conditional_1 -> .)
    DOUBLE_TYPE     reduce using rule 22 (n_two_way_conditional_1 -> .)
    FLOAT_TYPE      reduce using rule 22 (n_two_way_conditional_1 -> .)
    BOOL_TYPE       reduce using rule 22 (n_two_way_conditional_1 -> .)
    RCURLY          reduce using rule 22 (n_two_way_conditional_1 -> .)

    n_two_way_conditional_1        shift and go to state 137

state 119

    (93) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT . expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (59) expression -> . expression_or
    (60) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (61) expression_or -> . expression_rel
    (62) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (63) expression_rel -> . exp
    (64) expression_rel -> . exp relational_operator exp n_math_expression_9
    (65) exp -> . termino n_math_expression_4
    (66) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (67) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (68) termino -> . factor n_math_expression_5
    (69) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (70) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (71) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (72) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (73) factor -> . PLUS value
    (74) factor -> . MINUS value
    (75) factor -> . value
    (76) value -> . function_call
    (77) value -> . literal
    (78) value -> . NAME n_variable_reference n_math_expression_1_name
    (50) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (44) literal -> . FLOAT n_math_expression_1_float
    (45) literal -> . INT n_math_expression_1_int
    (46) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 45
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    NAME            shift and go to state 44
    FLOAT           shift and go to state 60
    INT             shift and go to state 61
    STRING          shift and go to state 62

    expression                     shift and go to state 138
    expression_or                  shift and go to state 50
    expression_rel                 shift and go to state 51
    exp                            shift and go to state 52
    termino                        shift and go to state 53
    factor                         shift and go to state 56
    value                          shift and go to state 57
    function_call                  shift and go to state 58
    literal                        shift and go to state 59

state 120

    (92) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS . p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (26) p_n_pre_condition_loop_2 -> .

    LCURLY          reduce using rule 26 (p_n_pre_condition_loop_2 -> .)

    p_n_pre_condition_loop_2       shift and go to state 139

state 121

    (79) assign -> type NAME n_variable_instantiate n_math_expression_1_name EQUAL . n_seen_equal_op expression
    (28) n_seen_equal_op -> .

    LPARENTHESIS    reduce using rule 28 (n_seen_equal_op -> .)
    PLUS            reduce using rule 28 (n_seen_equal_op -> .)
    MINUS           reduce using rule 28 (n_seen_equal_op -> .)
    NAME            reduce using rule 28 (n_seen_equal_op -> .)
    FLOAT           reduce using rule 28 (n_seen_equal_op -> .)
    INT             reduce using rule 28 (n_seen_equal_op -> .)
    STRING          reduce using rule 28 (n_seen_equal_op -> .)

    n_seen_equal_op                shift and go to state 140

state 122

    (49) function_definition -> FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type . LCURLY codeblock RCURLY n_close_scope

    LCURLY          shift and go to state 141


state 123

    (47) function_type -> type .

    LCURLY          reduce using rule 47 (function_type -> type .)


state 124

    (48) function_type -> VOID .

    LCURLY          reduce using rule 48 (function_type -> VOID .)


state 125

    (56) parameter_list -> parameter COMMA parameter_list .

    DOUBLEDOT       reduce using rule 56 (parameter_list -> parameter COMMA parameter_list .)


state 126

    (58) parameter -> type NAME n_variable_instantiate .

    COMMA           reduce using rule 58 (parameter -> type NAME n_variable_instantiate .)
    DOUBLEDOT       reduce using rule 58 (parameter -> type NAME n_variable_instantiate .)


state 127

    (80) assign -> NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression .

    SEMICOLON       reduce using rule 80 (assign -> NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression .)
    DOUBLEDOT       reduce using rule 80 (assign -> NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression .)
    RPARENTHESIS    reduce using rule 80 (assign -> NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression .)


state 128

    (72) factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS . n_math_expression_7
    (16) n_math_expression_7 -> .

    TIMES           reduce using rule 16 (n_math_expression_7 -> .)
    DIVIDE          reduce using rule 16 (n_math_expression_7 -> .)
    MODULUS         reduce using rule 16 (n_math_expression_7 -> .)
    PLUS            reduce using rule 16 (n_math_expression_7 -> .)
    MINUS           reduce using rule 16 (n_math_expression_7 -> .)
    GREATERTHAN     reduce using rule 16 (n_math_expression_7 -> .)
    LESSTHAN        reduce using rule 16 (n_math_expression_7 -> .)
    EQUALEQUAL      reduce using rule 16 (n_math_expression_7 -> .)
    LESSTHANOREQUAL reduce using rule 16 (n_math_expression_7 -> .)
    GREATERTHANOREQUAL reduce using rule 16 (n_math_expression_7 -> .)
    NOTEQUAL        reduce using rule 16 (n_math_expression_7 -> .)
    OR              reduce using rule 16 (n_math_expression_7 -> .)
    AND             reduce using rule 16 (n_math_expression_7 -> .)
    COMMA           reduce using rule 16 (n_math_expression_7 -> .)
    RPARENTHESIS    reduce using rule 16 (n_math_expression_7 -> .)
    SEMICOLON       reduce using rule 16 (n_math_expression_7 -> .)
    DOUBLEDOT       reduce using rule 16 (n_math_expression_7 -> .)

    n_math_expression_7            shift and go to state 142

state 129

    (60) expression -> expression_or AND n_math_expression_10 expression . n_math_expression_11
    (20) n_math_expression_11 -> .

    COMMA           reduce using rule 20 (n_math_expression_11 -> .)
    RPARENTHESIS    reduce using rule 20 (n_math_expression_11 -> .)
    SEMICOLON       reduce using rule 20 (n_math_expression_11 -> .)
    DOUBLEDOT       reduce using rule 20 (n_math_expression_11 -> .)

    n_math_expression_11           shift and go to state 143

state 130

    (62) expression_or -> expression_rel OR n_math_expression_10 expression_or . n_math_expression_12
    (21) n_math_expression_12 -> .

    AND             reduce using rule 21 (n_math_expression_12 -> .)
    COMMA           reduce using rule 21 (n_math_expression_12 -> .)
    RPARENTHESIS    reduce using rule 21 (n_math_expression_12 -> .)
    SEMICOLON       reduce using rule 21 (n_math_expression_12 -> .)
    DOUBLEDOT       reduce using rule 21 (n_math_expression_12 -> .)

    n_math_expression_12           shift and go to state 144

state 131

    (64) expression_rel -> exp relational_operator exp n_math_expression_9 .

    OR              reduce using rule 64 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    AND             reduce using rule 64 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    COMMA           reduce using rule 64 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    RPARENTHESIS    reduce using rule 64 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    SEMICOLON       reduce using rule 64 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    DOUBLEDOT       reduce using rule 64 (expression_rel -> exp relational_operator exp n_math_expression_9 .)


state 132

    (66) exp -> termino n_math_expression_4 PLUS n_math_expression_2 . exp
    (65) exp -> . termino n_math_expression_4
    (66) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (67) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (68) termino -> . factor n_math_expression_5
    (69) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (70) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (71) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (72) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (73) factor -> . PLUS value
    (74) factor -> . MINUS value
    (75) factor -> . value
    (76) value -> . function_call
    (77) value -> . literal
    (78) value -> . NAME n_variable_reference n_math_expression_1_name
    (50) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (44) literal -> . FLOAT n_math_expression_1_float
    (45) literal -> . INT n_math_expression_1_int
    (46) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 45
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    NAME            shift and go to state 44
    FLOAT           shift and go to state 60
    INT             shift and go to state 61
    STRING          shift and go to state 62

    termino                        shift and go to state 53
    exp                            shift and go to state 145
    factor                         shift and go to state 56
    value                          shift and go to state 57
    function_call                  shift and go to state 58
    literal                        shift and go to state 59

state 133

    (67) exp -> termino n_math_expression_4 MINUS n_math_expression_2 . exp
    (65) exp -> . termino n_math_expression_4
    (66) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (67) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (68) termino -> . factor n_math_expression_5
    (69) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (70) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (71) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (72) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (73) factor -> . PLUS value
    (74) factor -> . MINUS value
    (75) factor -> . value
    (76) value -> . function_call
    (77) value -> . literal
    (78) value -> . NAME n_variable_reference n_math_expression_1_name
    (50) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (44) literal -> . FLOAT n_math_expression_1_float
    (45) literal -> . INT n_math_expression_1_int
    (46) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 45
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    NAME            shift and go to state 44
    FLOAT           shift and go to state 60
    INT             shift and go to state 61
    STRING          shift and go to state 62

    termino                        shift and go to state 53
    exp                            shift and go to state 146
    factor                         shift and go to state 56
    value                          shift and go to state 57
    function_call                  shift and go to state 58
    literal                        shift and go to state 59

state 134

    (69) termino -> factor n_math_expression_5 TIMES n_math_expression_3 . termino
    (68) termino -> . factor n_math_expression_5
    (69) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (70) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (71) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (72) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (73) factor -> . PLUS value
    (74) factor -> . MINUS value
    (75) factor -> . value
    (76) value -> . function_call
    (77) value -> . literal
    (78) value -> . NAME n_variable_reference n_math_expression_1_name
    (50) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (44) literal -> . FLOAT n_math_expression_1_float
    (45) literal -> . INT n_math_expression_1_int
    (46) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 45
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    NAME            shift and go to state 44
    FLOAT           shift and go to state 60
    INT             shift and go to state 61
    STRING          shift and go to state 62

    factor                         shift and go to state 56
    termino                        shift and go to state 147
    value                          shift and go to state 57
    function_call                  shift and go to state 58
    literal                        shift and go to state 59

state 135

    (70) termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 . termino
    (68) termino -> . factor n_math_expression_5
    (69) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (70) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (71) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (72) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (73) factor -> . PLUS value
    (74) factor -> . MINUS value
    (75) factor -> . value
    (76) value -> . function_call
    (77) value -> . literal
    (78) value -> . NAME n_variable_reference n_math_expression_1_name
    (50) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (44) literal -> . FLOAT n_math_expression_1_float
    (45) literal -> . INT n_math_expression_1_int
    (46) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 45
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    NAME            shift and go to state 44
    FLOAT           shift and go to state 60
    INT             shift and go to state 61
    STRING          shift and go to state 62

    factor                         shift and go to state 56
    termino                        shift and go to state 148
    value                          shift and go to state 57
    function_call                  shift and go to state 58
    literal                        shift and go to state 59

state 136

    (71) termino -> factor n_math_expression_5 MODULUS n_math_expression_3 . termino
    (68) termino -> . factor n_math_expression_5
    (69) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (70) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (71) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (72) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (73) factor -> . PLUS value
    (74) factor -> . MINUS value
    (75) factor -> . value
    (76) value -> . function_call
    (77) value -> . literal
    (78) value -> . NAME n_variable_reference n_math_expression_1_name
    (50) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (44) literal -> . FLOAT n_math_expression_1_float
    (45) literal -> . INT n_math_expression_1_int
    (46) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 45
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    NAME            shift and go to state 44
    FLOAT           shift and go to state 60
    INT             shift and go to state 61
    STRING          shift and go to state 62

    factor                         shift and go to state 56
    termino                        shift and go to state 149
    value                          shift and go to state 57
    function_call                  shift and go to state 58
    literal                        shift and go to state 59

state 137

    (94) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 . n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (2) n_open_new_scope -> .

    FUNCTION        reduce using rule 2 (n_open_new_scope -> .)
    IF              reduce using rule 2 (n_open_new_scope -> .)
    FOR             reduce using rule 2 (n_open_new_scope -> .)
    WHILE           reduce using rule 2 (n_open_new_scope -> .)
    NAME            reduce using rule 2 (n_open_new_scope -> .)
    INT_TYPE        reduce using rule 2 (n_open_new_scope -> .)
    STRING_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    DOUBLE_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    FLOAT_TYPE      reduce using rule 2 (n_open_new_scope -> .)
    BOOL_TYPE       reduce using rule 2 (n_open_new_scope -> .)
    RCURLY          reduce using rule 2 (n_open_new_scope -> .)

    n_open_new_scope               shift and go to state 150

state 138

    (93) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression . DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope

    DOUBLEDOT       shift and go to state 151


state 139

    (92) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 . LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope

    LCURLY          shift and go to state 152


state 140

    (79) assign -> type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op . expression
    (59) expression -> . expression_or
    (60) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (61) expression_or -> . expression_rel
    (62) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (63) expression_rel -> . exp
    (64) expression_rel -> . exp relational_operator exp n_math_expression_9
    (65) exp -> . termino n_math_expression_4
    (66) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (67) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (68) termino -> . factor n_math_expression_5
    (69) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (70) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (71) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (72) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (73) factor -> . PLUS value
    (74) factor -> . MINUS value
    (75) factor -> . value
    (76) value -> . function_call
    (77) value -> . literal
    (78) value -> . NAME n_variable_reference n_math_expression_1_name
    (50) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (44) literal -> . FLOAT n_math_expression_1_float
    (45) literal -> . INT n_math_expression_1_int
    (46) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 45
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    NAME            shift and go to state 44
    FLOAT           shift and go to state 60
    INT             shift and go to state 61
    STRING          shift and go to state 62

    expression                     shift and go to state 153
    expression_or                  shift and go to state 50
    expression_rel                 shift and go to state 51
    exp                            shift and go to state 52
    termino                        shift and go to state 53
    factor                         shift and go to state 56
    value                          shift and go to state 57
    function_call                  shift and go to state 58
    literal                        shift and go to state 59

state 141

    (49) function_definition -> FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY . codeblock RCURLY n_close_scope
    (84) codeblock -> . empty
    (85) codeblock -> . codeblock_aux codeblock
    (29) empty -> .
    (86) codeblock_aux -> . statement
    (87) codeblock_aux -> . function_definition
    (88) codeblock_aux -> . condition_if
    (89) codeblock_aux -> . loop
    (81) statement -> . statement_aux SEMICOLON
    (49) function_definition -> . FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope
    (94) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (90) loop -> . forloop
    (91) loop -> . whileloop
    (82) statement_aux -> . assign
    (83) statement_aux -> . function_call
    (93) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (92) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (79) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (80) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (50) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (33) type -> . INT_TYPE n_seen_type
    (34) type -> . STRING_TYPE n_seen_type
    (35) type -> . DOUBLE_TYPE n_seen_type
    (36) type -> . FLOAT_TYPE n_seen_type
    (37) type -> . BOOL_TYPE n_seen_type

    RCURLY          reduce using rule 29 (empty -> .)
    FUNCTION        shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    codeblock                      shift and go to state 154
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 142

    (72) factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .

    TIMES           reduce using rule 72 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    DIVIDE          reduce using rule 72 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    MODULUS         reduce using rule 72 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    PLUS            reduce using rule 72 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    MINUS           reduce using rule 72 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    GREATERTHAN     reduce using rule 72 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    LESSTHAN        reduce using rule 72 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    EQUALEQUAL      reduce using rule 72 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    LESSTHANOREQUAL reduce using rule 72 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    GREATERTHANOREQUAL reduce using rule 72 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    NOTEQUAL        reduce using rule 72 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    OR              reduce using rule 72 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    AND             reduce using rule 72 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    COMMA           reduce using rule 72 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    RPARENTHESIS    reduce using rule 72 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    SEMICOLON       reduce using rule 72 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    DOUBLEDOT       reduce using rule 72 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)


state 143

    (60) expression -> expression_or AND n_math_expression_10 expression n_math_expression_11 .

    COMMA           reduce using rule 60 (expression -> expression_or AND n_math_expression_10 expression n_math_expression_11 .)
    RPARENTHESIS    reduce using rule 60 (expression -> expression_or AND n_math_expression_10 expression n_math_expression_11 .)
    SEMICOLON       reduce using rule 60 (expression -> expression_or AND n_math_expression_10 expression n_math_expression_11 .)
    DOUBLEDOT       reduce using rule 60 (expression -> expression_or AND n_math_expression_10 expression n_math_expression_11 .)


state 144

    (62) expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .

    AND             reduce using rule 62 (expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .)
    COMMA           reduce using rule 62 (expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .)
    RPARENTHESIS    reduce using rule 62 (expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .)
    SEMICOLON       reduce using rule 62 (expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .)
    DOUBLEDOT       reduce using rule 62 (expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .)


state 145

    (66) exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .

    GREATERTHAN     reduce using rule 66 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    LESSTHAN        reduce using rule 66 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    EQUALEQUAL      reduce using rule 66 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    LESSTHANOREQUAL reduce using rule 66 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    GREATERTHANOREQUAL reduce using rule 66 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    NOTEQUAL        reduce using rule 66 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    OR              reduce using rule 66 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    AND             reduce using rule 66 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    COMMA           reduce using rule 66 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    RPARENTHESIS    reduce using rule 66 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    SEMICOLON       reduce using rule 66 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    DOUBLEDOT       reduce using rule 66 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)


state 146

    (67) exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .

    GREATERTHAN     reduce using rule 67 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    LESSTHAN        reduce using rule 67 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    EQUALEQUAL      reduce using rule 67 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    LESSTHANOREQUAL reduce using rule 67 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    GREATERTHANOREQUAL reduce using rule 67 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    NOTEQUAL        reduce using rule 67 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    OR              reduce using rule 67 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    AND             reduce using rule 67 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    COMMA           reduce using rule 67 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    RPARENTHESIS    reduce using rule 67 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    SEMICOLON       reduce using rule 67 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    DOUBLEDOT       reduce using rule 67 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)


state 147

    (69) termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .

    PLUS            reduce using rule 69 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    MINUS           reduce using rule 69 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    GREATERTHAN     reduce using rule 69 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    LESSTHAN        reduce using rule 69 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    EQUALEQUAL      reduce using rule 69 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    LESSTHANOREQUAL reduce using rule 69 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    GREATERTHANOREQUAL reduce using rule 69 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    NOTEQUAL        reduce using rule 69 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    OR              reduce using rule 69 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    AND             reduce using rule 69 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    COMMA           reduce using rule 69 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    RPARENTHESIS    reduce using rule 69 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    SEMICOLON       reduce using rule 69 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    DOUBLEDOT       reduce using rule 69 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)


state 148

    (70) termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .

    PLUS            reduce using rule 70 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    MINUS           reduce using rule 70 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    GREATERTHAN     reduce using rule 70 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    LESSTHAN        reduce using rule 70 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    EQUALEQUAL      reduce using rule 70 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    LESSTHANOREQUAL reduce using rule 70 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    GREATERTHANOREQUAL reduce using rule 70 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    NOTEQUAL        reduce using rule 70 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    OR              reduce using rule 70 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    AND             reduce using rule 70 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    COMMA           reduce using rule 70 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    RPARENTHESIS    reduce using rule 70 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    SEMICOLON       reduce using rule 70 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    DOUBLEDOT       reduce using rule 70 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)


state 149

    (71) termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .

    PLUS            reduce using rule 71 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    MINUS           reduce using rule 71 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    GREATERTHAN     reduce using rule 71 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    LESSTHAN        reduce using rule 71 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    EQUALEQUAL      reduce using rule 71 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    LESSTHANOREQUAL reduce using rule 71 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    GREATERTHANOREQUAL reduce using rule 71 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    NOTEQUAL        reduce using rule 71 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    OR              reduce using rule 71 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    AND             reduce using rule 71 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    COMMA           reduce using rule 71 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    RPARENTHESIS    reduce using rule 71 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    SEMICOLON       reduce using rule 71 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    DOUBLEDOT       reduce using rule 71 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)


state 150

    (94) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope . codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (84) codeblock -> . empty
    (85) codeblock -> . codeblock_aux codeblock
    (29) empty -> .
    (86) codeblock_aux -> . statement
    (87) codeblock_aux -> . function_definition
    (88) codeblock_aux -> . condition_if
    (89) codeblock_aux -> . loop
    (81) statement -> . statement_aux SEMICOLON
    (49) function_definition -> . FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope
    (94) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (90) loop -> . forloop
    (91) loop -> . whileloop
    (82) statement_aux -> . assign
    (83) statement_aux -> . function_call
    (93) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (92) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (79) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (80) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (50) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (33) type -> . INT_TYPE n_seen_type
    (34) type -> . STRING_TYPE n_seen_type
    (35) type -> . DOUBLE_TYPE n_seen_type
    (36) type -> . FLOAT_TYPE n_seen_type
    (37) type -> . BOOL_TYPE n_seen_type

    RCURLY          reduce using rule 29 (empty -> .)
    FUNCTION        shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    codeblock                      shift and go to state 155
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 151

    (93) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT . assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (79) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (80) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (33) type -> . INT_TYPE n_seen_type
    (34) type -> . STRING_TYPE n_seen_type
    (35) type -> . DOUBLE_TYPE n_seen_type
    (36) type -> . FLOAT_TYPE n_seen_type
    (37) type -> . BOOL_TYPE n_seen_type

    NAME            shift and go to state 94
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    assign                         shift and go to state 156
    type                           shift and go to state 22

state 152

    (92) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY . n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (2) n_open_new_scope -> .

    FUNCTION        reduce using rule 2 (n_open_new_scope -> .)
    IF              reduce using rule 2 (n_open_new_scope -> .)
    FOR             reduce using rule 2 (n_open_new_scope -> .)
    WHILE           reduce using rule 2 (n_open_new_scope -> .)
    NAME            reduce using rule 2 (n_open_new_scope -> .)
    INT_TYPE        reduce using rule 2 (n_open_new_scope -> .)
    STRING_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    DOUBLE_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    FLOAT_TYPE      reduce using rule 2 (n_open_new_scope -> .)
    BOOL_TYPE       reduce using rule 2 (n_open_new_scope -> .)
    RCURLY          reduce using rule 2 (n_open_new_scope -> .)

    n_open_new_scope               shift and go to state 157

state 153

    (79) assign -> type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression .

    SEMICOLON       reduce using rule 79 (assign -> type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression .)
    DOUBLEDOT       reduce using rule 79 (assign -> type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression .)
    RPARENTHESIS    reduce using rule 79 (assign -> type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression .)


state 154

    (49) function_definition -> FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY codeblock . RCURLY n_close_scope

    RCURLY          shift and go to state 158


state 155

    (94) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock . RCURLY n_close_scope condition_else n_two_way_conditional_2

    RCURLY          shift and go to state 159


state 156

    (93) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign . RPARENTHESIS LCURLY codeblock RCURLY n_close_scope

    RPARENTHESIS    shift and go to state 160


state 157

    (92) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope . codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (84) codeblock -> . empty
    (85) codeblock -> . codeblock_aux codeblock
    (29) empty -> .
    (86) codeblock_aux -> . statement
    (87) codeblock_aux -> . function_definition
    (88) codeblock_aux -> . condition_if
    (89) codeblock_aux -> . loop
    (81) statement -> . statement_aux SEMICOLON
    (49) function_definition -> . FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope
    (94) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (90) loop -> . forloop
    (91) loop -> . whileloop
    (82) statement_aux -> . assign
    (83) statement_aux -> . function_call
    (93) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (92) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (79) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (80) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (50) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (33) type -> . INT_TYPE n_seen_type
    (34) type -> . STRING_TYPE n_seen_type
    (35) type -> . DOUBLE_TYPE n_seen_type
    (36) type -> . FLOAT_TYPE n_seen_type
    (37) type -> . BOOL_TYPE n_seen_type

    RCURLY          reduce using rule 29 (empty -> .)
    FUNCTION        shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    codeblock                      shift and go to state 161
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 158

    (49) function_definition -> FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY . n_close_scope
    (4) n_close_scope -> .

    FUNCTION        reduce using rule 4 (n_close_scope -> .)
    IF              reduce using rule 4 (n_close_scope -> .)
    FOR             reduce using rule 4 (n_close_scope -> .)
    WHILE           reduce using rule 4 (n_close_scope -> .)
    NAME            reduce using rule 4 (n_close_scope -> .)
    INT_TYPE        reduce using rule 4 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 4 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 4 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 4 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 4 (n_close_scope -> .)
    $end            reduce using rule 4 (n_close_scope -> .)
    RCURLY          reduce using rule 4 (n_close_scope -> .)

    n_close_scope                  shift and go to state 162

state 159

    (94) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY . n_close_scope condition_else n_two_way_conditional_2
    (4) n_close_scope -> .

    ELSE            reduce using rule 4 (n_close_scope -> .)
    FUNCTION        reduce using rule 4 (n_close_scope -> .)
    IF              reduce using rule 4 (n_close_scope -> .)
    FOR             reduce using rule 4 (n_close_scope -> .)
    WHILE           reduce using rule 4 (n_close_scope -> .)
    NAME            reduce using rule 4 (n_close_scope -> .)
    INT_TYPE        reduce using rule 4 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 4 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 4 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 4 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 4 (n_close_scope -> .)
    $end            reduce using rule 4 (n_close_scope -> .)
    RCURLY          reduce using rule 4 (n_close_scope -> .)

    n_close_scope                  shift and go to state 163

state 160

    (93) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS . LCURLY codeblock RCURLY n_close_scope

    LCURLY          shift and go to state 164


state 161

    (92) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock . RCURLY p_n_pre_condition_loop_3 n_close_scope

    RCURLY          shift and go to state 165


state 162

    (49) function_definition -> FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .

    FUNCTION        reduce using rule 49 (function_definition -> FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    IF              reduce using rule 49 (function_definition -> FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    FOR             reduce using rule 49 (function_definition -> FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    WHILE           reduce using rule 49 (function_definition -> FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    NAME            reduce using rule 49 (function_definition -> FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    INT_TYPE        reduce using rule 49 (function_definition -> FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    STRING_TYPE     reduce using rule 49 (function_definition -> FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    DOUBLE_TYPE     reduce using rule 49 (function_definition -> FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    FLOAT_TYPE      reduce using rule 49 (function_definition -> FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    BOOL_TYPE       reduce using rule 49 (function_definition -> FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    $end            reduce using rule 49 (function_definition -> FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    RCURLY          reduce using rule 49 (function_definition -> FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)


state 163

    (94) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope . condition_else n_two_way_conditional_2
    (95) condition_else -> . ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope
    (96) condition_else -> . empty
    (29) empty -> .

    ELSE            shift and go to state 167
    FUNCTION        reduce using rule 29 (empty -> .)
    IF              reduce using rule 29 (empty -> .)
    FOR             reduce using rule 29 (empty -> .)
    WHILE           reduce using rule 29 (empty -> .)
    NAME            reduce using rule 29 (empty -> .)
    INT_TYPE        reduce using rule 29 (empty -> .)
    STRING_TYPE     reduce using rule 29 (empty -> .)
    DOUBLE_TYPE     reduce using rule 29 (empty -> .)
    FLOAT_TYPE      reduce using rule 29 (empty -> .)
    BOOL_TYPE       reduce using rule 29 (empty -> .)
    $end            reduce using rule 29 (empty -> .)
    RCURLY          reduce using rule 29 (empty -> .)

    condition_else                 shift and go to state 166
    empty                          shift and go to state 168

state 164

    (93) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY . codeblock RCURLY n_close_scope
    (84) codeblock -> . empty
    (85) codeblock -> . codeblock_aux codeblock
    (29) empty -> .
    (86) codeblock_aux -> . statement
    (87) codeblock_aux -> . function_definition
    (88) codeblock_aux -> . condition_if
    (89) codeblock_aux -> . loop
    (81) statement -> . statement_aux SEMICOLON
    (49) function_definition -> . FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope
    (94) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (90) loop -> . forloop
    (91) loop -> . whileloop
    (82) statement_aux -> . assign
    (83) statement_aux -> . function_call
    (93) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (92) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (79) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (80) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (50) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (33) type -> . INT_TYPE n_seen_type
    (34) type -> . STRING_TYPE n_seen_type
    (35) type -> . DOUBLE_TYPE n_seen_type
    (36) type -> . FLOAT_TYPE n_seen_type
    (37) type -> . BOOL_TYPE n_seen_type

    RCURLY          reduce using rule 29 (empty -> .)
    FUNCTION        shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    assign                         shift and go to state 18
    codeblock                      shift and go to state 169
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 165

    (92) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY . p_n_pre_condition_loop_3 n_close_scope
    (27) p_n_pre_condition_loop_3 -> .

    FUNCTION        reduce using rule 27 (p_n_pre_condition_loop_3 -> .)
    IF              reduce using rule 27 (p_n_pre_condition_loop_3 -> .)
    FOR             reduce using rule 27 (p_n_pre_condition_loop_3 -> .)
    WHILE           reduce using rule 27 (p_n_pre_condition_loop_3 -> .)
    NAME            reduce using rule 27 (p_n_pre_condition_loop_3 -> .)
    INT_TYPE        reduce using rule 27 (p_n_pre_condition_loop_3 -> .)
    STRING_TYPE     reduce using rule 27 (p_n_pre_condition_loop_3 -> .)
    DOUBLE_TYPE     reduce using rule 27 (p_n_pre_condition_loop_3 -> .)
    FLOAT_TYPE      reduce using rule 27 (p_n_pre_condition_loop_3 -> .)
    BOOL_TYPE       reduce using rule 27 (p_n_pre_condition_loop_3 -> .)
    $end            reduce using rule 27 (p_n_pre_condition_loop_3 -> .)
    RCURLY          reduce using rule 27 (p_n_pre_condition_loop_3 -> .)

    p_n_pre_condition_loop_3       shift and go to state 170

state 166

    (94) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else . n_two_way_conditional_2
    (23) n_two_way_conditional_2 -> .

    FUNCTION        reduce using rule 23 (n_two_way_conditional_2 -> .)
    IF              reduce using rule 23 (n_two_way_conditional_2 -> .)
    FOR             reduce using rule 23 (n_two_way_conditional_2 -> .)
    WHILE           reduce using rule 23 (n_two_way_conditional_2 -> .)
    NAME            reduce using rule 23 (n_two_way_conditional_2 -> .)
    INT_TYPE        reduce using rule 23 (n_two_way_conditional_2 -> .)
    STRING_TYPE     reduce using rule 23 (n_two_way_conditional_2 -> .)
    DOUBLE_TYPE     reduce using rule 23 (n_two_way_conditional_2 -> .)
    FLOAT_TYPE      reduce using rule 23 (n_two_way_conditional_2 -> .)
    BOOL_TYPE       reduce using rule 23 (n_two_way_conditional_2 -> .)
    $end            reduce using rule 23 (n_two_way_conditional_2 -> .)
    RCURLY          reduce using rule 23 (n_two_way_conditional_2 -> .)

    n_two_way_conditional_2        shift and go to state 171

state 167

    (95) condition_else -> ELSE . n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope
    (24) n_two_way_conditional_3 -> .

    LCURLY          reduce using rule 24 (n_two_way_conditional_3 -> .)

    n_two_way_conditional_3        shift and go to state 172

state 168

    (96) condition_else -> empty .

    FUNCTION        reduce using rule 96 (condition_else -> empty .)
    IF              reduce using rule 96 (condition_else -> empty .)
    FOR             reduce using rule 96 (condition_else -> empty .)
    WHILE           reduce using rule 96 (condition_else -> empty .)
    NAME            reduce using rule 96 (condition_else -> empty .)
    INT_TYPE        reduce using rule 96 (condition_else -> empty .)
    STRING_TYPE     reduce using rule 96 (condition_else -> empty .)
    DOUBLE_TYPE     reduce using rule 96 (condition_else -> empty .)
    FLOAT_TYPE      reduce using rule 96 (condition_else -> empty .)
    BOOL_TYPE       reduce using rule 96 (condition_else -> empty .)
    $end            reduce using rule 96 (condition_else -> empty .)
    RCURLY          reduce using rule 96 (condition_else -> empty .)


state 169

    (93) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock . RCURLY n_close_scope

    RCURLY          shift and go to state 173


state 170

    (92) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 . n_close_scope
    (4) n_close_scope -> .

    FUNCTION        reduce using rule 4 (n_close_scope -> .)
    IF              reduce using rule 4 (n_close_scope -> .)
    FOR             reduce using rule 4 (n_close_scope -> .)
    WHILE           reduce using rule 4 (n_close_scope -> .)
    NAME            reduce using rule 4 (n_close_scope -> .)
    INT_TYPE        reduce using rule 4 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 4 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 4 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 4 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 4 (n_close_scope -> .)
    $end            reduce using rule 4 (n_close_scope -> .)
    RCURLY          reduce using rule 4 (n_close_scope -> .)

    n_close_scope                  shift and go to state 174

state 171

    (94) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .

    FUNCTION        reduce using rule 94 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    IF              reduce using rule 94 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    FOR             reduce using rule 94 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    WHILE           reduce using rule 94 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    NAME            reduce using rule 94 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    INT_TYPE        reduce using rule 94 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    STRING_TYPE     reduce using rule 94 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    DOUBLE_TYPE     reduce using rule 94 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    FLOAT_TYPE      reduce using rule 94 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    BOOL_TYPE       reduce using rule 94 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    $end            reduce using rule 94 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    RCURLY          reduce using rule 94 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)


state 172

    (95) condition_else -> ELSE n_two_way_conditional_3 . LCURLY n_open_new_scope codeblock RCURLY n_close_scope

    LCURLY          shift and go to state 175


state 173

    (93) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY . n_close_scope
    (4) n_close_scope -> .

    FUNCTION        reduce using rule 4 (n_close_scope -> .)
    IF              reduce using rule 4 (n_close_scope -> .)
    FOR             reduce using rule 4 (n_close_scope -> .)
    WHILE           reduce using rule 4 (n_close_scope -> .)
    NAME            reduce using rule 4 (n_close_scope -> .)
    INT_TYPE        reduce using rule 4 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 4 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 4 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 4 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 4 (n_close_scope -> .)
    $end            reduce using rule 4 (n_close_scope -> .)
    RCURLY          reduce using rule 4 (n_close_scope -> .)

    n_close_scope                  shift and go to state 176

state 174

    (92) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .

    FUNCTION        reduce using rule 92 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    IF              reduce using rule 92 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    FOR             reduce using rule 92 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    WHILE           reduce using rule 92 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    NAME            reduce using rule 92 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    INT_TYPE        reduce using rule 92 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    STRING_TYPE     reduce using rule 92 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    DOUBLE_TYPE     reduce using rule 92 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    FLOAT_TYPE      reduce using rule 92 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    BOOL_TYPE       reduce using rule 92 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    $end            reduce using rule 92 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    RCURLY          reduce using rule 92 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)


state 175

    (95) condition_else -> ELSE n_two_way_conditional_3 LCURLY . n_open_new_scope codeblock RCURLY n_close_scope
    (2) n_open_new_scope -> .

    FUNCTION        reduce using rule 2 (n_open_new_scope -> .)
    IF              reduce using rule 2 (n_open_new_scope -> .)
    FOR             reduce using rule 2 (n_open_new_scope -> .)
    WHILE           reduce using rule 2 (n_open_new_scope -> .)
    NAME            reduce using rule 2 (n_open_new_scope -> .)
    INT_TYPE        reduce using rule 2 (n_open_new_scope -> .)
    STRING_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    DOUBLE_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    FLOAT_TYPE      reduce using rule 2 (n_open_new_scope -> .)
    BOOL_TYPE       reduce using rule 2 (n_open_new_scope -> .)
    RCURLY          reduce using rule 2 (n_open_new_scope -> .)

    n_open_new_scope               shift and go to state 177

state 176

    (93) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .

    FUNCTION        reduce using rule 93 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    IF              reduce using rule 93 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    FOR             reduce using rule 93 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    WHILE           reduce using rule 93 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    NAME            reduce using rule 93 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    INT_TYPE        reduce using rule 93 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    STRING_TYPE     reduce using rule 93 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    DOUBLE_TYPE     reduce using rule 93 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    FLOAT_TYPE      reduce using rule 93 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    BOOL_TYPE       reduce using rule 93 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    $end            reduce using rule 93 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    RCURLY          reduce using rule 93 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)


state 177

    (95) condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope . codeblock RCURLY n_close_scope
    (84) codeblock -> . empty
    (85) codeblock -> . codeblock_aux codeblock
    (29) empty -> .
    (86) codeblock_aux -> . statement
    (87) codeblock_aux -> . function_definition
    (88) codeblock_aux -> . condition_if
    (89) codeblock_aux -> . loop
    (81) statement -> . statement_aux SEMICOLON
    (49) function_definition -> . FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope
    (94) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (90) loop -> . forloop
    (91) loop -> . whileloop
    (82) statement_aux -> . assign
    (83) statement_aux -> . function_call
    (93) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (92) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (79) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (80) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (50) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (33) type -> . INT_TYPE n_seen_type
    (34) type -> . STRING_TYPE n_seen_type
    (35) type -> . DOUBLE_TYPE n_seen_type
    (36) type -> . FLOAT_TYPE n_seen_type
    (37) type -> . BOOL_TYPE n_seen_type

    RCURLY          reduce using rule 29 (empty -> .)
    FUNCTION        shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    codeblock                      shift and go to state 178
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 178

    (95) condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock . RCURLY n_close_scope

    RCURLY          shift and go to state 179


state 179

    (95) condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY . n_close_scope
    (4) n_close_scope -> .

    FUNCTION        reduce using rule 4 (n_close_scope -> .)
    IF              reduce using rule 4 (n_close_scope -> .)
    FOR             reduce using rule 4 (n_close_scope -> .)
    WHILE           reduce using rule 4 (n_close_scope -> .)
    NAME            reduce using rule 4 (n_close_scope -> .)
    INT_TYPE        reduce using rule 4 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 4 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 4 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 4 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 4 (n_close_scope -> .)
    $end            reduce using rule 4 (n_close_scope -> .)
    RCURLY          reduce using rule 4 (n_close_scope -> .)

    n_close_scope                  shift and go to state 180

state 180

    (95) condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .

    FUNCTION        reduce using rule 95 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    IF              reduce using rule 95 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    FOR             reduce using rule 95 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    WHILE           reduce using rule 95 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    NAME            reduce using rule 95 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    INT_TYPE        reduce using rule 95 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    STRING_TYPE     reduce using rule 95 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    DOUBLE_TYPE     reduce using rule 95 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    FLOAT_TYPE      reduce using rule 95 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    BOOL_TYPE       reduce using rule 95 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    $end            reduce using rule 95 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    RCURLY          reduce using rule 95 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)

