Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DOT
    LBRACKET
    NOT
    RBRACKET

Grammar

Rule 0     S' -> program
Rule 1     n_seen_type -> <empty>
Rule 2     n_open_new_scope -> <empty>
Rule 3     n_close_scope -> <empty>
Rule 4     n_name -> <empty>
Rule 5     n_math_expression_1_int -> <empty>
Rule 6     n_math_expression_1_float -> <empty>
Rule 7     n_math_expression_1_string -> <empty>
Rule 8     n_math_expression_1_name -> <empty>
Rule 9     n_math_expression_2 -> <empty>
Rule 10    n_math_expression_3 -> <empty>
Rule 11    n_math_expression_4 -> <empty>
Rule 12    n_math_expression_5 -> <empty>
Rule 13    n_math_expression_6 -> <empty>
Rule 14    n_math_expression_7 -> <empty>
Rule 15    n_math_expression_8 -> <empty>
Rule 16    n_math_expression_9 -> <empty>
Rule 17    n_math_expression_10 -> <empty>
Rule 18    n_math_expression_11 -> <empty>
Rule 19    n_math_expression_12 -> <empty>
Rule 20    n_two_way_conditional_1 -> <empty>
Rule 21    n_two_way_conditional_2 -> <empty>
Rule 22    n_two_way_conditional_3 -> <empty>
Rule 23    p_n_pre_condition_loop_1 -> <empty>
Rule 24    p_n_pre_condition_loop_2 -> <empty>
Rule 25    p_n_pre_condition_loop_3 -> <empty>
Rule 26    empty -> <empty>
Rule 27    program -> program_aux codeblock
Rule 28    program_aux -> IDK
Rule 29    program_aux -> OWO
Rule 30    type -> INT_TYPE n_seen_type
Rule 31    type -> STRING_TYPE n_seen_type
Rule 32    type -> DOUBLE_TYPE n_seen_type
Rule 33    type -> FLOAT_TYPE n_seen_type
Rule 34    type -> BOOL_TYPE n_seen_type
Rule 35    relational_operator -> GREATERTHAN n_math_expression_8
Rule 36    relational_operator -> LESSTHAN n_math_expression_8
Rule 37    relational_operator -> EQUALEQUAL n_math_expression_8
Rule 38    relational_operator -> LESSTHANOREQUAL n_math_expression_8
Rule 39    relational_operator -> GREATERTHANOREQUAL n_math_expression_8
Rule 40    relational_operator -> NOTEQUAL n_math_expression_8
Rule 41    literal -> FLOAT n_math_expression_1_float
Rule 42    literal -> INT n_math_expression_1_int
Rule 43    literal -> STRING n_math_expression_1_string
Rule 44    function_type -> type
Rule 45    function_type -> VOID
Rule 46    function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope
Rule 47    function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS
Rule 48    parameter_list -> empty
Rule 49    parameter_list -> parameter
Rule 50    parameter_list -> parameter COMMA parameter_list
Rule 51    parameter -> type NAME n_name
Rule 52    parameter -> assign
Rule 53    expression -> expression_or
Rule 54    expression -> expression_or AND n_math_expression_10 expression n_math_expression_11
Rule 55    expression_or -> expression_rel
Rule 56    expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12
Rule 57    expression_rel -> exp
Rule 58    expression_rel -> exp relational_operator exp n_math_expression_9
Rule 59    exp -> termino n_math_expression_4
Rule 60    exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp
Rule 61    exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp
Rule 62    termino -> factor n_math_expression_5
Rule 63    termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino
Rule 64    termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino
Rule 65    termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino
Rule 66    factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
Rule 67    factor -> PLUS value
Rule 68    factor -> MINUS value
Rule 69    factor -> value
Rule 70    value -> function_call
Rule 71    value -> literal
Rule 72    value -> NAME n_math_expression_1_name
Rule 73    n_seen_equal_op -> <empty>
Rule 74    assign -> type NAME n_math_expression_1_name n_name EQUAL n_seen_equal_op expression
Rule 75    assign -> NAME n_math_expression_1_name n_name EQUAL n_seen_equal_op expression
Rule 76    statement -> statement_aux SEMICOLON
Rule 77    statement_aux -> assign
Rule 78    statement_aux -> function_call
Rule 79    codeblock -> empty
Rule 80    codeblock -> codeblock_aux codeblock
Rule 81    codeblock_aux -> statement
Rule 82    codeblock_aux -> function_definition
Rule 83    codeblock_aux -> condition_if
Rule 84    codeblock_aux -> loop
Rule 85    loop -> forloop
Rule 86    loop -> whileloop
Rule 87    whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
Rule 88    forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
Rule 89    condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
Rule 90    condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope
Rule 91    condition_else -> empty

Terminals, with rules where they appear

AND                  : 54
BOOL_TYPE            : 34
COMMA                : 50
DIVIDE               : 64
DOT                  : 
DOUBLEDOT            : 46 88 88
DOUBLE_TYPE          : 32
ELSE                 : 90
EQUAL                : 74 75
EQUALEQUAL           : 37
FLOAT                : 41
FLOAT_TYPE           : 33
FOR                  : 88
FUNCTION             : 46
GREATERTHAN          : 35
GREATERTHANOREQUAL   : 39
IDK                  : 28
IF                   : 89
INT                  : 42
INT_TYPE             : 30
LBRACKET             : 
LCURLY               : 46 87 88 89 90
LESSTHAN             : 36
LESSTHANOREQUAL      : 38
LPARENTHESIS         : 47 66 87 88 89
MINUS                : 61 68
MODULUS              : 65
NAME                 : 46 47 51 72 74 75
NOT                  : 
NOTEQUAL             : 40
OR                   : 56
OWO                  : 29
PLUS                 : 60 67
RBRACKET             : 
RCURLY               : 46 87 88 89 90
RPARENTHESIS         : 47 66 87 88 89
SEMICOLON            : 76
STRING               : 43
STRING_TYPE          : 31
TIMES                : 63
VOID                 : 45
WHILE                : 87
error                : 

Nonterminals, with rules where they appear

assign               : 52 77 88 88
codeblock            : 27 46 80 87 88 89 90
codeblock_aux        : 80
condition_else       : 89
condition_if         : 83
empty                : 48 79 91
exp                  : 57 58 58 60 61
expression           : 54 66 74 75 87 88 89
expression_or        : 53 54 56
expression_rel       : 55 56
factor               : 62 63 64 65
forloop              : 85
function_call        : 70 78
function_definition  : 82
function_type        : 46
literal              : 71
loop                 : 84
n_close_scope        : 46 87 88 89 90
n_math_expression_10 : 54 56
n_math_expression_11 : 54
n_math_expression_12 : 56
n_math_expression_1_float : 41
n_math_expression_1_int : 42
n_math_expression_1_name : 72 74 75
n_math_expression_1_string : 43
n_math_expression_2  : 60 61
n_math_expression_3  : 63 64 65
n_math_expression_4  : 59 60 61
n_math_expression_5  : 62 63 64 65
n_math_expression_6  : 66
n_math_expression_7  : 66
n_math_expression_8  : 35 36 37 38 39 40
n_math_expression_9  : 58
n_name               : 51 74 75
n_open_new_scope     : 46 87 88 89 90
n_seen_equal_op      : 74 75
n_seen_type          : 30 31 32 33 34
n_two_way_conditional_1 : 89
n_two_way_conditional_2 : 89
n_two_way_conditional_3 : 90
p_n_pre_condition_loop_1 : 87
p_n_pre_condition_loop_2 : 87
p_n_pre_condition_loop_3 : 87
parameter            : 49 50
parameter_list       : 46 47 50
program              : 0
program_aux          : 27
relational_operator  : 58
statement            : 81
statement_aux        : 76
termino              : 59 60 61 63 64 65
type                 : 44 51 74
value                : 67 68 69
whileloop            : 86

Parsing method: LALR

state 0

    (0) S' -> . program
    (27) program -> . program_aux codeblock
    (28) program_aux -> . IDK
    (29) program_aux -> . OWO

    IDK             shift and go to state 3
    OWO             shift and go to state 4

    program                        shift and go to state 1
    program_aux                    shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (27) program -> program_aux . codeblock
    (79) codeblock -> . empty
    (80) codeblock -> . codeblock_aux codeblock
    (26) empty -> .
    (81) codeblock_aux -> . statement
    (82) codeblock_aux -> . function_definition
    (83) codeblock_aux -> . condition_if
    (84) codeblock_aux -> . loop
    (76) statement -> . statement_aux SEMICOLON
    (46) function_definition -> . FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope
    (89) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (85) loop -> . forloop
    (86) loop -> . whileloop
    (77) statement_aux -> . assign
    (78) statement_aux -> . function_call
    (88) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (87) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (74) assign -> . type NAME n_math_expression_1_name n_name EQUAL n_seen_equal_op expression
    (75) assign -> . NAME n_math_expression_1_name n_name EQUAL n_seen_equal_op expression
    (47) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (30) type -> . INT_TYPE n_seen_type
    (31) type -> . STRING_TYPE n_seen_type
    (32) type -> . DOUBLE_TYPE n_seen_type
    (33) type -> . FLOAT_TYPE n_seen_type
    (34) type -> . BOOL_TYPE n_seen_type

    $end            reduce using rule 26 (empty -> .)
    FUNCTION        shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    codeblock                      shift and go to state 5
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 3

    (28) program_aux -> IDK .

    FUNCTION        reduce using rule 28 (program_aux -> IDK .)
    IF              reduce using rule 28 (program_aux -> IDK .)
    FOR             reduce using rule 28 (program_aux -> IDK .)
    WHILE           reduce using rule 28 (program_aux -> IDK .)
    NAME            reduce using rule 28 (program_aux -> IDK .)
    INT_TYPE        reduce using rule 28 (program_aux -> IDK .)
    STRING_TYPE     reduce using rule 28 (program_aux -> IDK .)
    DOUBLE_TYPE     reduce using rule 28 (program_aux -> IDK .)
    FLOAT_TYPE      reduce using rule 28 (program_aux -> IDK .)
    BOOL_TYPE       reduce using rule 28 (program_aux -> IDK .)
    $end            reduce using rule 28 (program_aux -> IDK .)


state 4

    (29) program_aux -> OWO .

    FUNCTION        reduce using rule 29 (program_aux -> OWO .)
    IF              reduce using rule 29 (program_aux -> OWO .)
    FOR             reduce using rule 29 (program_aux -> OWO .)
    WHILE           reduce using rule 29 (program_aux -> OWO .)
    NAME            reduce using rule 29 (program_aux -> OWO .)
    INT_TYPE        reduce using rule 29 (program_aux -> OWO .)
    STRING_TYPE     reduce using rule 29 (program_aux -> OWO .)
    DOUBLE_TYPE     reduce using rule 29 (program_aux -> OWO .)
    FLOAT_TYPE      reduce using rule 29 (program_aux -> OWO .)
    BOOL_TYPE       reduce using rule 29 (program_aux -> OWO .)
    $end            reduce using rule 29 (program_aux -> OWO .)


state 5

    (27) program -> program_aux codeblock .

    $end            reduce using rule 27 (program -> program_aux codeblock .)


state 6

    (79) codeblock -> empty .

    $end            reduce using rule 79 (codeblock -> empty .)
    RCURLY          reduce using rule 79 (codeblock -> empty .)


state 7

    (80) codeblock -> codeblock_aux . codeblock
    (79) codeblock -> . empty
    (80) codeblock -> . codeblock_aux codeblock
    (26) empty -> .
    (81) codeblock_aux -> . statement
    (82) codeblock_aux -> . function_definition
    (83) codeblock_aux -> . condition_if
    (84) codeblock_aux -> . loop
    (76) statement -> . statement_aux SEMICOLON
    (46) function_definition -> . FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope
    (89) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (85) loop -> . forloop
    (86) loop -> . whileloop
    (77) statement_aux -> . assign
    (78) statement_aux -> . function_call
    (88) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (87) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (74) assign -> . type NAME n_math_expression_1_name n_name EQUAL n_seen_equal_op expression
    (75) assign -> . NAME n_math_expression_1_name n_name EQUAL n_seen_equal_op expression
    (47) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (30) type -> . INT_TYPE n_seen_type
    (31) type -> . STRING_TYPE n_seen_type
    (32) type -> . DOUBLE_TYPE n_seen_type
    (33) type -> . FLOAT_TYPE n_seen_type
    (34) type -> . BOOL_TYPE n_seen_type

    $end            reduce using rule 26 (empty -> .)
    RCURLY          reduce using rule 26 (empty -> .)
    FUNCTION        shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    codeblock_aux                  shift and go to state 7
    codeblock                      shift and go to state 28
    empty                          shift and go to state 6
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 8

    (81) codeblock_aux -> statement .

    FUNCTION        reduce using rule 81 (codeblock_aux -> statement .)
    IF              reduce using rule 81 (codeblock_aux -> statement .)
    FOR             reduce using rule 81 (codeblock_aux -> statement .)
    WHILE           reduce using rule 81 (codeblock_aux -> statement .)
    NAME            reduce using rule 81 (codeblock_aux -> statement .)
    INT_TYPE        reduce using rule 81 (codeblock_aux -> statement .)
    STRING_TYPE     reduce using rule 81 (codeblock_aux -> statement .)
    DOUBLE_TYPE     reduce using rule 81 (codeblock_aux -> statement .)
    FLOAT_TYPE      reduce using rule 81 (codeblock_aux -> statement .)
    BOOL_TYPE       reduce using rule 81 (codeblock_aux -> statement .)
    $end            reduce using rule 81 (codeblock_aux -> statement .)
    RCURLY          reduce using rule 81 (codeblock_aux -> statement .)


state 9

    (82) codeblock_aux -> function_definition .

    FUNCTION        reduce using rule 82 (codeblock_aux -> function_definition .)
    IF              reduce using rule 82 (codeblock_aux -> function_definition .)
    FOR             reduce using rule 82 (codeblock_aux -> function_definition .)
    WHILE           reduce using rule 82 (codeblock_aux -> function_definition .)
    NAME            reduce using rule 82 (codeblock_aux -> function_definition .)
    INT_TYPE        reduce using rule 82 (codeblock_aux -> function_definition .)
    STRING_TYPE     reduce using rule 82 (codeblock_aux -> function_definition .)
    DOUBLE_TYPE     reduce using rule 82 (codeblock_aux -> function_definition .)
    FLOAT_TYPE      reduce using rule 82 (codeblock_aux -> function_definition .)
    BOOL_TYPE       reduce using rule 82 (codeblock_aux -> function_definition .)
    $end            reduce using rule 82 (codeblock_aux -> function_definition .)
    RCURLY          reduce using rule 82 (codeblock_aux -> function_definition .)


state 10

    (83) codeblock_aux -> condition_if .

    FUNCTION        reduce using rule 83 (codeblock_aux -> condition_if .)
    IF              reduce using rule 83 (codeblock_aux -> condition_if .)
    FOR             reduce using rule 83 (codeblock_aux -> condition_if .)
    WHILE           reduce using rule 83 (codeblock_aux -> condition_if .)
    NAME            reduce using rule 83 (codeblock_aux -> condition_if .)
    INT_TYPE        reduce using rule 83 (codeblock_aux -> condition_if .)
    STRING_TYPE     reduce using rule 83 (codeblock_aux -> condition_if .)
    DOUBLE_TYPE     reduce using rule 83 (codeblock_aux -> condition_if .)
    FLOAT_TYPE      reduce using rule 83 (codeblock_aux -> condition_if .)
    BOOL_TYPE       reduce using rule 83 (codeblock_aux -> condition_if .)
    $end            reduce using rule 83 (codeblock_aux -> condition_if .)
    RCURLY          reduce using rule 83 (codeblock_aux -> condition_if .)


state 11

    (84) codeblock_aux -> loop .

    FUNCTION        reduce using rule 84 (codeblock_aux -> loop .)
    IF              reduce using rule 84 (codeblock_aux -> loop .)
    FOR             reduce using rule 84 (codeblock_aux -> loop .)
    WHILE           reduce using rule 84 (codeblock_aux -> loop .)
    NAME            reduce using rule 84 (codeblock_aux -> loop .)
    INT_TYPE        reduce using rule 84 (codeblock_aux -> loop .)
    STRING_TYPE     reduce using rule 84 (codeblock_aux -> loop .)
    DOUBLE_TYPE     reduce using rule 84 (codeblock_aux -> loop .)
    FLOAT_TYPE      reduce using rule 84 (codeblock_aux -> loop .)
    BOOL_TYPE       reduce using rule 84 (codeblock_aux -> loop .)
    $end            reduce using rule 84 (codeblock_aux -> loop .)
    RCURLY          reduce using rule 84 (codeblock_aux -> loop .)


state 12

    (76) statement -> statement_aux . SEMICOLON

    SEMICOLON       shift and go to state 29


state 13

    (46) function_definition -> FUNCTION . NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope

    NAME            shift and go to state 30


state 14

    (75) assign -> NAME . n_math_expression_1_name n_name EQUAL n_seen_equal_op expression
    (47) function_call -> NAME . LPARENTHESIS parameter_list RPARENTHESIS
    (8) n_math_expression_1_name -> .

    LPARENTHESIS    shift and go to state 32
    EQUAL           reduce using rule 8 (n_math_expression_1_name -> .)

    n_math_expression_1_name       shift and go to state 31

state 15

    (89) condition_if -> IF . LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2

    LPARENTHESIS    shift and go to state 33


state 16

    (85) loop -> forloop .

    FUNCTION        reduce using rule 85 (loop -> forloop .)
    IF              reduce using rule 85 (loop -> forloop .)
    FOR             reduce using rule 85 (loop -> forloop .)
    WHILE           reduce using rule 85 (loop -> forloop .)
    NAME            reduce using rule 85 (loop -> forloop .)
    INT_TYPE        reduce using rule 85 (loop -> forloop .)
    STRING_TYPE     reduce using rule 85 (loop -> forloop .)
    DOUBLE_TYPE     reduce using rule 85 (loop -> forloop .)
    FLOAT_TYPE      reduce using rule 85 (loop -> forloop .)
    BOOL_TYPE       reduce using rule 85 (loop -> forloop .)
    $end            reduce using rule 85 (loop -> forloop .)
    RCURLY          reduce using rule 85 (loop -> forloop .)


state 17

    (86) loop -> whileloop .

    FUNCTION        reduce using rule 86 (loop -> whileloop .)
    IF              reduce using rule 86 (loop -> whileloop .)
    FOR             reduce using rule 86 (loop -> whileloop .)
    WHILE           reduce using rule 86 (loop -> whileloop .)
    NAME            reduce using rule 86 (loop -> whileloop .)
    INT_TYPE        reduce using rule 86 (loop -> whileloop .)
    STRING_TYPE     reduce using rule 86 (loop -> whileloop .)
    DOUBLE_TYPE     reduce using rule 86 (loop -> whileloop .)
    FLOAT_TYPE      reduce using rule 86 (loop -> whileloop .)
    BOOL_TYPE       reduce using rule 86 (loop -> whileloop .)
    $end            reduce using rule 86 (loop -> whileloop .)
    RCURLY          reduce using rule 86 (loop -> whileloop .)


state 18

    (77) statement_aux -> assign .

    SEMICOLON       reduce using rule 77 (statement_aux -> assign .)


state 19

    (78) statement_aux -> function_call .

    SEMICOLON       reduce using rule 78 (statement_aux -> function_call .)


state 20

    (88) forloop -> FOR . LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope

    LPARENTHESIS    shift and go to state 34


state 21

    (87) whileloop -> WHILE . p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (23) p_n_pre_condition_loop_1 -> .

    LPARENTHESIS    reduce using rule 23 (p_n_pre_condition_loop_1 -> .)

    p_n_pre_condition_loop_1       shift and go to state 35

state 22

    (74) assign -> type . NAME n_math_expression_1_name n_name EQUAL n_seen_equal_op expression

    NAME            shift and go to state 36


state 23

    (30) type -> INT_TYPE . n_seen_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)
    LCURLY          reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 37

state 24

    (31) type -> STRING_TYPE . n_seen_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)
    LCURLY          reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 38

state 25

    (32) type -> DOUBLE_TYPE . n_seen_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)
    LCURLY          reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 39

state 26

    (33) type -> FLOAT_TYPE . n_seen_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)
    LCURLY          reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 40

state 27

    (34) type -> BOOL_TYPE . n_seen_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)
    LCURLY          reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 41

state 28

    (80) codeblock -> codeblock_aux codeblock .

    $end            reduce using rule 80 (codeblock -> codeblock_aux codeblock .)
    RCURLY          reduce using rule 80 (codeblock -> codeblock_aux codeblock .)


state 29

    (76) statement -> statement_aux SEMICOLON .

    FUNCTION        reduce using rule 76 (statement -> statement_aux SEMICOLON .)
    IF              reduce using rule 76 (statement -> statement_aux SEMICOLON .)
    FOR             reduce using rule 76 (statement -> statement_aux SEMICOLON .)
    WHILE           reduce using rule 76 (statement -> statement_aux SEMICOLON .)
    NAME            reduce using rule 76 (statement -> statement_aux SEMICOLON .)
    INT_TYPE        reduce using rule 76 (statement -> statement_aux SEMICOLON .)
    STRING_TYPE     reduce using rule 76 (statement -> statement_aux SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 76 (statement -> statement_aux SEMICOLON .)
    FLOAT_TYPE      reduce using rule 76 (statement -> statement_aux SEMICOLON .)
    BOOL_TYPE       reduce using rule 76 (statement -> statement_aux SEMICOLON .)
    $end            reduce using rule 76 (statement -> statement_aux SEMICOLON .)
    RCURLY          reduce using rule 76 (statement -> statement_aux SEMICOLON .)


state 30

    (46) function_definition -> FUNCTION NAME . n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope
    (2) n_open_new_scope -> .

    INT_TYPE        reduce using rule 2 (n_open_new_scope -> .)
    STRING_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    DOUBLE_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    FLOAT_TYPE      reduce using rule 2 (n_open_new_scope -> .)
    BOOL_TYPE       reduce using rule 2 (n_open_new_scope -> .)
    NAME            reduce using rule 2 (n_open_new_scope -> .)
    DOUBLEDOT       reduce using rule 2 (n_open_new_scope -> .)

    n_open_new_scope               shift and go to state 42

state 31

    (75) assign -> NAME n_math_expression_1_name . n_name EQUAL n_seen_equal_op expression
    (4) n_name -> .

    EQUAL           reduce using rule 4 (n_name -> .)

    n_name                         shift and go to state 43

state 32

    (47) function_call -> NAME LPARENTHESIS . parameter_list RPARENTHESIS
    (48) parameter_list -> . empty
    (49) parameter_list -> . parameter
    (50) parameter_list -> . parameter COMMA parameter_list
    (26) empty -> .
    (51) parameter -> . type NAME n_name
    (52) parameter -> . assign
    (30) type -> . INT_TYPE n_seen_type
    (31) type -> . STRING_TYPE n_seen_type
    (32) type -> . DOUBLE_TYPE n_seen_type
    (33) type -> . FLOAT_TYPE n_seen_type
    (34) type -> . BOOL_TYPE n_seen_type
    (74) assign -> . type NAME n_math_expression_1_name n_name EQUAL n_seen_equal_op expression
    (75) assign -> . NAME n_math_expression_1_name n_name EQUAL n_seen_equal_op expression

    RPARENTHESIS    reduce using rule 26 (empty -> .)
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27
    NAME            shift and go to state 44

    parameter_list                 shift and go to state 45
    empty                          shift and go to state 46
    parameter                      shift and go to state 47
    type                           shift and go to state 48
    assign                         shift and go to state 49

state 33

    (89) condition_if -> IF LPARENTHESIS . expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (53) expression -> . expression_or
    (54) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (55) expression_or -> . expression_rel
    (56) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (57) expression_rel -> . exp
    (58) expression_rel -> . exp relational_operator exp n_math_expression_9
    (59) exp -> . termino n_math_expression_4
    (60) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (61) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (62) termino -> . factor n_math_expression_5
    (63) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (64) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (65) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (66) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (67) factor -> . PLUS value
    (68) factor -> . MINUS value
    (69) factor -> . value
    (70) value -> . function_call
    (71) value -> . literal
    (72) value -> . NAME n_math_expression_1_name
    (47) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (41) literal -> . FLOAT n_math_expression_1_float
    (42) literal -> . INT n_math_expression_1_int
    (43) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    expression                     shift and go to state 51
    expression_or                  shift and go to state 52
    expression_rel                 shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 55
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 34

    (88) forloop -> FOR LPARENTHESIS . n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (2) n_open_new_scope -> .

    NAME            reduce using rule 2 (n_open_new_scope -> .)
    INT_TYPE        reduce using rule 2 (n_open_new_scope -> .)
    STRING_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    DOUBLE_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    FLOAT_TYPE      reduce using rule 2 (n_open_new_scope -> .)
    BOOL_TYPE       reduce using rule 2 (n_open_new_scope -> .)

    n_open_new_scope               shift and go to state 66

state 35

    (87) whileloop -> WHILE p_n_pre_condition_loop_1 . LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope

    LPARENTHESIS    shift and go to state 67


state 36

    (74) assign -> type NAME . n_math_expression_1_name n_name EQUAL n_seen_equal_op expression
    (8) n_math_expression_1_name -> .

    EQUAL           reduce using rule 8 (n_math_expression_1_name -> .)

    n_math_expression_1_name       shift and go to state 68

state 37

    (30) type -> INT_TYPE n_seen_type .

    NAME            reduce using rule 30 (type -> INT_TYPE n_seen_type .)
    LCURLY          reduce using rule 30 (type -> INT_TYPE n_seen_type .)


state 38

    (31) type -> STRING_TYPE n_seen_type .

    NAME            reduce using rule 31 (type -> STRING_TYPE n_seen_type .)
    LCURLY          reduce using rule 31 (type -> STRING_TYPE n_seen_type .)


state 39

    (32) type -> DOUBLE_TYPE n_seen_type .

    NAME            reduce using rule 32 (type -> DOUBLE_TYPE n_seen_type .)
    LCURLY          reduce using rule 32 (type -> DOUBLE_TYPE n_seen_type .)


state 40

    (33) type -> FLOAT_TYPE n_seen_type .

    NAME            reduce using rule 33 (type -> FLOAT_TYPE n_seen_type .)
    LCURLY          reduce using rule 33 (type -> FLOAT_TYPE n_seen_type .)


state 41

    (34) type -> BOOL_TYPE n_seen_type .

    NAME            reduce using rule 34 (type -> BOOL_TYPE n_seen_type .)
    LCURLY          reduce using rule 34 (type -> BOOL_TYPE n_seen_type .)


state 42

    (46) function_definition -> FUNCTION NAME n_open_new_scope . parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope
    (48) parameter_list -> . empty
    (49) parameter_list -> . parameter
    (50) parameter_list -> . parameter COMMA parameter_list
    (26) empty -> .
    (51) parameter -> . type NAME n_name
    (52) parameter -> . assign
    (30) type -> . INT_TYPE n_seen_type
    (31) type -> . STRING_TYPE n_seen_type
    (32) type -> . DOUBLE_TYPE n_seen_type
    (33) type -> . FLOAT_TYPE n_seen_type
    (34) type -> . BOOL_TYPE n_seen_type
    (74) assign -> . type NAME n_math_expression_1_name n_name EQUAL n_seen_equal_op expression
    (75) assign -> . NAME n_math_expression_1_name n_name EQUAL n_seen_equal_op expression

    DOUBLEDOT       reduce using rule 26 (empty -> .)
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27
    NAME            shift and go to state 44

    parameter_list                 shift and go to state 69
    empty                          shift and go to state 46
    parameter                      shift and go to state 47
    type                           shift and go to state 48
    assign                         shift and go to state 49

state 43

    (75) assign -> NAME n_math_expression_1_name n_name . EQUAL n_seen_equal_op expression

    EQUAL           shift and go to state 70


state 44

    (75) assign -> NAME . n_math_expression_1_name n_name EQUAL n_seen_equal_op expression
    (8) n_math_expression_1_name -> .

    EQUAL           reduce using rule 8 (n_math_expression_1_name -> .)

    n_math_expression_1_name       shift and go to state 31

state 45

    (47) function_call -> NAME LPARENTHESIS parameter_list . RPARENTHESIS

    RPARENTHESIS    shift and go to state 71


state 46

    (48) parameter_list -> empty .

    RPARENTHESIS    reduce using rule 48 (parameter_list -> empty .)
    DOUBLEDOT       reduce using rule 48 (parameter_list -> empty .)


state 47

    (49) parameter_list -> parameter .
    (50) parameter_list -> parameter . COMMA parameter_list

    RPARENTHESIS    reduce using rule 49 (parameter_list -> parameter .)
    DOUBLEDOT       reduce using rule 49 (parameter_list -> parameter .)
    COMMA           shift and go to state 72


state 48

    (51) parameter -> type . NAME n_name
    (74) assign -> type . NAME n_math_expression_1_name n_name EQUAL n_seen_equal_op expression

    NAME            shift and go to state 73


state 49

    (52) parameter -> assign .

    COMMA           reduce using rule 52 (parameter -> assign .)
    RPARENTHESIS    reduce using rule 52 (parameter -> assign .)
    DOUBLEDOT       reduce using rule 52 (parameter -> assign .)


state 50

    (66) factor -> LPARENTHESIS . n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (13) n_math_expression_6 -> .

    LPARENTHESIS    reduce using rule 13 (n_math_expression_6 -> .)
    PLUS            reduce using rule 13 (n_math_expression_6 -> .)
    MINUS           reduce using rule 13 (n_math_expression_6 -> .)
    NAME            reduce using rule 13 (n_math_expression_6 -> .)
    FLOAT           reduce using rule 13 (n_math_expression_6 -> .)
    INT             reduce using rule 13 (n_math_expression_6 -> .)
    STRING          reduce using rule 13 (n_math_expression_6 -> .)

    n_math_expression_6            shift and go to state 74

state 51

    (89) condition_if -> IF LPARENTHESIS expression . RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2

    RPARENTHESIS    shift and go to state 75


state 52

    (53) expression -> expression_or .
    (54) expression -> expression_or . AND n_math_expression_10 expression n_math_expression_11

    RPARENTHESIS    reduce using rule 53 (expression -> expression_or .)
    SEMICOLON       reduce using rule 53 (expression -> expression_or .)
    COMMA           reduce using rule 53 (expression -> expression_or .)
    DOUBLEDOT       reduce using rule 53 (expression -> expression_or .)
    AND             shift and go to state 76


state 53

    (55) expression_or -> expression_rel .
    (56) expression_or -> expression_rel . OR n_math_expression_10 expression_or n_math_expression_12

    AND             reduce using rule 55 (expression_or -> expression_rel .)
    RPARENTHESIS    reduce using rule 55 (expression_or -> expression_rel .)
    SEMICOLON       reduce using rule 55 (expression_or -> expression_rel .)
    COMMA           reduce using rule 55 (expression_or -> expression_rel .)
    DOUBLEDOT       reduce using rule 55 (expression_or -> expression_rel .)
    OR              shift and go to state 77


state 54

    (57) expression_rel -> exp .
    (58) expression_rel -> exp . relational_operator exp n_math_expression_9
    (35) relational_operator -> . GREATERTHAN n_math_expression_8
    (36) relational_operator -> . LESSTHAN n_math_expression_8
    (37) relational_operator -> . EQUALEQUAL n_math_expression_8
    (38) relational_operator -> . LESSTHANOREQUAL n_math_expression_8
    (39) relational_operator -> . GREATERTHANOREQUAL n_math_expression_8
    (40) relational_operator -> . NOTEQUAL n_math_expression_8

    OR              reduce using rule 57 (expression_rel -> exp .)
    AND             reduce using rule 57 (expression_rel -> exp .)
    RPARENTHESIS    reduce using rule 57 (expression_rel -> exp .)
    SEMICOLON       reduce using rule 57 (expression_rel -> exp .)
    COMMA           reduce using rule 57 (expression_rel -> exp .)
    DOUBLEDOT       reduce using rule 57 (expression_rel -> exp .)
    GREATERTHAN     shift and go to state 79
    LESSTHAN        shift and go to state 80
    EQUALEQUAL      shift and go to state 81
    LESSTHANOREQUAL shift and go to state 82
    GREATERTHANOREQUAL shift and go to state 83
    NOTEQUAL        shift and go to state 84

    relational_operator            shift and go to state 78

state 55

    (59) exp -> termino . n_math_expression_4
    (60) exp -> termino . n_math_expression_4 PLUS n_math_expression_2 exp
    (61) exp -> termino . n_math_expression_4 MINUS n_math_expression_2 exp
    (11) n_math_expression_4 -> .

    PLUS            reduce using rule 11 (n_math_expression_4 -> .)
    MINUS           reduce using rule 11 (n_math_expression_4 -> .)
    GREATERTHAN     reduce using rule 11 (n_math_expression_4 -> .)
    LESSTHAN        reduce using rule 11 (n_math_expression_4 -> .)
    EQUALEQUAL      reduce using rule 11 (n_math_expression_4 -> .)
    LESSTHANOREQUAL reduce using rule 11 (n_math_expression_4 -> .)
    GREATERTHANOREQUAL reduce using rule 11 (n_math_expression_4 -> .)
    NOTEQUAL        reduce using rule 11 (n_math_expression_4 -> .)
    OR              reduce using rule 11 (n_math_expression_4 -> .)
    AND             reduce using rule 11 (n_math_expression_4 -> .)
    RPARENTHESIS    reduce using rule 11 (n_math_expression_4 -> .)
    SEMICOLON       reduce using rule 11 (n_math_expression_4 -> .)
    COMMA           reduce using rule 11 (n_math_expression_4 -> .)
    DOUBLEDOT       reduce using rule 11 (n_math_expression_4 -> .)

    n_math_expression_4            shift and go to state 85

state 56

    (67) factor -> PLUS . value
    (70) value -> . function_call
    (71) value -> . literal
    (72) value -> . NAME n_math_expression_1_name
    (47) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (41) literal -> . FLOAT n_math_expression_1_float
    (42) literal -> . INT n_math_expression_1_int
    (43) literal -> . STRING n_math_expression_1_string

    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    value                          shift and go to state 86
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 57

    (68) factor -> MINUS . value
    (70) value -> . function_call
    (71) value -> . literal
    (72) value -> . NAME n_math_expression_1_name
    (47) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (41) literal -> . FLOAT n_math_expression_1_float
    (42) literal -> . INT n_math_expression_1_int
    (43) literal -> . STRING n_math_expression_1_string

    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    value                          shift and go to state 87
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 58

    (62) termino -> factor . n_math_expression_5
    (63) termino -> factor . n_math_expression_5 TIMES n_math_expression_3 termino
    (64) termino -> factor . n_math_expression_5 DIVIDE n_math_expression_3 termino
    (65) termino -> factor . n_math_expression_5 MODULUS n_math_expression_3 termino
    (12) n_math_expression_5 -> .

    TIMES           reduce using rule 12 (n_math_expression_5 -> .)
    DIVIDE          reduce using rule 12 (n_math_expression_5 -> .)
    MODULUS         reduce using rule 12 (n_math_expression_5 -> .)
    PLUS            reduce using rule 12 (n_math_expression_5 -> .)
    MINUS           reduce using rule 12 (n_math_expression_5 -> .)
    GREATERTHAN     reduce using rule 12 (n_math_expression_5 -> .)
    LESSTHAN        reduce using rule 12 (n_math_expression_5 -> .)
    EQUALEQUAL      reduce using rule 12 (n_math_expression_5 -> .)
    LESSTHANOREQUAL reduce using rule 12 (n_math_expression_5 -> .)
    GREATERTHANOREQUAL reduce using rule 12 (n_math_expression_5 -> .)
    NOTEQUAL        reduce using rule 12 (n_math_expression_5 -> .)
    OR              reduce using rule 12 (n_math_expression_5 -> .)
    AND             reduce using rule 12 (n_math_expression_5 -> .)
    RPARENTHESIS    reduce using rule 12 (n_math_expression_5 -> .)
    SEMICOLON       reduce using rule 12 (n_math_expression_5 -> .)
    COMMA           reduce using rule 12 (n_math_expression_5 -> .)
    DOUBLEDOT       reduce using rule 12 (n_math_expression_5 -> .)

    n_math_expression_5            shift and go to state 88

state 59

    (69) factor -> value .

    TIMES           reduce using rule 69 (factor -> value .)
    DIVIDE          reduce using rule 69 (factor -> value .)
    MODULUS         reduce using rule 69 (factor -> value .)
    PLUS            reduce using rule 69 (factor -> value .)
    MINUS           reduce using rule 69 (factor -> value .)
    GREATERTHAN     reduce using rule 69 (factor -> value .)
    LESSTHAN        reduce using rule 69 (factor -> value .)
    EQUALEQUAL      reduce using rule 69 (factor -> value .)
    LESSTHANOREQUAL reduce using rule 69 (factor -> value .)
    GREATERTHANOREQUAL reduce using rule 69 (factor -> value .)
    NOTEQUAL        reduce using rule 69 (factor -> value .)
    OR              reduce using rule 69 (factor -> value .)
    AND             reduce using rule 69 (factor -> value .)
    RPARENTHESIS    reduce using rule 69 (factor -> value .)
    SEMICOLON       reduce using rule 69 (factor -> value .)
    COMMA           reduce using rule 69 (factor -> value .)
    DOUBLEDOT       reduce using rule 69 (factor -> value .)


state 60

    (70) value -> function_call .

    TIMES           reduce using rule 70 (value -> function_call .)
    DIVIDE          reduce using rule 70 (value -> function_call .)
    MODULUS         reduce using rule 70 (value -> function_call .)
    PLUS            reduce using rule 70 (value -> function_call .)
    MINUS           reduce using rule 70 (value -> function_call .)
    GREATERTHAN     reduce using rule 70 (value -> function_call .)
    LESSTHAN        reduce using rule 70 (value -> function_call .)
    EQUALEQUAL      reduce using rule 70 (value -> function_call .)
    LESSTHANOREQUAL reduce using rule 70 (value -> function_call .)
    GREATERTHANOREQUAL reduce using rule 70 (value -> function_call .)
    NOTEQUAL        reduce using rule 70 (value -> function_call .)
    OR              reduce using rule 70 (value -> function_call .)
    AND             reduce using rule 70 (value -> function_call .)
    RPARENTHESIS    reduce using rule 70 (value -> function_call .)
    SEMICOLON       reduce using rule 70 (value -> function_call .)
    COMMA           reduce using rule 70 (value -> function_call .)
    DOUBLEDOT       reduce using rule 70 (value -> function_call .)


state 61

    (71) value -> literal .

    TIMES           reduce using rule 71 (value -> literal .)
    DIVIDE          reduce using rule 71 (value -> literal .)
    MODULUS         reduce using rule 71 (value -> literal .)
    PLUS            reduce using rule 71 (value -> literal .)
    MINUS           reduce using rule 71 (value -> literal .)
    GREATERTHAN     reduce using rule 71 (value -> literal .)
    LESSTHAN        reduce using rule 71 (value -> literal .)
    EQUALEQUAL      reduce using rule 71 (value -> literal .)
    LESSTHANOREQUAL reduce using rule 71 (value -> literal .)
    GREATERTHANOREQUAL reduce using rule 71 (value -> literal .)
    NOTEQUAL        reduce using rule 71 (value -> literal .)
    OR              reduce using rule 71 (value -> literal .)
    AND             reduce using rule 71 (value -> literal .)
    RPARENTHESIS    reduce using rule 71 (value -> literal .)
    SEMICOLON       reduce using rule 71 (value -> literal .)
    COMMA           reduce using rule 71 (value -> literal .)
    DOUBLEDOT       reduce using rule 71 (value -> literal .)


state 62

    (72) value -> NAME . n_math_expression_1_name
    (47) function_call -> NAME . LPARENTHESIS parameter_list RPARENTHESIS
    (8) n_math_expression_1_name -> .

    LPARENTHESIS    shift and go to state 32
    TIMES           reduce using rule 8 (n_math_expression_1_name -> .)
    DIVIDE          reduce using rule 8 (n_math_expression_1_name -> .)
    MODULUS         reduce using rule 8 (n_math_expression_1_name -> .)
    PLUS            reduce using rule 8 (n_math_expression_1_name -> .)
    MINUS           reduce using rule 8 (n_math_expression_1_name -> .)
    GREATERTHAN     reduce using rule 8 (n_math_expression_1_name -> .)
    LESSTHAN        reduce using rule 8 (n_math_expression_1_name -> .)
    EQUALEQUAL      reduce using rule 8 (n_math_expression_1_name -> .)
    LESSTHANOREQUAL reduce using rule 8 (n_math_expression_1_name -> .)
    GREATERTHANOREQUAL reduce using rule 8 (n_math_expression_1_name -> .)
    NOTEQUAL        reduce using rule 8 (n_math_expression_1_name -> .)
    OR              reduce using rule 8 (n_math_expression_1_name -> .)
    AND             reduce using rule 8 (n_math_expression_1_name -> .)
    RPARENTHESIS    reduce using rule 8 (n_math_expression_1_name -> .)
    SEMICOLON       reduce using rule 8 (n_math_expression_1_name -> .)
    COMMA           reduce using rule 8 (n_math_expression_1_name -> .)
    DOUBLEDOT       reduce using rule 8 (n_math_expression_1_name -> .)

    n_math_expression_1_name       shift and go to state 89

state 63

    (41) literal -> FLOAT . n_math_expression_1_float
    (6) n_math_expression_1_float -> .

    TIMES           reduce using rule 6 (n_math_expression_1_float -> .)
    DIVIDE          reduce using rule 6 (n_math_expression_1_float -> .)
    MODULUS         reduce using rule 6 (n_math_expression_1_float -> .)
    PLUS            reduce using rule 6 (n_math_expression_1_float -> .)
    MINUS           reduce using rule 6 (n_math_expression_1_float -> .)
    GREATERTHAN     reduce using rule 6 (n_math_expression_1_float -> .)
    LESSTHAN        reduce using rule 6 (n_math_expression_1_float -> .)
    EQUALEQUAL      reduce using rule 6 (n_math_expression_1_float -> .)
    LESSTHANOREQUAL reduce using rule 6 (n_math_expression_1_float -> .)
    GREATERTHANOREQUAL reduce using rule 6 (n_math_expression_1_float -> .)
    NOTEQUAL        reduce using rule 6 (n_math_expression_1_float -> .)
    OR              reduce using rule 6 (n_math_expression_1_float -> .)
    AND             reduce using rule 6 (n_math_expression_1_float -> .)
    RPARENTHESIS    reduce using rule 6 (n_math_expression_1_float -> .)
    SEMICOLON       reduce using rule 6 (n_math_expression_1_float -> .)
    COMMA           reduce using rule 6 (n_math_expression_1_float -> .)
    DOUBLEDOT       reduce using rule 6 (n_math_expression_1_float -> .)

    n_math_expression_1_float      shift and go to state 90

state 64

    (42) literal -> INT . n_math_expression_1_int
    (5) n_math_expression_1_int -> .

    TIMES           reduce using rule 5 (n_math_expression_1_int -> .)
    DIVIDE          reduce using rule 5 (n_math_expression_1_int -> .)
    MODULUS         reduce using rule 5 (n_math_expression_1_int -> .)
    PLUS            reduce using rule 5 (n_math_expression_1_int -> .)
    MINUS           reduce using rule 5 (n_math_expression_1_int -> .)
    GREATERTHAN     reduce using rule 5 (n_math_expression_1_int -> .)
    LESSTHAN        reduce using rule 5 (n_math_expression_1_int -> .)
    EQUALEQUAL      reduce using rule 5 (n_math_expression_1_int -> .)
    LESSTHANOREQUAL reduce using rule 5 (n_math_expression_1_int -> .)
    GREATERTHANOREQUAL reduce using rule 5 (n_math_expression_1_int -> .)
    NOTEQUAL        reduce using rule 5 (n_math_expression_1_int -> .)
    OR              reduce using rule 5 (n_math_expression_1_int -> .)
    AND             reduce using rule 5 (n_math_expression_1_int -> .)
    RPARENTHESIS    reduce using rule 5 (n_math_expression_1_int -> .)
    SEMICOLON       reduce using rule 5 (n_math_expression_1_int -> .)
    COMMA           reduce using rule 5 (n_math_expression_1_int -> .)
    DOUBLEDOT       reduce using rule 5 (n_math_expression_1_int -> .)

    n_math_expression_1_int        shift and go to state 91

state 65

    (43) literal -> STRING . n_math_expression_1_string
    (7) n_math_expression_1_string -> .

    TIMES           reduce using rule 7 (n_math_expression_1_string -> .)
    DIVIDE          reduce using rule 7 (n_math_expression_1_string -> .)
    MODULUS         reduce using rule 7 (n_math_expression_1_string -> .)
    PLUS            reduce using rule 7 (n_math_expression_1_string -> .)
    MINUS           reduce using rule 7 (n_math_expression_1_string -> .)
    GREATERTHAN     reduce using rule 7 (n_math_expression_1_string -> .)
    LESSTHAN        reduce using rule 7 (n_math_expression_1_string -> .)
    EQUALEQUAL      reduce using rule 7 (n_math_expression_1_string -> .)
    LESSTHANOREQUAL reduce using rule 7 (n_math_expression_1_string -> .)
    GREATERTHANOREQUAL reduce using rule 7 (n_math_expression_1_string -> .)
    NOTEQUAL        reduce using rule 7 (n_math_expression_1_string -> .)
    OR              reduce using rule 7 (n_math_expression_1_string -> .)
    AND             reduce using rule 7 (n_math_expression_1_string -> .)
    RPARENTHESIS    reduce using rule 7 (n_math_expression_1_string -> .)
    SEMICOLON       reduce using rule 7 (n_math_expression_1_string -> .)
    COMMA           reduce using rule 7 (n_math_expression_1_string -> .)
    DOUBLEDOT       reduce using rule 7 (n_math_expression_1_string -> .)

    n_math_expression_1_string     shift and go to state 92

state 66

    (88) forloop -> FOR LPARENTHESIS n_open_new_scope . assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (74) assign -> . type NAME n_math_expression_1_name n_name EQUAL n_seen_equal_op expression
    (75) assign -> . NAME n_math_expression_1_name n_name EQUAL n_seen_equal_op expression
    (30) type -> . INT_TYPE n_seen_type
    (31) type -> . STRING_TYPE n_seen_type
    (32) type -> . DOUBLE_TYPE n_seen_type
    (33) type -> . FLOAT_TYPE n_seen_type
    (34) type -> . BOOL_TYPE n_seen_type

    NAME            shift and go to state 44
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    assign                         shift and go to state 93
    type                           shift and go to state 22

state 67

    (87) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS . expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (53) expression -> . expression_or
    (54) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (55) expression_or -> . expression_rel
    (56) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (57) expression_rel -> . exp
    (58) expression_rel -> . exp relational_operator exp n_math_expression_9
    (59) exp -> . termino n_math_expression_4
    (60) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (61) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (62) termino -> . factor n_math_expression_5
    (63) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (64) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (65) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (66) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (67) factor -> . PLUS value
    (68) factor -> . MINUS value
    (69) factor -> . value
    (70) value -> . function_call
    (71) value -> . literal
    (72) value -> . NAME n_math_expression_1_name
    (47) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (41) literal -> . FLOAT n_math_expression_1_float
    (42) literal -> . INT n_math_expression_1_int
    (43) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    expression                     shift and go to state 94
    expression_or                  shift and go to state 52
    expression_rel                 shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 55
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 68

    (74) assign -> type NAME n_math_expression_1_name . n_name EQUAL n_seen_equal_op expression
    (4) n_name -> .

    EQUAL           reduce using rule 4 (n_name -> .)

    n_name                         shift and go to state 95

state 69

    (46) function_definition -> FUNCTION NAME n_open_new_scope parameter_list . DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope

    DOUBLEDOT       shift and go to state 96


state 70

    (75) assign -> NAME n_math_expression_1_name n_name EQUAL . n_seen_equal_op expression
    (73) n_seen_equal_op -> .

    LPARENTHESIS    reduce using rule 73 (n_seen_equal_op -> .)
    PLUS            reduce using rule 73 (n_seen_equal_op -> .)
    MINUS           reduce using rule 73 (n_seen_equal_op -> .)
    NAME            reduce using rule 73 (n_seen_equal_op -> .)
    FLOAT           reduce using rule 73 (n_seen_equal_op -> .)
    INT             reduce using rule 73 (n_seen_equal_op -> .)
    STRING          reduce using rule 73 (n_seen_equal_op -> .)

    n_seen_equal_op                shift and go to state 97

state 71

    (47) function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .

    SEMICOLON       reduce using rule 47 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    TIMES           reduce using rule 47 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    DIVIDE          reduce using rule 47 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    MODULUS         reduce using rule 47 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    PLUS            reduce using rule 47 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    MINUS           reduce using rule 47 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    GREATERTHAN     reduce using rule 47 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    LESSTHAN        reduce using rule 47 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    EQUALEQUAL      reduce using rule 47 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    LESSTHANOREQUAL reduce using rule 47 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    GREATERTHANOREQUAL reduce using rule 47 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    NOTEQUAL        reduce using rule 47 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    OR              reduce using rule 47 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    AND             reduce using rule 47 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    RPARENTHESIS    reduce using rule 47 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    COMMA           reduce using rule 47 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    DOUBLEDOT       reduce using rule 47 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)


state 72

    (50) parameter_list -> parameter COMMA . parameter_list
    (48) parameter_list -> . empty
    (49) parameter_list -> . parameter
    (50) parameter_list -> . parameter COMMA parameter_list
    (26) empty -> .
    (51) parameter -> . type NAME n_name
    (52) parameter -> . assign
    (30) type -> . INT_TYPE n_seen_type
    (31) type -> . STRING_TYPE n_seen_type
    (32) type -> . DOUBLE_TYPE n_seen_type
    (33) type -> . FLOAT_TYPE n_seen_type
    (34) type -> . BOOL_TYPE n_seen_type
    (74) assign -> . type NAME n_math_expression_1_name n_name EQUAL n_seen_equal_op expression
    (75) assign -> . NAME n_math_expression_1_name n_name EQUAL n_seen_equal_op expression

    RPARENTHESIS    reduce using rule 26 (empty -> .)
    DOUBLEDOT       reduce using rule 26 (empty -> .)
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27
    NAME            shift and go to state 44

    parameter                      shift and go to state 47
    parameter_list                 shift and go to state 98
    empty                          shift and go to state 46
    type                           shift and go to state 48
    assign                         shift and go to state 49

state 73

    (51) parameter -> type NAME . n_name
    (74) assign -> type NAME . n_math_expression_1_name n_name EQUAL n_seen_equal_op expression
    (4) n_name -> .
    (8) n_math_expression_1_name -> .

    COMMA           reduce using rule 4 (n_name -> .)
    RPARENTHESIS    reduce using rule 4 (n_name -> .)
    DOUBLEDOT       reduce using rule 4 (n_name -> .)
    EQUAL           reduce using rule 8 (n_math_expression_1_name -> .)

    n_name                         shift and go to state 99
    n_math_expression_1_name       shift and go to state 68

state 74

    (66) factor -> LPARENTHESIS n_math_expression_6 . expression RPARENTHESIS n_math_expression_7
    (53) expression -> . expression_or
    (54) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (55) expression_or -> . expression_rel
    (56) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (57) expression_rel -> . exp
    (58) expression_rel -> . exp relational_operator exp n_math_expression_9
    (59) exp -> . termino n_math_expression_4
    (60) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (61) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (62) termino -> . factor n_math_expression_5
    (63) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (64) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (65) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (66) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (67) factor -> . PLUS value
    (68) factor -> . MINUS value
    (69) factor -> . value
    (70) value -> . function_call
    (71) value -> . literal
    (72) value -> . NAME n_math_expression_1_name
    (47) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (41) literal -> . FLOAT n_math_expression_1_float
    (42) literal -> . INT n_math_expression_1_int
    (43) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    expression                     shift and go to state 100
    expression_or                  shift and go to state 52
    expression_rel                 shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 55
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 75

    (89) condition_if -> IF LPARENTHESIS expression RPARENTHESIS . LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2

    LCURLY          shift and go to state 101


state 76

    (54) expression -> expression_or AND . n_math_expression_10 expression n_math_expression_11
    (17) n_math_expression_10 -> .

    LPARENTHESIS    reduce using rule 17 (n_math_expression_10 -> .)
    PLUS            reduce using rule 17 (n_math_expression_10 -> .)
    MINUS           reduce using rule 17 (n_math_expression_10 -> .)
    NAME            reduce using rule 17 (n_math_expression_10 -> .)
    FLOAT           reduce using rule 17 (n_math_expression_10 -> .)
    INT             reduce using rule 17 (n_math_expression_10 -> .)
    STRING          reduce using rule 17 (n_math_expression_10 -> .)

    n_math_expression_10           shift and go to state 102

state 77

    (56) expression_or -> expression_rel OR . n_math_expression_10 expression_or n_math_expression_12
    (17) n_math_expression_10 -> .

    LPARENTHESIS    reduce using rule 17 (n_math_expression_10 -> .)
    PLUS            reduce using rule 17 (n_math_expression_10 -> .)
    MINUS           reduce using rule 17 (n_math_expression_10 -> .)
    NAME            reduce using rule 17 (n_math_expression_10 -> .)
    FLOAT           reduce using rule 17 (n_math_expression_10 -> .)
    INT             reduce using rule 17 (n_math_expression_10 -> .)
    STRING          reduce using rule 17 (n_math_expression_10 -> .)

    n_math_expression_10           shift and go to state 103

state 78

    (58) expression_rel -> exp relational_operator . exp n_math_expression_9
    (59) exp -> . termino n_math_expression_4
    (60) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (61) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (62) termino -> . factor n_math_expression_5
    (63) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (64) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (65) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (66) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (67) factor -> . PLUS value
    (68) factor -> . MINUS value
    (69) factor -> . value
    (70) value -> . function_call
    (71) value -> . literal
    (72) value -> . NAME n_math_expression_1_name
    (47) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (41) literal -> . FLOAT n_math_expression_1_float
    (42) literal -> . INT n_math_expression_1_int
    (43) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    exp                            shift and go to state 104
    termino                        shift and go to state 55
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 79

    (35) relational_operator -> GREATERTHAN . n_math_expression_8
    (15) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 15 (n_math_expression_8 -> .)
    PLUS            reduce using rule 15 (n_math_expression_8 -> .)
    MINUS           reduce using rule 15 (n_math_expression_8 -> .)
    NAME            reduce using rule 15 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 15 (n_math_expression_8 -> .)
    INT             reduce using rule 15 (n_math_expression_8 -> .)
    STRING          reduce using rule 15 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 105

state 80

    (36) relational_operator -> LESSTHAN . n_math_expression_8
    (15) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 15 (n_math_expression_8 -> .)
    PLUS            reduce using rule 15 (n_math_expression_8 -> .)
    MINUS           reduce using rule 15 (n_math_expression_8 -> .)
    NAME            reduce using rule 15 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 15 (n_math_expression_8 -> .)
    INT             reduce using rule 15 (n_math_expression_8 -> .)
    STRING          reduce using rule 15 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 106

state 81

    (37) relational_operator -> EQUALEQUAL . n_math_expression_8
    (15) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 15 (n_math_expression_8 -> .)
    PLUS            reduce using rule 15 (n_math_expression_8 -> .)
    MINUS           reduce using rule 15 (n_math_expression_8 -> .)
    NAME            reduce using rule 15 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 15 (n_math_expression_8 -> .)
    INT             reduce using rule 15 (n_math_expression_8 -> .)
    STRING          reduce using rule 15 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 107

state 82

    (38) relational_operator -> LESSTHANOREQUAL . n_math_expression_8
    (15) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 15 (n_math_expression_8 -> .)
    PLUS            reduce using rule 15 (n_math_expression_8 -> .)
    MINUS           reduce using rule 15 (n_math_expression_8 -> .)
    NAME            reduce using rule 15 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 15 (n_math_expression_8 -> .)
    INT             reduce using rule 15 (n_math_expression_8 -> .)
    STRING          reduce using rule 15 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 108

state 83

    (39) relational_operator -> GREATERTHANOREQUAL . n_math_expression_8
    (15) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 15 (n_math_expression_8 -> .)
    PLUS            reduce using rule 15 (n_math_expression_8 -> .)
    MINUS           reduce using rule 15 (n_math_expression_8 -> .)
    NAME            reduce using rule 15 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 15 (n_math_expression_8 -> .)
    INT             reduce using rule 15 (n_math_expression_8 -> .)
    STRING          reduce using rule 15 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 109

state 84

    (40) relational_operator -> NOTEQUAL . n_math_expression_8
    (15) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 15 (n_math_expression_8 -> .)
    PLUS            reduce using rule 15 (n_math_expression_8 -> .)
    MINUS           reduce using rule 15 (n_math_expression_8 -> .)
    NAME            reduce using rule 15 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 15 (n_math_expression_8 -> .)
    INT             reduce using rule 15 (n_math_expression_8 -> .)
    STRING          reduce using rule 15 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 110

state 85

    (59) exp -> termino n_math_expression_4 .
    (60) exp -> termino n_math_expression_4 . PLUS n_math_expression_2 exp
    (61) exp -> termino n_math_expression_4 . MINUS n_math_expression_2 exp

    GREATERTHAN     reduce using rule 59 (exp -> termino n_math_expression_4 .)
    LESSTHAN        reduce using rule 59 (exp -> termino n_math_expression_4 .)
    EQUALEQUAL      reduce using rule 59 (exp -> termino n_math_expression_4 .)
    LESSTHANOREQUAL reduce using rule 59 (exp -> termino n_math_expression_4 .)
    GREATERTHANOREQUAL reduce using rule 59 (exp -> termino n_math_expression_4 .)
    NOTEQUAL        reduce using rule 59 (exp -> termino n_math_expression_4 .)
    OR              reduce using rule 59 (exp -> termino n_math_expression_4 .)
    AND             reduce using rule 59 (exp -> termino n_math_expression_4 .)
    RPARENTHESIS    reduce using rule 59 (exp -> termino n_math_expression_4 .)
    SEMICOLON       reduce using rule 59 (exp -> termino n_math_expression_4 .)
    COMMA           reduce using rule 59 (exp -> termino n_math_expression_4 .)
    DOUBLEDOT       reduce using rule 59 (exp -> termino n_math_expression_4 .)
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112


state 86

    (67) factor -> PLUS value .

    TIMES           reduce using rule 67 (factor -> PLUS value .)
    DIVIDE          reduce using rule 67 (factor -> PLUS value .)
    MODULUS         reduce using rule 67 (factor -> PLUS value .)
    PLUS            reduce using rule 67 (factor -> PLUS value .)
    MINUS           reduce using rule 67 (factor -> PLUS value .)
    GREATERTHAN     reduce using rule 67 (factor -> PLUS value .)
    LESSTHAN        reduce using rule 67 (factor -> PLUS value .)
    EQUALEQUAL      reduce using rule 67 (factor -> PLUS value .)
    LESSTHANOREQUAL reduce using rule 67 (factor -> PLUS value .)
    GREATERTHANOREQUAL reduce using rule 67 (factor -> PLUS value .)
    NOTEQUAL        reduce using rule 67 (factor -> PLUS value .)
    OR              reduce using rule 67 (factor -> PLUS value .)
    AND             reduce using rule 67 (factor -> PLUS value .)
    RPARENTHESIS    reduce using rule 67 (factor -> PLUS value .)
    SEMICOLON       reduce using rule 67 (factor -> PLUS value .)
    COMMA           reduce using rule 67 (factor -> PLUS value .)
    DOUBLEDOT       reduce using rule 67 (factor -> PLUS value .)


state 87

    (68) factor -> MINUS value .

    TIMES           reduce using rule 68 (factor -> MINUS value .)
    DIVIDE          reduce using rule 68 (factor -> MINUS value .)
    MODULUS         reduce using rule 68 (factor -> MINUS value .)
    PLUS            reduce using rule 68 (factor -> MINUS value .)
    MINUS           reduce using rule 68 (factor -> MINUS value .)
    GREATERTHAN     reduce using rule 68 (factor -> MINUS value .)
    LESSTHAN        reduce using rule 68 (factor -> MINUS value .)
    EQUALEQUAL      reduce using rule 68 (factor -> MINUS value .)
    LESSTHANOREQUAL reduce using rule 68 (factor -> MINUS value .)
    GREATERTHANOREQUAL reduce using rule 68 (factor -> MINUS value .)
    NOTEQUAL        reduce using rule 68 (factor -> MINUS value .)
    OR              reduce using rule 68 (factor -> MINUS value .)
    AND             reduce using rule 68 (factor -> MINUS value .)
    RPARENTHESIS    reduce using rule 68 (factor -> MINUS value .)
    SEMICOLON       reduce using rule 68 (factor -> MINUS value .)
    COMMA           reduce using rule 68 (factor -> MINUS value .)
    DOUBLEDOT       reduce using rule 68 (factor -> MINUS value .)


state 88

    (62) termino -> factor n_math_expression_5 .
    (63) termino -> factor n_math_expression_5 . TIMES n_math_expression_3 termino
    (64) termino -> factor n_math_expression_5 . DIVIDE n_math_expression_3 termino
    (65) termino -> factor n_math_expression_5 . MODULUS n_math_expression_3 termino

    PLUS            reduce using rule 62 (termino -> factor n_math_expression_5 .)
    MINUS           reduce using rule 62 (termino -> factor n_math_expression_5 .)
    GREATERTHAN     reduce using rule 62 (termino -> factor n_math_expression_5 .)
    LESSTHAN        reduce using rule 62 (termino -> factor n_math_expression_5 .)
    EQUALEQUAL      reduce using rule 62 (termino -> factor n_math_expression_5 .)
    LESSTHANOREQUAL reduce using rule 62 (termino -> factor n_math_expression_5 .)
    GREATERTHANOREQUAL reduce using rule 62 (termino -> factor n_math_expression_5 .)
    NOTEQUAL        reduce using rule 62 (termino -> factor n_math_expression_5 .)
    OR              reduce using rule 62 (termino -> factor n_math_expression_5 .)
    AND             reduce using rule 62 (termino -> factor n_math_expression_5 .)
    RPARENTHESIS    reduce using rule 62 (termino -> factor n_math_expression_5 .)
    SEMICOLON       reduce using rule 62 (termino -> factor n_math_expression_5 .)
    COMMA           reduce using rule 62 (termino -> factor n_math_expression_5 .)
    DOUBLEDOT       reduce using rule 62 (termino -> factor n_math_expression_5 .)
    TIMES           shift and go to state 113
    DIVIDE          shift and go to state 114
    MODULUS         shift and go to state 115


state 89

    (72) value -> NAME n_math_expression_1_name .

    TIMES           reduce using rule 72 (value -> NAME n_math_expression_1_name .)
    DIVIDE          reduce using rule 72 (value -> NAME n_math_expression_1_name .)
    MODULUS         reduce using rule 72 (value -> NAME n_math_expression_1_name .)
    PLUS            reduce using rule 72 (value -> NAME n_math_expression_1_name .)
    MINUS           reduce using rule 72 (value -> NAME n_math_expression_1_name .)
    GREATERTHAN     reduce using rule 72 (value -> NAME n_math_expression_1_name .)
    LESSTHAN        reduce using rule 72 (value -> NAME n_math_expression_1_name .)
    EQUALEQUAL      reduce using rule 72 (value -> NAME n_math_expression_1_name .)
    LESSTHANOREQUAL reduce using rule 72 (value -> NAME n_math_expression_1_name .)
    GREATERTHANOREQUAL reduce using rule 72 (value -> NAME n_math_expression_1_name .)
    NOTEQUAL        reduce using rule 72 (value -> NAME n_math_expression_1_name .)
    OR              reduce using rule 72 (value -> NAME n_math_expression_1_name .)
    AND             reduce using rule 72 (value -> NAME n_math_expression_1_name .)
    RPARENTHESIS    reduce using rule 72 (value -> NAME n_math_expression_1_name .)
    SEMICOLON       reduce using rule 72 (value -> NAME n_math_expression_1_name .)
    COMMA           reduce using rule 72 (value -> NAME n_math_expression_1_name .)
    DOUBLEDOT       reduce using rule 72 (value -> NAME n_math_expression_1_name .)


state 90

    (41) literal -> FLOAT n_math_expression_1_float .

    TIMES           reduce using rule 41 (literal -> FLOAT n_math_expression_1_float .)
    DIVIDE          reduce using rule 41 (literal -> FLOAT n_math_expression_1_float .)
    MODULUS         reduce using rule 41 (literal -> FLOAT n_math_expression_1_float .)
    PLUS            reduce using rule 41 (literal -> FLOAT n_math_expression_1_float .)
    MINUS           reduce using rule 41 (literal -> FLOAT n_math_expression_1_float .)
    GREATERTHAN     reduce using rule 41 (literal -> FLOAT n_math_expression_1_float .)
    LESSTHAN        reduce using rule 41 (literal -> FLOAT n_math_expression_1_float .)
    EQUALEQUAL      reduce using rule 41 (literal -> FLOAT n_math_expression_1_float .)
    LESSTHANOREQUAL reduce using rule 41 (literal -> FLOAT n_math_expression_1_float .)
    GREATERTHANOREQUAL reduce using rule 41 (literal -> FLOAT n_math_expression_1_float .)
    NOTEQUAL        reduce using rule 41 (literal -> FLOAT n_math_expression_1_float .)
    OR              reduce using rule 41 (literal -> FLOAT n_math_expression_1_float .)
    AND             reduce using rule 41 (literal -> FLOAT n_math_expression_1_float .)
    RPARENTHESIS    reduce using rule 41 (literal -> FLOAT n_math_expression_1_float .)
    SEMICOLON       reduce using rule 41 (literal -> FLOAT n_math_expression_1_float .)
    COMMA           reduce using rule 41 (literal -> FLOAT n_math_expression_1_float .)
    DOUBLEDOT       reduce using rule 41 (literal -> FLOAT n_math_expression_1_float .)


state 91

    (42) literal -> INT n_math_expression_1_int .

    TIMES           reduce using rule 42 (literal -> INT n_math_expression_1_int .)
    DIVIDE          reduce using rule 42 (literal -> INT n_math_expression_1_int .)
    MODULUS         reduce using rule 42 (literal -> INT n_math_expression_1_int .)
    PLUS            reduce using rule 42 (literal -> INT n_math_expression_1_int .)
    MINUS           reduce using rule 42 (literal -> INT n_math_expression_1_int .)
    GREATERTHAN     reduce using rule 42 (literal -> INT n_math_expression_1_int .)
    LESSTHAN        reduce using rule 42 (literal -> INT n_math_expression_1_int .)
    EQUALEQUAL      reduce using rule 42 (literal -> INT n_math_expression_1_int .)
    LESSTHANOREQUAL reduce using rule 42 (literal -> INT n_math_expression_1_int .)
    GREATERTHANOREQUAL reduce using rule 42 (literal -> INT n_math_expression_1_int .)
    NOTEQUAL        reduce using rule 42 (literal -> INT n_math_expression_1_int .)
    OR              reduce using rule 42 (literal -> INT n_math_expression_1_int .)
    AND             reduce using rule 42 (literal -> INT n_math_expression_1_int .)
    RPARENTHESIS    reduce using rule 42 (literal -> INT n_math_expression_1_int .)
    SEMICOLON       reduce using rule 42 (literal -> INT n_math_expression_1_int .)
    COMMA           reduce using rule 42 (literal -> INT n_math_expression_1_int .)
    DOUBLEDOT       reduce using rule 42 (literal -> INT n_math_expression_1_int .)


state 92

    (43) literal -> STRING n_math_expression_1_string .

    TIMES           reduce using rule 43 (literal -> STRING n_math_expression_1_string .)
    DIVIDE          reduce using rule 43 (literal -> STRING n_math_expression_1_string .)
    MODULUS         reduce using rule 43 (literal -> STRING n_math_expression_1_string .)
    PLUS            reduce using rule 43 (literal -> STRING n_math_expression_1_string .)
    MINUS           reduce using rule 43 (literal -> STRING n_math_expression_1_string .)
    GREATERTHAN     reduce using rule 43 (literal -> STRING n_math_expression_1_string .)
    LESSTHAN        reduce using rule 43 (literal -> STRING n_math_expression_1_string .)
    EQUALEQUAL      reduce using rule 43 (literal -> STRING n_math_expression_1_string .)
    LESSTHANOREQUAL reduce using rule 43 (literal -> STRING n_math_expression_1_string .)
    GREATERTHANOREQUAL reduce using rule 43 (literal -> STRING n_math_expression_1_string .)
    NOTEQUAL        reduce using rule 43 (literal -> STRING n_math_expression_1_string .)
    OR              reduce using rule 43 (literal -> STRING n_math_expression_1_string .)
    AND             reduce using rule 43 (literal -> STRING n_math_expression_1_string .)
    RPARENTHESIS    reduce using rule 43 (literal -> STRING n_math_expression_1_string .)
    SEMICOLON       reduce using rule 43 (literal -> STRING n_math_expression_1_string .)
    COMMA           reduce using rule 43 (literal -> STRING n_math_expression_1_string .)
    DOUBLEDOT       reduce using rule 43 (literal -> STRING n_math_expression_1_string .)


state 93

    (88) forloop -> FOR LPARENTHESIS n_open_new_scope assign . DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope

    DOUBLEDOT       shift and go to state 116


state 94

    (87) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression . RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope

    RPARENTHESIS    shift and go to state 117


state 95

    (74) assign -> type NAME n_math_expression_1_name n_name . EQUAL n_seen_equal_op expression

    EQUAL           shift and go to state 118


state 96

    (46) function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT . function_type LCURLY codeblock RCURLY n_close_scope
    (44) function_type -> . type
    (45) function_type -> . VOID
    (30) type -> . INT_TYPE n_seen_type
    (31) type -> . STRING_TYPE n_seen_type
    (32) type -> . DOUBLE_TYPE n_seen_type
    (33) type -> . FLOAT_TYPE n_seen_type
    (34) type -> . BOOL_TYPE n_seen_type

    VOID            shift and go to state 121
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    function_type                  shift and go to state 119
    type                           shift and go to state 120

state 97

    (75) assign -> NAME n_math_expression_1_name n_name EQUAL n_seen_equal_op . expression
    (53) expression -> . expression_or
    (54) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (55) expression_or -> . expression_rel
    (56) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (57) expression_rel -> . exp
    (58) expression_rel -> . exp relational_operator exp n_math_expression_9
    (59) exp -> . termino n_math_expression_4
    (60) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (61) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (62) termino -> . factor n_math_expression_5
    (63) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (64) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (65) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (66) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (67) factor -> . PLUS value
    (68) factor -> . MINUS value
    (69) factor -> . value
    (70) value -> . function_call
    (71) value -> . literal
    (72) value -> . NAME n_math_expression_1_name
    (47) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (41) literal -> . FLOAT n_math_expression_1_float
    (42) literal -> . INT n_math_expression_1_int
    (43) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    expression                     shift and go to state 122
    expression_or                  shift and go to state 52
    expression_rel                 shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 55
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 98

    (50) parameter_list -> parameter COMMA parameter_list .

    RPARENTHESIS    reduce using rule 50 (parameter_list -> parameter COMMA parameter_list .)
    DOUBLEDOT       reduce using rule 50 (parameter_list -> parameter COMMA parameter_list .)


state 99

    (51) parameter -> type NAME n_name .

    COMMA           reduce using rule 51 (parameter -> type NAME n_name .)
    RPARENTHESIS    reduce using rule 51 (parameter -> type NAME n_name .)
    DOUBLEDOT       reduce using rule 51 (parameter -> type NAME n_name .)


state 100

    (66) factor -> LPARENTHESIS n_math_expression_6 expression . RPARENTHESIS n_math_expression_7

    RPARENTHESIS    shift and go to state 123


state 101

    (89) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY . n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (20) n_two_way_conditional_1 -> .

    FUNCTION        reduce using rule 20 (n_two_way_conditional_1 -> .)
    IF              reduce using rule 20 (n_two_way_conditional_1 -> .)
    FOR             reduce using rule 20 (n_two_way_conditional_1 -> .)
    WHILE           reduce using rule 20 (n_two_way_conditional_1 -> .)
    NAME            reduce using rule 20 (n_two_way_conditional_1 -> .)
    INT_TYPE        reduce using rule 20 (n_two_way_conditional_1 -> .)
    STRING_TYPE     reduce using rule 20 (n_two_way_conditional_1 -> .)
    DOUBLE_TYPE     reduce using rule 20 (n_two_way_conditional_1 -> .)
    FLOAT_TYPE      reduce using rule 20 (n_two_way_conditional_1 -> .)
    BOOL_TYPE       reduce using rule 20 (n_two_way_conditional_1 -> .)
    RCURLY          reduce using rule 20 (n_two_way_conditional_1 -> .)

    n_two_way_conditional_1        shift and go to state 124

state 102

    (54) expression -> expression_or AND n_math_expression_10 . expression n_math_expression_11
    (53) expression -> . expression_or
    (54) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (55) expression_or -> . expression_rel
    (56) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (57) expression_rel -> . exp
    (58) expression_rel -> . exp relational_operator exp n_math_expression_9
    (59) exp -> . termino n_math_expression_4
    (60) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (61) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (62) termino -> . factor n_math_expression_5
    (63) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (64) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (65) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (66) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (67) factor -> . PLUS value
    (68) factor -> . MINUS value
    (69) factor -> . value
    (70) value -> . function_call
    (71) value -> . literal
    (72) value -> . NAME n_math_expression_1_name
    (47) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (41) literal -> . FLOAT n_math_expression_1_float
    (42) literal -> . INT n_math_expression_1_int
    (43) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    expression_or                  shift and go to state 52
    expression                     shift and go to state 125
    expression_rel                 shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 55
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 103

    (56) expression_or -> expression_rel OR n_math_expression_10 . expression_or n_math_expression_12
    (55) expression_or -> . expression_rel
    (56) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (57) expression_rel -> . exp
    (58) expression_rel -> . exp relational_operator exp n_math_expression_9
    (59) exp -> . termino n_math_expression_4
    (60) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (61) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (62) termino -> . factor n_math_expression_5
    (63) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (64) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (65) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (66) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (67) factor -> . PLUS value
    (68) factor -> . MINUS value
    (69) factor -> . value
    (70) value -> . function_call
    (71) value -> . literal
    (72) value -> . NAME n_math_expression_1_name
    (47) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (41) literal -> . FLOAT n_math_expression_1_float
    (42) literal -> . INT n_math_expression_1_int
    (43) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    expression_rel                 shift and go to state 53
    expression_or                  shift and go to state 126
    exp                            shift and go to state 54
    termino                        shift and go to state 55
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 104

    (58) expression_rel -> exp relational_operator exp . n_math_expression_9
    (16) n_math_expression_9 -> .

    OR              reduce using rule 16 (n_math_expression_9 -> .)
    AND             reduce using rule 16 (n_math_expression_9 -> .)
    RPARENTHESIS    reduce using rule 16 (n_math_expression_9 -> .)
    SEMICOLON       reduce using rule 16 (n_math_expression_9 -> .)
    COMMA           reduce using rule 16 (n_math_expression_9 -> .)
    DOUBLEDOT       reduce using rule 16 (n_math_expression_9 -> .)

    n_math_expression_9            shift and go to state 127

state 105

    (35) relational_operator -> GREATERTHAN n_math_expression_8 .

    LPARENTHESIS    reduce using rule 35 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    PLUS            reduce using rule 35 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    MINUS           reduce using rule 35 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    NAME            reduce using rule 35 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    FLOAT           reduce using rule 35 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    INT             reduce using rule 35 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    STRING          reduce using rule 35 (relational_operator -> GREATERTHAN n_math_expression_8 .)


state 106

    (36) relational_operator -> LESSTHAN n_math_expression_8 .

    LPARENTHESIS    reduce using rule 36 (relational_operator -> LESSTHAN n_math_expression_8 .)
    PLUS            reduce using rule 36 (relational_operator -> LESSTHAN n_math_expression_8 .)
    MINUS           reduce using rule 36 (relational_operator -> LESSTHAN n_math_expression_8 .)
    NAME            reduce using rule 36 (relational_operator -> LESSTHAN n_math_expression_8 .)
    FLOAT           reduce using rule 36 (relational_operator -> LESSTHAN n_math_expression_8 .)
    INT             reduce using rule 36 (relational_operator -> LESSTHAN n_math_expression_8 .)
    STRING          reduce using rule 36 (relational_operator -> LESSTHAN n_math_expression_8 .)


state 107

    (37) relational_operator -> EQUALEQUAL n_math_expression_8 .

    LPARENTHESIS    reduce using rule 37 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    PLUS            reduce using rule 37 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    MINUS           reduce using rule 37 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    NAME            reduce using rule 37 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    FLOAT           reduce using rule 37 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    INT             reduce using rule 37 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    STRING          reduce using rule 37 (relational_operator -> EQUALEQUAL n_math_expression_8 .)


state 108

    (38) relational_operator -> LESSTHANOREQUAL n_math_expression_8 .

    LPARENTHESIS    reduce using rule 38 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    PLUS            reduce using rule 38 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    MINUS           reduce using rule 38 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    NAME            reduce using rule 38 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    FLOAT           reduce using rule 38 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    INT             reduce using rule 38 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    STRING          reduce using rule 38 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)


state 109

    (39) relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .

    LPARENTHESIS    reduce using rule 39 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    PLUS            reduce using rule 39 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    MINUS           reduce using rule 39 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    NAME            reduce using rule 39 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    FLOAT           reduce using rule 39 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    INT             reduce using rule 39 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    STRING          reduce using rule 39 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)


state 110

    (40) relational_operator -> NOTEQUAL n_math_expression_8 .

    LPARENTHESIS    reduce using rule 40 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    PLUS            reduce using rule 40 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    MINUS           reduce using rule 40 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    NAME            reduce using rule 40 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    FLOAT           reduce using rule 40 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    INT             reduce using rule 40 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    STRING          reduce using rule 40 (relational_operator -> NOTEQUAL n_math_expression_8 .)


state 111

    (60) exp -> termino n_math_expression_4 PLUS . n_math_expression_2 exp
    (9) n_math_expression_2 -> .

    LPARENTHESIS    reduce using rule 9 (n_math_expression_2 -> .)
    PLUS            reduce using rule 9 (n_math_expression_2 -> .)
    MINUS           reduce using rule 9 (n_math_expression_2 -> .)
    NAME            reduce using rule 9 (n_math_expression_2 -> .)
    FLOAT           reduce using rule 9 (n_math_expression_2 -> .)
    INT             reduce using rule 9 (n_math_expression_2 -> .)
    STRING          reduce using rule 9 (n_math_expression_2 -> .)

    n_math_expression_2            shift and go to state 128

state 112

    (61) exp -> termino n_math_expression_4 MINUS . n_math_expression_2 exp
    (9) n_math_expression_2 -> .

    LPARENTHESIS    reduce using rule 9 (n_math_expression_2 -> .)
    PLUS            reduce using rule 9 (n_math_expression_2 -> .)
    MINUS           reduce using rule 9 (n_math_expression_2 -> .)
    NAME            reduce using rule 9 (n_math_expression_2 -> .)
    FLOAT           reduce using rule 9 (n_math_expression_2 -> .)
    INT             reduce using rule 9 (n_math_expression_2 -> .)
    STRING          reduce using rule 9 (n_math_expression_2 -> .)

    n_math_expression_2            shift and go to state 129

state 113

    (63) termino -> factor n_math_expression_5 TIMES . n_math_expression_3 termino
    (10) n_math_expression_3 -> .

    LPARENTHESIS    reduce using rule 10 (n_math_expression_3 -> .)
    PLUS            reduce using rule 10 (n_math_expression_3 -> .)
    MINUS           reduce using rule 10 (n_math_expression_3 -> .)
    NAME            reduce using rule 10 (n_math_expression_3 -> .)
    FLOAT           reduce using rule 10 (n_math_expression_3 -> .)
    INT             reduce using rule 10 (n_math_expression_3 -> .)
    STRING          reduce using rule 10 (n_math_expression_3 -> .)

    n_math_expression_3            shift and go to state 130

state 114

    (64) termino -> factor n_math_expression_5 DIVIDE . n_math_expression_3 termino
    (10) n_math_expression_3 -> .

    LPARENTHESIS    reduce using rule 10 (n_math_expression_3 -> .)
    PLUS            reduce using rule 10 (n_math_expression_3 -> .)
    MINUS           reduce using rule 10 (n_math_expression_3 -> .)
    NAME            reduce using rule 10 (n_math_expression_3 -> .)
    FLOAT           reduce using rule 10 (n_math_expression_3 -> .)
    INT             reduce using rule 10 (n_math_expression_3 -> .)
    STRING          reduce using rule 10 (n_math_expression_3 -> .)

    n_math_expression_3            shift and go to state 131

state 115

    (65) termino -> factor n_math_expression_5 MODULUS . n_math_expression_3 termino
    (10) n_math_expression_3 -> .

    LPARENTHESIS    reduce using rule 10 (n_math_expression_3 -> .)
    PLUS            reduce using rule 10 (n_math_expression_3 -> .)
    MINUS           reduce using rule 10 (n_math_expression_3 -> .)
    NAME            reduce using rule 10 (n_math_expression_3 -> .)
    FLOAT           reduce using rule 10 (n_math_expression_3 -> .)
    INT             reduce using rule 10 (n_math_expression_3 -> .)
    STRING          reduce using rule 10 (n_math_expression_3 -> .)

    n_math_expression_3            shift and go to state 132

state 116

    (88) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT . expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (53) expression -> . expression_or
    (54) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (55) expression_or -> . expression_rel
    (56) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (57) expression_rel -> . exp
    (58) expression_rel -> . exp relational_operator exp n_math_expression_9
    (59) exp -> . termino n_math_expression_4
    (60) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (61) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (62) termino -> . factor n_math_expression_5
    (63) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (64) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (65) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (66) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (67) factor -> . PLUS value
    (68) factor -> . MINUS value
    (69) factor -> . value
    (70) value -> . function_call
    (71) value -> . literal
    (72) value -> . NAME n_math_expression_1_name
    (47) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (41) literal -> . FLOAT n_math_expression_1_float
    (42) literal -> . INT n_math_expression_1_int
    (43) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    expression                     shift and go to state 133
    expression_or                  shift and go to state 52
    expression_rel                 shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 55
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 117

    (87) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS . p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (24) p_n_pre_condition_loop_2 -> .

    LCURLY          reduce using rule 24 (p_n_pre_condition_loop_2 -> .)

    p_n_pre_condition_loop_2       shift and go to state 134

state 118

    (74) assign -> type NAME n_math_expression_1_name n_name EQUAL . n_seen_equal_op expression
    (73) n_seen_equal_op -> .

    LPARENTHESIS    reduce using rule 73 (n_seen_equal_op -> .)
    PLUS            reduce using rule 73 (n_seen_equal_op -> .)
    MINUS           reduce using rule 73 (n_seen_equal_op -> .)
    NAME            reduce using rule 73 (n_seen_equal_op -> .)
    FLOAT           reduce using rule 73 (n_seen_equal_op -> .)
    INT             reduce using rule 73 (n_seen_equal_op -> .)
    STRING          reduce using rule 73 (n_seen_equal_op -> .)

    n_seen_equal_op                shift and go to state 135

state 119

    (46) function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type . LCURLY codeblock RCURLY n_close_scope

    LCURLY          shift and go to state 136


state 120

    (44) function_type -> type .

    LCURLY          reduce using rule 44 (function_type -> type .)


state 121

    (45) function_type -> VOID .

    LCURLY          reduce using rule 45 (function_type -> VOID .)


state 122

    (75) assign -> NAME n_math_expression_1_name n_name EQUAL n_seen_equal_op expression .

    SEMICOLON       reduce using rule 75 (assign -> NAME n_math_expression_1_name n_name EQUAL n_seen_equal_op expression .)
    COMMA           reduce using rule 75 (assign -> NAME n_math_expression_1_name n_name EQUAL n_seen_equal_op expression .)
    RPARENTHESIS    reduce using rule 75 (assign -> NAME n_math_expression_1_name n_name EQUAL n_seen_equal_op expression .)
    DOUBLEDOT       reduce using rule 75 (assign -> NAME n_math_expression_1_name n_name EQUAL n_seen_equal_op expression .)


state 123

    (66) factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS . n_math_expression_7
    (14) n_math_expression_7 -> .

    TIMES           reduce using rule 14 (n_math_expression_7 -> .)
    DIVIDE          reduce using rule 14 (n_math_expression_7 -> .)
    MODULUS         reduce using rule 14 (n_math_expression_7 -> .)
    PLUS            reduce using rule 14 (n_math_expression_7 -> .)
    MINUS           reduce using rule 14 (n_math_expression_7 -> .)
    GREATERTHAN     reduce using rule 14 (n_math_expression_7 -> .)
    LESSTHAN        reduce using rule 14 (n_math_expression_7 -> .)
    EQUALEQUAL      reduce using rule 14 (n_math_expression_7 -> .)
    LESSTHANOREQUAL reduce using rule 14 (n_math_expression_7 -> .)
    GREATERTHANOREQUAL reduce using rule 14 (n_math_expression_7 -> .)
    NOTEQUAL        reduce using rule 14 (n_math_expression_7 -> .)
    OR              reduce using rule 14 (n_math_expression_7 -> .)
    AND             reduce using rule 14 (n_math_expression_7 -> .)
    RPARENTHESIS    reduce using rule 14 (n_math_expression_7 -> .)
    SEMICOLON       reduce using rule 14 (n_math_expression_7 -> .)
    COMMA           reduce using rule 14 (n_math_expression_7 -> .)
    DOUBLEDOT       reduce using rule 14 (n_math_expression_7 -> .)

    n_math_expression_7            shift and go to state 137

state 124

    (89) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 . n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (2) n_open_new_scope -> .

    FUNCTION        reduce using rule 2 (n_open_new_scope -> .)
    IF              reduce using rule 2 (n_open_new_scope -> .)
    FOR             reduce using rule 2 (n_open_new_scope -> .)
    WHILE           reduce using rule 2 (n_open_new_scope -> .)
    NAME            reduce using rule 2 (n_open_new_scope -> .)
    INT_TYPE        reduce using rule 2 (n_open_new_scope -> .)
    STRING_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    DOUBLE_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    FLOAT_TYPE      reduce using rule 2 (n_open_new_scope -> .)
    BOOL_TYPE       reduce using rule 2 (n_open_new_scope -> .)
    RCURLY          reduce using rule 2 (n_open_new_scope -> .)

    n_open_new_scope               shift and go to state 138

state 125

    (54) expression -> expression_or AND n_math_expression_10 expression . n_math_expression_11
    (18) n_math_expression_11 -> .

    RPARENTHESIS    reduce using rule 18 (n_math_expression_11 -> .)
    SEMICOLON       reduce using rule 18 (n_math_expression_11 -> .)
    COMMA           reduce using rule 18 (n_math_expression_11 -> .)
    DOUBLEDOT       reduce using rule 18 (n_math_expression_11 -> .)

    n_math_expression_11           shift and go to state 139

state 126

    (56) expression_or -> expression_rel OR n_math_expression_10 expression_or . n_math_expression_12
    (19) n_math_expression_12 -> .

    AND             reduce using rule 19 (n_math_expression_12 -> .)
    RPARENTHESIS    reduce using rule 19 (n_math_expression_12 -> .)
    SEMICOLON       reduce using rule 19 (n_math_expression_12 -> .)
    COMMA           reduce using rule 19 (n_math_expression_12 -> .)
    DOUBLEDOT       reduce using rule 19 (n_math_expression_12 -> .)

    n_math_expression_12           shift and go to state 140

state 127

    (58) expression_rel -> exp relational_operator exp n_math_expression_9 .

    OR              reduce using rule 58 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    AND             reduce using rule 58 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    RPARENTHESIS    reduce using rule 58 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    SEMICOLON       reduce using rule 58 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    COMMA           reduce using rule 58 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    DOUBLEDOT       reduce using rule 58 (expression_rel -> exp relational_operator exp n_math_expression_9 .)


state 128

    (60) exp -> termino n_math_expression_4 PLUS n_math_expression_2 . exp
    (59) exp -> . termino n_math_expression_4
    (60) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (61) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (62) termino -> . factor n_math_expression_5
    (63) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (64) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (65) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (66) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (67) factor -> . PLUS value
    (68) factor -> . MINUS value
    (69) factor -> . value
    (70) value -> . function_call
    (71) value -> . literal
    (72) value -> . NAME n_math_expression_1_name
    (47) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (41) literal -> . FLOAT n_math_expression_1_float
    (42) literal -> . INT n_math_expression_1_int
    (43) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    termino                        shift and go to state 55
    exp                            shift and go to state 141
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 129

    (61) exp -> termino n_math_expression_4 MINUS n_math_expression_2 . exp
    (59) exp -> . termino n_math_expression_4
    (60) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (61) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (62) termino -> . factor n_math_expression_5
    (63) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (64) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (65) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (66) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (67) factor -> . PLUS value
    (68) factor -> . MINUS value
    (69) factor -> . value
    (70) value -> . function_call
    (71) value -> . literal
    (72) value -> . NAME n_math_expression_1_name
    (47) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (41) literal -> . FLOAT n_math_expression_1_float
    (42) literal -> . INT n_math_expression_1_int
    (43) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    termino                        shift and go to state 55
    exp                            shift and go to state 142
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 130

    (63) termino -> factor n_math_expression_5 TIMES n_math_expression_3 . termino
    (62) termino -> . factor n_math_expression_5
    (63) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (64) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (65) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (66) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (67) factor -> . PLUS value
    (68) factor -> . MINUS value
    (69) factor -> . value
    (70) value -> . function_call
    (71) value -> . literal
    (72) value -> . NAME n_math_expression_1_name
    (47) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (41) literal -> . FLOAT n_math_expression_1_float
    (42) literal -> . INT n_math_expression_1_int
    (43) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    factor                         shift and go to state 58
    termino                        shift and go to state 143
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 131

    (64) termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 . termino
    (62) termino -> . factor n_math_expression_5
    (63) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (64) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (65) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (66) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (67) factor -> . PLUS value
    (68) factor -> . MINUS value
    (69) factor -> . value
    (70) value -> . function_call
    (71) value -> . literal
    (72) value -> . NAME n_math_expression_1_name
    (47) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (41) literal -> . FLOAT n_math_expression_1_float
    (42) literal -> . INT n_math_expression_1_int
    (43) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    factor                         shift and go to state 58
    termino                        shift and go to state 144
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 132

    (65) termino -> factor n_math_expression_5 MODULUS n_math_expression_3 . termino
    (62) termino -> . factor n_math_expression_5
    (63) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (64) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (65) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (66) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (67) factor -> . PLUS value
    (68) factor -> . MINUS value
    (69) factor -> . value
    (70) value -> . function_call
    (71) value -> . literal
    (72) value -> . NAME n_math_expression_1_name
    (47) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (41) literal -> . FLOAT n_math_expression_1_float
    (42) literal -> . INT n_math_expression_1_int
    (43) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    factor                         shift and go to state 58
    termino                        shift and go to state 145
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 133

    (88) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression . DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope

    DOUBLEDOT       shift and go to state 146


state 134

    (87) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 . LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope

    LCURLY          shift and go to state 147


state 135

    (74) assign -> type NAME n_math_expression_1_name n_name EQUAL n_seen_equal_op . expression
    (53) expression -> . expression_or
    (54) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (55) expression_or -> . expression_rel
    (56) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (57) expression_rel -> . exp
    (58) expression_rel -> . exp relational_operator exp n_math_expression_9
    (59) exp -> . termino n_math_expression_4
    (60) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (61) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (62) termino -> . factor n_math_expression_5
    (63) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (64) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (65) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (66) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (67) factor -> . PLUS value
    (68) factor -> . MINUS value
    (69) factor -> . value
    (70) value -> . function_call
    (71) value -> . literal
    (72) value -> . NAME n_math_expression_1_name
    (47) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (41) literal -> . FLOAT n_math_expression_1_float
    (42) literal -> . INT n_math_expression_1_int
    (43) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    expression                     shift and go to state 148
    expression_or                  shift and go to state 52
    expression_rel                 shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 55
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 136

    (46) function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY . codeblock RCURLY n_close_scope
    (79) codeblock -> . empty
    (80) codeblock -> . codeblock_aux codeblock
    (26) empty -> .
    (81) codeblock_aux -> . statement
    (82) codeblock_aux -> . function_definition
    (83) codeblock_aux -> . condition_if
    (84) codeblock_aux -> . loop
    (76) statement -> . statement_aux SEMICOLON
    (46) function_definition -> . FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope
    (89) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (85) loop -> . forloop
    (86) loop -> . whileloop
    (77) statement_aux -> . assign
    (78) statement_aux -> . function_call
    (88) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (87) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (74) assign -> . type NAME n_math_expression_1_name n_name EQUAL n_seen_equal_op expression
    (75) assign -> . NAME n_math_expression_1_name n_name EQUAL n_seen_equal_op expression
    (47) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (30) type -> . INT_TYPE n_seen_type
    (31) type -> . STRING_TYPE n_seen_type
    (32) type -> . DOUBLE_TYPE n_seen_type
    (33) type -> . FLOAT_TYPE n_seen_type
    (34) type -> . BOOL_TYPE n_seen_type

    RCURLY          reduce using rule 26 (empty -> .)
    FUNCTION        shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    codeblock                      shift and go to state 149
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 137

    (66) factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .

    TIMES           reduce using rule 66 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    DIVIDE          reduce using rule 66 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    MODULUS         reduce using rule 66 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    PLUS            reduce using rule 66 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    MINUS           reduce using rule 66 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    GREATERTHAN     reduce using rule 66 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    LESSTHAN        reduce using rule 66 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    EQUALEQUAL      reduce using rule 66 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    LESSTHANOREQUAL reduce using rule 66 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    GREATERTHANOREQUAL reduce using rule 66 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    NOTEQUAL        reduce using rule 66 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    OR              reduce using rule 66 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    AND             reduce using rule 66 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    RPARENTHESIS    reduce using rule 66 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    SEMICOLON       reduce using rule 66 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    COMMA           reduce using rule 66 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    DOUBLEDOT       reduce using rule 66 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)


state 138

    (89) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope . codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (79) codeblock -> . empty
    (80) codeblock -> . codeblock_aux codeblock
    (26) empty -> .
    (81) codeblock_aux -> . statement
    (82) codeblock_aux -> . function_definition
    (83) codeblock_aux -> . condition_if
    (84) codeblock_aux -> . loop
    (76) statement -> . statement_aux SEMICOLON
    (46) function_definition -> . FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope
    (89) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (85) loop -> . forloop
    (86) loop -> . whileloop
    (77) statement_aux -> . assign
    (78) statement_aux -> . function_call
    (88) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (87) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (74) assign -> . type NAME n_math_expression_1_name n_name EQUAL n_seen_equal_op expression
    (75) assign -> . NAME n_math_expression_1_name n_name EQUAL n_seen_equal_op expression
    (47) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (30) type -> . INT_TYPE n_seen_type
    (31) type -> . STRING_TYPE n_seen_type
    (32) type -> . DOUBLE_TYPE n_seen_type
    (33) type -> . FLOAT_TYPE n_seen_type
    (34) type -> . BOOL_TYPE n_seen_type

    RCURLY          reduce using rule 26 (empty -> .)
    FUNCTION        shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    codeblock                      shift and go to state 150
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 139

    (54) expression -> expression_or AND n_math_expression_10 expression n_math_expression_11 .

    RPARENTHESIS    reduce using rule 54 (expression -> expression_or AND n_math_expression_10 expression n_math_expression_11 .)
    SEMICOLON       reduce using rule 54 (expression -> expression_or AND n_math_expression_10 expression n_math_expression_11 .)
    COMMA           reduce using rule 54 (expression -> expression_or AND n_math_expression_10 expression n_math_expression_11 .)
    DOUBLEDOT       reduce using rule 54 (expression -> expression_or AND n_math_expression_10 expression n_math_expression_11 .)


state 140

    (56) expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .

    AND             reduce using rule 56 (expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .)
    RPARENTHESIS    reduce using rule 56 (expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .)
    SEMICOLON       reduce using rule 56 (expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .)
    COMMA           reduce using rule 56 (expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .)
    DOUBLEDOT       reduce using rule 56 (expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .)


state 141

    (60) exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .

    GREATERTHAN     reduce using rule 60 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    LESSTHAN        reduce using rule 60 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    EQUALEQUAL      reduce using rule 60 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    LESSTHANOREQUAL reduce using rule 60 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    GREATERTHANOREQUAL reduce using rule 60 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    NOTEQUAL        reduce using rule 60 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    OR              reduce using rule 60 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    AND             reduce using rule 60 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    RPARENTHESIS    reduce using rule 60 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    SEMICOLON       reduce using rule 60 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    COMMA           reduce using rule 60 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    DOUBLEDOT       reduce using rule 60 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)


state 142

    (61) exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .

    GREATERTHAN     reduce using rule 61 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    LESSTHAN        reduce using rule 61 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    EQUALEQUAL      reduce using rule 61 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    LESSTHANOREQUAL reduce using rule 61 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    GREATERTHANOREQUAL reduce using rule 61 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    NOTEQUAL        reduce using rule 61 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    OR              reduce using rule 61 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    AND             reduce using rule 61 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    RPARENTHESIS    reduce using rule 61 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    SEMICOLON       reduce using rule 61 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    COMMA           reduce using rule 61 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    DOUBLEDOT       reduce using rule 61 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)


state 143

    (63) termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .

    PLUS            reduce using rule 63 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    MINUS           reduce using rule 63 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    GREATERTHAN     reduce using rule 63 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    LESSTHAN        reduce using rule 63 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    EQUALEQUAL      reduce using rule 63 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    LESSTHANOREQUAL reduce using rule 63 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    GREATERTHANOREQUAL reduce using rule 63 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    NOTEQUAL        reduce using rule 63 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    OR              reduce using rule 63 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    AND             reduce using rule 63 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    RPARENTHESIS    reduce using rule 63 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    SEMICOLON       reduce using rule 63 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    COMMA           reduce using rule 63 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    DOUBLEDOT       reduce using rule 63 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)


state 144

    (64) termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .

    PLUS            reduce using rule 64 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    MINUS           reduce using rule 64 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    GREATERTHAN     reduce using rule 64 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    LESSTHAN        reduce using rule 64 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    EQUALEQUAL      reduce using rule 64 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    LESSTHANOREQUAL reduce using rule 64 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    GREATERTHANOREQUAL reduce using rule 64 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    NOTEQUAL        reduce using rule 64 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    OR              reduce using rule 64 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    AND             reduce using rule 64 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    RPARENTHESIS    reduce using rule 64 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    SEMICOLON       reduce using rule 64 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    COMMA           reduce using rule 64 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    DOUBLEDOT       reduce using rule 64 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)


state 145

    (65) termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .

    PLUS            reduce using rule 65 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    MINUS           reduce using rule 65 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    GREATERTHAN     reduce using rule 65 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    LESSTHAN        reduce using rule 65 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    EQUALEQUAL      reduce using rule 65 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    LESSTHANOREQUAL reduce using rule 65 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    GREATERTHANOREQUAL reduce using rule 65 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    NOTEQUAL        reduce using rule 65 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    OR              reduce using rule 65 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    AND             reduce using rule 65 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    RPARENTHESIS    reduce using rule 65 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    SEMICOLON       reduce using rule 65 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    COMMA           reduce using rule 65 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    DOUBLEDOT       reduce using rule 65 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)


state 146

    (88) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT . assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (74) assign -> . type NAME n_math_expression_1_name n_name EQUAL n_seen_equal_op expression
    (75) assign -> . NAME n_math_expression_1_name n_name EQUAL n_seen_equal_op expression
    (30) type -> . INT_TYPE n_seen_type
    (31) type -> . STRING_TYPE n_seen_type
    (32) type -> . DOUBLE_TYPE n_seen_type
    (33) type -> . FLOAT_TYPE n_seen_type
    (34) type -> . BOOL_TYPE n_seen_type

    NAME            shift and go to state 44
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    assign                         shift and go to state 151
    type                           shift and go to state 22

state 147

    (87) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY . n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (2) n_open_new_scope -> .

    FUNCTION        reduce using rule 2 (n_open_new_scope -> .)
    IF              reduce using rule 2 (n_open_new_scope -> .)
    FOR             reduce using rule 2 (n_open_new_scope -> .)
    WHILE           reduce using rule 2 (n_open_new_scope -> .)
    NAME            reduce using rule 2 (n_open_new_scope -> .)
    INT_TYPE        reduce using rule 2 (n_open_new_scope -> .)
    STRING_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    DOUBLE_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    FLOAT_TYPE      reduce using rule 2 (n_open_new_scope -> .)
    BOOL_TYPE       reduce using rule 2 (n_open_new_scope -> .)
    RCURLY          reduce using rule 2 (n_open_new_scope -> .)

    n_open_new_scope               shift and go to state 152

state 148

    (74) assign -> type NAME n_math_expression_1_name n_name EQUAL n_seen_equal_op expression .

    SEMICOLON       reduce using rule 74 (assign -> type NAME n_math_expression_1_name n_name EQUAL n_seen_equal_op expression .)
    COMMA           reduce using rule 74 (assign -> type NAME n_math_expression_1_name n_name EQUAL n_seen_equal_op expression .)
    RPARENTHESIS    reduce using rule 74 (assign -> type NAME n_math_expression_1_name n_name EQUAL n_seen_equal_op expression .)
    DOUBLEDOT       reduce using rule 74 (assign -> type NAME n_math_expression_1_name n_name EQUAL n_seen_equal_op expression .)


state 149

    (46) function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock . RCURLY n_close_scope

    RCURLY          shift and go to state 153


state 150

    (89) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock . RCURLY n_close_scope condition_else n_two_way_conditional_2

    RCURLY          shift and go to state 154


state 151

    (88) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign . RPARENTHESIS LCURLY codeblock RCURLY n_close_scope

    RPARENTHESIS    shift and go to state 155


state 152

    (87) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope . codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (79) codeblock -> . empty
    (80) codeblock -> . codeblock_aux codeblock
    (26) empty -> .
    (81) codeblock_aux -> . statement
    (82) codeblock_aux -> . function_definition
    (83) codeblock_aux -> . condition_if
    (84) codeblock_aux -> . loop
    (76) statement -> . statement_aux SEMICOLON
    (46) function_definition -> . FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope
    (89) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (85) loop -> . forloop
    (86) loop -> . whileloop
    (77) statement_aux -> . assign
    (78) statement_aux -> . function_call
    (88) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (87) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (74) assign -> . type NAME n_math_expression_1_name n_name EQUAL n_seen_equal_op expression
    (75) assign -> . NAME n_math_expression_1_name n_name EQUAL n_seen_equal_op expression
    (47) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (30) type -> . INT_TYPE n_seen_type
    (31) type -> . STRING_TYPE n_seen_type
    (32) type -> . DOUBLE_TYPE n_seen_type
    (33) type -> . FLOAT_TYPE n_seen_type
    (34) type -> . BOOL_TYPE n_seen_type

    RCURLY          reduce using rule 26 (empty -> .)
    FUNCTION        shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    codeblock                      shift and go to state 156
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 153

    (46) function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY . n_close_scope
    (3) n_close_scope -> .

    FUNCTION        reduce using rule 3 (n_close_scope -> .)
    IF              reduce using rule 3 (n_close_scope -> .)
    FOR             reduce using rule 3 (n_close_scope -> .)
    WHILE           reduce using rule 3 (n_close_scope -> .)
    NAME            reduce using rule 3 (n_close_scope -> .)
    INT_TYPE        reduce using rule 3 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 3 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 3 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 3 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 3 (n_close_scope -> .)
    $end            reduce using rule 3 (n_close_scope -> .)
    RCURLY          reduce using rule 3 (n_close_scope -> .)

    n_close_scope                  shift and go to state 157

state 154

    (89) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY . n_close_scope condition_else n_two_way_conditional_2
    (3) n_close_scope -> .

    ELSE            reduce using rule 3 (n_close_scope -> .)
    FUNCTION        reduce using rule 3 (n_close_scope -> .)
    IF              reduce using rule 3 (n_close_scope -> .)
    FOR             reduce using rule 3 (n_close_scope -> .)
    WHILE           reduce using rule 3 (n_close_scope -> .)
    NAME            reduce using rule 3 (n_close_scope -> .)
    INT_TYPE        reduce using rule 3 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 3 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 3 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 3 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 3 (n_close_scope -> .)
    $end            reduce using rule 3 (n_close_scope -> .)
    RCURLY          reduce using rule 3 (n_close_scope -> .)

    n_close_scope                  shift and go to state 158

state 155

    (88) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS . LCURLY codeblock RCURLY n_close_scope

    LCURLY          shift and go to state 159


state 156

    (87) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock . RCURLY p_n_pre_condition_loop_3 n_close_scope

    RCURLY          shift and go to state 160


state 157

    (46) function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .

    FUNCTION        reduce using rule 46 (function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    IF              reduce using rule 46 (function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    FOR             reduce using rule 46 (function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    WHILE           reduce using rule 46 (function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    NAME            reduce using rule 46 (function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    INT_TYPE        reduce using rule 46 (function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    STRING_TYPE     reduce using rule 46 (function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    DOUBLE_TYPE     reduce using rule 46 (function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    FLOAT_TYPE      reduce using rule 46 (function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    BOOL_TYPE       reduce using rule 46 (function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    $end            reduce using rule 46 (function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    RCURLY          reduce using rule 46 (function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)


state 158

    (89) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope . condition_else n_two_way_conditional_2
    (90) condition_else -> . ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope
    (91) condition_else -> . empty
    (26) empty -> .

    ELSE            shift and go to state 162
    FUNCTION        reduce using rule 26 (empty -> .)
    IF              reduce using rule 26 (empty -> .)
    FOR             reduce using rule 26 (empty -> .)
    WHILE           reduce using rule 26 (empty -> .)
    NAME            reduce using rule 26 (empty -> .)
    INT_TYPE        reduce using rule 26 (empty -> .)
    STRING_TYPE     reduce using rule 26 (empty -> .)
    DOUBLE_TYPE     reduce using rule 26 (empty -> .)
    FLOAT_TYPE      reduce using rule 26 (empty -> .)
    BOOL_TYPE       reduce using rule 26 (empty -> .)
    $end            reduce using rule 26 (empty -> .)
    RCURLY          reduce using rule 26 (empty -> .)

    condition_else                 shift and go to state 161
    empty                          shift and go to state 163

state 159

    (88) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY . codeblock RCURLY n_close_scope
    (79) codeblock -> . empty
    (80) codeblock -> . codeblock_aux codeblock
    (26) empty -> .
    (81) codeblock_aux -> . statement
    (82) codeblock_aux -> . function_definition
    (83) codeblock_aux -> . condition_if
    (84) codeblock_aux -> . loop
    (76) statement -> . statement_aux SEMICOLON
    (46) function_definition -> . FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope
    (89) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (85) loop -> . forloop
    (86) loop -> . whileloop
    (77) statement_aux -> . assign
    (78) statement_aux -> . function_call
    (88) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (87) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (74) assign -> . type NAME n_math_expression_1_name n_name EQUAL n_seen_equal_op expression
    (75) assign -> . NAME n_math_expression_1_name n_name EQUAL n_seen_equal_op expression
    (47) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (30) type -> . INT_TYPE n_seen_type
    (31) type -> . STRING_TYPE n_seen_type
    (32) type -> . DOUBLE_TYPE n_seen_type
    (33) type -> . FLOAT_TYPE n_seen_type
    (34) type -> . BOOL_TYPE n_seen_type

    RCURLY          reduce using rule 26 (empty -> .)
    FUNCTION        shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    assign                         shift and go to state 18
    codeblock                      shift and go to state 164
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 160

    (87) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY . p_n_pre_condition_loop_3 n_close_scope
    (25) p_n_pre_condition_loop_3 -> .

    FUNCTION        reduce using rule 25 (p_n_pre_condition_loop_3 -> .)
    IF              reduce using rule 25 (p_n_pre_condition_loop_3 -> .)
    FOR             reduce using rule 25 (p_n_pre_condition_loop_3 -> .)
    WHILE           reduce using rule 25 (p_n_pre_condition_loop_3 -> .)
    NAME            reduce using rule 25 (p_n_pre_condition_loop_3 -> .)
    INT_TYPE        reduce using rule 25 (p_n_pre_condition_loop_3 -> .)
    STRING_TYPE     reduce using rule 25 (p_n_pre_condition_loop_3 -> .)
    DOUBLE_TYPE     reduce using rule 25 (p_n_pre_condition_loop_3 -> .)
    FLOAT_TYPE      reduce using rule 25 (p_n_pre_condition_loop_3 -> .)
    BOOL_TYPE       reduce using rule 25 (p_n_pre_condition_loop_3 -> .)
    $end            reduce using rule 25 (p_n_pre_condition_loop_3 -> .)
    RCURLY          reduce using rule 25 (p_n_pre_condition_loop_3 -> .)

    p_n_pre_condition_loop_3       shift and go to state 165

state 161

    (89) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else . n_two_way_conditional_2
    (21) n_two_way_conditional_2 -> .

    FUNCTION        reduce using rule 21 (n_two_way_conditional_2 -> .)
    IF              reduce using rule 21 (n_two_way_conditional_2 -> .)
    FOR             reduce using rule 21 (n_two_way_conditional_2 -> .)
    WHILE           reduce using rule 21 (n_two_way_conditional_2 -> .)
    NAME            reduce using rule 21 (n_two_way_conditional_2 -> .)
    INT_TYPE        reduce using rule 21 (n_two_way_conditional_2 -> .)
    STRING_TYPE     reduce using rule 21 (n_two_way_conditional_2 -> .)
    DOUBLE_TYPE     reduce using rule 21 (n_two_way_conditional_2 -> .)
    FLOAT_TYPE      reduce using rule 21 (n_two_way_conditional_2 -> .)
    BOOL_TYPE       reduce using rule 21 (n_two_way_conditional_2 -> .)
    $end            reduce using rule 21 (n_two_way_conditional_2 -> .)
    RCURLY          reduce using rule 21 (n_two_way_conditional_2 -> .)

    n_two_way_conditional_2        shift and go to state 166

state 162

    (90) condition_else -> ELSE . n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope
    (22) n_two_way_conditional_3 -> .

    LCURLY          reduce using rule 22 (n_two_way_conditional_3 -> .)

    n_two_way_conditional_3        shift and go to state 167

state 163

    (91) condition_else -> empty .

    FUNCTION        reduce using rule 91 (condition_else -> empty .)
    IF              reduce using rule 91 (condition_else -> empty .)
    FOR             reduce using rule 91 (condition_else -> empty .)
    WHILE           reduce using rule 91 (condition_else -> empty .)
    NAME            reduce using rule 91 (condition_else -> empty .)
    INT_TYPE        reduce using rule 91 (condition_else -> empty .)
    STRING_TYPE     reduce using rule 91 (condition_else -> empty .)
    DOUBLE_TYPE     reduce using rule 91 (condition_else -> empty .)
    FLOAT_TYPE      reduce using rule 91 (condition_else -> empty .)
    BOOL_TYPE       reduce using rule 91 (condition_else -> empty .)
    $end            reduce using rule 91 (condition_else -> empty .)
    RCURLY          reduce using rule 91 (condition_else -> empty .)


state 164

    (88) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock . RCURLY n_close_scope

    RCURLY          shift and go to state 168


state 165

    (87) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 . n_close_scope
    (3) n_close_scope -> .

    FUNCTION        reduce using rule 3 (n_close_scope -> .)
    IF              reduce using rule 3 (n_close_scope -> .)
    FOR             reduce using rule 3 (n_close_scope -> .)
    WHILE           reduce using rule 3 (n_close_scope -> .)
    NAME            reduce using rule 3 (n_close_scope -> .)
    INT_TYPE        reduce using rule 3 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 3 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 3 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 3 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 3 (n_close_scope -> .)
    $end            reduce using rule 3 (n_close_scope -> .)
    RCURLY          reduce using rule 3 (n_close_scope -> .)

    n_close_scope                  shift and go to state 169

state 166

    (89) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .

    FUNCTION        reduce using rule 89 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    IF              reduce using rule 89 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    FOR             reduce using rule 89 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    WHILE           reduce using rule 89 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    NAME            reduce using rule 89 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    INT_TYPE        reduce using rule 89 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    STRING_TYPE     reduce using rule 89 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    DOUBLE_TYPE     reduce using rule 89 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    FLOAT_TYPE      reduce using rule 89 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    BOOL_TYPE       reduce using rule 89 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    $end            reduce using rule 89 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    RCURLY          reduce using rule 89 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)


state 167

    (90) condition_else -> ELSE n_two_way_conditional_3 . LCURLY n_open_new_scope codeblock RCURLY n_close_scope

    LCURLY          shift and go to state 170


state 168

    (88) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY . n_close_scope
    (3) n_close_scope -> .

    FUNCTION        reduce using rule 3 (n_close_scope -> .)
    IF              reduce using rule 3 (n_close_scope -> .)
    FOR             reduce using rule 3 (n_close_scope -> .)
    WHILE           reduce using rule 3 (n_close_scope -> .)
    NAME            reduce using rule 3 (n_close_scope -> .)
    INT_TYPE        reduce using rule 3 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 3 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 3 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 3 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 3 (n_close_scope -> .)
    $end            reduce using rule 3 (n_close_scope -> .)
    RCURLY          reduce using rule 3 (n_close_scope -> .)

    n_close_scope                  shift and go to state 171

state 169

    (87) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .

    FUNCTION        reduce using rule 87 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    IF              reduce using rule 87 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    FOR             reduce using rule 87 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    WHILE           reduce using rule 87 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    NAME            reduce using rule 87 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    INT_TYPE        reduce using rule 87 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    STRING_TYPE     reduce using rule 87 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    DOUBLE_TYPE     reduce using rule 87 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    FLOAT_TYPE      reduce using rule 87 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    BOOL_TYPE       reduce using rule 87 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    $end            reduce using rule 87 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    RCURLY          reduce using rule 87 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)


state 170

    (90) condition_else -> ELSE n_two_way_conditional_3 LCURLY . n_open_new_scope codeblock RCURLY n_close_scope
    (2) n_open_new_scope -> .

    FUNCTION        reduce using rule 2 (n_open_new_scope -> .)
    IF              reduce using rule 2 (n_open_new_scope -> .)
    FOR             reduce using rule 2 (n_open_new_scope -> .)
    WHILE           reduce using rule 2 (n_open_new_scope -> .)
    NAME            reduce using rule 2 (n_open_new_scope -> .)
    INT_TYPE        reduce using rule 2 (n_open_new_scope -> .)
    STRING_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    DOUBLE_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    FLOAT_TYPE      reduce using rule 2 (n_open_new_scope -> .)
    BOOL_TYPE       reduce using rule 2 (n_open_new_scope -> .)
    RCURLY          reduce using rule 2 (n_open_new_scope -> .)

    n_open_new_scope               shift and go to state 172

state 171

    (88) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .

    FUNCTION        reduce using rule 88 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    IF              reduce using rule 88 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    FOR             reduce using rule 88 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    WHILE           reduce using rule 88 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    NAME            reduce using rule 88 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    INT_TYPE        reduce using rule 88 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    STRING_TYPE     reduce using rule 88 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    DOUBLE_TYPE     reduce using rule 88 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    FLOAT_TYPE      reduce using rule 88 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    BOOL_TYPE       reduce using rule 88 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    $end            reduce using rule 88 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    RCURLY          reduce using rule 88 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)


state 172

    (90) condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope . codeblock RCURLY n_close_scope
    (79) codeblock -> . empty
    (80) codeblock -> . codeblock_aux codeblock
    (26) empty -> .
    (81) codeblock_aux -> . statement
    (82) codeblock_aux -> . function_definition
    (83) codeblock_aux -> . condition_if
    (84) codeblock_aux -> . loop
    (76) statement -> . statement_aux SEMICOLON
    (46) function_definition -> . FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope
    (89) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (85) loop -> . forloop
    (86) loop -> . whileloop
    (77) statement_aux -> . assign
    (78) statement_aux -> . function_call
    (88) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (87) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (74) assign -> . type NAME n_math_expression_1_name n_name EQUAL n_seen_equal_op expression
    (75) assign -> . NAME n_math_expression_1_name n_name EQUAL n_seen_equal_op expression
    (47) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (30) type -> . INT_TYPE n_seen_type
    (31) type -> . STRING_TYPE n_seen_type
    (32) type -> . DOUBLE_TYPE n_seen_type
    (33) type -> . FLOAT_TYPE n_seen_type
    (34) type -> . BOOL_TYPE n_seen_type

    RCURLY          reduce using rule 26 (empty -> .)
    FUNCTION        shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    codeblock                      shift and go to state 173
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 173

    (90) condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock . RCURLY n_close_scope

    RCURLY          shift and go to state 174


state 174

    (90) condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY . n_close_scope
    (3) n_close_scope -> .

    FUNCTION        reduce using rule 3 (n_close_scope -> .)
    IF              reduce using rule 3 (n_close_scope -> .)
    FOR             reduce using rule 3 (n_close_scope -> .)
    WHILE           reduce using rule 3 (n_close_scope -> .)
    NAME            reduce using rule 3 (n_close_scope -> .)
    INT_TYPE        reduce using rule 3 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 3 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 3 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 3 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 3 (n_close_scope -> .)
    $end            reduce using rule 3 (n_close_scope -> .)
    RCURLY          reduce using rule 3 (n_close_scope -> .)

    n_close_scope                  shift and go to state 175

state 175

    (90) condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .

    FUNCTION        reduce using rule 90 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    IF              reduce using rule 90 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    FOR             reduce using rule 90 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    WHILE           reduce using rule 90 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    NAME            reduce using rule 90 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    INT_TYPE        reduce using rule 90 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    STRING_TYPE     reduce using rule 90 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    DOUBLE_TYPE     reduce using rule 90 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    FLOAT_TYPE      reduce using rule 90 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    BOOL_TYPE       reduce using rule 90 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    $end            reduce using rule 90 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    RCURLY          reduce using rule 90 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)

