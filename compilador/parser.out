Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DOT
    LBRACKET
    NOT
    RBRACKET

Grammar

Rule 0     S' -> program
Rule 1     n_seen_type -> <empty>
Rule 2     n_open_new_scope -> <empty>
Rule 3     n_open_new_scope_function -> <empty>
Rule 4     n_close_scope -> <empty>
Rule 5     n_variable_reference -> <empty>
Rule 6     n_variable_instantiate -> <empty>
Rule 7     n_variable_instantiate_param -> <empty>
Rule 8     n_math_expression_1_int -> <empty>
Rule 9     n_math_expression_1_float -> <empty>
Rule 10    n_math_expression_1_string -> <empty>
Rule 11    n_math_expression_1_name -> <empty>
Rule 12    n_math_expression_2 -> <empty>
Rule 13    n_math_expression_3 -> <empty>
Rule 14    n_math_expression_4 -> <empty>
Rule 15    n_math_expression_5 -> <empty>
Rule 16    n_math_expression_6 -> <empty>
Rule 17    n_math_expression_7 -> <empty>
Rule 18    n_math_expression_8 -> <empty>
Rule 19    n_math_expression_9 -> <empty>
Rule 20    n_math_expression_10 -> <empty>
Rule 21    n_math_expression_11 -> <empty>
Rule 22    n_math_expression_12 -> <empty>
Rule 23    n_two_way_conditional_1 -> <empty>
Rule 24    n_two_way_conditional_2 -> <empty>
Rule 25    n_two_way_conditional_3 -> <empty>
Rule 26    p_n_pre_condition_loop_1 -> <empty>
Rule 27    p_n_pre_condition_loop_2 -> <empty>
Rule 28    p_n_pre_condition_loop_3 -> <empty>
Rule 29    n_seen_equal_op -> <empty>
Rule 30    empty -> <empty>
Rule 31    program -> program_aux codeblock
Rule 32    program_aux -> IDK
Rule 33    program_aux -> OWO
Rule 34    type -> INT_TYPE n_seen_type
Rule 35    type -> STRING_TYPE n_seen_type
Rule 36    type -> DOUBLE_TYPE n_seen_type
Rule 37    type -> FLOAT_TYPE n_seen_type
Rule 38    type -> BOOL_TYPE n_seen_type
Rule 39    relational_operator -> GREATERTHAN n_math_expression_8
Rule 40    relational_operator -> LESSTHAN n_math_expression_8
Rule 41    relational_operator -> EQUALEQUAL n_math_expression_8
Rule 42    relational_operator -> LESSTHANOREQUAL n_math_expression_8
Rule 43    relational_operator -> GREATERTHANOREQUAL n_math_expression_8
Rule 44    relational_operator -> NOTEQUAL n_math_expression_8
Rule 45    literal -> FLOAT n_math_expression_1_float
Rule 46    literal -> INT n_math_expression_1_int
Rule 47    literal -> STRING n_math_expression_1_string
Rule 48    function_type -> type
Rule 49    function_type -> VOID
Rule 50    n_before_function_definition -> <empty>
Rule 51    n_function_block_start -> <empty>
Rule 52    n_function_block_end -> <empty>
Rule 53    function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end
Rule 54    function_call -> NAME LPARENTHESIS arg_list RPARENTHESIS
Rule 55    arg_list -> empty
Rule 56    arg_list -> arg
Rule 57    arg_list -> arg COMMA arg_list
Rule 58    parameter_list -> empty
Rule 59    parameter_list -> parameter
Rule 60    parameter_list -> parameter COMMA parameter_list
Rule 61    arg -> expression
Rule 62    parameter -> type NAME n_variable_instantiate_param
Rule 63    expression -> expression_or
Rule 64    expression -> expression_or AND n_math_expression_10 expression n_math_expression_11
Rule 65    expression_or -> expression_rel
Rule 66    expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12
Rule 67    expression_rel -> exp
Rule 68    expression_rel -> exp relational_operator exp n_math_expression_9
Rule 69    exp -> termino n_math_expression_4
Rule 70    exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp
Rule 71    exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp
Rule 72    termino -> factor n_math_expression_5
Rule 73    termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino
Rule 74    termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino
Rule 75    termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino
Rule 76    factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
Rule 77    factor -> PLUS value
Rule 78    factor -> MINUS value
Rule 79    factor -> value
Rule 80    value -> function_call
Rule 81    value -> literal
Rule 82    value -> NAME n_variable_reference n_math_expression_1_name
Rule 83    assign -> type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
Rule 84    assign -> NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
Rule 85    statement -> statement_aux SEMICOLON
Rule 86    statement_aux -> assign
Rule 87    statement_aux -> function_call
Rule 88    codeblock -> empty
Rule 89    codeblock -> codeblock_aux codeblock
Rule 90    codeblock_aux -> statement
Rule 91    codeblock_aux -> function_definition
Rule 92    codeblock_aux -> condition_if
Rule 93    codeblock_aux -> loop
Rule 94    loop -> forloop
Rule 95    loop -> whileloop
Rule 96    whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
Rule 97    forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
Rule 98    condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
Rule 99    condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope
Rule 100   condition_else -> empty

Terminals, with rules where they appear

AND                  : 64
BOOL_TYPE            : 38
COMMA                : 57 60
DIVIDE               : 74
DOT                  : 
DOUBLEDOT            : 53 97 97
DOUBLE_TYPE          : 36
ELSE                 : 99
EQUAL                : 83 84
EQUALEQUAL           : 41
FLOAT                : 45
FLOAT_TYPE           : 37
FOR                  : 97
FUNCTION             : 53
GREATERTHAN          : 39
GREATERTHANOREQUAL   : 43
IDK                  : 32
IF                   : 98
INT                  : 46
INT_TYPE             : 34
LBRACKET             : 
LCURLY               : 53 96 97 98 99
LESSTHAN             : 40
LESSTHANOREQUAL      : 42
LPARENTHESIS         : 54 76 96 97 98
MINUS                : 71 78
MODULUS              : 75
NAME                 : 53 54 62 82 83 84
NOT                  : 
NOTEQUAL             : 44
OR                   : 66
OWO                  : 33
PLUS                 : 70 77
RBRACKET             : 
RCURLY               : 53 96 97 98 99
RPARENTHESIS         : 54 76 96 97 98
SEMICOLON            : 85
STRING               : 47
STRING_TYPE          : 35
TIMES                : 73
VOID                 : 49
WHILE                : 96
error                : 

Nonterminals, with rules where they appear

arg                  : 56 57
arg_list             : 54 57
assign               : 86 97 97
codeblock            : 31 53 89 96 97 98 99
codeblock_aux        : 89
condition_else       : 98
condition_if         : 92
empty                : 55 58 88 100
exp                  : 67 68 68 70 71
expression           : 61 64 76 83 84 96 97 98
expression_or        : 63 64 66
expression_rel       : 65 66
factor               : 72 73 74 75
forloop              : 94
function_call        : 80 87
function_definition  : 91
function_type        : 53
literal              : 81
loop                 : 93
n_before_function_definition : 53
n_close_scope        : 53 96 97 98 99
n_function_block_end : 53
n_function_block_start : 53
n_math_expression_10 : 64 66
n_math_expression_11 : 64
n_math_expression_12 : 66
n_math_expression_1_float : 45
n_math_expression_1_int : 46
n_math_expression_1_name : 82 83 84
n_math_expression_1_string : 47
n_math_expression_2  : 70 71
n_math_expression_3  : 73 74 75
n_math_expression_4  : 69 70 71
n_math_expression_5  : 72 73 74 75
n_math_expression_6  : 76
n_math_expression_7  : 76
n_math_expression_8  : 39 40 41 42 43 44
n_math_expression_9  : 68
n_open_new_scope     : 96 97 98 99
n_open_new_scope_function : 53
n_seen_equal_op      : 83 84
n_seen_type          : 34 35 36 37 38
n_two_way_conditional_1 : 98
n_two_way_conditional_2 : 98
n_two_way_conditional_3 : 99
n_variable_instantiate : 83
n_variable_instantiate_param : 62
n_variable_reference : 82 84
p_n_pre_condition_loop_1 : 96
p_n_pre_condition_loop_2 : 96
p_n_pre_condition_loop_3 : 96
parameter            : 59 60
parameter_list       : 53 60
program              : 0
program_aux          : 31
relational_operator  : 68
statement            : 90
statement_aux        : 85
termino              : 69 70 71 73 74 75
type                 : 48 62 83
value                : 77 78 79
whileloop            : 95

Parsing method: LALR

state 0

    (0) S' -> . program
    (31) program -> . program_aux codeblock
    (32) program_aux -> . IDK
    (33) program_aux -> . OWO

    IDK             shift and go to state 3
    OWO             shift and go to state 4

    program                        shift and go to state 1
    program_aux                    shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (31) program -> program_aux . codeblock
    (88) codeblock -> . empty
    (89) codeblock -> . codeblock_aux codeblock
    (30) empty -> .
    (90) codeblock_aux -> . statement
    (91) codeblock_aux -> . function_definition
    (92) codeblock_aux -> . condition_if
    (93) codeblock_aux -> . loop
    (85) statement -> . statement_aux SEMICOLON
    (53) function_definition -> . n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end
    (98) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (94) loop -> . forloop
    (95) loop -> . whileloop
    (86) statement_aux -> . assign
    (87) statement_aux -> . function_call
    (50) n_before_function_definition -> .
    (97) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (96) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (83) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (84) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (54) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (34) type -> . INT_TYPE n_seen_type
    (35) type -> . STRING_TYPE n_seen_type
    (36) type -> . DOUBLE_TYPE n_seen_type
    (37) type -> . FLOAT_TYPE n_seen_type
    (38) type -> . BOOL_TYPE n_seen_type

    $end            reduce using rule 30 (empty -> .)
    IF              shift and go to state 15
    FUNCTION        reduce using rule 50 (n_before_function_definition -> .)
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    codeblock                      shift and go to state 5
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    n_before_function_definition   shift and go to state 13
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 3

    (32) program_aux -> IDK .

    IF              reduce using rule 32 (program_aux -> IDK .)
    FOR             reduce using rule 32 (program_aux -> IDK .)
    WHILE           reduce using rule 32 (program_aux -> IDK .)
    NAME            reduce using rule 32 (program_aux -> IDK .)
    INT_TYPE        reduce using rule 32 (program_aux -> IDK .)
    STRING_TYPE     reduce using rule 32 (program_aux -> IDK .)
    DOUBLE_TYPE     reduce using rule 32 (program_aux -> IDK .)
    FLOAT_TYPE      reduce using rule 32 (program_aux -> IDK .)
    BOOL_TYPE       reduce using rule 32 (program_aux -> IDK .)
    FUNCTION        reduce using rule 32 (program_aux -> IDK .)
    $end            reduce using rule 32 (program_aux -> IDK .)


state 4

    (33) program_aux -> OWO .

    IF              reduce using rule 33 (program_aux -> OWO .)
    FOR             reduce using rule 33 (program_aux -> OWO .)
    WHILE           reduce using rule 33 (program_aux -> OWO .)
    NAME            reduce using rule 33 (program_aux -> OWO .)
    INT_TYPE        reduce using rule 33 (program_aux -> OWO .)
    STRING_TYPE     reduce using rule 33 (program_aux -> OWO .)
    DOUBLE_TYPE     reduce using rule 33 (program_aux -> OWO .)
    FLOAT_TYPE      reduce using rule 33 (program_aux -> OWO .)
    BOOL_TYPE       reduce using rule 33 (program_aux -> OWO .)
    FUNCTION        reduce using rule 33 (program_aux -> OWO .)
    $end            reduce using rule 33 (program_aux -> OWO .)


state 5

    (31) program -> program_aux codeblock .

    $end            reduce using rule 31 (program -> program_aux codeblock .)


state 6

    (88) codeblock -> empty .

    $end            reduce using rule 88 (codeblock -> empty .)
    RCURLY          reduce using rule 88 (codeblock -> empty .)


state 7

    (89) codeblock -> codeblock_aux . codeblock
    (88) codeblock -> . empty
    (89) codeblock -> . codeblock_aux codeblock
    (30) empty -> .
    (90) codeblock_aux -> . statement
    (91) codeblock_aux -> . function_definition
    (92) codeblock_aux -> . condition_if
    (93) codeblock_aux -> . loop
    (85) statement -> . statement_aux SEMICOLON
    (53) function_definition -> . n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end
    (98) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (94) loop -> . forloop
    (95) loop -> . whileloop
    (86) statement_aux -> . assign
    (87) statement_aux -> . function_call
    (50) n_before_function_definition -> .
    (97) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (96) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (83) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (84) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (54) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (34) type -> . INT_TYPE n_seen_type
    (35) type -> . STRING_TYPE n_seen_type
    (36) type -> . DOUBLE_TYPE n_seen_type
    (37) type -> . FLOAT_TYPE n_seen_type
    (38) type -> . BOOL_TYPE n_seen_type

    $end            reduce using rule 30 (empty -> .)
    RCURLY          reduce using rule 30 (empty -> .)
    IF              shift and go to state 15
    FUNCTION        reduce using rule 50 (n_before_function_definition -> .)
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    codeblock_aux                  shift and go to state 7
    codeblock                      shift and go to state 28
    empty                          shift and go to state 6
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    n_before_function_definition   shift and go to state 13
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 8

    (90) codeblock_aux -> statement .

    IF              reduce using rule 90 (codeblock_aux -> statement .)
    FOR             reduce using rule 90 (codeblock_aux -> statement .)
    WHILE           reduce using rule 90 (codeblock_aux -> statement .)
    NAME            reduce using rule 90 (codeblock_aux -> statement .)
    INT_TYPE        reduce using rule 90 (codeblock_aux -> statement .)
    STRING_TYPE     reduce using rule 90 (codeblock_aux -> statement .)
    DOUBLE_TYPE     reduce using rule 90 (codeblock_aux -> statement .)
    FLOAT_TYPE      reduce using rule 90 (codeblock_aux -> statement .)
    BOOL_TYPE       reduce using rule 90 (codeblock_aux -> statement .)
    FUNCTION        reduce using rule 90 (codeblock_aux -> statement .)
    $end            reduce using rule 90 (codeblock_aux -> statement .)
    RCURLY          reduce using rule 90 (codeblock_aux -> statement .)


state 9

    (91) codeblock_aux -> function_definition .

    IF              reduce using rule 91 (codeblock_aux -> function_definition .)
    FOR             reduce using rule 91 (codeblock_aux -> function_definition .)
    WHILE           reduce using rule 91 (codeblock_aux -> function_definition .)
    NAME            reduce using rule 91 (codeblock_aux -> function_definition .)
    INT_TYPE        reduce using rule 91 (codeblock_aux -> function_definition .)
    STRING_TYPE     reduce using rule 91 (codeblock_aux -> function_definition .)
    DOUBLE_TYPE     reduce using rule 91 (codeblock_aux -> function_definition .)
    FLOAT_TYPE      reduce using rule 91 (codeblock_aux -> function_definition .)
    BOOL_TYPE       reduce using rule 91 (codeblock_aux -> function_definition .)
    FUNCTION        reduce using rule 91 (codeblock_aux -> function_definition .)
    $end            reduce using rule 91 (codeblock_aux -> function_definition .)
    RCURLY          reduce using rule 91 (codeblock_aux -> function_definition .)


state 10

    (92) codeblock_aux -> condition_if .

    IF              reduce using rule 92 (codeblock_aux -> condition_if .)
    FOR             reduce using rule 92 (codeblock_aux -> condition_if .)
    WHILE           reduce using rule 92 (codeblock_aux -> condition_if .)
    NAME            reduce using rule 92 (codeblock_aux -> condition_if .)
    INT_TYPE        reduce using rule 92 (codeblock_aux -> condition_if .)
    STRING_TYPE     reduce using rule 92 (codeblock_aux -> condition_if .)
    DOUBLE_TYPE     reduce using rule 92 (codeblock_aux -> condition_if .)
    FLOAT_TYPE      reduce using rule 92 (codeblock_aux -> condition_if .)
    BOOL_TYPE       reduce using rule 92 (codeblock_aux -> condition_if .)
    FUNCTION        reduce using rule 92 (codeblock_aux -> condition_if .)
    $end            reduce using rule 92 (codeblock_aux -> condition_if .)
    RCURLY          reduce using rule 92 (codeblock_aux -> condition_if .)


state 11

    (93) codeblock_aux -> loop .

    IF              reduce using rule 93 (codeblock_aux -> loop .)
    FOR             reduce using rule 93 (codeblock_aux -> loop .)
    WHILE           reduce using rule 93 (codeblock_aux -> loop .)
    NAME            reduce using rule 93 (codeblock_aux -> loop .)
    INT_TYPE        reduce using rule 93 (codeblock_aux -> loop .)
    STRING_TYPE     reduce using rule 93 (codeblock_aux -> loop .)
    DOUBLE_TYPE     reduce using rule 93 (codeblock_aux -> loop .)
    FLOAT_TYPE      reduce using rule 93 (codeblock_aux -> loop .)
    BOOL_TYPE       reduce using rule 93 (codeblock_aux -> loop .)
    FUNCTION        reduce using rule 93 (codeblock_aux -> loop .)
    $end            reduce using rule 93 (codeblock_aux -> loop .)
    RCURLY          reduce using rule 93 (codeblock_aux -> loop .)


state 12

    (85) statement -> statement_aux . SEMICOLON

    SEMICOLON       shift and go to state 29


state 13

    (53) function_definition -> n_before_function_definition . FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end

    FUNCTION        shift and go to state 30


state 14

    (84) assign -> NAME . n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (54) function_call -> NAME . LPARENTHESIS arg_list RPARENTHESIS
    (5) n_variable_reference -> .

    LPARENTHESIS    shift and go to state 32
    EQUAL           reduce using rule 5 (n_variable_reference -> .)

    n_variable_reference           shift and go to state 31

state 15

    (98) condition_if -> IF . LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2

    LPARENTHESIS    shift and go to state 33


state 16

    (94) loop -> forloop .

    IF              reduce using rule 94 (loop -> forloop .)
    FOR             reduce using rule 94 (loop -> forloop .)
    WHILE           reduce using rule 94 (loop -> forloop .)
    NAME            reduce using rule 94 (loop -> forloop .)
    INT_TYPE        reduce using rule 94 (loop -> forloop .)
    STRING_TYPE     reduce using rule 94 (loop -> forloop .)
    DOUBLE_TYPE     reduce using rule 94 (loop -> forloop .)
    FLOAT_TYPE      reduce using rule 94 (loop -> forloop .)
    BOOL_TYPE       reduce using rule 94 (loop -> forloop .)
    FUNCTION        reduce using rule 94 (loop -> forloop .)
    $end            reduce using rule 94 (loop -> forloop .)
    RCURLY          reduce using rule 94 (loop -> forloop .)


state 17

    (95) loop -> whileloop .

    IF              reduce using rule 95 (loop -> whileloop .)
    FOR             reduce using rule 95 (loop -> whileloop .)
    WHILE           reduce using rule 95 (loop -> whileloop .)
    NAME            reduce using rule 95 (loop -> whileloop .)
    INT_TYPE        reduce using rule 95 (loop -> whileloop .)
    STRING_TYPE     reduce using rule 95 (loop -> whileloop .)
    DOUBLE_TYPE     reduce using rule 95 (loop -> whileloop .)
    FLOAT_TYPE      reduce using rule 95 (loop -> whileloop .)
    BOOL_TYPE       reduce using rule 95 (loop -> whileloop .)
    FUNCTION        reduce using rule 95 (loop -> whileloop .)
    $end            reduce using rule 95 (loop -> whileloop .)
    RCURLY          reduce using rule 95 (loop -> whileloop .)


state 18

    (86) statement_aux -> assign .

    SEMICOLON       reduce using rule 86 (statement_aux -> assign .)


state 19

    (87) statement_aux -> function_call .

    SEMICOLON       reduce using rule 87 (statement_aux -> function_call .)


state 20

    (97) forloop -> FOR . LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope

    LPARENTHESIS    shift and go to state 34


state 21

    (96) whileloop -> WHILE . p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (26) p_n_pre_condition_loop_1 -> .

    LPARENTHESIS    reduce using rule 26 (p_n_pre_condition_loop_1 -> .)

    p_n_pre_condition_loop_1       shift and go to state 35

state 22

    (83) assign -> type . NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression

    NAME            shift and go to state 36


state 23

    (34) type -> INT_TYPE . n_seen_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)
    LCURLY          reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 37

state 24

    (35) type -> STRING_TYPE . n_seen_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)
    LCURLY          reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 38

state 25

    (36) type -> DOUBLE_TYPE . n_seen_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)
    LCURLY          reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 39

state 26

    (37) type -> FLOAT_TYPE . n_seen_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)
    LCURLY          reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 40

state 27

    (38) type -> BOOL_TYPE . n_seen_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)
    LCURLY          reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 41

state 28

    (89) codeblock -> codeblock_aux codeblock .

    $end            reduce using rule 89 (codeblock -> codeblock_aux codeblock .)
    RCURLY          reduce using rule 89 (codeblock -> codeblock_aux codeblock .)


state 29

    (85) statement -> statement_aux SEMICOLON .

    IF              reduce using rule 85 (statement -> statement_aux SEMICOLON .)
    FOR             reduce using rule 85 (statement -> statement_aux SEMICOLON .)
    WHILE           reduce using rule 85 (statement -> statement_aux SEMICOLON .)
    NAME            reduce using rule 85 (statement -> statement_aux SEMICOLON .)
    INT_TYPE        reduce using rule 85 (statement -> statement_aux SEMICOLON .)
    STRING_TYPE     reduce using rule 85 (statement -> statement_aux SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 85 (statement -> statement_aux SEMICOLON .)
    FLOAT_TYPE      reduce using rule 85 (statement -> statement_aux SEMICOLON .)
    BOOL_TYPE       reduce using rule 85 (statement -> statement_aux SEMICOLON .)
    FUNCTION        reduce using rule 85 (statement -> statement_aux SEMICOLON .)
    $end            reduce using rule 85 (statement -> statement_aux SEMICOLON .)
    RCURLY          reduce using rule 85 (statement -> statement_aux SEMICOLON .)


state 30

    (53) function_definition -> n_before_function_definition FUNCTION . NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end

    NAME            shift and go to state 42


state 31

    (84) assign -> NAME n_variable_reference . n_math_expression_1_name EQUAL n_seen_equal_op expression
    (11) n_math_expression_1_name -> .

    EQUAL           reduce using rule 11 (n_math_expression_1_name -> .)

    n_math_expression_1_name       shift and go to state 43

state 32

    (54) function_call -> NAME LPARENTHESIS . arg_list RPARENTHESIS
    (55) arg_list -> . empty
    (56) arg_list -> . arg
    (57) arg_list -> . arg COMMA arg_list
    (30) empty -> .
    (61) arg -> . expression
    (63) expression -> . expression_or
    (64) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (65) expression_or -> . expression_rel
    (66) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (67) expression_rel -> . exp
    (68) expression_rel -> . exp relational_operator exp n_math_expression_9
    (69) exp -> . termino n_math_expression_4
    (70) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (71) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (72) termino -> . factor n_math_expression_5
    (73) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (74) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (75) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (76) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (77) factor -> . PLUS value
    (78) factor -> . MINUS value
    (79) factor -> . value
    (80) value -> . function_call
    (81) value -> . literal
    (82) value -> . NAME n_variable_reference n_math_expression_1_name
    (54) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (45) literal -> . FLOAT n_math_expression_1_float
    (46) literal -> . INT n_math_expression_1_int
    (47) literal -> . STRING n_math_expression_1_string

    RPARENTHESIS    reduce using rule 30 (empty -> .)
    LPARENTHESIS    shift and go to state 45
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    NAME            shift and go to state 44
    FLOAT           shift and go to state 60
    INT             shift and go to state 61
    STRING          shift and go to state 62

    arg_list                       shift and go to state 46
    empty                          shift and go to state 47
    arg                            shift and go to state 48
    expression                     shift and go to state 49
    expression_or                  shift and go to state 50
    expression_rel                 shift and go to state 51
    exp                            shift and go to state 52
    termino                        shift and go to state 53
    factor                         shift and go to state 56
    value                          shift and go to state 57
    function_call                  shift and go to state 58
    literal                        shift and go to state 59

state 33

    (98) condition_if -> IF LPARENTHESIS . expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (63) expression -> . expression_or
    (64) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (65) expression_or -> . expression_rel
    (66) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (67) expression_rel -> . exp
    (68) expression_rel -> . exp relational_operator exp n_math_expression_9
    (69) exp -> . termino n_math_expression_4
    (70) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (71) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (72) termino -> . factor n_math_expression_5
    (73) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (74) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (75) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (76) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (77) factor -> . PLUS value
    (78) factor -> . MINUS value
    (79) factor -> . value
    (80) value -> . function_call
    (81) value -> . literal
    (82) value -> . NAME n_variable_reference n_math_expression_1_name
    (54) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (45) literal -> . FLOAT n_math_expression_1_float
    (46) literal -> . INT n_math_expression_1_int
    (47) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 45
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    NAME            shift and go to state 44
    FLOAT           shift and go to state 60
    INT             shift and go to state 61
    STRING          shift and go to state 62

    expression                     shift and go to state 63
    expression_or                  shift and go to state 50
    expression_rel                 shift and go to state 51
    exp                            shift and go to state 52
    termino                        shift and go to state 53
    factor                         shift and go to state 56
    value                          shift and go to state 57
    function_call                  shift and go to state 58
    literal                        shift and go to state 59

state 34

    (97) forloop -> FOR LPARENTHESIS . n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (2) n_open_new_scope -> .

    NAME            reduce using rule 2 (n_open_new_scope -> .)
    INT_TYPE        reduce using rule 2 (n_open_new_scope -> .)
    STRING_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    DOUBLE_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    FLOAT_TYPE      reduce using rule 2 (n_open_new_scope -> .)
    BOOL_TYPE       reduce using rule 2 (n_open_new_scope -> .)

    n_open_new_scope               shift and go to state 64

state 35

    (96) whileloop -> WHILE p_n_pre_condition_loop_1 . LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope

    LPARENTHESIS    shift and go to state 65


state 36

    (83) assign -> type NAME . n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (6) n_variable_instantiate -> .

    EQUAL           reduce using rule 6 (n_variable_instantiate -> .)

    n_variable_instantiate         shift and go to state 66

state 37

    (34) type -> INT_TYPE n_seen_type .

    NAME            reduce using rule 34 (type -> INT_TYPE n_seen_type .)
    LCURLY          reduce using rule 34 (type -> INT_TYPE n_seen_type .)


state 38

    (35) type -> STRING_TYPE n_seen_type .

    NAME            reduce using rule 35 (type -> STRING_TYPE n_seen_type .)
    LCURLY          reduce using rule 35 (type -> STRING_TYPE n_seen_type .)


state 39

    (36) type -> DOUBLE_TYPE n_seen_type .

    NAME            reduce using rule 36 (type -> DOUBLE_TYPE n_seen_type .)
    LCURLY          reduce using rule 36 (type -> DOUBLE_TYPE n_seen_type .)


state 40

    (37) type -> FLOAT_TYPE n_seen_type .

    NAME            reduce using rule 37 (type -> FLOAT_TYPE n_seen_type .)
    LCURLY          reduce using rule 37 (type -> FLOAT_TYPE n_seen_type .)


state 41

    (38) type -> BOOL_TYPE n_seen_type .

    NAME            reduce using rule 38 (type -> BOOL_TYPE n_seen_type .)
    LCURLY          reduce using rule 38 (type -> BOOL_TYPE n_seen_type .)


state 42

    (53) function_definition -> n_before_function_definition FUNCTION NAME . n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end
    (3) n_open_new_scope_function -> .

    INT_TYPE        reduce using rule 3 (n_open_new_scope_function -> .)
    STRING_TYPE     reduce using rule 3 (n_open_new_scope_function -> .)
    DOUBLE_TYPE     reduce using rule 3 (n_open_new_scope_function -> .)
    FLOAT_TYPE      reduce using rule 3 (n_open_new_scope_function -> .)
    BOOL_TYPE       reduce using rule 3 (n_open_new_scope_function -> .)
    DOUBLEDOT       reduce using rule 3 (n_open_new_scope_function -> .)

    n_open_new_scope_function      shift and go to state 67

state 43

    (84) assign -> NAME n_variable_reference n_math_expression_1_name . EQUAL n_seen_equal_op expression

    EQUAL           shift and go to state 68


state 44

    (82) value -> NAME . n_variable_reference n_math_expression_1_name
    (54) function_call -> NAME . LPARENTHESIS arg_list RPARENTHESIS
    (5) n_variable_reference -> .

    LPARENTHESIS    shift and go to state 32
    TIMES           reduce using rule 5 (n_variable_reference -> .)
    DIVIDE          reduce using rule 5 (n_variable_reference -> .)
    MODULUS         reduce using rule 5 (n_variable_reference -> .)
    PLUS            reduce using rule 5 (n_variable_reference -> .)
    MINUS           reduce using rule 5 (n_variable_reference -> .)
    GREATERTHAN     reduce using rule 5 (n_variable_reference -> .)
    LESSTHAN        reduce using rule 5 (n_variable_reference -> .)
    EQUALEQUAL      reduce using rule 5 (n_variable_reference -> .)
    LESSTHANOREQUAL reduce using rule 5 (n_variable_reference -> .)
    GREATERTHANOREQUAL reduce using rule 5 (n_variable_reference -> .)
    NOTEQUAL        reduce using rule 5 (n_variable_reference -> .)
    OR              reduce using rule 5 (n_variable_reference -> .)
    AND             reduce using rule 5 (n_variable_reference -> .)
    COMMA           reduce using rule 5 (n_variable_reference -> .)
    RPARENTHESIS    reduce using rule 5 (n_variable_reference -> .)
    SEMICOLON       reduce using rule 5 (n_variable_reference -> .)
    DOUBLEDOT       reduce using rule 5 (n_variable_reference -> .)

    n_variable_reference           shift and go to state 69

state 45

    (76) factor -> LPARENTHESIS . n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (16) n_math_expression_6 -> .

    LPARENTHESIS    reduce using rule 16 (n_math_expression_6 -> .)
    PLUS            reduce using rule 16 (n_math_expression_6 -> .)
    MINUS           reduce using rule 16 (n_math_expression_6 -> .)
    NAME            reduce using rule 16 (n_math_expression_6 -> .)
    FLOAT           reduce using rule 16 (n_math_expression_6 -> .)
    INT             reduce using rule 16 (n_math_expression_6 -> .)
    STRING          reduce using rule 16 (n_math_expression_6 -> .)

    n_math_expression_6            shift and go to state 70

state 46

    (54) function_call -> NAME LPARENTHESIS arg_list . RPARENTHESIS

    RPARENTHESIS    shift and go to state 71


state 47

    (55) arg_list -> empty .

    RPARENTHESIS    reduce using rule 55 (arg_list -> empty .)


state 48

    (56) arg_list -> arg .
    (57) arg_list -> arg . COMMA arg_list

    RPARENTHESIS    reduce using rule 56 (arg_list -> arg .)
    COMMA           shift and go to state 72


state 49

    (61) arg -> expression .

    COMMA           reduce using rule 61 (arg -> expression .)
    RPARENTHESIS    reduce using rule 61 (arg -> expression .)


state 50

    (63) expression -> expression_or .
    (64) expression -> expression_or . AND n_math_expression_10 expression n_math_expression_11

    COMMA           reduce using rule 63 (expression -> expression_or .)
    RPARENTHESIS    reduce using rule 63 (expression -> expression_or .)
    SEMICOLON       reduce using rule 63 (expression -> expression_or .)
    DOUBLEDOT       reduce using rule 63 (expression -> expression_or .)
    AND             shift and go to state 73


state 51

    (65) expression_or -> expression_rel .
    (66) expression_or -> expression_rel . OR n_math_expression_10 expression_or n_math_expression_12

    AND             reduce using rule 65 (expression_or -> expression_rel .)
    COMMA           reduce using rule 65 (expression_or -> expression_rel .)
    RPARENTHESIS    reduce using rule 65 (expression_or -> expression_rel .)
    SEMICOLON       reduce using rule 65 (expression_or -> expression_rel .)
    DOUBLEDOT       reduce using rule 65 (expression_or -> expression_rel .)
    OR              shift and go to state 74


state 52

    (67) expression_rel -> exp .
    (68) expression_rel -> exp . relational_operator exp n_math_expression_9
    (39) relational_operator -> . GREATERTHAN n_math_expression_8
    (40) relational_operator -> . LESSTHAN n_math_expression_8
    (41) relational_operator -> . EQUALEQUAL n_math_expression_8
    (42) relational_operator -> . LESSTHANOREQUAL n_math_expression_8
    (43) relational_operator -> . GREATERTHANOREQUAL n_math_expression_8
    (44) relational_operator -> . NOTEQUAL n_math_expression_8

    OR              reduce using rule 67 (expression_rel -> exp .)
    AND             reduce using rule 67 (expression_rel -> exp .)
    COMMA           reduce using rule 67 (expression_rel -> exp .)
    RPARENTHESIS    reduce using rule 67 (expression_rel -> exp .)
    SEMICOLON       reduce using rule 67 (expression_rel -> exp .)
    DOUBLEDOT       reduce using rule 67 (expression_rel -> exp .)
    GREATERTHAN     shift and go to state 76
    LESSTHAN        shift and go to state 77
    EQUALEQUAL      shift and go to state 78
    LESSTHANOREQUAL shift and go to state 79
    GREATERTHANOREQUAL shift and go to state 80
    NOTEQUAL        shift and go to state 81

    relational_operator            shift and go to state 75

state 53

    (69) exp -> termino . n_math_expression_4
    (70) exp -> termino . n_math_expression_4 PLUS n_math_expression_2 exp
    (71) exp -> termino . n_math_expression_4 MINUS n_math_expression_2 exp
    (14) n_math_expression_4 -> .

    PLUS            reduce using rule 14 (n_math_expression_4 -> .)
    MINUS           reduce using rule 14 (n_math_expression_4 -> .)
    GREATERTHAN     reduce using rule 14 (n_math_expression_4 -> .)
    LESSTHAN        reduce using rule 14 (n_math_expression_4 -> .)
    EQUALEQUAL      reduce using rule 14 (n_math_expression_4 -> .)
    LESSTHANOREQUAL reduce using rule 14 (n_math_expression_4 -> .)
    GREATERTHANOREQUAL reduce using rule 14 (n_math_expression_4 -> .)
    NOTEQUAL        reduce using rule 14 (n_math_expression_4 -> .)
    OR              reduce using rule 14 (n_math_expression_4 -> .)
    AND             reduce using rule 14 (n_math_expression_4 -> .)
    COMMA           reduce using rule 14 (n_math_expression_4 -> .)
    RPARENTHESIS    reduce using rule 14 (n_math_expression_4 -> .)
    SEMICOLON       reduce using rule 14 (n_math_expression_4 -> .)
    DOUBLEDOT       reduce using rule 14 (n_math_expression_4 -> .)

    n_math_expression_4            shift and go to state 82

state 54

    (77) factor -> PLUS . value
    (80) value -> . function_call
    (81) value -> . literal
    (82) value -> . NAME n_variable_reference n_math_expression_1_name
    (54) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (45) literal -> . FLOAT n_math_expression_1_float
    (46) literal -> . INT n_math_expression_1_int
    (47) literal -> . STRING n_math_expression_1_string

    NAME            shift and go to state 44
    FLOAT           shift and go to state 60
    INT             shift and go to state 61
    STRING          shift and go to state 62

    value                          shift and go to state 83
    function_call                  shift and go to state 58
    literal                        shift and go to state 59

state 55

    (78) factor -> MINUS . value
    (80) value -> . function_call
    (81) value -> . literal
    (82) value -> . NAME n_variable_reference n_math_expression_1_name
    (54) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (45) literal -> . FLOAT n_math_expression_1_float
    (46) literal -> . INT n_math_expression_1_int
    (47) literal -> . STRING n_math_expression_1_string

    NAME            shift and go to state 44
    FLOAT           shift and go to state 60
    INT             shift and go to state 61
    STRING          shift and go to state 62

    value                          shift and go to state 84
    function_call                  shift and go to state 58
    literal                        shift and go to state 59

state 56

    (72) termino -> factor . n_math_expression_5
    (73) termino -> factor . n_math_expression_5 TIMES n_math_expression_3 termino
    (74) termino -> factor . n_math_expression_5 DIVIDE n_math_expression_3 termino
    (75) termino -> factor . n_math_expression_5 MODULUS n_math_expression_3 termino
    (15) n_math_expression_5 -> .

    TIMES           reduce using rule 15 (n_math_expression_5 -> .)
    DIVIDE          reduce using rule 15 (n_math_expression_5 -> .)
    MODULUS         reduce using rule 15 (n_math_expression_5 -> .)
    PLUS            reduce using rule 15 (n_math_expression_5 -> .)
    MINUS           reduce using rule 15 (n_math_expression_5 -> .)
    GREATERTHAN     reduce using rule 15 (n_math_expression_5 -> .)
    LESSTHAN        reduce using rule 15 (n_math_expression_5 -> .)
    EQUALEQUAL      reduce using rule 15 (n_math_expression_5 -> .)
    LESSTHANOREQUAL reduce using rule 15 (n_math_expression_5 -> .)
    GREATERTHANOREQUAL reduce using rule 15 (n_math_expression_5 -> .)
    NOTEQUAL        reduce using rule 15 (n_math_expression_5 -> .)
    OR              reduce using rule 15 (n_math_expression_5 -> .)
    AND             reduce using rule 15 (n_math_expression_5 -> .)
    COMMA           reduce using rule 15 (n_math_expression_5 -> .)
    RPARENTHESIS    reduce using rule 15 (n_math_expression_5 -> .)
    SEMICOLON       reduce using rule 15 (n_math_expression_5 -> .)
    DOUBLEDOT       reduce using rule 15 (n_math_expression_5 -> .)

    n_math_expression_5            shift and go to state 85

state 57

    (79) factor -> value .

    TIMES           reduce using rule 79 (factor -> value .)
    DIVIDE          reduce using rule 79 (factor -> value .)
    MODULUS         reduce using rule 79 (factor -> value .)
    PLUS            reduce using rule 79 (factor -> value .)
    MINUS           reduce using rule 79 (factor -> value .)
    GREATERTHAN     reduce using rule 79 (factor -> value .)
    LESSTHAN        reduce using rule 79 (factor -> value .)
    EQUALEQUAL      reduce using rule 79 (factor -> value .)
    LESSTHANOREQUAL reduce using rule 79 (factor -> value .)
    GREATERTHANOREQUAL reduce using rule 79 (factor -> value .)
    NOTEQUAL        reduce using rule 79 (factor -> value .)
    OR              reduce using rule 79 (factor -> value .)
    AND             reduce using rule 79 (factor -> value .)
    COMMA           reduce using rule 79 (factor -> value .)
    RPARENTHESIS    reduce using rule 79 (factor -> value .)
    SEMICOLON       reduce using rule 79 (factor -> value .)
    DOUBLEDOT       reduce using rule 79 (factor -> value .)


state 58

    (80) value -> function_call .

    TIMES           reduce using rule 80 (value -> function_call .)
    DIVIDE          reduce using rule 80 (value -> function_call .)
    MODULUS         reduce using rule 80 (value -> function_call .)
    PLUS            reduce using rule 80 (value -> function_call .)
    MINUS           reduce using rule 80 (value -> function_call .)
    GREATERTHAN     reduce using rule 80 (value -> function_call .)
    LESSTHAN        reduce using rule 80 (value -> function_call .)
    EQUALEQUAL      reduce using rule 80 (value -> function_call .)
    LESSTHANOREQUAL reduce using rule 80 (value -> function_call .)
    GREATERTHANOREQUAL reduce using rule 80 (value -> function_call .)
    NOTEQUAL        reduce using rule 80 (value -> function_call .)
    OR              reduce using rule 80 (value -> function_call .)
    AND             reduce using rule 80 (value -> function_call .)
    COMMA           reduce using rule 80 (value -> function_call .)
    RPARENTHESIS    reduce using rule 80 (value -> function_call .)
    SEMICOLON       reduce using rule 80 (value -> function_call .)
    DOUBLEDOT       reduce using rule 80 (value -> function_call .)


state 59

    (81) value -> literal .

    TIMES           reduce using rule 81 (value -> literal .)
    DIVIDE          reduce using rule 81 (value -> literal .)
    MODULUS         reduce using rule 81 (value -> literal .)
    PLUS            reduce using rule 81 (value -> literal .)
    MINUS           reduce using rule 81 (value -> literal .)
    GREATERTHAN     reduce using rule 81 (value -> literal .)
    LESSTHAN        reduce using rule 81 (value -> literal .)
    EQUALEQUAL      reduce using rule 81 (value -> literal .)
    LESSTHANOREQUAL reduce using rule 81 (value -> literal .)
    GREATERTHANOREQUAL reduce using rule 81 (value -> literal .)
    NOTEQUAL        reduce using rule 81 (value -> literal .)
    OR              reduce using rule 81 (value -> literal .)
    AND             reduce using rule 81 (value -> literal .)
    COMMA           reduce using rule 81 (value -> literal .)
    RPARENTHESIS    reduce using rule 81 (value -> literal .)
    SEMICOLON       reduce using rule 81 (value -> literal .)
    DOUBLEDOT       reduce using rule 81 (value -> literal .)


state 60

    (45) literal -> FLOAT . n_math_expression_1_float
    (9) n_math_expression_1_float -> .

    TIMES           reduce using rule 9 (n_math_expression_1_float -> .)
    DIVIDE          reduce using rule 9 (n_math_expression_1_float -> .)
    MODULUS         reduce using rule 9 (n_math_expression_1_float -> .)
    PLUS            reduce using rule 9 (n_math_expression_1_float -> .)
    MINUS           reduce using rule 9 (n_math_expression_1_float -> .)
    GREATERTHAN     reduce using rule 9 (n_math_expression_1_float -> .)
    LESSTHAN        reduce using rule 9 (n_math_expression_1_float -> .)
    EQUALEQUAL      reduce using rule 9 (n_math_expression_1_float -> .)
    LESSTHANOREQUAL reduce using rule 9 (n_math_expression_1_float -> .)
    GREATERTHANOREQUAL reduce using rule 9 (n_math_expression_1_float -> .)
    NOTEQUAL        reduce using rule 9 (n_math_expression_1_float -> .)
    OR              reduce using rule 9 (n_math_expression_1_float -> .)
    AND             reduce using rule 9 (n_math_expression_1_float -> .)
    COMMA           reduce using rule 9 (n_math_expression_1_float -> .)
    RPARENTHESIS    reduce using rule 9 (n_math_expression_1_float -> .)
    SEMICOLON       reduce using rule 9 (n_math_expression_1_float -> .)
    DOUBLEDOT       reduce using rule 9 (n_math_expression_1_float -> .)

    n_math_expression_1_float      shift and go to state 86

state 61

    (46) literal -> INT . n_math_expression_1_int
    (8) n_math_expression_1_int -> .

    TIMES           reduce using rule 8 (n_math_expression_1_int -> .)
    DIVIDE          reduce using rule 8 (n_math_expression_1_int -> .)
    MODULUS         reduce using rule 8 (n_math_expression_1_int -> .)
    PLUS            reduce using rule 8 (n_math_expression_1_int -> .)
    MINUS           reduce using rule 8 (n_math_expression_1_int -> .)
    GREATERTHAN     reduce using rule 8 (n_math_expression_1_int -> .)
    LESSTHAN        reduce using rule 8 (n_math_expression_1_int -> .)
    EQUALEQUAL      reduce using rule 8 (n_math_expression_1_int -> .)
    LESSTHANOREQUAL reduce using rule 8 (n_math_expression_1_int -> .)
    GREATERTHANOREQUAL reduce using rule 8 (n_math_expression_1_int -> .)
    NOTEQUAL        reduce using rule 8 (n_math_expression_1_int -> .)
    OR              reduce using rule 8 (n_math_expression_1_int -> .)
    AND             reduce using rule 8 (n_math_expression_1_int -> .)
    COMMA           reduce using rule 8 (n_math_expression_1_int -> .)
    RPARENTHESIS    reduce using rule 8 (n_math_expression_1_int -> .)
    SEMICOLON       reduce using rule 8 (n_math_expression_1_int -> .)
    DOUBLEDOT       reduce using rule 8 (n_math_expression_1_int -> .)

    n_math_expression_1_int        shift and go to state 87

state 62

    (47) literal -> STRING . n_math_expression_1_string
    (10) n_math_expression_1_string -> .

    TIMES           reduce using rule 10 (n_math_expression_1_string -> .)
    DIVIDE          reduce using rule 10 (n_math_expression_1_string -> .)
    MODULUS         reduce using rule 10 (n_math_expression_1_string -> .)
    PLUS            reduce using rule 10 (n_math_expression_1_string -> .)
    MINUS           reduce using rule 10 (n_math_expression_1_string -> .)
    GREATERTHAN     reduce using rule 10 (n_math_expression_1_string -> .)
    LESSTHAN        reduce using rule 10 (n_math_expression_1_string -> .)
    EQUALEQUAL      reduce using rule 10 (n_math_expression_1_string -> .)
    LESSTHANOREQUAL reduce using rule 10 (n_math_expression_1_string -> .)
    GREATERTHANOREQUAL reduce using rule 10 (n_math_expression_1_string -> .)
    NOTEQUAL        reduce using rule 10 (n_math_expression_1_string -> .)
    OR              reduce using rule 10 (n_math_expression_1_string -> .)
    AND             reduce using rule 10 (n_math_expression_1_string -> .)
    COMMA           reduce using rule 10 (n_math_expression_1_string -> .)
    RPARENTHESIS    reduce using rule 10 (n_math_expression_1_string -> .)
    SEMICOLON       reduce using rule 10 (n_math_expression_1_string -> .)
    DOUBLEDOT       reduce using rule 10 (n_math_expression_1_string -> .)

    n_math_expression_1_string     shift and go to state 88

state 63

    (98) condition_if -> IF LPARENTHESIS expression . RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2

    RPARENTHESIS    shift and go to state 89


state 64

    (97) forloop -> FOR LPARENTHESIS n_open_new_scope . assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (83) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (84) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (34) type -> . INT_TYPE n_seen_type
    (35) type -> . STRING_TYPE n_seen_type
    (36) type -> . DOUBLE_TYPE n_seen_type
    (37) type -> . FLOAT_TYPE n_seen_type
    (38) type -> . BOOL_TYPE n_seen_type

    NAME            shift and go to state 91
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    assign                         shift and go to state 90
    type                           shift and go to state 22

state 65

    (96) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS . expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (63) expression -> . expression_or
    (64) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (65) expression_or -> . expression_rel
    (66) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (67) expression_rel -> . exp
    (68) expression_rel -> . exp relational_operator exp n_math_expression_9
    (69) exp -> . termino n_math_expression_4
    (70) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (71) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (72) termino -> . factor n_math_expression_5
    (73) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (74) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (75) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (76) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (77) factor -> . PLUS value
    (78) factor -> . MINUS value
    (79) factor -> . value
    (80) value -> . function_call
    (81) value -> . literal
    (82) value -> . NAME n_variable_reference n_math_expression_1_name
    (54) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (45) literal -> . FLOAT n_math_expression_1_float
    (46) literal -> . INT n_math_expression_1_int
    (47) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 45
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    NAME            shift and go to state 44
    FLOAT           shift and go to state 60
    INT             shift and go to state 61
    STRING          shift and go to state 62

    expression                     shift and go to state 92
    expression_or                  shift and go to state 50
    expression_rel                 shift and go to state 51
    exp                            shift and go to state 52
    termino                        shift and go to state 53
    factor                         shift and go to state 56
    value                          shift and go to state 57
    function_call                  shift and go to state 58
    literal                        shift and go to state 59

state 66

    (83) assign -> type NAME n_variable_instantiate . n_math_expression_1_name EQUAL n_seen_equal_op expression
    (11) n_math_expression_1_name -> .

    EQUAL           reduce using rule 11 (n_math_expression_1_name -> .)

    n_math_expression_1_name       shift and go to state 93

state 67

    (53) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function . parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end
    (58) parameter_list -> . empty
    (59) parameter_list -> . parameter
    (60) parameter_list -> . parameter COMMA parameter_list
    (30) empty -> .
    (62) parameter -> . type NAME n_variable_instantiate_param
    (34) type -> . INT_TYPE n_seen_type
    (35) type -> . STRING_TYPE n_seen_type
    (36) type -> . DOUBLE_TYPE n_seen_type
    (37) type -> . FLOAT_TYPE n_seen_type
    (38) type -> . BOOL_TYPE n_seen_type

    DOUBLEDOT       reduce using rule 30 (empty -> .)
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    parameter_list                 shift and go to state 94
    empty                          shift and go to state 95
    parameter                      shift and go to state 96
    type                           shift and go to state 97

state 68

    (84) assign -> NAME n_variable_reference n_math_expression_1_name EQUAL . n_seen_equal_op expression
    (29) n_seen_equal_op -> .

    LPARENTHESIS    reduce using rule 29 (n_seen_equal_op -> .)
    PLUS            reduce using rule 29 (n_seen_equal_op -> .)
    MINUS           reduce using rule 29 (n_seen_equal_op -> .)
    NAME            reduce using rule 29 (n_seen_equal_op -> .)
    FLOAT           reduce using rule 29 (n_seen_equal_op -> .)
    INT             reduce using rule 29 (n_seen_equal_op -> .)
    STRING          reduce using rule 29 (n_seen_equal_op -> .)

    n_seen_equal_op                shift and go to state 98

state 69

    (82) value -> NAME n_variable_reference . n_math_expression_1_name
    (11) n_math_expression_1_name -> .

    TIMES           reduce using rule 11 (n_math_expression_1_name -> .)
    DIVIDE          reduce using rule 11 (n_math_expression_1_name -> .)
    MODULUS         reduce using rule 11 (n_math_expression_1_name -> .)
    PLUS            reduce using rule 11 (n_math_expression_1_name -> .)
    MINUS           reduce using rule 11 (n_math_expression_1_name -> .)
    GREATERTHAN     reduce using rule 11 (n_math_expression_1_name -> .)
    LESSTHAN        reduce using rule 11 (n_math_expression_1_name -> .)
    EQUALEQUAL      reduce using rule 11 (n_math_expression_1_name -> .)
    LESSTHANOREQUAL reduce using rule 11 (n_math_expression_1_name -> .)
    GREATERTHANOREQUAL reduce using rule 11 (n_math_expression_1_name -> .)
    NOTEQUAL        reduce using rule 11 (n_math_expression_1_name -> .)
    OR              reduce using rule 11 (n_math_expression_1_name -> .)
    AND             reduce using rule 11 (n_math_expression_1_name -> .)
    COMMA           reduce using rule 11 (n_math_expression_1_name -> .)
    RPARENTHESIS    reduce using rule 11 (n_math_expression_1_name -> .)
    SEMICOLON       reduce using rule 11 (n_math_expression_1_name -> .)
    DOUBLEDOT       reduce using rule 11 (n_math_expression_1_name -> .)

    n_math_expression_1_name       shift and go to state 99

state 70

    (76) factor -> LPARENTHESIS n_math_expression_6 . expression RPARENTHESIS n_math_expression_7
    (63) expression -> . expression_or
    (64) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (65) expression_or -> . expression_rel
    (66) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (67) expression_rel -> . exp
    (68) expression_rel -> . exp relational_operator exp n_math_expression_9
    (69) exp -> . termino n_math_expression_4
    (70) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (71) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (72) termino -> . factor n_math_expression_5
    (73) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (74) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (75) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (76) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (77) factor -> . PLUS value
    (78) factor -> . MINUS value
    (79) factor -> . value
    (80) value -> . function_call
    (81) value -> . literal
    (82) value -> . NAME n_variable_reference n_math_expression_1_name
    (54) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (45) literal -> . FLOAT n_math_expression_1_float
    (46) literal -> . INT n_math_expression_1_int
    (47) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 45
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    NAME            shift and go to state 44
    FLOAT           shift and go to state 60
    INT             shift and go to state 61
    STRING          shift and go to state 62

    expression                     shift and go to state 100
    expression_or                  shift and go to state 50
    expression_rel                 shift and go to state 51
    exp                            shift and go to state 52
    termino                        shift and go to state 53
    factor                         shift and go to state 56
    value                          shift and go to state 57
    function_call                  shift and go to state 58
    literal                        shift and go to state 59

state 71

    (54) function_call -> NAME LPARENTHESIS arg_list RPARENTHESIS .

    SEMICOLON       reduce using rule 54 (function_call -> NAME LPARENTHESIS arg_list RPARENTHESIS .)
    TIMES           reduce using rule 54 (function_call -> NAME LPARENTHESIS arg_list RPARENTHESIS .)
    DIVIDE          reduce using rule 54 (function_call -> NAME LPARENTHESIS arg_list RPARENTHESIS .)
    MODULUS         reduce using rule 54 (function_call -> NAME LPARENTHESIS arg_list RPARENTHESIS .)
    PLUS            reduce using rule 54 (function_call -> NAME LPARENTHESIS arg_list RPARENTHESIS .)
    MINUS           reduce using rule 54 (function_call -> NAME LPARENTHESIS arg_list RPARENTHESIS .)
    GREATERTHAN     reduce using rule 54 (function_call -> NAME LPARENTHESIS arg_list RPARENTHESIS .)
    LESSTHAN        reduce using rule 54 (function_call -> NAME LPARENTHESIS arg_list RPARENTHESIS .)
    EQUALEQUAL      reduce using rule 54 (function_call -> NAME LPARENTHESIS arg_list RPARENTHESIS .)
    LESSTHANOREQUAL reduce using rule 54 (function_call -> NAME LPARENTHESIS arg_list RPARENTHESIS .)
    GREATERTHANOREQUAL reduce using rule 54 (function_call -> NAME LPARENTHESIS arg_list RPARENTHESIS .)
    NOTEQUAL        reduce using rule 54 (function_call -> NAME LPARENTHESIS arg_list RPARENTHESIS .)
    OR              reduce using rule 54 (function_call -> NAME LPARENTHESIS arg_list RPARENTHESIS .)
    AND             reduce using rule 54 (function_call -> NAME LPARENTHESIS arg_list RPARENTHESIS .)
    COMMA           reduce using rule 54 (function_call -> NAME LPARENTHESIS arg_list RPARENTHESIS .)
    RPARENTHESIS    reduce using rule 54 (function_call -> NAME LPARENTHESIS arg_list RPARENTHESIS .)
    DOUBLEDOT       reduce using rule 54 (function_call -> NAME LPARENTHESIS arg_list RPARENTHESIS .)


state 72

    (57) arg_list -> arg COMMA . arg_list
    (55) arg_list -> . empty
    (56) arg_list -> . arg
    (57) arg_list -> . arg COMMA arg_list
    (30) empty -> .
    (61) arg -> . expression
    (63) expression -> . expression_or
    (64) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (65) expression_or -> . expression_rel
    (66) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (67) expression_rel -> . exp
    (68) expression_rel -> . exp relational_operator exp n_math_expression_9
    (69) exp -> . termino n_math_expression_4
    (70) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (71) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (72) termino -> . factor n_math_expression_5
    (73) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (74) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (75) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (76) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (77) factor -> . PLUS value
    (78) factor -> . MINUS value
    (79) factor -> . value
    (80) value -> . function_call
    (81) value -> . literal
    (82) value -> . NAME n_variable_reference n_math_expression_1_name
    (54) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (45) literal -> . FLOAT n_math_expression_1_float
    (46) literal -> . INT n_math_expression_1_int
    (47) literal -> . STRING n_math_expression_1_string

    RPARENTHESIS    reduce using rule 30 (empty -> .)
    LPARENTHESIS    shift and go to state 45
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    NAME            shift and go to state 44
    FLOAT           shift and go to state 60
    INT             shift and go to state 61
    STRING          shift and go to state 62

    arg                            shift and go to state 48
    arg_list                       shift and go to state 101
    empty                          shift and go to state 47
    expression                     shift and go to state 49
    expression_or                  shift and go to state 50
    expression_rel                 shift and go to state 51
    exp                            shift and go to state 52
    termino                        shift and go to state 53
    factor                         shift and go to state 56
    value                          shift and go to state 57
    function_call                  shift and go to state 58
    literal                        shift and go to state 59

state 73

    (64) expression -> expression_or AND . n_math_expression_10 expression n_math_expression_11
    (20) n_math_expression_10 -> .

    LPARENTHESIS    reduce using rule 20 (n_math_expression_10 -> .)
    PLUS            reduce using rule 20 (n_math_expression_10 -> .)
    MINUS           reduce using rule 20 (n_math_expression_10 -> .)
    NAME            reduce using rule 20 (n_math_expression_10 -> .)
    FLOAT           reduce using rule 20 (n_math_expression_10 -> .)
    INT             reduce using rule 20 (n_math_expression_10 -> .)
    STRING          reduce using rule 20 (n_math_expression_10 -> .)

    n_math_expression_10           shift and go to state 102

state 74

    (66) expression_or -> expression_rel OR . n_math_expression_10 expression_or n_math_expression_12
    (20) n_math_expression_10 -> .

    LPARENTHESIS    reduce using rule 20 (n_math_expression_10 -> .)
    PLUS            reduce using rule 20 (n_math_expression_10 -> .)
    MINUS           reduce using rule 20 (n_math_expression_10 -> .)
    NAME            reduce using rule 20 (n_math_expression_10 -> .)
    FLOAT           reduce using rule 20 (n_math_expression_10 -> .)
    INT             reduce using rule 20 (n_math_expression_10 -> .)
    STRING          reduce using rule 20 (n_math_expression_10 -> .)

    n_math_expression_10           shift and go to state 103

state 75

    (68) expression_rel -> exp relational_operator . exp n_math_expression_9
    (69) exp -> . termino n_math_expression_4
    (70) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (71) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (72) termino -> . factor n_math_expression_5
    (73) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (74) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (75) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (76) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (77) factor -> . PLUS value
    (78) factor -> . MINUS value
    (79) factor -> . value
    (80) value -> . function_call
    (81) value -> . literal
    (82) value -> . NAME n_variable_reference n_math_expression_1_name
    (54) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (45) literal -> . FLOAT n_math_expression_1_float
    (46) literal -> . INT n_math_expression_1_int
    (47) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 45
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    NAME            shift and go to state 44
    FLOAT           shift and go to state 60
    INT             shift and go to state 61
    STRING          shift and go to state 62

    exp                            shift and go to state 104
    termino                        shift and go to state 53
    factor                         shift and go to state 56
    value                          shift and go to state 57
    function_call                  shift and go to state 58
    literal                        shift and go to state 59

state 76

    (39) relational_operator -> GREATERTHAN . n_math_expression_8
    (18) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 18 (n_math_expression_8 -> .)
    PLUS            reduce using rule 18 (n_math_expression_8 -> .)
    MINUS           reduce using rule 18 (n_math_expression_8 -> .)
    NAME            reduce using rule 18 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 18 (n_math_expression_8 -> .)
    INT             reduce using rule 18 (n_math_expression_8 -> .)
    STRING          reduce using rule 18 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 105

state 77

    (40) relational_operator -> LESSTHAN . n_math_expression_8
    (18) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 18 (n_math_expression_8 -> .)
    PLUS            reduce using rule 18 (n_math_expression_8 -> .)
    MINUS           reduce using rule 18 (n_math_expression_8 -> .)
    NAME            reduce using rule 18 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 18 (n_math_expression_8 -> .)
    INT             reduce using rule 18 (n_math_expression_8 -> .)
    STRING          reduce using rule 18 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 106

state 78

    (41) relational_operator -> EQUALEQUAL . n_math_expression_8
    (18) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 18 (n_math_expression_8 -> .)
    PLUS            reduce using rule 18 (n_math_expression_8 -> .)
    MINUS           reduce using rule 18 (n_math_expression_8 -> .)
    NAME            reduce using rule 18 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 18 (n_math_expression_8 -> .)
    INT             reduce using rule 18 (n_math_expression_8 -> .)
    STRING          reduce using rule 18 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 107

state 79

    (42) relational_operator -> LESSTHANOREQUAL . n_math_expression_8
    (18) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 18 (n_math_expression_8 -> .)
    PLUS            reduce using rule 18 (n_math_expression_8 -> .)
    MINUS           reduce using rule 18 (n_math_expression_8 -> .)
    NAME            reduce using rule 18 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 18 (n_math_expression_8 -> .)
    INT             reduce using rule 18 (n_math_expression_8 -> .)
    STRING          reduce using rule 18 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 108

state 80

    (43) relational_operator -> GREATERTHANOREQUAL . n_math_expression_8
    (18) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 18 (n_math_expression_8 -> .)
    PLUS            reduce using rule 18 (n_math_expression_8 -> .)
    MINUS           reduce using rule 18 (n_math_expression_8 -> .)
    NAME            reduce using rule 18 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 18 (n_math_expression_8 -> .)
    INT             reduce using rule 18 (n_math_expression_8 -> .)
    STRING          reduce using rule 18 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 109

state 81

    (44) relational_operator -> NOTEQUAL . n_math_expression_8
    (18) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 18 (n_math_expression_8 -> .)
    PLUS            reduce using rule 18 (n_math_expression_8 -> .)
    MINUS           reduce using rule 18 (n_math_expression_8 -> .)
    NAME            reduce using rule 18 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 18 (n_math_expression_8 -> .)
    INT             reduce using rule 18 (n_math_expression_8 -> .)
    STRING          reduce using rule 18 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 110

state 82

    (69) exp -> termino n_math_expression_4 .
    (70) exp -> termino n_math_expression_4 . PLUS n_math_expression_2 exp
    (71) exp -> termino n_math_expression_4 . MINUS n_math_expression_2 exp

    GREATERTHAN     reduce using rule 69 (exp -> termino n_math_expression_4 .)
    LESSTHAN        reduce using rule 69 (exp -> termino n_math_expression_4 .)
    EQUALEQUAL      reduce using rule 69 (exp -> termino n_math_expression_4 .)
    LESSTHANOREQUAL reduce using rule 69 (exp -> termino n_math_expression_4 .)
    GREATERTHANOREQUAL reduce using rule 69 (exp -> termino n_math_expression_4 .)
    NOTEQUAL        reduce using rule 69 (exp -> termino n_math_expression_4 .)
    OR              reduce using rule 69 (exp -> termino n_math_expression_4 .)
    AND             reduce using rule 69 (exp -> termino n_math_expression_4 .)
    COMMA           reduce using rule 69 (exp -> termino n_math_expression_4 .)
    RPARENTHESIS    reduce using rule 69 (exp -> termino n_math_expression_4 .)
    SEMICOLON       reduce using rule 69 (exp -> termino n_math_expression_4 .)
    DOUBLEDOT       reduce using rule 69 (exp -> termino n_math_expression_4 .)
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112


state 83

    (77) factor -> PLUS value .

    TIMES           reduce using rule 77 (factor -> PLUS value .)
    DIVIDE          reduce using rule 77 (factor -> PLUS value .)
    MODULUS         reduce using rule 77 (factor -> PLUS value .)
    PLUS            reduce using rule 77 (factor -> PLUS value .)
    MINUS           reduce using rule 77 (factor -> PLUS value .)
    GREATERTHAN     reduce using rule 77 (factor -> PLUS value .)
    LESSTHAN        reduce using rule 77 (factor -> PLUS value .)
    EQUALEQUAL      reduce using rule 77 (factor -> PLUS value .)
    LESSTHANOREQUAL reduce using rule 77 (factor -> PLUS value .)
    GREATERTHANOREQUAL reduce using rule 77 (factor -> PLUS value .)
    NOTEQUAL        reduce using rule 77 (factor -> PLUS value .)
    OR              reduce using rule 77 (factor -> PLUS value .)
    AND             reduce using rule 77 (factor -> PLUS value .)
    COMMA           reduce using rule 77 (factor -> PLUS value .)
    RPARENTHESIS    reduce using rule 77 (factor -> PLUS value .)
    SEMICOLON       reduce using rule 77 (factor -> PLUS value .)
    DOUBLEDOT       reduce using rule 77 (factor -> PLUS value .)


state 84

    (78) factor -> MINUS value .

    TIMES           reduce using rule 78 (factor -> MINUS value .)
    DIVIDE          reduce using rule 78 (factor -> MINUS value .)
    MODULUS         reduce using rule 78 (factor -> MINUS value .)
    PLUS            reduce using rule 78 (factor -> MINUS value .)
    MINUS           reduce using rule 78 (factor -> MINUS value .)
    GREATERTHAN     reduce using rule 78 (factor -> MINUS value .)
    LESSTHAN        reduce using rule 78 (factor -> MINUS value .)
    EQUALEQUAL      reduce using rule 78 (factor -> MINUS value .)
    LESSTHANOREQUAL reduce using rule 78 (factor -> MINUS value .)
    GREATERTHANOREQUAL reduce using rule 78 (factor -> MINUS value .)
    NOTEQUAL        reduce using rule 78 (factor -> MINUS value .)
    OR              reduce using rule 78 (factor -> MINUS value .)
    AND             reduce using rule 78 (factor -> MINUS value .)
    COMMA           reduce using rule 78 (factor -> MINUS value .)
    RPARENTHESIS    reduce using rule 78 (factor -> MINUS value .)
    SEMICOLON       reduce using rule 78 (factor -> MINUS value .)
    DOUBLEDOT       reduce using rule 78 (factor -> MINUS value .)


state 85

    (72) termino -> factor n_math_expression_5 .
    (73) termino -> factor n_math_expression_5 . TIMES n_math_expression_3 termino
    (74) termino -> factor n_math_expression_5 . DIVIDE n_math_expression_3 termino
    (75) termino -> factor n_math_expression_5 . MODULUS n_math_expression_3 termino

    PLUS            reduce using rule 72 (termino -> factor n_math_expression_5 .)
    MINUS           reduce using rule 72 (termino -> factor n_math_expression_5 .)
    GREATERTHAN     reduce using rule 72 (termino -> factor n_math_expression_5 .)
    LESSTHAN        reduce using rule 72 (termino -> factor n_math_expression_5 .)
    EQUALEQUAL      reduce using rule 72 (termino -> factor n_math_expression_5 .)
    LESSTHANOREQUAL reduce using rule 72 (termino -> factor n_math_expression_5 .)
    GREATERTHANOREQUAL reduce using rule 72 (termino -> factor n_math_expression_5 .)
    NOTEQUAL        reduce using rule 72 (termino -> factor n_math_expression_5 .)
    OR              reduce using rule 72 (termino -> factor n_math_expression_5 .)
    AND             reduce using rule 72 (termino -> factor n_math_expression_5 .)
    COMMA           reduce using rule 72 (termino -> factor n_math_expression_5 .)
    RPARENTHESIS    reduce using rule 72 (termino -> factor n_math_expression_5 .)
    SEMICOLON       reduce using rule 72 (termino -> factor n_math_expression_5 .)
    DOUBLEDOT       reduce using rule 72 (termino -> factor n_math_expression_5 .)
    TIMES           shift and go to state 113
    DIVIDE          shift and go to state 114
    MODULUS         shift and go to state 115


state 86

    (45) literal -> FLOAT n_math_expression_1_float .

    TIMES           reduce using rule 45 (literal -> FLOAT n_math_expression_1_float .)
    DIVIDE          reduce using rule 45 (literal -> FLOAT n_math_expression_1_float .)
    MODULUS         reduce using rule 45 (literal -> FLOAT n_math_expression_1_float .)
    PLUS            reduce using rule 45 (literal -> FLOAT n_math_expression_1_float .)
    MINUS           reduce using rule 45 (literal -> FLOAT n_math_expression_1_float .)
    GREATERTHAN     reduce using rule 45 (literal -> FLOAT n_math_expression_1_float .)
    LESSTHAN        reduce using rule 45 (literal -> FLOAT n_math_expression_1_float .)
    EQUALEQUAL      reduce using rule 45 (literal -> FLOAT n_math_expression_1_float .)
    LESSTHANOREQUAL reduce using rule 45 (literal -> FLOAT n_math_expression_1_float .)
    GREATERTHANOREQUAL reduce using rule 45 (literal -> FLOAT n_math_expression_1_float .)
    NOTEQUAL        reduce using rule 45 (literal -> FLOAT n_math_expression_1_float .)
    OR              reduce using rule 45 (literal -> FLOAT n_math_expression_1_float .)
    AND             reduce using rule 45 (literal -> FLOAT n_math_expression_1_float .)
    COMMA           reduce using rule 45 (literal -> FLOAT n_math_expression_1_float .)
    RPARENTHESIS    reduce using rule 45 (literal -> FLOAT n_math_expression_1_float .)
    SEMICOLON       reduce using rule 45 (literal -> FLOAT n_math_expression_1_float .)
    DOUBLEDOT       reduce using rule 45 (literal -> FLOAT n_math_expression_1_float .)


state 87

    (46) literal -> INT n_math_expression_1_int .

    TIMES           reduce using rule 46 (literal -> INT n_math_expression_1_int .)
    DIVIDE          reduce using rule 46 (literal -> INT n_math_expression_1_int .)
    MODULUS         reduce using rule 46 (literal -> INT n_math_expression_1_int .)
    PLUS            reduce using rule 46 (literal -> INT n_math_expression_1_int .)
    MINUS           reduce using rule 46 (literal -> INT n_math_expression_1_int .)
    GREATERTHAN     reduce using rule 46 (literal -> INT n_math_expression_1_int .)
    LESSTHAN        reduce using rule 46 (literal -> INT n_math_expression_1_int .)
    EQUALEQUAL      reduce using rule 46 (literal -> INT n_math_expression_1_int .)
    LESSTHANOREQUAL reduce using rule 46 (literal -> INT n_math_expression_1_int .)
    GREATERTHANOREQUAL reduce using rule 46 (literal -> INT n_math_expression_1_int .)
    NOTEQUAL        reduce using rule 46 (literal -> INT n_math_expression_1_int .)
    OR              reduce using rule 46 (literal -> INT n_math_expression_1_int .)
    AND             reduce using rule 46 (literal -> INT n_math_expression_1_int .)
    COMMA           reduce using rule 46 (literal -> INT n_math_expression_1_int .)
    RPARENTHESIS    reduce using rule 46 (literal -> INT n_math_expression_1_int .)
    SEMICOLON       reduce using rule 46 (literal -> INT n_math_expression_1_int .)
    DOUBLEDOT       reduce using rule 46 (literal -> INT n_math_expression_1_int .)


state 88

    (47) literal -> STRING n_math_expression_1_string .

    TIMES           reduce using rule 47 (literal -> STRING n_math_expression_1_string .)
    DIVIDE          reduce using rule 47 (literal -> STRING n_math_expression_1_string .)
    MODULUS         reduce using rule 47 (literal -> STRING n_math_expression_1_string .)
    PLUS            reduce using rule 47 (literal -> STRING n_math_expression_1_string .)
    MINUS           reduce using rule 47 (literal -> STRING n_math_expression_1_string .)
    GREATERTHAN     reduce using rule 47 (literal -> STRING n_math_expression_1_string .)
    LESSTHAN        reduce using rule 47 (literal -> STRING n_math_expression_1_string .)
    EQUALEQUAL      reduce using rule 47 (literal -> STRING n_math_expression_1_string .)
    LESSTHANOREQUAL reduce using rule 47 (literal -> STRING n_math_expression_1_string .)
    GREATERTHANOREQUAL reduce using rule 47 (literal -> STRING n_math_expression_1_string .)
    NOTEQUAL        reduce using rule 47 (literal -> STRING n_math_expression_1_string .)
    OR              reduce using rule 47 (literal -> STRING n_math_expression_1_string .)
    AND             reduce using rule 47 (literal -> STRING n_math_expression_1_string .)
    COMMA           reduce using rule 47 (literal -> STRING n_math_expression_1_string .)
    RPARENTHESIS    reduce using rule 47 (literal -> STRING n_math_expression_1_string .)
    SEMICOLON       reduce using rule 47 (literal -> STRING n_math_expression_1_string .)
    DOUBLEDOT       reduce using rule 47 (literal -> STRING n_math_expression_1_string .)


state 89

    (98) condition_if -> IF LPARENTHESIS expression RPARENTHESIS . LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2

    LCURLY          shift and go to state 116


state 90

    (97) forloop -> FOR LPARENTHESIS n_open_new_scope assign . DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope

    DOUBLEDOT       shift and go to state 117


state 91

    (84) assign -> NAME . n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (5) n_variable_reference -> .

    EQUAL           reduce using rule 5 (n_variable_reference -> .)

    n_variable_reference           shift and go to state 31

state 92

    (96) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression . RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope

    RPARENTHESIS    shift and go to state 118


state 93

    (83) assign -> type NAME n_variable_instantiate n_math_expression_1_name . EQUAL n_seen_equal_op expression

    EQUAL           shift and go to state 119


state 94

    (53) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list . DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end

    DOUBLEDOT       shift and go to state 120


state 95

    (58) parameter_list -> empty .

    DOUBLEDOT       reduce using rule 58 (parameter_list -> empty .)


state 96

    (59) parameter_list -> parameter .
    (60) parameter_list -> parameter . COMMA parameter_list

    DOUBLEDOT       reduce using rule 59 (parameter_list -> parameter .)
    COMMA           shift and go to state 121


state 97

    (62) parameter -> type . NAME n_variable_instantiate_param

    NAME            shift and go to state 122


state 98

    (84) assign -> NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op . expression
    (63) expression -> . expression_or
    (64) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (65) expression_or -> . expression_rel
    (66) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (67) expression_rel -> . exp
    (68) expression_rel -> . exp relational_operator exp n_math_expression_9
    (69) exp -> . termino n_math_expression_4
    (70) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (71) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (72) termino -> . factor n_math_expression_5
    (73) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (74) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (75) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (76) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (77) factor -> . PLUS value
    (78) factor -> . MINUS value
    (79) factor -> . value
    (80) value -> . function_call
    (81) value -> . literal
    (82) value -> . NAME n_variable_reference n_math_expression_1_name
    (54) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (45) literal -> . FLOAT n_math_expression_1_float
    (46) literal -> . INT n_math_expression_1_int
    (47) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 45
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    NAME            shift and go to state 44
    FLOAT           shift and go to state 60
    INT             shift and go to state 61
    STRING          shift and go to state 62

    expression                     shift and go to state 123
    expression_or                  shift and go to state 50
    expression_rel                 shift and go to state 51
    exp                            shift and go to state 52
    termino                        shift and go to state 53
    factor                         shift and go to state 56
    value                          shift and go to state 57
    function_call                  shift and go to state 58
    literal                        shift and go to state 59

state 99

    (82) value -> NAME n_variable_reference n_math_expression_1_name .

    TIMES           reduce using rule 82 (value -> NAME n_variable_reference n_math_expression_1_name .)
    DIVIDE          reduce using rule 82 (value -> NAME n_variable_reference n_math_expression_1_name .)
    MODULUS         reduce using rule 82 (value -> NAME n_variable_reference n_math_expression_1_name .)
    PLUS            reduce using rule 82 (value -> NAME n_variable_reference n_math_expression_1_name .)
    MINUS           reduce using rule 82 (value -> NAME n_variable_reference n_math_expression_1_name .)
    GREATERTHAN     reduce using rule 82 (value -> NAME n_variable_reference n_math_expression_1_name .)
    LESSTHAN        reduce using rule 82 (value -> NAME n_variable_reference n_math_expression_1_name .)
    EQUALEQUAL      reduce using rule 82 (value -> NAME n_variable_reference n_math_expression_1_name .)
    LESSTHANOREQUAL reduce using rule 82 (value -> NAME n_variable_reference n_math_expression_1_name .)
    GREATERTHANOREQUAL reduce using rule 82 (value -> NAME n_variable_reference n_math_expression_1_name .)
    NOTEQUAL        reduce using rule 82 (value -> NAME n_variable_reference n_math_expression_1_name .)
    OR              reduce using rule 82 (value -> NAME n_variable_reference n_math_expression_1_name .)
    AND             reduce using rule 82 (value -> NAME n_variable_reference n_math_expression_1_name .)
    COMMA           reduce using rule 82 (value -> NAME n_variable_reference n_math_expression_1_name .)
    RPARENTHESIS    reduce using rule 82 (value -> NAME n_variable_reference n_math_expression_1_name .)
    SEMICOLON       reduce using rule 82 (value -> NAME n_variable_reference n_math_expression_1_name .)
    DOUBLEDOT       reduce using rule 82 (value -> NAME n_variable_reference n_math_expression_1_name .)


state 100

    (76) factor -> LPARENTHESIS n_math_expression_6 expression . RPARENTHESIS n_math_expression_7

    RPARENTHESIS    shift and go to state 124


state 101

    (57) arg_list -> arg COMMA arg_list .

    RPARENTHESIS    reduce using rule 57 (arg_list -> arg COMMA arg_list .)


state 102

    (64) expression -> expression_or AND n_math_expression_10 . expression n_math_expression_11
    (63) expression -> . expression_or
    (64) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (65) expression_or -> . expression_rel
    (66) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (67) expression_rel -> . exp
    (68) expression_rel -> . exp relational_operator exp n_math_expression_9
    (69) exp -> . termino n_math_expression_4
    (70) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (71) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (72) termino -> . factor n_math_expression_5
    (73) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (74) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (75) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (76) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (77) factor -> . PLUS value
    (78) factor -> . MINUS value
    (79) factor -> . value
    (80) value -> . function_call
    (81) value -> . literal
    (82) value -> . NAME n_variable_reference n_math_expression_1_name
    (54) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (45) literal -> . FLOAT n_math_expression_1_float
    (46) literal -> . INT n_math_expression_1_int
    (47) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 45
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    NAME            shift and go to state 44
    FLOAT           shift and go to state 60
    INT             shift and go to state 61
    STRING          shift and go to state 62

    expression_or                  shift and go to state 50
    expression                     shift and go to state 125
    expression_rel                 shift and go to state 51
    exp                            shift and go to state 52
    termino                        shift and go to state 53
    factor                         shift and go to state 56
    value                          shift and go to state 57
    function_call                  shift and go to state 58
    literal                        shift and go to state 59

state 103

    (66) expression_or -> expression_rel OR n_math_expression_10 . expression_or n_math_expression_12
    (65) expression_or -> . expression_rel
    (66) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (67) expression_rel -> . exp
    (68) expression_rel -> . exp relational_operator exp n_math_expression_9
    (69) exp -> . termino n_math_expression_4
    (70) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (71) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (72) termino -> . factor n_math_expression_5
    (73) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (74) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (75) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (76) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (77) factor -> . PLUS value
    (78) factor -> . MINUS value
    (79) factor -> . value
    (80) value -> . function_call
    (81) value -> . literal
    (82) value -> . NAME n_variable_reference n_math_expression_1_name
    (54) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (45) literal -> . FLOAT n_math_expression_1_float
    (46) literal -> . INT n_math_expression_1_int
    (47) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 45
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    NAME            shift and go to state 44
    FLOAT           shift and go to state 60
    INT             shift and go to state 61
    STRING          shift and go to state 62

    expression_rel                 shift and go to state 51
    expression_or                  shift and go to state 126
    exp                            shift and go to state 52
    termino                        shift and go to state 53
    factor                         shift and go to state 56
    value                          shift and go to state 57
    function_call                  shift and go to state 58
    literal                        shift and go to state 59

state 104

    (68) expression_rel -> exp relational_operator exp . n_math_expression_9
    (19) n_math_expression_9 -> .

    OR              reduce using rule 19 (n_math_expression_9 -> .)
    AND             reduce using rule 19 (n_math_expression_9 -> .)
    COMMA           reduce using rule 19 (n_math_expression_9 -> .)
    RPARENTHESIS    reduce using rule 19 (n_math_expression_9 -> .)
    SEMICOLON       reduce using rule 19 (n_math_expression_9 -> .)
    DOUBLEDOT       reduce using rule 19 (n_math_expression_9 -> .)

    n_math_expression_9            shift and go to state 127

state 105

    (39) relational_operator -> GREATERTHAN n_math_expression_8 .

    LPARENTHESIS    reduce using rule 39 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    PLUS            reduce using rule 39 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    MINUS           reduce using rule 39 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    NAME            reduce using rule 39 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    FLOAT           reduce using rule 39 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    INT             reduce using rule 39 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    STRING          reduce using rule 39 (relational_operator -> GREATERTHAN n_math_expression_8 .)


state 106

    (40) relational_operator -> LESSTHAN n_math_expression_8 .

    LPARENTHESIS    reduce using rule 40 (relational_operator -> LESSTHAN n_math_expression_8 .)
    PLUS            reduce using rule 40 (relational_operator -> LESSTHAN n_math_expression_8 .)
    MINUS           reduce using rule 40 (relational_operator -> LESSTHAN n_math_expression_8 .)
    NAME            reduce using rule 40 (relational_operator -> LESSTHAN n_math_expression_8 .)
    FLOAT           reduce using rule 40 (relational_operator -> LESSTHAN n_math_expression_8 .)
    INT             reduce using rule 40 (relational_operator -> LESSTHAN n_math_expression_8 .)
    STRING          reduce using rule 40 (relational_operator -> LESSTHAN n_math_expression_8 .)


state 107

    (41) relational_operator -> EQUALEQUAL n_math_expression_8 .

    LPARENTHESIS    reduce using rule 41 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    PLUS            reduce using rule 41 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    MINUS           reduce using rule 41 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    NAME            reduce using rule 41 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    FLOAT           reduce using rule 41 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    INT             reduce using rule 41 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    STRING          reduce using rule 41 (relational_operator -> EQUALEQUAL n_math_expression_8 .)


state 108

    (42) relational_operator -> LESSTHANOREQUAL n_math_expression_8 .

    LPARENTHESIS    reduce using rule 42 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    PLUS            reduce using rule 42 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    MINUS           reduce using rule 42 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    NAME            reduce using rule 42 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    FLOAT           reduce using rule 42 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    INT             reduce using rule 42 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    STRING          reduce using rule 42 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)


state 109

    (43) relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .

    LPARENTHESIS    reduce using rule 43 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    PLUS            reduce using rule 43 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    MINUS           reduce using rule 43 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    NAME            reduce using rule 43 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    FLOAT           reduce using rule 43 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    INT             reduce using rule 43 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    STRING          reduce using rule 43 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)


state 110

    (44) relational_operator -> NOTEQUAL n_math_expression_8 .

    LPARENTHESIS    reduce using rule 44 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    PLUS            reduce using rule 44 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    MINUS           reduce using rule 44 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    NAME            reduce using rule 44 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    FLOAT           reduce using rule 44 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    INT             reduce using rule 44 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    STRING          reduce using rule 44 (relational_operator -> NOTEQUAL n_math_expression_8 .)


state 111

    (70) exp -> termino n_math_expression_4 PLUS . n_math_expression_2 exp
    (12) n_math_expression_2 -> .

    LPARENTHESIS    reduce using rule 12 (n_math_expression_2 -> .)
    PLUS            reduce using rule 12 (n_math_expression_2 -> .)
    MINUS           reduce using rule 12 (n_math_expression_2 -> .)
    NAME            reduce using rule 12 (n_math_expression_2 -> .)
    FLOAT           reduce using rule 12 (n_math_expression_2 -> .)
    INT             reduce using rule 12 (n_math_expression_2 -> .)
    STRING          reduce using rule 12 (n_math_expression_2 -> .)

    n_math_expression_2            shift and go to state 128

state 112

    (71) exp -> termino n_math_expression_4 MINUS . n_math_expression_2 exp
    (12) n_math_expression_2 -> .

    LPARENTHESIS    reduce using rule 12 (n_math_expression_2 -> .)
    PLUS            reduce using rule 12 (n_math_expression_2 -> .)
    MINUS           reduce using rule 12 (n_math_expression_2 -> .)
    NAME            reduce using rule 12 (n_math_expression_2 -> .)
    FLOAT           reduce using rule 12 (n_math_expression_2 -> .)
    INT             reduce using rule 12 (n_math_expression_2 -> .)
    STRING          reduce using rule 12 (n_math_expression_2 -> .)

    n_math_expression_2            shift and go to state 129

state 113

    (73) termino -> factor n_math_expression_5 TIMES . n_math_expression_3 termino
    (13) n_math_expression_3 -> .

    LPARENTHESIS    reduce using rule 13 (n_math_expression_3 -> .)
    PLUS            reduce using rule 13 (n_math_expression_3 -> .)
    MINUS           reduce using rule 13 (n_math_expression_3 -> .)
    NAME            reduce using rule 13 (n_math_expression_3 -> .)
    FLOAT           reduce using rule 13 (n_math_expression_3 -> .)
    INT             reduce using rule 13 (n_math_expression_3 -> .)
    STRING          reduce using rule 13 (n_math_expression_3 -> .)

    n_math_expression_3            shift and go to state 130

state 114

    (74) termino -> factor n_math_expression_5 DIVIDE . n_math_expression_3 termino
    (13) n_math_expression_3 -> .

    LPARENTHESIS    reduce using rule 13 (n_math_expression_3 -> .)
    PLUS            reduce using rule 13 (n_math_expression_3 -> .)
    MINUS           reduce using rule 13 (n_math_expression_3 -> .)
    NAME            reduce using rule 13 (n_math_expression_3 -> .)
    FLOAT           reduce using rule 13 (n_math_expression_3 -> .)
    INT             reduce using rule 13 (n_math_expression_3 -> .)
    STRING          reduce using rule 13 (n_math_expression_3 -> .)

    n_math_expression_3            shift and go to state 131

state 115

    (75) termino -> factor n_math_expression_5 MODULUS . n_math_expression_3 termino
    (13) n_math_expression_3 -> .

    LPARENTHESIS    reduce using rule 13 (n_math_expression_3 -> .)
    PLUS            reduce using rule 13 (n_math_expression_3 -> .)
    MINUS           reduce using rule 13 (n_math_expression_3 -> .)
    NAME            reduce using rule 13 (n_math_expression_3 -> .)
    FLOAT           reduce using rule 13 (n_math_expression_3 -> .)
    INT             reduce using rule 13 (n_math_expression_3 -> .)
    STRING          reduce using rule 13 (n_math_expression_3 -> .)

    n_math_expression_3            shift and go to state 132

state 116

    (98) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY . n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (23) n_two_way_conditional_1 -> .

    IF              reduce using rule 23 (n_two_way_conditional_1 -> .)
    FOR             reduce using rule 23 (n_two_way_conditional_1 -> .)
    WHILE           reduce using rule 23 (n_two_way_conditional_1 -> .)
    NAME            reduce using rule 23 (n_two_way_conditional_1 -> .)
    INT_TYPE        reduce using rule 23 (n_two_way_conditional_1 -> .)
    STRING_TYPE     reduce using rule 23 (n_two_way_conditional_1 -> .)
    DOUBLE_TYPE     reduce using rule 23 (n_two_way_conditional_1 -> .)
    FLOAT_TYPE      reduce using rule 23 (n_two_way_conditional_1 -> .)
    BOOL_TYPE       reduce using rule 23 (n_two_way_conditional_1 -> .)
    RCURLY          reduce using rule 23 (n_two_way_conditional_1 -> .)
    FUNCTION        reduce using rule 23 (n_two_way_conditional_1 -> .)

    n_two_way_conditional_1        shift and go to state 133

state 117

    (97) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT . expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (63) expression -> . expression_or
    (64) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (65) expression_or -> . expression_rel
    (66) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (67) expression_rel -> . exp
    (68) expression_rel -> . exp relational_operator exp n_math_expression_9
    (69) exp -> . termino n_math_expression_4
    (70) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (71) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (72) termino -> . factor n_math_expression_5
    (73) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (74) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (75) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (76) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (77) factor -> . PLUS value
    (78) factor -> . MINUS value
    (79) factor -> . value
    (80) value -> . function_call
    (81) value -> . literal
    (82) value -> . NAME n_variable_reference n_math_expression_1_name
    (54) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (45) literal -> . FLOAT n_math_expression_1_float
    (46) literal -> . INT n_math_expression_1_int
    (47) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 45
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    NAME            shift and go to state 44
    FLOAT           shift and go to state 60
    INT             shift and go to state 61
    STRING          shift and go to state 62

    expression                     shift and go to state 134
    expression_or                  shift and go to state 50
    expression_rel                 shift and go to state 51
    exp                            shift and go to state 52
    termino                        shift and go to state 53
    factor                         shift and go to state 56
    value                          shift and go to state 57
    function_call                  shift and go to state 58
    literal                        shift and go to state 59

state 118

    (96) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS . p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (27) p_n_pre_condition_loop_2 -> .

    LCURLY          reduce using rule 27 (p_n_pre_condition_loop_2 -> .)

    p_n_pre_condition_loop_2       shift and go to state 135

state 119

    (83) assign -> type NAME n_variable_instantiate n_math_expression_1_name EQUAL . n_seen_equal_op expression
    (29) n_seen_equal_op -> .

    LPARENTHESIS    reduce using rule 29 (n_seen_equal_op -> .)
    PLUS            reduce using rule 29 (n_seen_equal_op -> .)
    MINUS           reduce using rule 29 (n_seen_equal_op -> .)
    NAME            reduce using rule 29 (n_seen_equal_op -> .)
    FLOAT           reduce using rule 29 (n_seen_equal_op -> .)
    INT             reduce using rule 29 (n_seen_equal_op -> .)
    STRING          reduce using rule 29 (n_seen_equal_op -> .)

    n_seen_equal_op                shift and go to state 136

state 120

    (53) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT . function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end
    (48) function_type -> . type
    (49) function_type -> . VOID
    (34) type -> . INT_TYPE n_seen_type
    (35) type -> . STRING_TYPE n_seen_type
    (36) type -> . DOUBLE_TYPE n_seen_type
    (37) type -> . FLOAT_TYPE n_seen_type
    (38) type -> . BOOL_TYPE n_seen_type

    VOID            shift and go to state 139
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    function_type                  shift and go to state 137
    type                           shift and go to state 138

state 121

    (60) parameter_list -> parameter COMMA . parameter_list
    (58) parameter_list -> . empty
    (59) parameter_list -> . parameter
    (60) parameter_list -> . parameter COMMA parameter_list
    (30) empty -> .
    (62) parameter -> . type NAME n_variable_instantiate_param
    (34) type -> . INT_TYPE n_seen_type
    (35) type -> . STRING_TYPE n_seen_type
    (36) type -> . DOUBLE_TYPE n_seen_type
    (37) type -> . FLOAT_TYPE n_seen_type
    (38) type -> . BOOL_TYPE n_seen_type

    DOUBLEDOT       reduce using rule 30 (empty -> .)
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    parameter                      shift and go to state 96
    parameter_list                 shift and go to state 140
    empty                          shift and go to state 95
    type                           shift and go to state 97

state 122

    (62) parameter -> type NAME . n_variable_instantiate_param
    (7) n_variable_instantiate_param -> .

    COMMA           reduce using rule 7 (n_variable_instantiate_param -> .)
    DOUBLEDOT       reduce using rule 7 (n_variable_instantiate_param -> .)

    n_variable_instantiate_param   shift and go to state 141

state 123

    (84) assign -> NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression .

    SEMICOLON       reduce using rule 84 (assign -> NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression .)
    DOUBLEDOT       reduce using rule 84 (assign -> NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression .)
    RPARENTHESIS    reduce using rule 84 (assign -> NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression .)


state 124

    (76) factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS . n_math_expression_7
    (17) n_math_expression_7 -> .

    TIMES           reduce using rule 17 (n_math_expression_7 -> .)
    DIVIDE          reduce using rule 17 (n_math_expression_7 -> .)
    MODULUS         reduce using rule 17 (n_math_expression_7 -> .)
    PLUS            reduce using rule 17 (n_math_expression_7 -> .)
    MINUS           reduce using rule 17 (n_math_expression_7 -> .)
    GREATERTHAN     reduce using rule 17 (n_math_expression_7 -> .)
    LESSTHAN        reduce using rule 17 (n_math_expression_7 -> .)
    EQUALEQUAL      reduce using rule 17 (n_math_expression_7 -> .)
    LESSTHANOREQUAL reduce using rule 17 (n_math_expression_7 -> .)
    GREATERTHANOREQUAL reduce using rule 17 (n_math_expression_7 -> .)
    NOTEQUAL        reduce using rule 17 (n_math_expression_7 -> .)
    OR              reduce using rule 17 (n_math_expression_7 -> .)
    AND             reduce using rule 17 (n_math_expression_7 -> .)
    COMMA           reduce using rule 17 (n_math_expression_7 -> .)
    RPARENTHESIS    reduce using rule 17 (n_math_expression_7 -> .)
    SEMICOLON       reduce using rule 17 (n_math_expression_7 -> .)
    DOUBLEDOT       reduce using rule 17 (n_math_expression_7 -> .)

    n_math_expression_7            shift and go to state 142

state 125

    (64) expression -> expression_or AND n_math_expression_10 expression . n_math_expression_11
    (21) n_math_expression_11 -> .

    COMMA           reduce using rule 21 (n_math_expression_11 -> .)
    RPARENTHESIS    reduce using rule 21 (n_math_expression_11 -> .)
    SEMICOLON       reduce using rule 21 (n_math_expression_11 -> .)
    DOUBLEDOT       reduce using rule 21 (n_math_expression_11 -> .)

    n_math_expression_11           shift and go to state 143

state 126

    (66) expression_or -> expression_rel OR n_math_expression_10 expression_or . n_math_expression_12
    (22) n_math_expression_12 -> .

    AND             reduce using rule 22 (n_math_expression_12 -> .)
    COMMA           reduce using rule 22 (n_math_expression_12 -> .)
    RPARENTHESIS    reduce using rule 22 (n_math_expression_12 -> .)
    SEMICOLON       reduce using rule 22 (n_math_expression_12 -> .)
    DOUBLEDOT       reduce using rule 22 (n_math_expression_12 -> .)

    n_math_expression_12           shift and go to state 144

state 127

    (68) expression_rel -> exp relational_operator exp n_math_expression_9 .

    OR              reduce using rule 68 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    AND             reduce using rule 68 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    COMMA           reduce using rule 68 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    RPARENTHESIS    reduce using rule 68 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    SEMICOLON       reduce using rule 68 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    DOUBLEDOT       reduce using rule 68 (expression_rel -> exp relational_operator exp n_math_expression_9 .)


state 128

    (70) exp -> termino n_math_expression_4 PLUS n_math_expression_2 . exp
    (69) exp -> . termino n_math_expression_4
    (70) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (71) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (72) termino -> . factor n_math_expression_5
    (73) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (74) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (75) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (76) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (77) factor -> . PLUS value
    (78) factor -> . MINUS value
    (79) factor -> . value
    (80) value -> . function_call
    (81) value -> . literal
    (82) value -> . NAME n_variable_reference n_math_expression_1_name
    (54) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (45) literal -> . FLOAT n_math_expression_1_float
    (46) literal -> . INT n_math_expression_1_int
    (47) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 45
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    NAME            shift and go to state 44
    FLOAT           shift and go to state 60
    INT             shift and go to state 61
    STRING          shift and go to state 62

    termino                        shift and go to state 53
    exp                            shift and go to state 145
    factor                         shift and go to state 56
    value                          shift and go to state 57
    function_call                  shift and go to state 58
    literal                        shift and go to state 59

state 129

    (71) exp -> termino n_math_expression_4 MINUS n_math_expression_2 . exp
    (69) exp -> . termino n_math_expression_4
    (70) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (71) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (72) termino -> . factor n_math_expression_5
    (73) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (74) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (75) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (76) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (77) factor -> . PLUS value
    (78) factor -> . MINUS value
    (79) factor -> . value
    (80) value -> . function_call
    (81) value -> . literal
    (82) value -> . NAME n_variable_reference n_math_expression_1_name
    (54) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (45) literal -> . FLOAT n_math_expression_1_float
    (46) literal -> . INT n_math_expression_1_int
    (47) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 45
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    NAME            shift and go to state 44
    FLOAT           shift and go to state 60
    INT             shift and go to state 61
    STRING          shift and go to state 62

    termino                        shift and go to state 53
    exp                            shift and go to state 146
    factor                         shift and go to state 56
    value                          shift and go to state 57
    function_call                  shift and go to state 58
    literal                        shift and go to state 59

state 130

    (73) termino -> factor n_math_expression_5 TIMES n_math_expression_3 . termino
    (72) termino -> . factor n_math_expression_5
    (73) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (74) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (75) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (76) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (77) factor -> . PLUS value
    (78) factor -> . MINUS value
    (79) factor -> . value
    (80) value -> . function_call
    (81) value -> . literal
    (82) value -> . NAME n_variable_reference n_math_expression_1_name
    (54) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (45) literal -> . FLOAT n_math_expression_1_float
    (46) literal -> . INT n_math_expression_1_int
    (47) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 45
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    NAME            shift and go to state 44
    FLOAT           shift and go to state 60
    INT             shift and go to state 61
    STRING          shift and go to state 62

    factor                         shift and go to state 56
    termino                        shift and go to state 147
    value                          shift and go to state 57
    function_call                  shift and go to state 58
    literal                        shift and go to state 59

state 131

    (74) termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 . termino
    (72) termino -> . factor n_math_expression_5
    (73) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (74) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (75) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (76) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (77) factor -> . PLUS value
    (78) factor -> . MINUS value
    (79) factor -> . value
    (80) value -> . function_call
    (81) value -> . literal
    (82) value -> . NAME n_variable_reference n_math_expression_1_name
    (54) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (45) literal -> . FLOAT n_math_expression_1_float
    (46) literal -> . INT n_math_expression_1_int
    (47) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 45
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    NAME            shift and go to state 44
    FLOAT           shift and go to state 60
    INT             shift and go to state 61
    STRING          shift and go to state 62

    factor                         shift and go to state 56
    termino                        shift and go to state 148
    value                          shift and go to state 57
    function_call                  shift and go to state 58
    literal                        shift and go to state 59

state 132

    (75) termino -> factor n_math_expression_5 MODULUS n_math_expression_3 . termino
    (72) termino -> . factor n_math_expression_5
    (73) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (74) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (75) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (76) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (77) factor -> . PLUS value
    (78) factor -> . MINUS value
    (79) factor -> . value
    (80) value -> . function_call
    (81) value -> . literal
    (82) value -> . NAME n_variable_reference n_math_expression_1_name
    (54) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (45) literal -> . FLOAT n_math_expression_1_float
    (46) literal -> . INT n_math_expression_1_int
    (47) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 45
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    NAME            shift and go to state 44
    FLOAT           shift and go to state 60
    INT             shift and go to state 61
    STRING          shift and go to state 62

    factor                         shift and go to state 56
    termino                        shift and go to state 149
    value                          shift and go to state 57
    function_call                  shift and go to state 58
    literal                        shift and go to state 59

state 133

    (98) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 . n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (2) n_open_new_scope -> .

    IF              reduce using rule 2 (n_open_new_scope -> .)
    FOR             reduce using rule 2 (n_open_new_scope -> .)
    WHILE           reduce using rule 2 (n_open_new_scope -> .)
    NAME            reduce using rule 2 (n_open_new_scope -> .)
    INT_TYPE        reduce using rule 2 (n_open_new_scope -> .)
    STRING_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    DOUBLE_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    FLOAT_TYPE      reduce using rule 2 (n_open_new_scope -> .)
    BOOL_TYPE       reduce using rule 2 (n_open_new_scope -> .)
    RCURLY          reduce using rule 2 (n_open_new_scope -> .)
    FUNCTION        reduce using rule 2 (n_open_new_scope -> .)

    n_open_new_scope               shift and go to state 150

state 134

    (97) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression . DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope

    DOUBLEDOT       shift and go to state 151


state 135

    (96) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 . LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope

    LCURLY          shift and go to state 152


state 136

    (83) assign -> type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op . expression
    (63) expression -> . expression_or
    (64) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (65) expression_or -> . expression_rel
    (66) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (67) expression_rel -> . exp
    (68) expression_rel -> . exp relational_operator exp n_math_expression_9
    (69) exp -> . termino n_math_expression_4
    (70) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (71) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (72) termino -> . factor n_math_expression_5
    (73) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (74) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (75) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (76) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (77) factor -> . PLUS value
    (78) factor -> . MINUS value
    (79) factor -> . value
    (80) value -> . function_call
    (81) value -> . literal
    (82) value -> . NAME n_variable_reference n_math_expression_1_name
    (54) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (45) literal -> . FLOAT n_math_expression_1_float
    (46) literal -> . INT n_math_expression_1_int
    (47) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 45
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    NAME            shift and go to state 44
    FLOAT           shift and go to state 60
    INT             shift and go to state 61
    STRING          shift and go to state 62

    expression                     shift and go to state 153
    expression_or                  shift and go to state 50
    expression_rel                 shift and go to state 51
    exp                            shift and go to state 52
    termino                        shift and go to state 53
    factor                         shift and go to state 56
    value                          shift and go to state 57
    function_call                  shift and go to state 58
    literal                        shift and go to state 59

state 137

    (53) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type . LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end

    LCURLY          shift and go to state 154


state 138

    (48) function_type -> type .

    LCURLY          reduce using rule 48 (function_type -> type .)


state 139

    (49) function_type -> VOID .

    LCURLY          reduce using rule 49 (function_type -> VOID .)


state 140

    (60) parameter_list -> parameter COMMA parameter_list .

    DOUBLEDOT       reduce using rule 60 (parameter_list -> parameter COMMA parameter_list .)


state 141

    (62) parameter -> type NAME n_variable_instantiate_param .

    COMMA           reduce using rule 62 (parameter -> type NAME n_variable_instantiate_param .)
    DOUBLEDOT       reduce using rule 62 (parameter -> type NAME n_variable_instantiate_param .)


state 142

    (76) factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .

    TIMES           reduce using rule 76 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    DIVIDE          reduce using rule 76 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    MODULUS         reduce using rule 76 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    PLUS            reduce using rule 76 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    MINUS           reduce using rule 76 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    GREATERTHAN     reduce using rule 76 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    LESSTHAN        reduce using rule 76 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    EQUALEQUAL      reduce using rule 76 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    LESSTHANOREQUAL reduce using rule 76 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    GREATERTHANOREQUAL reduce using rule 76 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    NOTEQUAL        reduce using rule 76 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    OR              reduce using rule 76 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    AND             reduce using rule 76 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    COMMA           reduce using rule 76 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    RPARENTHESIS    reduce using rule 76 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    SEMICOLON       reduce using rule 76 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    DOUBLEDOT       reduce using rule 76 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)


state 143

    (64) expression -> expression_or AND n_math_expression_10 expression n_math_expression_11 .

    COMMA           reduce using rule 64 (expression -> expression_or AND n_math_expression_10 expression n_math_expression_11 .)
    RPARENTHESIS    reduce using rule 64 (expression -> expression_or AND n_math_expression_10 expression n_math_expression_11 .)
    SEMICOLON       reduce using rule 64 (expression -> expression_or AND n_math_expression_10 expression n_math_expression_11 .)
    DOUBLEDOT       reduce using rule 64 (expression -> expression_or AND n_math_expression_10 expression n_math_expression_11 .)


state 144

    (66) expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .

    AND             reduce using rule 66 (expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .)
    COMMA           reduce using rule 66 (expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .)
    RPARENTHESIS    reduce using rule 66 (expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .)
    SEMICOLON       reduce using rule 66 (expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .)
    DOUBLEDOT       reduce using rule 66 (expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .)


state 145

    (70) exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .

    GREATERTHAN     reduce using rule 70 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    LESSTHAN        reduce using rule 70 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    EQUALEQUAL      reduce using rule 70 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    LESSTHANOREQUAL reduce using rule 70 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    GREATERTHANOREQUAL reduce using rule 70 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    NOTEQUAL        reduce using rule 70 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    OR              reduce using rule 70 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    AND             reduce using rule 70 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    COMMA           reduce using rule 70 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    RPARENTHESIS    reduce using rule 70 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    SEMICOLON       reduce using rule 70 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    DOUBLEDOT       reduce using rule 70 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)


state 146

    (71) exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .

    GREATERTHAN     reduce using rule 71 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    LESSTHAN        reduce using rule 71 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    EQUALEQUAL      reduce using rule 71 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    LESSTHANOREQUAL reduce using rule 71 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    GREATERTHANOREQUAL reduce using rule 71 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    NOTEQUAL        reduce using rule 71 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    OR              reduce using rule 71 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    AND             reduce using rule 71 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    COMMA           reduce using rule 71 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    RPARENTHESIS    reduce using rule 71 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    SEMICOLON       reduce using rule 71 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    DOUBLEDOT       reduce using rule 71 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)


state 147

    (73) termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .

    PLUS            reduce using rule 73 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    MINUS           reduce using rule 73 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    GREATERTHAN     reduce using rule 73 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    LESSTHAN        reduce using rule 73 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    EQUALEQUAL      reduce using rule 73 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    LESSTHANOREQUAL reduce using rule 73 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    GREATERTHANOREQUAL reduce using rule 73 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    NOTEQUAL        reduce using rule 73 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    OR              reduce using rule 73 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    AND             reduce using rule 73 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    COMMA           reduce using rule 73 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    RPARENTHESIS    reduce using rule 73 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    SEMICOLON       reduce using rule 73 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    DOUBLEDOT       reduce using rule 73 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)


state 148

    (74) termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .

    PLUS            reduce using rule 74 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    MINUS           reduce using rule 74 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    GREATERTHAN     reduce using rule 74 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    LESSTHAN        reduce using rule 74 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    EQUALEQUAL      reduce using rule 74 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    LESSTHANOREQUAL reduce using rule 74 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    GREATERTHANOREQUAL reduce using rule 74 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    NOTEQUAL        reduce using rule 74 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    OR              reduce using rule 74 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    AND             reduce using rule 74 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    COMMA           reduce using rule 74 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    RPARENTHESIS    reduce using rule 74 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    SEMICOLON       reduce using rule 74 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    DOUBLEDOT       reduce using rule 74 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)


state 149

    (75) termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .

    PLUS            reduce using rule 75 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    MINUS           reduce using rule 75 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    GREATERTHAN     reduce using rule 75 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    LESSTHAN        reduce using rule 75 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    EQUALEQUAL      reduce using rule 75 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    LESSTHANOREQUAL reduce using rule 75 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    GREATERTHANOREQUAL reduce using rule 75 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    NOTEQUAL        reduce using rule 75 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    OR              reduce using rule 75 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    AND             reduce using rule 75 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    COMMA           reduce using rule 75 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    RPARENTHESIS    reduce using rule 75 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    SEMICOLON       reduce using rule 75 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    DOUBLEDOT       reduce using rule 75 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)


state 150

    (98) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope . codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (88) codeblock -> . empty
    (89) codeblock -> . codeblock_aux codeblock
    (30) empty -> .
    (90) codeblock_aux -> . statement
    (91) codeblock_aux -> . function_definition
    (92) codeblock_aux -> . condition_if
    (93) codeblock_aux -> . loop
    (85) statement -> . statement_aux SEMICOLON
    (53) function_definition -> . n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end
    (98) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (94) loop -> . forloop
    (95) loop -> . whileloop
    (86) statement_aux -> . assign
    (87) statement_aux -> . function_call
    (50) n_before_function_definition -> .
    (97) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (96) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (83) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (84) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (54) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (34) type -> . INT_TYPE n_seen_type
    (35) type -> . STRING_TYPE n_seen_type
    (36) type -> . DOUBLE_TYPE n_seen_type
    (37) type -> . FLOAT_TYPE n_seen_type
    (38) type -> . BOOL_TYPE n_seen_type

    RCURLY          reduce using rule 30 (empty -> .)
    IF              shift and go to state 15
    FUNCTION        reduce using rule 50 (n_before_function_definition -> .)
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    codeblock                      shift and go to state 155
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    n_before_function_definition   shift and go to state 13
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 151

    (97) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT . assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (83) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (84) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (34) type -> . INT_TYPE n_seen_type
    (35) type -> . STRING_TYPE n_seen_type
    (36) type -> . DOUBLE_TYPE n_seen_type
    (37) type -> . FLOAT_TYPE n_seen_type
    (38) type -> . BOOL_TYPE n_seen_type

    NAME            shift and go to state 91
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    assign                         shift and go to state 156
    type                           shift and go to state 22

state 152

    (96) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY . n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (2) n_open_new_scope -> .

    IF              reduce using rule 2 (n_open_new_scope -> .)
    FOR             reduce using rule 2 (n_open_new_scope -> .)
    WHILE           reduce using rule 2 (n_open_new_scope -> .)
    NAME            reduce using rule 2 (n_open_new_scope -> .)
    INT_TYPE        reduce using rule 2 (n_open_new_scope -> .)
    STRING_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    DOUBLE_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    FLOAT_TYPE      reduce using rule 2 (n_open_new_scope -> .)
    BOOL_TYPE       reduce using rule 2 (n_open_new_scope -> .)
    RCURLY          reduce using rule 2 (n_open_new_scope -> .)
    FUNCTION        reduce using rule 2 (n_open_new_scope -> .)

    n_open_new_scope               shift and go to state 157

state 153

    (83) assign -> type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression .

    SEMICOLON       reduce using rule 83 (assign -> type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression .)
    DOUBLEDOT       reduce using rule 83 (assign -> type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression .)
    RPARENTHESIS    reduce using rule 83 (assign -> type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression .)


state 154

    (53) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY . n_function_block_start codeblock RCURLY n_close_scope n_function_block_end
    (51) n_function_block_start -> .

    IF              reduce using rule 51 (n_function_block_start -> .)
    FOR             reduce using rule 51 (n_function_block_start -> .)
    WHILE           reduce using rule 51 (n_function_block_start -> .)
    NAME            reduce using rule 51 (n_function_block_start -> .)
    INT_TYPE        reduce using rule 51 (n_function_block_start -> .)
    STRING_TYPE     reduce using rule 51 (n_function_block_start -> .)
    DOUBLE_TYPE     reduce using rule 51 (n_function_block_start -> .)
    FLOAT_TYPE      reduce using rule 51 (n_function_block_start -> .)
    BOOL_TYPE       reduce using rule 51 (n_function_block_start -> .)
    RCURLY          reduce using rule 51 (n_function_block_start -> .)
    FUNCTION        reduce using rule 51 (n_function_block_start -> .)

    n_function_block_start         shift and go to state 158

state 155

    (98) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock . RCURLY n_close_scope condition_else n_two_way_conditional_2

    RCURLY          shift and go to state 159


state 156

    (97) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign . RPARENTHESIS LCURLY codeblock RCURLY n_close_scope

    RPARENTHESIS    shift and go to state 160


state 157

    (96) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope . codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (88) codeblock -> . empty
    (89) codeblock -> . codeblock_aux codeblock
    (30) empty -> .
    (90) codeblock_aux -> . statement
    (91) codeblock_aux -> . function_definition
    (92) codeblock_aux -> . condition_if
    (93) codeblock_aux -> . loop
    (85) statement -> . statement_aux SEMICOLON
    (53) function_definition -> . n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end
    (98) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (94) loop -> . forloop
    (95) loop -> . whileloop
    (86) statement_aux -> . assign
    (87) statement_aux -> . function_call
    (50) n_before_function_definition -> .
    (97) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (96) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (83) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (84) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (54) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (34) type -> . INT_TYPE n_seen_type
    (35) type -> . STRING_TYPE n_seen_type
    (36) type -> . DOUBLE_TYPE n_seen_type
    (37) type -> . FLOAT_TYPE n_seen_type
    (38) type -> . BOOL_TYPE n_seen_type

    RCURLY          reduce using rule 30 (empty -> .)
    IF              shift and go to state 15
    FUNCTION        reduce using rule 50 (n_before_function_definition -> .)
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    codeblock                      shift and go to state 161
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    n_before_function_definition   shift and go to state 13
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 158

    (53) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start . codeblock RCURLY n_close_scope n_function_block_end
    (88) codeblock -> . empty
    (89) codeblock -> . codeblock_aux codeblock
    (30) empty -> .
    (90) codeblock_aux -> . statement
    (91) codeblock_aux -> . function_definition
    (92) codeblock_aux -> . condition_if
    (93) codeblock_aux -> . loop
    (85) statement -> . statement_aux SEMICOLON
    (53) function_definition -> . n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end
    (98) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (94) loop -> . forloop
    (95) loop -> . whileloop
    (86) statement_aux -> . assign
    (87) statement_aux -> . function_call
    (50) n_before_function_definition -> .
    (97) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (96) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (83) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (84) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (54) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (34) type -> . INT_TYPE n_seen_type
    (35) type -> . STRING_TYPE n_seen_type
    (36) type -> . DOUBLE_TYPE n_seen_type
    (37) type -> . FLOAT_TYPE n_seen_type
    (38) type -> . BOOL_TYPE n_seen_type

    RCURLY          reduce using rule 30 (empty -> .)
    IF              shift and go to state 15
    FUNCTION        reduce using rule 50 (n_before_function_definition -> .)
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    n_before_function_definition   shift and go to state 13
    codeblock                      shift and go to state 162
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 159

    (98) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY . n_close_scope condition_else n_two_way_conditional_2
    (4) n_close_scope -> .

    ELSE            reduce using rule 4 (n_close_scope -> .)
    IF              reduce using rule 4 (n_close_scope -> .)
    FOR             reduce using rule 4 (n_close_scope -> .)
    WHILE           reduce using rule 4 (n_close_scope -> .)
    NAME            reduce using rule 4 (n_close_scope -> .)
    INT_TYPE        reduce using rule 4 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 4 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 4 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 4 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 4 (n_close_scope -> .)
    FUNCTION        reduce using rule 4 (n_close_scope -> .)
    $end            reduce using rule 4 (n_close_scope -> .)
    RCURLY          reduce using rule 4 (n_close_scope -> .)

    n_close_scope                  shift and go to state 163

state 160

    (97) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS . LCURLY codeblock RCURLY n_close_scope

    LCURLY          shift and go to state 164


state 161

    (96) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock . RCURLY p_n_pre_condition_loop_3 n_close_scope

    RCURLY          shift and go to state 165


state 162

    (53) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock . RCURLY n_close_scope n_function_block_end

    RCURLY          shift and go to state 166


state 163

    (98) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope . condition_else n_two_way_conditional_2
    (99) condition_else -> . ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope
    (100) condition_else -> . empty
    (30) empty -> .

    ELSE            shift and go to state 168
    IF              reduce using rule 30 (empty -> .)
    FOR             reduce using rule 30 (empty -> .)
    WHILE           reduce using rule 30 (empty -> .)
    NAME            reduce using rule 30 (empty -> .)
    INT_TYPE        reduce using rule 30 (empty -> .)
    STRING_TYPE     reduce using rule 30 (empty -> .)
    DOUBLE_TYPE     reduce using rule 30 (empty -> .)
    FLOAT_TYPE      reduce using rule 30 (empty -> .)
    BOOL_TYPE       reduce using rule 30 (empty -> .)
    FUNCTION        reduce using rule 30 (empty -> .)
    $end            reduce using rule 30 (empty -> .)
    RCURLY          reduce using rule 30 (empty -> .)

    condition_else                 shift and go to state 167
    empty                          shift and go to state 169

state 164

    (97) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY . codeblock RCURLY n_close_scope
    (88) codeblock -> . empty
    (89) codeblock -> . codeblock_aux codeblock
    (30) empty -> .
    (90) codeblock_aux -> . statement
    (91) codeblock_aux -> . function_definition
    (92) codeblock_aux -> . condition_if
    (93) codeblock_aux -> . loop
    (85) statement -> . statement_aux SEMICOLON
    (53) function_definition -> . n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end
    (98) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (94) loop -> . forloop
    (95) loop -> . whileloop
    (86) statement_aux -> . assign
    (87) statement_aux -> . function_call
    (50) n_before_function_definition -> .
    (97) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (96) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (83) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (84) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (54) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (34) type -> . INT_TYPE n_seen_type
    (35) type -> . STRING_TYPE n_seen_type
    (36) type -> . DOUBLE_TYPE n_seen_type
    (37) type -> . FLOAT_TYPE n_seen_type
    (38) type -> . BOOL_TYPE n_seen_type

    RCURLY          reduce using rule 30 (empty -> .)
    IF              shift and go to state 15
    FUNCTION        reduce using rule 50 (n_before_function_definition -> .)
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    assign                         shift and go to state 18
    codeblock                      shift and go to state 170
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    n_before_function_definition   shift and go to state 13
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 165

    (96) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY . p_n_pre_condition_loop_3 n_close_scope
    (28) p_n_pre_condition_loop_3 -> .

    IF              reduce using rule 28 (p_n_pre_condition_loop_3 -> .)
    FOR             reduce using rule 28 (p_n_pre_condition_loop_3 -> .)
    WHILE           reduce using rule 28 (p_n_pre_condition_loop_3 -> .)
    NAME            reduce using rule 28 (p_n_pre_condition_loop_3 -> .)
    INT_TYPE        reduce using rule 28 (p_n_pre_condition_loop_3 -> .)
    STRING_TYPE     reduce using rule 28 (p_n_pre_condition_loop_3 -> .)
    DOUBLE_TYPE     reduce using rule 28 (p_n_pre_condition_loop_3 -> .)
    FLOAT_TYPE      reduce using rule 28 (p_n_pre_condition_loop_3 -> .)
    BOOL_TYPE       reduce using rule 28 (p_n_pre_condition_loop_3 -> .)
    FUNCTION        reduce using rule 28 (p_n_pre_condition_loop_3 -> .)
    $end            reduce using rule 28 (p_n_pre_condition_loop_3 -> .)
    RCURLY          reduce using rule 28 (p_n_pre_condition_loop_3 -> .)

    p_n_pre_condition_loop_3       shift and go to state 171

state 166

    (53) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY . n_close_scope n_function_block_end
    (4) n_close_scope -> .

    IF              reduce using rule 4 (n_close_scope -> .)
    FOR             reduce using rule 4 (n_close_scope -> .)
    WHILE           reduce using rule 4 (n_close_scope -> .)
    NAME            reduce using rule 4 (n_close_scope -> .)
    INT_TYPE        reduce using rule 4 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 4 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 4 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 4 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 4 (n_close_scope -> .)
    FUNCTION        reduce using rule 4 (n_close_scope -> .)
    $end            reduce using rule 4 (n_close_scope -> .)
    RCURLY          reduce using rule 4 (n_close_scope -> .)

    n_close_scope                  shift and go to state 172

state 167

    (98) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else . n_two_way_conditional_2
    (24) n_two_way_conditional_2 -> .

    IF              reduce using rule 24 (n_two_way_conditional_2 -> .)
    FOR             reduce using rule 24 (n_two_way_conditional_2 -> .)
    WHILE           reduce using rule 24 (n_two_way_conditional_2 -> .)
    NAME            reduce using rule 24 (n_two_way_conditional_2 -> .)
    INT_TYPE        reduce using rule 24 (n_two_way_conditional_2 -> .)
    STRING_TYPE     reduce using rule 24 (n_two_way_conditional_2 -> .)
    DOUBLE_TYPE     reduce using rule 24 (n_two_way_conditional_2 -> .)
    FLOAT_TYPE      reduce using rule 24 (n_two_way_conditional_2 -> .)
    BOOL_TYPE       reduce using rule 24 (n_two_way_conditional_2 -> .)
    FUNCTION        reduce using rule 24 (n_two_way_conditional_2 -> .)
    $end            reduce using rule 24 (n_two_way_conditional_2 -> .)
    RCURLY          reduce using rule 24 (n_two_way_conditional_2 -> .)

    n_two_way_conditional_2        shift and go to state 173

state 168

    (99) condition_else -> ELSE . n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope
    (25) n_two_way_conditional_3 -> .

    LCURLY          reduce using rule 25 (n_two_way_conditional_3 -> .)

    n_two_way_conditional_3        shift and go to state 174

state 169

    (100) condition_else -> empty .

    IF              reduce using rule 100 (condition_else -> empty .)
    FOR             reduce using rule 100 (condition_else -> empty .)
    WHILE           reduce using rule 100 (condition_else -> empty .)
    NAME            reduce using rule 100 (condition_else -> empty .)
    INT_TYPE        reduce using rule 100 (condition_else -> empty .)
    STRING_TYPE     reduce using rule 100 (condition_else -> empty .)
    DOUBLE_TYPE     reduce using rule 100 (condition_else -> empty .)
    FLOAT_TYPE      reduce using rule 100 (condition_else -> empty .)
    BOOL_TYPE       reduce using rule 100 (condition_else -> empty .)
    FUNCTION        reduce using rule 100 (condition_else -> empty .)
    $end            reduce using rule 100 (condition_else -> empty .)
    RCURLY          reduce using rule 100 (condition_else -> empty .)


state 170

    (97) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock . RCURLY n_close_scope

    RCURLY          shift and go to state 175


state 171

    (96) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 . n_close_scope
    (4) n_close_scope -> .

    IF              reduce using rule 4 (n_close_scope -> .)
    FOR             reduce using rule 4 (n_close_scope -> .)
    WHILE           reduce using rule 4 (n_close_scope -> .)
    NAME            reduce using rule 4 (n_close_scope -> .)
    INT_TYPE        reduce using rule 4 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 4 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 4 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 4 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 4 (n_close_scope -> .)
    FUNCTION        reduce using rule 4 (n_close_scope -> .)
    $end            reduce using rule 4 (n_close_scope -> .)
    RCURLY          reduce using rule 4 (n_close_scope -> .)

    n_close_scope                  shift and go to state 176

state 172

    (53) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope . n_function_block_end
    (52) n_function_block_end -> .

    IF              reduce using rule 52 (n_function_block_end -> .)
    FOR             reduce using rule 52 (n_function_block_end -> .)
    WHILE           reduce using rule 52 (n_function_block_end -> .)
    NAME            reduce using rule 52 (n_function_block_end -> .)
    INT_TYPE        reduce using rule 52 (n_function_block_end -> .)
    STRING_TYPE     reduce using rule 52 (n_function_block_end -> .)
    DOUBLE_TYPE     reduce using rule 52 (n_function_block_end -> .)
    FLOAT_TYPE      reduce using rule 52 (n_function_block_end -> .)
    BOOL_TYPE       reduce using rule 52 (n_function_block_end -> .)
    FUNCTION        reduce using rule 52 (n_function_block_end -> .)
    $end            reduce using rule 52 (n_function_block_end -> .)
    RCURLY          reduce using rule 52 (n_function_block_end -> .)

    n_function_block_end           shift and go to state 177

state 173

    (98) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .

    IF              reduce using rule 98 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    FOR             reduce using rule 98 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    WHILE           reduce using rule 98 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    NAME            reduce using rule 98 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    INT_TYPE        reduce using rule 98 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    STRING_TYPE     reduce using rule 98 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    DOUBLE_TYPE     reduce using rule 98 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    FLOAT_TYPE      reduce using rule 98 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    BOOL_TYPE       reduce using rule 98 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    FUNCTION        reduce using rule 98 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    $end            reduce using rule 98 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    RCURLY          reduce using rule 98 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)


state 174

    (99) condition_else -> ELSE n_two_way_conditional_3 . LCURLY n_open_new_scope codeblock RCURLY n_close_scope

    LCURLY          shift and go to state 178


state 175

    (97) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY . n_close_scope
    (4) n_close_scope -> .

    IF              reduce using rule 4 (n_close_scope -> .)
    FOR             reduce using rule 4 (n_close_scope -> .)
    WHILE           reduce using rule 4 (n_close_scope -> .)
    NAME            reduce using rule 4 (n_close_scope -> .)
    INT_TYPE        reduce using rule 4 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 4 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 4 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 4 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 4 (n_close_scope -> .)
    FUNCTION        reduce using rule 4 (n_close_scope -> .)
    $end            reduce using rule 4 (n_close_scope -> .)
    RCURLY          reduce using rule 4 (n_close_scope -> .)

    n_close_scope                  shift and go to state 179

state 176

    (96) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .

    IF              reduce using rule 96 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    FOR             reduce using rule 96 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    WHILE           reduce using rule 96 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    NAME            reduce using rule 96 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    INT_TYPE        reduce using rule 96 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    STRING_TYPE     reduce using rule 96 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    DOUBLE_TYPE     reduce using rule 96 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    FLOAT_TYPE      reduce using rule 96 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    BOOL_TYPE       reduce using rule 96 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    FUNCTION        reduce using rule 96 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    $end            reduce using rule 96 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    RCURLY          reduce using rule 96 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)


state 177

    (53) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end .

    IF              reduce using rule 53 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end .)
    FOR             reduce using rule 53 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end .)
    WHILE           reduce using rule 53 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end .)
    NAME            reduce using rule 53 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end .)
    INT_TYPE        reduce using rule 53 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end .)
    STRING_TYPE     reduce using rule 53 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end .)
    DOUBLE_TYPE     reduce using rule 53 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end .)
    FLOAT_TYPE      reduce using rule 53 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end .)
    BOOL_TYPE       reduce using rule 53 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end .)
    FUNCTION        reduce using rule 53 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end .)
    $end            reduce using rule 53 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end .)
    RCURLY          reduce using rule 53 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end .)


state 178

    (99) condition_else -> ELSE n_two_way_conditional_3 LCURLY . n_open_new_scope codeblock RCURLY n_close_scope
    (2) n_open_new_scope -> .

    IF              reduce using rule 2 (n_open_new_scope -> .)
    FOR             reduce using rule 2 (n_open_new_scope -> .)
    WHILE           reduce using rule 2 (n_open_new_scope -> .)
    NAME            reduce using rule 2 (n_open_new_scope -> .)
    INT_TYPE        reduce using rule 2 (n_open_new_scope -> .)
    STRING_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    DOUBLE_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    FLOAT_TYPE      reduce using rule 2 (n_open_new_scope -> .)
    BOOL_TYPE       reduce using rule 2 (n_open_new_scope -> .)
    RCURLY          reduce using rule 2 (n_open_new_scope -> .)
    FUNCTION        reduce using rule 2 (n_open_new_scope -> .)

    n_open_new_scope               shift and go to state 180

state 179

    (97) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .

    IF              reduce using rule 97 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    FOR             reduce using rule 97 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    WHILE           reduce using rule 97 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    NAME            reduce using rule 97 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    INT_TYPE        reduce using rule 97 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    STRING_TYPE     reduce using rule 97 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    DOUBLE_TYPE     reduce using rule 97 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    FLOAT_TYPE      reduce using rule 97 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    BOOL_TYPE       reduce using rule 97 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    FUNCTION        reduce using rule 97 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    $end            reduce using rule 97 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    RCURLY          reduce using rule 97 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)


state 180

    (99) condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope . codeblock RCURLY n_close_scope
    (88) codeblock -> . empty
    (89) codeblock -> . codeblock_aux codeblock
    (30) empty -> .
    (90) codeblock_aux -> . statement
    (91) codeblock_aux -> . function_definition
    (92) codeblock_aux -> . condition_if
    (93) codeblock_aux -> . loop
    (85) statement -> . statement_aux SEMICOLON
    (53) function_definition -> . n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end
    (98) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (94) loop -> . forloop
    (95) loop -> . whileloop
    (86) statement_aux -> . assign
    (87) statement_aux -> . function_call
    (50) n_before_function_definition -> .
    (97) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (96) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (83) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (84) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (54) function_call -> . NAME LPARENTHESIS arg_list RPARENTHESIS
    (34) type -> . INT_TYPE n_seen_type
    (35) type -> . STRING_TYPE n_seen_type
    (36) type -> . DOUBLE_TYPE n_seen_type
    (37) type -> . FLOAT_TYPE n_seen_type
    (38) type -> . BOOL_TYPE n_seen_type

    RCURLY          reduce using rule 30 (empty -> .)
    IF              shift and go to state 15
    FUNCTION        reduce using rule 50 (n_before_function_definition -> .)
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    codeblock                      shift and go to state 181
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    n_before_function_definition   shift and go to state 13
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 181

    (99) condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock . RCURLY n_close_scope

    RCURLY          shift and go to state 182


state 182

    (99) condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY . n_close_scope
    (4) n_close_scope -> .

    IF              reduce using rule 4 (n_close_scope -> .)
    FOR             reduce using rule 4 (n_close_scope -> .)
    WHILE           reduce using rule 4 (n_close_scope -> .)
    NAME            reduce using rule 4 (n_close_scope -> .)
    INT_TYPE        reduce using rule 4 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 4 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 4 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 4 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 4 (n_close_scope -> .)
    FUNCTION        reduce using rule 4 (n_close_scope -> .)
    $end            reduce using rule 4 (n_close_scope -> .)
    RCURLY          reduce using rule 4 (n_close_scope -> .)

    n_close_scope                  shift and go to state 183

state 183

    (99) condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .

    IF              reduce using rule 99 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    FOR             reduce using rule 99 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    WHILE           reduce using rule 99 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    NAME            reduce using rule 99 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    INT_TYPE        reduce using rule 99 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    STRING_TYPE     reduce using rule 99 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    DOUBLE_TYPE     reduce using rule 99 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    FLOAT_TYPE      reduce using rule 99 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    BOOL_TYPE       reduce using rule 99 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    FUNCTION        reduce using rule 99 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    $end            reduce using rule 99 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    RCURLY          reduce using rule 99 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)

