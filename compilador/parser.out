Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DOT
    LBRACKET
    NOT
    RBRACKET

Grammar

Rule 0     S' -> program
Rule 1     n_seen_type -> <empty>
Rule 2     n_open_new_scope -> <empty>
Rule 3     n_open_new_scope_function -> <empty>
Rule 4     n_close_scope -> <empty>
Rule 5     n_variable_reference -> <empty>
Rule 6     n_variable_instantiate -> <empty>
Rule 7     n_variable_instantiate_param -> <empty>
Rule 8     n_math_expression_1_int -> <empty>
Rule 9     n_math_expression_1_float -> <empty>
Rule 10    n_math_expression_1_string -> <empty>
Rule 11    n_math_expression_1_name -> <empty>
Rule 12    n_math_expression_2 -> <empty>
Rule 13    n_math_expression_3 -> <empty>
Rule 14    n_math_expression_4 -> <empty>
Rule 15    n_math_expression_5 -> <empty>
Rule 16    n_math_expression_6 -> <empty>
Rule 17    n_math_expression_7 -> <empty>
Rule 18    n_math_expression_8 -> <empty>
Rule 19    n_math_expression_9 -> <empty>
Rule 20    n_math_expression_10 -> <empty>
Rule 21    n_math_expression_11 -> <empty>
Rule 22    n_math_expression_12 -> <empty>
Rule 23    n_two_way_conditional_1 -> <empty>
Rule 24    n_two_way_conditional_2 -> <empty>
Rule 25    n_two_way_conditional_3 -> <empty>
Rule 26    p_n_pre_condition_loop_1 -> <empty>
Rule 27    p_n_pre_condition_loop_2 -> <empty>
Rule 28    p_n_pre_condition_loop_3 -> <empty>
Rule 29    n_seen_equal_op -> <empty>
Rule 30    n_before_function_definition -> <empty>
Rule 31    n_function_block_start -> <empty>
Rule 32    n_function_block_end -> <empty>
Rule 33    n_function_type -> <empty>
Rule 34    n_function_call_1 -> <empty>
Rule 35    n_function_call_2 -> <empty>
Rule 36    n_function_call_3 -> <empty>
Rule 37    n_function_call_4 -> <empty>
Rule 38    n_function_call_5 -> <empty>
Rule 39    n_function_call_6 -> <empty>
Rule 40    n_end -> <empty>
Rule 41    empty -> <empty>
Rule 42    program -> program_aux codeblock n_end
Rule 43    program_aux -> IDK
Rule 44    program_aux -> OWO
Rule 45    type -> INT_TYPE n_seen_type n_function_type
Rule 46    type -> STRING_TYPE n_seen_type n_function_type
Rule 47    type -> DOUBLE_TYPE n_seen_type n_function_type
Rule 48    type -> FLOAT_TYPE n_seen_type n_function_type
Rule 49    type -> BOOL_TYPE n_seen_type n_function_type
Rule 50    relational_operator -> GREATERTHAN n_math_expression_8
Rule 51    relational_operator -> LESSTHAN n_math_expression_8
Rule 52    relational_operator -> EQUALEQUAL n_math_expression_8
Rule 53    relational_operator -> LESSTHANOREQUAL n_math_expression_8
Rule 54    relational_operator -> GREATERTHANOREQUAL n_math_expression_8
Rule 55    relational_operator -> NOTEQUAL n_math_expression_8
Rule 56    literal -> FLOAT n_math_expression_1_float
Rule 57    literal -> INT n_math_expression_1_int
Rule 58    literal -> STRING n_math_expression_1_string
Rule 59    function_type -> type
Rule 60    function_type -> VOID n_function_type
Rule 61    n_return -> <empty>
Rule 62    n_return_void -> <empty>
Rule 63    function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end
Rule 64    return -> RETURN expression n_return SEMICOLON
Rule 65    return -> RETURN n_return_void SEMICOLON
Rule 66    return -> empty n_return_void
Rule 67    function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
Rule 68    arg_list -> empty
Rule 69    arg_list -> arg
Rule 70    arg_list -> arg COMMA n_function_call_4 arg_list
Rule 71    parameter_list -> empty
Rule 72    parameter_list -> parameter
Rule 73    parameter_list -> parameter COMMA parameter_list
Rule 74    arg -> expression n_function_call_3
Rule 75    parameter -> type NAME n_variable_instantiate_param
Rule 76    expression -> expression_or
Rule 77    expression -> expression_or AND n_math_expression_10 expression n_math_expression_11
Rule 78    expression_or -> expression_rel
Rule 79    expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12
Rule 80    expression_rel -> exp
Rule 81    expression_rel -> exp relational_operator exp n_math_expression_9
Rule 82    exp -> termino n_math_expression_4
Rule 83    exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp
Rule 84    exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp
Rule 85    termino -> factor n_math_expression_5
Rule 86    termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino
Rule 87    termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino
Rule 88    termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino
Rule 89    factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
Rule 90    factor -> PLUS value
Rule 91    factor -> MINUS value
Rule 92    factor -> value
Rule 93    value -> function_call
Rule 94    value -> literal
Rule 95    value -> NAME n_variable_reference n_math_expression_1_name
Rule 96    assign -> type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
Rule 97    assign -> NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
Rule 98    statement -> statement_aux SEMICOLON
Rule 99    statement_aux -> assign
Rule 100   statement_aux -> function_call
Rule 101   codeblock -> empty
Rule 102   codeblock -> codeblock_aux codeblock
Rule 103   codeblock_aux -> statement
Rule 104   codeblock_aux -> function_definition
Rule 105   codeblock_aux -> condition_if
Rule 106   codeblock_aux -> loop
Rule 107   loop -> forloop
Rule 108   loop -> whileloop
Rule 109   whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
Rule 110   forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
Rule 111   condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
Rule 112   condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope
Rule 113   condition_else -> empty

Terminals, with rules where they appear

AND                  : 77
BOOL_TYPE            : 49
COMMA                : 70 73
DIVIDE               : 87
DOT                  : 
DOUBLEDOT            : 63 110 110
DOUBLE_TYPE          : 47
ELSE                 : 112
EQUAL                : 96 97
EQUALEQUAL           : 52
FLOAT                : 56
FLOAT_TYPE           : 48
FOR                  : 110
FUNCTION             : 63
GREATERTHAN          : 50
GREATERTHANOREQUAL   : 54
IDK                  : 43
IF                   : 111
INT                  : 57
INT_TYPE             : 45
LBRACKET             : 
LCURLY               : 63 109 110 111 112
LESSTHAN             : 51
LESSTHANOREQUAL      : 53
LPARENTHESIS         : 67 89 109 110 111
MINUS                : 84 91
MODULUS              : 88
NAME                 : 63 67 75 95 96 97
NOT                  : 
NOTEQUAL             : 55
OR                   : 79
OWO                  : 44
PLUS                 : 83 90
RBRACKET             : 
RCURLY               : 63 109 110 111 112
RETURN               : 64 65
RPARENTHESIS         : 67 89 109 110 111
SEMICOLON            : 64 65 98
STRING               : 58
STRING_TYPE          : 46
TIMES                : 86
VOID                 : 60
WHILE                : 109
error                : 

Nonterminals, with rules where they appear

arg                  : 69 70
arg_list             : 67 70
assign               : 99 110 110
codeblock            : 42 63 102 109 110 111 112
codeblock_aux        : 102
condition_else       : 111
condition_if         : 105
empty                : 66 68 71 101 113
exp                  : 80 81 81 83 84
expression           : 64 74 77 89 96 97 109 110 111
expression_or        : 76 77 79
expression_rel       : 78 79
factor               : 85 86 87 88
forloop              : 107
function_call        : 93 100
function_definition  : 104
function_type        : 63
literal              : 94
loop                 : 106
n_before_function_definition : 63
n_close_scope        : 63 109 110 111 112
n_end                : 42
n_function_block_end : 63
n_function_block_start : 63
n_function_call_1    : 67
n_function_call_2    : 67
n_function_call_3    : 74
n_function_call_4    : 70
n_function_call_5    : 67
n_function_call_6    : 67
n_function_type      : 45 46 47 48 49 60
n_math_expression_10 : 77 79
n_math_expression_11 : 77
n_math_expression_12 : 79
n_math_expression_1_float : 56
n_math_expression_1_int : 57
n_math_expression_1_name : 95 96 97
n_math_expression_1_string : 58
n_math_expression_2  : 83 84
n_math_expression_3  : 86 87 88
n_math_expression_4  : 82 83 84
n_math_expression_5  : 85 86 87 88
n_math_expression_6  : 89
n_math_expression_7  : 89
n_math_expression_8  : 50 51 52 53 54 55
n_math_expression_9  : 81
n_open_new_scope     : 109 110 111 112
n_open_new_scope_function : 63
n_return             : 64
n_return_void        : 65 66
n_seen_equal_op      : 96 97
n_seen_type          : 45 46 47 48 49
n_two_way_conditional_1 : 111
n_two_way_conditional_2 : 111
n_two_way_conditional_3 : 112
n_variable_instantiate : 96
n_variable_instantiate_param : 75
n_variable_reference : 95 97
p_n_pre_condition_loop_1 : 109
p_n_pre_condition_loop_2 : 109
p_n_pre_condition_loop_3 : 109
parameter            : 72 73
parameter_list       : 63 73
program              : 0
program_aux          : 42
relational_operator  : 81
return               : 63
statement            : 103
statement_aux        : 98
termino              : 82 83 84 86 87 88
type                 : 59 75 96
value                : 90 91 92
whileloop            : 108

Parsing method: LALR

state 0

    (0) S' -> . program
    (42) program -> . program_aux codeblock n_end
    (43) program_aux -> . IDK
    (44) program_aux -> . OWO

    IDK             shift and go to state 3
    OWO             shift and go to state 4

    program                        shift and go to state 1
    program_aux                    shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (42) program -> program_aux . codeblock n_end
    (101) codeblock -> . empty
    (102) codeblock -> . codeblock_aux codeblock
    (41) empty -> .
    (103) codeblock_aux -> . statement
    (104) codeblock_aux -> . function_definition
    (105) codeblock_aux -> . condition_if
    (106) codeblock_aux -> . loop
    (98) statement -> . statement_aux SEMICOLON
    (63) function_definition -> . n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end
    (111) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (107) loop -> . forloop
    (108) loop -> . whileloop
    (99) statement_aux -> . assign
    (100) statement_aux -> . function_call
    (30) n_before_function_definition -> .
    (110) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (109) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (96) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (97) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (67) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (45) type -> . INT_TYPE n_seen_type n_function_type
    (46) type -> . STRING_TYPE n_seen_type n_function_type
    (47) type -> . DOUBLE_TYPE n_seen_type n_function_type
    (48) type -> . FLOAT_TYPE n_seen_type n_function_type
    (49) type -> . BOOL_TYPE n_seen_type n_function_type

    $end            reduce using rule 41 (empty -> .)
    IF              shift and go to state 15
    FUNCTION        reduce using rule 30 (n_before_function_definition -> .)
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    codeblock                      shift and go to state 5
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    n_before_function_definition   shift and go to state 13
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 3

    (43) program_aux -> IDK .

    IF              reduce using rule 43 (program_aux -> IDK .)
    FOR             reduce using rule 43 (program_aux -> IDK .)
    WHILE           reduce using rule 43 (program_aux -> IDK .)
    NAME            reduce using rule 43 (program_aux -> IDK .)
    INT_TYPE        reduce using rule 43 (program_aux -> IDK .)
    STRING_TYPE     reduce using rule 43 (program_aux -> IDK .)
    DOUBLE_TYPE     reduce using rule 43 (program_aux -> IDK .)
    FLOAT_TYPE      reduce using rule 43 (program_aux -> IDK .)
    BOOL_TYPE       reduce using rule 43 (program_aux -> IDK .)
    FUNCTION        reduce using rule 43 (program_aux -> IDK .)
    $end            reduce using rule 43 (program_aux -> IDK .)


state 4

    (44) program_aux -> OWO .

    IF              reduce using rule 44 (program_aux -> OWO .)
    FOR             reduce using rule 44 (program_aux -> OWO .)
    WHILE           reduce using rule 44 (program_aux -> OWO .)
    NAME            reduce using rule 44 (program_aux -> OWO .)
    INT_TYPE        reduce using rule 44 (program_aux -> OWO .)
    STRING_TYPE     reduce using rule 44 (program_aux -> OWO .)
    DOUBLE_TYPE     reduce using rule 44 (program_aux -> OWO .)
    FLOAT_TYPE      reduce using rule 44 (program_aux -> OWO .)
    BOOL_TYPE       reduce using rule 44 (program_aux -> OWO .)
    FUNCTION        reduce using rule 44 (program_aux -> OWO .)
    $end            reduce using rule 44 (program_aux -> OWO .)


state 5

    (42) program -> program_aux codeblock . n_end
    (40) n_end -> .

    $end            reduce using rule 40 (n_end -> .)

    n_end                          shift and go to state 28

state 6

    (101) codeblock -> empty .

    $end            reduce using rule 101 (codeblock -> empty .)
    RCURLY          reduce using rule 101 (codeblock -> empty .)
    RETURN          reduce using rule 101 (codeblock -> empty .)


state 7

    (102) codeblock -> codeblock_aux . codeblock
    (101) codeblock -> . empty
    (102) codeblock -> . codeblock_aux codeblock
    (41) empty -> .
    (103) codeblock_aux -> . statement
    (104) codeblock_aux -> . function_definition
    (105) codeblock_aux -> . condition_if
    (106) codeblock_aux -> . loop
    (98) statement -> . statement_aux SEMICOLON
    (63) function_definition -> . n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end
    (111) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (107) loop -> . forloop
    (108) loop -> . whileloop
    (99) statement_aux -> . assign
    (100) statement_aux -> . function_call
    (30) n_before_function_definition -> .
    (110) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (109) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (96) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (97) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (67) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (45) type -> . INT_TYPE n_seen_type n_function_type
    (46) type -> . STRING_TYPE n_seen_type n_function_type
    (47) type -> . DOUBLE_TYPE n_seen_type n_function_type
    (48) type -> . FLOAT_TYPE n_seen_type n_function_type
    (49) type -> . BOOL_TYPE n_seen_type n_function_type

    $end            reduce using rule 41 (empty -> .)
    RCURLY          reduce using rule 41 (empty -> .)
    RETURN          reduce using rule 41 (empty -> .)
    IF              shift and go to state 15
    FUNCTION        reduce using rule 30 (n_before_function_definition -> .)
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    codeblock_aux                  shift and go to state 7
    codeblock                      shift and go to state 29
    empty                          shift and go to state 6
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    n_before_function_definition   shift and go to state 13
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 8

    (103) codeblock_aux -> statement .

    IF              reduce using rule 103 (codeblock_aux -> statement .)
    FOR             reduce using rule 103 (codeblock_aux -> statement .)
    WHILE           reduce using rule 103 (codeblock_aux -> statement .)
    NAME            reduce using rule 103 (codeblock_aux -> statement .)
    INT_TYPE        reduce using rule 103 (codeblock_aux -> statement .)
    STRING_TYPE     reduce using rule 103 (codeblock_aux -> statement .)
    DOUBLE_TYPE     reduce using rule 103 (codeblock_aux -> statement .)
    FLOAT_TYPE      reduce using rule 103 (codeblock_aux -> statement .)
    BOOL_TYPE       reduce using rule 103 (codeblock_aux -> statement .)
    FUNCTION        reduce using rule 103 (codeblock_aux -> statement .)
    $end            reduce using rule 103 (codeblock_aux -> statement .)
    RCURLY          reduce using rule 103 (codeblock_aux -> statement .)
    RETURN          reduce using rule 103 (codeblock_aux -> statement .)


state 9

    (104) codeblock_aux -> function_definition .

    IF              reduce using rule 104 (codeblock_aux -> function_definition .)
    FOR             reduce using rule 104 (codeblock_aux -> function_definition .)
    WHILE           reduce using rule 104 (codeblock_aux -> function_definition .)
    NAME            reduce using rule 104 (codeblock_aux -> function_definition .)
    INT_TYPE        reduce using rule 104 (codeblock_aux -> function_definition .)
    STRING_TYPE     reduce using rule 104 (codeblock_aux -> function_definition .)
    DOUBLE_TYPE     reduce using rule 104 (codeblock_aux -> function_definition .)
    FLOAT_TYPE      reduce using rule 104 (codeblock_aux -> function_definition .)
    BOOL_TYPE       reduce using rule 104 (codeblock_aux -> function_definition .)
    FUNCTION        reduce using rule 104 (codeblock_aux -> function_definition .)
    $end            reduce using rule 104 (codeblock_aux -> function_definition .)
    RCURLY          reduce using rule 104 (codeblock_aux -> function_definition .)
    RETURN          reduce using rule 104 (codeblock_aux -> function_definition .)


state 10

    (105) codeblock_aux -> condition_if .

    IF              reduce using rule 105 (codeblock_aux -> condition_if .)
    FOR             reduce using rule 105 (codeblock_aux -> condition_if .)
    WHILE           reduce using rule 105 (codeblock_aux -> condition_if .)
    NAME            reduce using rule 105 (codeblock_aux -> condition_if .)
    INT_TYPE        reduce using rule 105 (codeblock_aux -> condition_if .)
    STRING_TYPE     reduce using rule 105 (codeblock_aux -> condition_if .)
    DOUBLE_TYPE     reduce using rule 105 (codeblock_aux -> condition_if .)
    FLOAT_TYPE      reduce using rule 105 (codeblock_aux -> condition_if .)
    BOOL_TYPE       reduce using rule 105 (codeblock_aux -> condition_if .)
    FUNCTION        reduce using rule 105 (codeblock_aux -> condition_if .)
    $end            reduce using rule 105 (codeblock_aux -> condition_if .)
    RCURLY          reduce using rule 105 (codeblock_aux -> condition_if .)
    RETURN          reduce using rule 105 (codeblock_aux -> condition_if .)


state 11

    (106) codeblock_aux -> loop .

    IF              reduce using rule 106 (codeblock_aux -> loop .)
    FOR             reduce using rule 106 (codeblock_aux -> loop .)
    WHILE           reduce using rule 106 (codeblock_aux -> loop .)
    NAME            reduce using rule 106 (codeblock_aux -> loop .)
    INT_TYPE        reduce using rule 106 (codeblock_aux -> loop .)
    STRING_TYPE     reduce using rule 106 (codeblock_aux -> loop .)
    DOUBLE_TYPE     reduce using rule 106 (codeblock_aux -> loop .)
    FLOAT_TYPE      reduce using rule 106 (codeblock_aux -> loop .)
    BOOL_TYPE       reduce using rule 106 (codeblock_aux -> loop .)
    FUNCTION        reduce using rule 106 (codeblock_aux -> loop .)
    $end            reduce using rule 106 (codeblock_aux -> loop .)
    RCURLY          reduce using rule 106 (codeblock_aux -> loop .)
    RETURN          reduce using rule 106 (codeblock_aux -> loop .)


state 12

    (98) statement -> statement_aux . SEMICOLON

    SEMICOLON       shift and go to state 30


state 13

    (63) function_definition -> n_before_function_definition . FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end

    FUNCTION        shift and go to state 31


state 14

    (97) assign -> NAME . n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (67) function_call -> NAME . n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (5) n_variable_reference -> .
    (34) n_function_call_1 -> .

    EQUAL           reduce using rule 5 (n_variable_reference -> .)
    LPARENTHESIS    reduce using rule 34 (n_function_call_1 -> .)

    n_variable_reference           shift and go to state 32
    n_function_call_1              shift and go to state 33

state 15

    (111) condition_if -> IF . LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2

    LPARENTHESIS    shift and go to state 34


state 16

    (107) loop -> forloop .

    IF              reduce using rule 107 (loop -> forloop .)
    FOR             reduce using rule 107 (loop -> forloop .)
    WHILE           reduce using rule 107 (loop -> forloop .)
    NAME            reduce using rule 107 (loop -> forloop .)
    INT_TYPE        reduce using rule 107 (loop -> forloop .)
    STRING_TYPE     reduce using rule 107 (loop -> forloop .)
    DOUBLE_TYPE     reduce using rule 107 (loop -> forloop .)
    FLOAT_TYPE      reduce using rule 107 (loop -> forloop .)
    BOOL_TYPE       reduce using rule 107 (loop -> forloop .)
    FUNCTION        reduce using rule 107 (loop -> forloop .)
    $end            reduce using rule 107 (loop -> forloop .)
    RCURLY          reduce using rule 107 (loop -> forloop .)
    RETURN          reduce using rule 107 (loop -> forloop .)


state 17

    (108) loop -> whileloop .

    IF              reduce using rule 108 (loop -> whileloop .)
    FOR             reduce using rule 108 (loop -> whileloop .)
    WHILE           reduce using rule 108 (loop -> whileloop .)
    NAME            reduce using rule 108 (loop -> whileloop .)
    INT_TYPE        reduce using rule 108 (loop -> whileloop .)
    STRING_TYPE     reduce using rule 108 (loop -> whileloop .)
    DOUBLE_TYPE     reduce using rule 108 (loop -> whileloop .)
    FLOAT_TYPE      reduce using rule 108 (loop -> whileloop .)
    BOOL_TYPE       reduce using rule 108 (loop -> whileloop .)
    FUNCTION        reduce using rule 108 (loop -> whileloop .)
    $end            reduce using rule 108 (loop -> whileloop .)
    RCURLY          reduce using rule 108 (loop -> whileloop .)
    RETURN          reduce using rule 108 (loop -> whileloop .)


state 18

    (99) statement_aux -> assign .

    SEMICOLON       reduce using rule 99 (statement_aux -> assign .)


state 19

    (100) statement_aux -> function_call .

    SEMICOLON       reduce using rule 100 (statement_aux -> function_call .)


state 20

    (110) forloop -> FOR . LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope

    LPARENTHESIS    shift and go to state 35


state 21

    (109) whileloop -> WHILE . p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (26) p_n_pre_condition_loop_1 -> .

    LPARENTHESIS    reduce using rule 26 (p_n_pre_condition_loop_1 -> .)

    p_n_pre_condition_loop_1       shift and go to state 36

state 22

    (96) assign -> type . NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression

    NAME            shift and go to state 37


state 23

    (45) type -> INT_TYPE . n_seen_type n_function_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)
    LCURLY          reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 38

state 24

    (46) type -> STRING_TYPE . n_seen_type n_function_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)
    LCURLY          reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 39

state 25

    (47) type -> DOUBLE_TYPE . n_seen_type n_function_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)
    LCURLY          reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 40

state 26

    (48) type -> FLOAT_TYPE . n_seen_type n_function_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)
    LCURLY          reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 41

state 27

    (49) type -> BOOL_TYPE . n_seen_type n_function_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)
    LCURLY          reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 42

state 28

    (42) program -> program_aux codeblock n_end .

    $end            reduce using rule 42 (program -> program_aux codeblock n_end .)


state 29

    (102) codeblock -> codeblock_aux codeblock .

    $end            reduce using rule 102 (codeblock -> codeblock_aux codeblock .)
    RCURLY          reduce using rule 102 (codeblock -> codeblock_aux codeblock .)
    RETURN          reduce using rule 102 (codeblock -> codeblock_aux codeblock .)


state 30

    (98) statement -> statement_aux SEMICOLON .

    IF              reduce using rule 98 (statement -> statement_aux SEMICOLON .)
    FOR             reduce using rule 98 (statement -> statement_aux SEMICOLON .)
    WHILE           reduce using rule 98 (statement -> statement_aux SEMICOLON .)
    NAME            reduce using rule 98 (statement -> statement_aux SEMICOLON .)
    INT_TYPE        reduce using rule 98 (statement -> statement_aux SEMICOLON .)
    STRING_TYPE     reduce using rule 98 (statement -> statement_aux SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 98 (statement -> statement_aux SEMICOLON .)
    FLOAT_TYPE      reduce using rule 98 (statement -> statement_aux SEMICOLON .)
    BOOL_TYPE       reduce using rule 98 (statement -> statement_aux SEMICOLON .)
    FUNCTION        reduce using rule 98 (statement -> statement_aux SEMICOLON .)
    $end            reduce using rule 98 (statement -> statement_aux SEMICOLON .)
    RCURLY          reduce using rule 98 (statement -> statement_aux SEMICOLON .)
    RETURN          reduce using rule 98 (statement -> statement_aux SEMICOLON .)


state 31

    (63) function_definition -> n_before_function_definition FUNCTION . NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end

    NAME            shift and go to state 43


state 32

    (97) assign -> NAME n_variable_reference . n_math_expression_1_name EQUAL n_seen_equal_op expression
    (11) n_math_expression_1_name -> .

    EQUAL           reduce using rule 11 (n_math_expression_1_name -> .)

    n_math_expression_1_name       shift and go to state 44

state 33

    (67) function_call -> NAME n_function_call_1 . LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6

    LPARENTHESIS    shift and go to state 45


state 34

    (111) condition_if -> IF LPARENTHESIS . expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (76) expression -> . expression_or
    (77) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (78) expression_or -> . expression_rel
    (79) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (80) expression_rel -> . exp
    (81) expression_rel -> . exp relational_operator exp n_math_expression_9
    (82) exp -> . termino n_math_expression_4
    (83) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (84) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (85) termino -> . factor n_math_expression_5
    (86) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (87) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (88) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (89) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (90) factor -> . PLUS value
    (91) factor -> . MINUS value
    (92) factor -> . value
    (93) value -> . function_call
    (94) value -> . literal
    (95) value -> . NAME n_variable_reference n_math_expression_1_name
    (67) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (56) literal -> . FLOAT n_math_expression_1_float
    (57) literal -> . INT n_math_expression_1_int
    (58) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 46
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    NAME            shift and go to state 58
    FLOAT           shift and go to state 59
    INT             shift and go to state 60
    STRING          shift and go to state 61

    expression                     shift and go to state 47
    expression_or                  shift and go to state 48
    expression_rel                 shift and go to state 49
    exp                            shift and go to state 50
    termino                        shift and go to state 51
    factor                         shift and go to state 54
    value                          shift and go to state 55
    function_call                  shift and go to state 56
    literal                        shift and go to state 57

state 35

    (110) forloop -> FOR LPARENTHESIS . n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (2) n_open_new_scope -> .

    NAME            reduce using rule 2 (n_open_new_scope -> .)
    INT_TYPE        reduce using rule 2 (n_open_new_scope -> .)
    STRING_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    DOUBLE_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    FLOAT_TYPE      reduce using rule 2 (n_open_new_scope -> .)
    BOOL_TYPE       reduce using rule 2 (n_open_new_scope -> .)

    n_open_new_scope               shift and go to state 62

state 36

    (109) whileloop -> WHILE p_n_pre_condition_loop_1 . LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope

    LPARENTHESIS    shift and go to state 63


state 37

    (96) assign -> type NAME . n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (6) n_variable_instantiate -> .

    EQUAL           reduce using rule 6 (n_variable_instantiate -> .)

    n_variable_instantiate         shift and go to state 64

state 38

    (45) type -> INT_TYPE n_seen_type . n_function_type
    (33) n_function_type -> .

    NAME            reduce using rule 33 (n_function_type -> .)
    LCURLY          reduce using rule 33 (n_function_type -> .)

    n_function_type                shift and go to state 65

state 39

    (46) type -> STRING_TYPE n_seen_type . n_function_type
    (33) n_function_type -> .

    NAME            reduce using rule 33 (n_function_type -> .)
    LCURLY          reduce using rule 33 (n_function_type -> .)

    n_function_type                shift and go to state 66

state 40

    (47) type -> DOUBLE_TYPE n_seen_type . n_function_type
    (33) n_function_type -> .

    NAME            reduce using rule 33 (n_function_type -> .)
    LCURLY          reduce using rule 33 (n_function_type -> .)

    n_function_type                shift and go to state 67

state 41

    (48) type -> FLOAT_TYPE n_seen_type . n_function_type
    (33) n_function_type -> .

    NAME            reduce using rule 33 (n_function_type -> .)
    LCURLY          reduce using rule 33 (n_function_type -> .)

    n_function_type                shift and go to state 68

state 42

    (49) type -> BOOL_TYPE n_seen_type . n_function_type
    (33) n_function_type -> .

    NAME            reduce using rule 33 (n_function_type -> .)
    LCURLY          reduce using rule 33 (n_function_type -> .)

    n_function_type                shift and go to state 69

state 43

    (63) function_definition -> n_before_function_definition FUNCTION NAME . n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end
    (3) n_open_new_scope_function -> .

    INT_TYPE        reduce using rule 3 (n_open_new_scope_function -> .)
    STRING_TYPE     reduce using rule 3 (n_open_new_scope_function -> .)
    DOUBLE_TYPE     reduce using rule 3 (n_open_new_scope_function -> .)
    FLOAT_TYPE      reduce using rule 3 (n_open_new_scope_function -> .)
    BOOL_TYPE       reduce using rule 3 (n_open_new_scope_function -> .)
    DOUBLEDOT       reduce using rule 3 (n_open_new_scope_function -> .)

    n_open_new_scope_function      shift and go to state 70

state 44

    (97) assign -> NAME n_variable_reference n_math_expression_1_name . EQUAL n_seen_equal_op expression

    EQUAL           shift and go to state 71


state 45

    (67) function_call -> NAME n_function_call_1 LPARENTHESIS . n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (35) n_function_call_2 -> .

    LPARENTHESIS    reduce using rule 35 (n_function_call_2 -> .)
    PLUS            reduce using rule 35 (n_function_call_2 -> .)
    MINUS           reduce using rule 35 (n_function_call_2 -> .)
    NAME            reduce using rule 35 (n_function_call_2 -> .)
    FLOAT           reduce using rule 35 (n_function_call_2 -> .)
    INT             reduce using rule 35 (n_function_call_2 -> .)
    STRING          reduce using rule 35 (n_function_call_2 -> .)
    RPARENTHESIS    reduce using rule 35 (n_function_call_2 -> .)

    n_function_call_2              shift and go to state 72

state 46

    (89) factor -> LPARENTHESIS . n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (16) n_math_expression_6 -> .

    LPARENTHESIS    reduce using rule 16 (n_math_expression_6 -> .)
    PLUS            reduce using rule 16 (n_math_expression_6 -> .)
    MINUS           reduce using rule 16 (n_math_expression_6 -> .)
    NAME            reduce using rule 16 (n_math_expression_6 -> .)
    FLOAT           reduce using rule 16 (n_math_expression_6 -> .)
    INT             reduce using rule 16 (n_math_expression_6 -> .)
    STRING          reduce using rule 16 (n_math_expression_6 -> .)

    n_math_expression_6            shift and go to state 73

state 47

    (111) condition_if -> IF LPARENTHESIS expression . RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2

    RPARENTHESIS    shift and go to state 74


state 48

    (76) expression -> expression_or .
    (77) expression -> expression_or . AND n_math_expression_10 expression n_math_expression_11

    RPARENTHESIS    reduce using rule 76 (expression -> expression_or .)
    COMMA           reduce using rule 76 (expression -> expression_or .)
    SEMICOLON       reduce using rule 76 (expression -> expression_or .)
    DOUBLEDOT       reduce using rule 76 (expression -> expression_or .)
    AND             shift and go to state 75


state 49

    (78) expression_or -> expression_rel .
    (79) expression_or -> expression_rel . OR n_math_expression_10 expression_or n_math_expression_12

    AND             reduce using rule 78 (expression_or -> expression_rel .)
    RPARENTHESIS    reduce using rule 78 (expression_or -> expression_rel .)
    COMMA           reduce using rule 78 (expression_or -> expression_rel .)
    SEMICOLON       reduce using rule 78 (expression_or -> expression_rel .)
    DOUBLEDOT       reduce using rule 78 (expression_or -> expression_rel .)
    OR              shift and go to state 76


state 50

    (80) expression_rel -> exp .
    (81) expression_rel -> exp . relational_operator exp n_math_expression_9
    (50) relational_operator -> . GREATERTHAN n_math_expression_8
    (51) relational_operator -> . LESSTHAN n_math_expression_8
    (52) relational_operator -> . EQUALEQUAL n_math_expression_8
    (53) relational_operator -> . LESSTHANOREQUAL n_math_expression_8
    (54) relational_operator -> . GREATERTHANOREQUAL n_math_expression_8
    (55) relational_operator -> . NOTEQUAL n_math_expression_8

    OR              reduce using rule 80 (expression_rel -> exp .)
    AND             reduce using rule 80 (expression_rel -> exp .)
    RPARENTHESIS    reduce using rule 80 (expression_rel -> exp .)
    COMMA           reduce using rule 80 (expression_rel -> exp .)
    SEMICOLON       reduce using rule 80 (expression_rel -> exp .)
    DOUBLEDOT       reduce using rule 80 (expression_rel -> exp .)
    GREATERTHAN     shift and go to state 78
    LESSTHAN        shift and go to state 79
    EQUALEQUAL      shift and go to state 80
    LESSTHANOREQUAL shift and go to state 81
    GREATERTHANOREQUAL shift and go to state 82
    NOTEQUAL        shift and go to state 83

    relational_operator            shift and go to state 77

state 51

    (82) exp -> termino . n_math_expression_4
    (83) exp -> termino . n_math_expression_4 PLUS n_math_expression_2 exp
    (84) exp -> termino . n_math_expression_4 MINUS n_math_expression_2 exp
    (14) n_math_expression_4 -> .

    PLUS            reduce using rule 14 (n_math_expression_4 -> .)
    MINUS           reduce using rule 14 (n_math_expression_4 -> .)
    GREATERTHAN     reduce using rule 14 (n_math_expression_4 -> .)
    LESSTHAN        reduce using rule 14 (n_math_expression_4 -> .)
    EQUALEQUAL      reduce using rule 14 (n_math_expression_4 -> .)
    LESSTHANOREQUAL reduce using rule 14 (n_math_expression_4 -> .)
    GREATERTHANOREQUAL reduce using rule 14 (n_math_expression_4 -> .)
    NOTEQUAL        reduce using rule 14 (n_math_expression_4 -> .)
    OR              reduce using rule 14 (n_math_expression_4 -> .)
    AND             reduce using rule 14 (n_math_expression_4 -> .)
    RPARENTHESIS    reduce using rule 14 (n_math_expression_4 -> .)
    COMMA           reduce using rule 14 (n_math_expression_4 -> .)
    SEMICOLON       reduce using rule 14 (n_math_expression_4 -> .)
    DOUBLEDOT       reduce using rule 14 (n_math_expression_4 -> .)

    n_math_expression_4            shift and go to state 84

state 52

    (90) factor -> PLUS . value
    (93) value -> . function_call
    (94) value -> . literal
    (95) value -> . NAME n_variable_reference n_math_expression_1_name
    (67) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (56) literal -> . FLOAT n_math_expression_1_float
    (57) literal -> . INT n_math_expression_1_int
    (58) literal -> . STRING n_math_expression_1_string

    NAME            shift and go to state 58
    FLOAT           shift and go to state 59
    INT             shift and go to state 60
    STRING          shift and go to state 61

    value                          shift and go to state 85
    function_call                  shift and go to state 56
    literal                        shift and go to state 57

state 53

    (91) factor -> MINUS . value
    (93) value -> . function_call
    (94) value -> . literal
    (95) value -> . NAME n_variable_reference n_math_expression_1_name
    (67) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (56) literal -> . FLOAT n_math_expression_1_float
    (57) literal -> . INT n_math_expression_1_int
    (58) literal -> . STRING n_math_expression_1_string

    NAME            shift and go to state 58
    FLOAT           shift and go to state 59
    INT             shift and go to state 60
    STRING          shift and go to state 61

    value                          shift and go to state 86
    function_call                  shift and go to state 56
    literal                        shift and go to state 57

state 54

    (85) termino -> factor . n_math_expression_5
    (86) termino -> factor . n_math_expression_5 TIMES n_math_expression_3 termino
    (87) termino -> factor . n_math_expression_5 DIVIDE n_math_expression_3 termino
    (88) termino -> factor . n_math_expression_5 MODULUS n_math_expression_3 termino
    (15) n_math_expression_5 -> .

    TIMES           reduce using rule 15 (n_math_expression_5 -> .)
    DIVIDE          reduce using rule 15 (n_math_expression_5 -> .)
    MODULUS         reduce using rule 15 (n_math_expression_5 -> .)
    PLUS            reduce using rule 15 (n_math_expression_5 -> .)
    MINUS           reduce using rule 15 (n_math_expression_5 -> .)
    GREATERTHAN     reduce using rule 15 (n_math_expression_5 -> .)
    LESSTHAN        reduce using rule 15 (n_math_expression_5 -> .)
    EQUALEQUAL      reduce using rule 15 (n_math_expression_5 -> .)
    LESSTHANOREQUAL reduce using rule 15 (n_math_expression_5 -> .)
    GREATERTHANOREQUAL reduce using rule 15 (n_math_expression_5 -> .)
    NOTEQUAL        reduce using rule 15 (n_math_expression_5 -> .)
    OR              reduce using rule 15 (n_math_expression_5 -> .)
    AND             reduce using rule 15 (n_math_expression_5 -> .)
    RPARENTHESIS    reduce using rule 15 (n_math_expression_5 -> .)
    COMMA           reduce using rule 15 (n_math_expression_5 -> .)
    SEMICOLON       reduce using rule 15 (n_math_expression_5 -> .)
    DOUBLEDOT       reduce using rule 15 (n_math_expression_5 -> .)

    n_math_expression_5            shift and go to state 87

state 55

    (92) factor -> value .

    TIMES           reduce using rule 92 (factor -> value .)
    DIVIDE          reduce using rule 92 (factor -> value .)
    MODULUS         reduce using rule 92 (factor -> value .)
    PLUS            reduce using rule 92 (factor -> value .)
    MINUS           reduce using rule 92 (factor -> value .)
    GREATERTHAN     reduce using rule 92 (factor -> value .)
    LESSTHAN        reduce using rule 92 (factor -> value .)
    EQUALEQUAL      reduce using rule 92 (factor -> value .)
    LESSTHANOREQUAL reduce using rule 92 (factor -> value .)
    GREATERTHANOREQUAL reduce using rule 92 (factor -> value .)
    NOTEQUAL        reduce using rule 92 (factor -> value .)
    OR              reduce using rule 92 (factor -> value .)
    AND             reduce using rule 92 (factor -> value .)
    RPARENTHESIS    reduce using rule 92 (factor -> value .)
    COMMA           reduce using rule 92 (factor -> value .)
    SEMICOLON       reduce using rule 92 (factor -> value .)
    DOUBLEDOT       reduce using rule 92 (factor -> value .)


state 56

    (93) value -> function_call .

    TIMES           reduce using rule 93 (value -> function_call .)
    DIVIDE          reduce using rule 93 (value -> function_call .)
    MODULUS         reduce using rule 93 (value -> function_call .)
    PLUS            reduce using rule 93 (value -> function_call .)
    MINUS           reduce using rule 93 (value -> function_call .)
    GREATERTHAN     reduce using rule 93 (value -> function_call .)
    LESSTHAN        reduce using rule 93 (value -> function_call .)
    EQUALEQUAL      reduce using rule 93 (value -> function_call .)
    LESSTHANOREQUAL reduce using rule 93 (value -> function_call .)
    GREATERTHANOREQUAL reduce using rule 93 (value -> function_call .)
    NOTEQUAL        reduce using rule 93 (value -> function_call .)
    OR              reduce using rule 93 (value -> function_call .)
    AND             reduce using rule 93 (value -> function_call .)
    RPARENTHESIS    reduce using rule 93 (value -> function_call .)
    COMMA           reduce using rule 93 (value -> function_call .)
    SEMICOLON       reduce using rule 93 (value -> function_call .)
    DOUBLEDOT       reduce using rule 93 (value -> function_call .)


state 57

    (94) value -> literal .

    TIMES           reduce using rule 94 (value -> literal .)
    DIVIDE          reduce using rule 94 (value -> literal .)
    MODULUS         reduce using rule 94 (value -> literal .)
    PLUS            reduce using rule 94 (value -> literal .)
    MINUS           reduce using rule 94 (value -> literal .)
    GREATERTHAN     reduce using rule 94 (value -> literal .)
    LESSTHAN        reduce using rule 94 (value -> literal .)
    EQUALEQUAL      reduce using rule 94 (value -> literal .)
    LESSTHANOREQUAL reduce using rule 94 (value -> literal .)
    GREATERTHANOREQUAL reduce using rule 94 (value -> literal .)
    NOTEQUAL        reduce using rule 94 (value -> literal .)
    OR              reduce using rule 94 (value -> literal .)
    AND             reduce using rule 94 (value -> literal .)
    RPARENTHESIS    reduce using rule 94 (value -> literal .)
    COMMA           reduce using rule 94 (value -> literal .)
    SEMICOLON       reduce using rule 94 (value -> literal .)
    DOUBLEDOT       reduce using rule 94 (value -> literal .)


state 58

    (95) value -> NAME . n_variable_reference n_math_expression_1_name
    (67) function_call -> NAME . n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (5) n_variable_reference -> .
    (34) n_function_call_1 -> .

    TIMES           reduce using rule 5 (n_variable_reference -> .)
    DIVIDE          reduce using rule 5 (n_variable_reference -> .)
    MODULUS         reduce using rule 5 (n_variable_reference -> .)
    PLUS            reduce using rule 5 (n_variable_reference -> .)
    MINUS           reduce using rule 5 (n_variable_reference -> .)
    GREATERTHAN     reduce using rule 5 (n_variable_reference -> .)
    LESSTHAN        reduce using rule 5 (n_variable_reference -> .)
    EQUALEQUAL      reduce using rule 5 (n_variable_reference -> .)
    LESSTHANOREQUAL reduce using rule 5 (n_variable_reference -> .)
    GREATERTHANOREQUAL reduce using rule 5 (n_variable_reference -> .)
    NOTEQUAL        reduce using rule 5 (n_variable_reference -> .)
    OR              reduce using rule 5 (n_variable_reference -> .)
    AND             reduce using rule 5 (n_variable_reference -> .)
    RPARENTHESIS    reduce using rule 5 (n_variable_reference -> .)
    COMMA           reduce using rule 5 (n_variable_reference -> .)
    SEMICOLON       reduce using rule 5 (n_variable_reference -> .)
    DOUBLEDOT       reduce using rule 5 (n_variable_reference -> .)
    LPARENTHESIS    reduce using rule 34 (n_function_call_1 -> .)

    n_variable_reference           shift and go to state 88
    n_function_call_1              shift and go to state 33

state 59

    (56) literal -> FLOAT . n_math_expression_1_float
    (9) n_math_expression_1_float -> .

    TIMES           reduce using rule 9 (n_math_expression_1_float -> .)
    DIVIDE          reduce using rule 9 (n_math_expression_1_float -> .)
    MODULUS         reduce using rule 9 (n_math_expression_1_float -> .)
    PLUS            reduce using rule 9 (n_math_expression_1_float -> .)
    MINUS           reduce using rule 9 (n_math_expression_1_float -> .)
    GREATERTHAN     reduce using rule 9 (n_math_expression_1_float -> .)
    LESSTHAN        reduce using rule 9 (n_math_expression_1_float -> .)
    EQUALEQUAL      reduce using rule 9 (n_math_expression_1_float -> .)
    LESSTHANOREQUAL reduce using rule 9 (n_math_expression_1_float -> .)
    GREATERTHANOREQUAL reduce using rule 9 (n_math_expression_1_float -> .)
    NOTEQUAL        reduce using rule 9 (n_math_expression_1_float -> .)
    OR              reduce using rule 9 (n_math_expression_1_float -> .)
    AND             reduce using rule 9 (n_math_expression_1_float -> .)
    RPARENTHESIS    reduce using rule 9 (n_math_expression_1_float -> .)
    COMMA           reduce using rule 9 (n_math_expression_1_float -> .)
    SEMICOLON       reduce using rule 9 (n_math_expression_1_float -> .)
    DOUBLEDOT       reduce using rule 9 (n_math_expression_1_float -> .)

    n_math_expression_1_float      shift and go to state 89

state 60

    (57) literal -> INT . n_math_expression_1_int
    (8) n_math_expression_1_int -> .

    TIMES           reduce using rule 8 (n_math_expression_1_int -> .)
    DIVIDE          reduce using rule 8 (n_math_expression_1_int -> .)
    MODULUS         reduce using rule 8 (n_math_expression_1_int -> .)
    PLUS            reduce using rule 8 (n_math_expression_1_int -> .)
    MINUS           reduce using rule 8 (n_math_expression_1_int -> .)
    GREATERTHAN     reduce using rule 8 (n_math_expression_1_int -> .)
    LESSTHAN        reduce using rule 8 (n_math_expression_1_int -> .)
    EQUALEQUAL      reduce using rule 8 (n_math_expression_1_int -> .)
    LESSTHANOREQUAL reduce using rule 8 (n_math_expression_1_int -> .)
    GREATERTHANOREQUAL reduce using rule 8 (n_math_expression_1_int -> .)
    NOTEQUAL        reduce using rule 8 (n_math_expression_1_int -> .)
    OR              reduce using rule 8 (n_math_expression_1_int -> .)
    AND             reduce using rule 8 (n_math_expression_1_int -> .)
    RPARENTHESIS    reduce using rule 8 (n_math_expression_1_int -> .)
    COMMA           reduce using rule 8 (n_math_expression_1_int -> .)
    SEMICOLON       reduce using rule 8 (n_math_expression_1_int -> .)
    DOUBLEDOT       reduce using rule 8 (n_math_expression_1_int -> .)

    n_math_expression_1_int        shift and go to state 90

state 61

    (58) literal -> STRING . n_math_expression_1_string
    (10) n_math_expression_1_string -> .

    TIMES           reduce using rule 10 (n_math_expression_1_string -> .)
    DIVIDE          reduce using rule 10 (n_math_expression_1_string -> .)
    MODULUS         reduce using rule 10 (n_math_expression_1_string -> .)
    PLUS            reduce using rule 10 (n_math_expression_1_string -> .)
    MINUS           reduce using rule 10 (n_math_expression_1_string -> .)
    GREATERTHAN     reduce using rule 10 (n_math_expression_1_string -> .)
    LESSTHAN        reduce using rule 10 (n_math_expression_1_string -> .)
    EQUALEQUAL      reduce using rule 10 (n_math_expression_1_string -> .)
    LESSTHANOREQUAL reduce using rule 10 (n_math_expression_1_string -> .)
    GREATERTHANOREQUAL reduce using rule 10 (n_math_expression_1_string -> .)
    NOTEQUAL        reduce using rule 10 (n_math_expression_1_string -> .)
    OR              reduce using rule 10 (n_math_expression_1_string -> .)
    AND             reduce using rule 10 (n_math_expression_1_string -> .)
    RPARENTHESIS    reduce using rule 10 (n_math_expression_1_string -> .)
    COMMA           reduce using rule 10 (n_math_expression_1_string -> .)
    SEMICOLON       reduce using rule 10 (n_math_expression_1_string -> .)
    DOUBLEDOT       reduce using rule 10 (n_math_expression_1_string -> .)

    n_math_expression_1_string     shift and go to state 91

state 62

    (110) forloop -> FOR LPARENTHESIS n_open_new_scope . assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (96) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (97) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (45) type -> . INT_TYPE n_seen_type n_function_type
    (46) type -> . STRING_TYPE n_seen_type n_function_type
    (47) type -> . DOUBLE_TYPE n_seen_type n_function_type
    (48) type -> . FLOAT_TYPE n_seen_type n_function_type
    (49) type -> . BOOL_TYPE n_seen_type n_function_type

    NAME            shift and go to state 93
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    assign                         shift and go to state 92
    type                           shift and go to state 22

state 63

    (109) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS . expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (76) expression -> . expression_or
    (77) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (78) expression_or -> . expression_rel
    (79) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (80) expression_rel -> . exp
    (81) expression_rel -> . exp relational_operator exp n_math_expression_9
    (82) exp -> . termino n_math_expression_4
    (83) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (84) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (85) termino -> . factor n_math_expression_5
    (86) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (87) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (88) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (89) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (90) factor -> . PLUS value
    (91) factor -> . MINUS value
    (92) factor -> . value
    (93) value -> . function_call
    (94) value -> . literal
    (95) value -> . NAME n_variable_reference n_math_expression_1_name
    (67) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (56) literal -> . FLOAT n_math_expression_1_float
    (57) literal -> . INT n_math_expression_1_int
    (58) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 46
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    NAME            shift and go to state 58
    FLOAT           shift and go to state 59
    INT             shift and go to state 60
    STRING          shift and go to state 61

    expression                     shift and go to state 94
    expression_or                  shift and go to state 48
    expression_rel                 shift and go to state 49
    exp                            shift and go to state 50
    termino                        shift and go to state 51
    factor                         shift and go to state 54
    value                          shift and go to state 55
    function_call                  shift and go to state 56
    literal                        shift and go to state 57

state 64

    (96) assign -> type NAME n_variable_instantiate . n_math_expression_1_name EQUAL n_seen_equal_op expression
    (11) n_math_expression_1_name -> .

    EQUAL           reduce using rule 11 (n_math_expression_1_name -> .)

    n_math_expression_1_name       shift and go to state 95

state 65

    (45) type -> INT_TYPE n_seen_type n_function_type .

    NAME            reduce using rule 45 (type -> INT_TYPE n_seen_type n_function_type .)
    LCURLY          reduce using rule 45 (type -> INT_TYPE n_seen_type n_function_type .)


state 66

    (46) type -> STRING_TYPE n_seen_type n_function_type .

    NAME            reduce using rule 46 (type -> STRING_TYPE n_seen_type n_function_type .)
    LCURLY          reduce using rule 46 (type -> STRING_TYPE n_seen_type n_function_type .)


state 67

    (47) type -> DOUBLE_TYPE n_seen_type n_function_type .

    NAME            reduce using rule 47 (type -> DOUBLE_TYPE n_seen_type n_function_type .)
    LCURLY          reduce using rule 47 (type -> DOUBLE_TYPE n_seen_type n_function_type .)


state 68

    (48) type -> FLOAT_TYPE n_seen_type n_function_type .

    NAME            reduce using rule 48 (type -> FLOAT_TYPE n_seen_type n_function_type .)
    LCURLY          reduce using rule 48 (type -> FLOAT_TYPE n_seen_type n_function_type .)


state 69

    (49) type -> BOOL_TYPE n_seen_type n_function_type .

    NAME            reduce using rule 49 (type -> BOOL_TYPE n_seen_type n_function_type .)
    LCURLY          reduce using rule 49 (type -> BOOL_TYPE n_seen_type n_function_type .)


state 70

    (63) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function . parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end
    (71) parameter_list -> . empty
    (72) parameter_list -> . parameter
    (73) parameter_list -> . parameter COMMA parameter_list
    (41) empty -> .
    (75) parameter -> . type NAME n_variable_instantiate_param
    (45) type -> . INT_TYPE n_seen_type n_function_type
    (46) type -> . STRING_TYPE n_seen_type n_function_type
    (47) type -> . DOUBLE_TYPE n_seen_type n_function_type
    (48) type -> . FLOAT_TYPE n_seen_type n_function_type
    (49) type -> . BOOL_TYPE n_seen_type n_function_type

    DOUBLEDOT       reduce using rule 41 (empty -> .)
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    parameter_list                 shift and go to state 96
    empty                          shift and go to state 97
    parameter                      shift and go to state 98
    type                           shift and go to state 99

state 71

    (97) assign -> NAME n_variable_reference n_math_expression_1_name EQUAL . n_seen_equal_op expression
    (29) n_seen_equal_op -> .

    LPARENTHESIS    reduce using rule 29 (n_seen_equal_op -> .)
    PLUS            reduce using rule 29 (n_seen_equal_op -> .)
    MINUS           reduce using rule 29 (n_seen_equal_op -> .)
    NAME            reduce using rule 29 (n_seen_equal_op -> .)
    FLOAT           reduce using rule 29 (n_seen_equal_op -> .)
    INT             reduce using rule 29 (n_seen_equal_op -> .)
    STRING          reduce using rule 29 (n_seen_equal_op -> .)

    n_seen_equal_op                shift and go to state 100

state 72

    (67) function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 . arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (68) arg_list -> . empty
    (69) arg_list -> . arg
    (70) arg_list -> . arg COMMA n_function_call_4 arg_list
    (41) empty -> .
    (74) arg -> . expression n_function_call_3
    (76) expression -> . expression_or
    (77) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (78) expression_or -> . expression_rel
    (79) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (80) expression_rel -> . exp
    (81) expression_rel -> . exp relational_operator exp n_math_expression_9
    (82) exp -> . termino n_math_expression_4
    (83) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (84) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (85) termino -> . factor n_math_expression_5
    (86) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (87) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (88) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (89) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (90) factor -> . PLUS value
    (91) factor -> . MINUS value
    (92) factor -> . value
    (93) value -> . function_call
    (94) value -> . literal
    (95) value -> . NAME n_variable_reference n_math_expression_1_name
    (67) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (56) literal -> . FLOAT n_math_expression_1_float
    (57) literal -> . INT n_math_expression_1_int
    (58) literal -> . STRING n_math_expression_1_string

    RPARENTHESIS    reduce using rule 41 (empty -> .)
    LPARENTHESIS    shift and go to state 46
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    NAME            shift and go to state 58
    FLOAT           shift and go to state 59
    INT             shift and go to state 60
    STRING          shift and go to state 61

    arg_list                       shift and go to state 101
    empty                          shift and go to state 102
    arg                            shift and go to state 103
    expression                     shift and go to state 104
    expression_or                  shift and go to state 48
    expression_rel                 shift and go to state 49
    exp                            shift and go to state 50
    termino                        shift and go to state 51
    factor                         shift and go to state 54
    value                          shift and go to state 55
    function_call                  shift and go to state 56
    literal                        shift and go to state 57

state 73

    (89) factor -> LPARENTHESIS n_math_expression_6 . expression RPARENTHESIS n_math_expression_7
    (76) expression -> . expression_or
    (77) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (78) expression_or -> . expression_rel
    (79) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (80) expression_rel -> . exp
    (81) expression_rel -> . exp relational_operator exp n_math_expression_9
    (82) exp -> . termino n_math_expression_4
    (83) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (84) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (85) termino -> . factor n_math_expression_5
    (86) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (87) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (88) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (89) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (90) factor -> . PLUS value
    (91) factor -> . MINUS value
    (92) factor -> . value
    (93) value -> . function_call
    (94) value -> . literal
    (95) value -> . NAME n_variable_reference n_math_expression_1_name
    (67) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (56) literal -> . FLOAT n_math_expression_1_float
    (57) literal -> . INT n_math_expression_1_int
    (58) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 46
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    NAME            shift and go to state 58
    FLOAT           shift and go to state 59
    INT             shift and go to state 60
    STRING          shift and go to state 61

    expression                     shift and go to state 105
    expression_or                  shift and go to state 48
    expression_rel                 shift and go to state 49
    exp                            shift and go to state 50
    termino                        shift and go to state 51
    factor                         shift and go to state 54
    value                          shift and go to state 55
    function_call                  shift and go to state 56
    literal                        shift and go to state 57

state 74

    (111) condition_if -> IF LPARENTHESIS expression RPARENTHESIS . LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2

    LCURLY          shift and go to state 106


state 75

    (77) expression -> expression_or AND . n_math_expression_10 expression n_math_expression_11
    (20) n_math_expression_10 -> .

    LPARENTHESIS    reduce using rule 20 (n_math_expression_10 -> .)
    PLUS            reduce using rule 20 (n_math_expression_10 -> .)
    MINUS           reduce using rule 20 (n_math_expression_10 -> .)
    NAME            reduce using rule 20 (n_math_expression_10 -> .)
    FLOAT           reduce using rule 20 (n_math_expression_10 -> .)
    INT             reduce using rule 20 (n_math_expression_10 -> .)
    STRING          reduce using rule 20 (n_math_expression_10 -> .)

    n_math_expression_10           shift and go to state 107

state 76

    (79) expression_or -> expression_rel OR . n_math_expression_10 expression_or n_math_expression_12
    (20) n_math_expression_10 -> .

    LPARENTHESIS    reduce using rule 20 (n_math_expression_10 -> .)
    PLUS            reduce using rule 20 (n_math_expression_10 -> .)
    MINUS           reduce using rule 20 (n_math_expression_10 -> .)
    NAME            reduce using rule 20 (n_math_expression_10 -> .)
    FLOAT           reduce using rule 20 (n_math_expression_10 -> .)
    INT             reduce using rule 20 (n_math_expression_10 -> .)
    STRING          reduce using rule 20 (n_math_expression_10 -> .)

    n_math_expression_10           shift and go to state 108

state 77

    (81) expression_rel -> exp relational_operator . exp n_math_expression_9
    (82) exp -> . termino n_math_expression_4
    (83) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (84) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (85) termino -> . factor n_math_expression_5
    (86) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (87) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (88) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (89) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (90) factor -> . PLUS value
    (91) factor -> . MINUS value
    (92) factor -> . value
    (93) value -> . function_call
    (94) value -> . literal
    (95) value -> . NAME n_variable_reference n_math_expression_1_name
    (67) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (56) literal -> . FLOAT n_math_expression_1_float
    (57) literal -> . INT n_math_expression_1_int
    (58) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 46
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    NAME            shift and go to state 58
    FLOAT           shift and go to state 59
    INT             shift and go to state 60
    STRING          shift and go to state 61

    exp                            shift and go to state 109
    termino                        shift and go to state 51
    factor                         shift and go to state 54
    value                          shift and go to state 55
    function_call                  shift and go to state 56
    literal                        shift and go to state 57

state 78

    (50) relational_operator -> GREATERTHAN . n_math_expression_8
    (18) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 18 (n_math_expression_8 -> .)
    PLUS            reduce using rule 18 (n_math_expression_8 -> .)
    MINUS           reduce using rule 18 (n_math_expression_8 -> .)
    NAME            reduce using rule 18 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 18 (n_math_expression_8 -> .)
    INT             reduce using rule 18 (n_math_expression_8 -> .)
    STRING          reduce using rule 18 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 110

state 79

    (51) relational_operator -> LESSTHAN . n_math_expression_8
    (18) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 18 (n_math_expression_8 -> .)
    PLUS            reduce using rule 18 (n_math_expression_8 -> .)
    MINUS           reduce using rule 18 (n_math_expression_8 -> .)
    NAME            reduce using rule 18 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 18 (n_math_expression_8 -> .)
    INT             reduce using rule 18 (n_math_expression_8 -> .)
    STRING          reduce using rule 18 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 111

state 80

    (52) relational_operator -> EQUALEQUAL . n_math_expression_8
    (18) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 18 (n_math_expression_8 -> .)
    PLUS            reduce using rule 18 (n_math_expression_8 -> .)
    MINUS           reduce using rule 18 (n_math_expression_8 -> .)
    NAME            reduce using rule 18 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 18 (n_math_expression_8 -> .)
    INT             reduce using rule 18 (n_math_expression_8 -> .)
    STRING          reduce using rule 18 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 112

state 81

    (53) relational_operator -> LESSTHANOREQUAL . n_math_expression_8
    (18) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 18 (n_math_expression_8 -> .)
    PLUS            reduce using rule 18 (n_math_expression_8 -> .)
    MINUS           reduce using rule 18 (n_math_expression_8 -> .)
    NAME            reduce using rule 18 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 18 (n_math_expression_8 -> .)
    INT             reduce using rule 18 (n_math_expression_8 -> .)
    STRING          reduce using rule 18 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 113

state 82

    (54) relational_operator -> GREATERTHANOREQUAL . n_math_expression_8
    (18) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 18 (n_math_expression_8 -> .)
    PLUS            reduce using rule 18 (n_math_expression_8 -> .)
    MINUS           reduce using rule 18 (n_math_expression_8 -> .)
    NAME            reduce using rule 18 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 18 (n_math_expression_8 -> .)
    INT             reduce using rule 18 (n_math_expression_8 -> .)
    STRING          reduce using rule 18 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 114

state 83

    (55) relational_operator -> NOTEQUAL . n_math_expression_8
    (18) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 18 (n_math_expression_8 -> .)
    PLUS            reduce using rule 18 (n_math_expression_8 -> .)
    MINUS           reduce using rule 18 (n_math_expression_8 -> .)
    NAME            reduce using rule 18 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 18 (n_math_expression_8 -> .)
    INT             reduce using rule 18 (n_math_expression_8 -> .)
    STRING          reduce using rule 18 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 115

state 84

    (82) exp -> termino n_math_expression_4 .
    (83) exp -> termino n_math_expression_4 . PLUS n_math_expression_2 exp
    (84) exp -> termino n_math_expression_4 . MINUS n_math_expression_2 exp

    GREATERTHAN     reduce using rule 82 (exp -> termino n_math_expression_4 .)
    LESSTHAN        reduce using rule 82 (exp -> termino n_math_expression_4 .)
    EQUALEQUAL      reduce using rule 82 (exp -> termino n_math_expression_4 .)
    LESSTHANOREQUAL reduce using rule 82 (exp -> termino n_math_expression_4 .)
    GREATERTHANOREQUAL reduce using rule 82 (exp -> termino n_math_expression_4 .)
    NOTEQUAL        reduce using rule 82 (exp -> termino n_math_expression_4 .)
    OR              reduce using rule 82 (exp -> termino n_math_expression_4 .)
    AND             reduce using rule 82 (exp -> termino n_math_expression_4 .)
    RPARENTHESIS    reduce using rule 82 (exp -> termino n_math_expression_4 .)
    COMMA           reduce using rule 82 (exp -> termino n_math_expression_4 .)
    SEMICOLON       reduce using rule 82 (exp -> termino n_math_expression_4 .)
    DOUBLEDOT       reduce using rule 82 (exp -> termino n_math_expression_4 .)
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117


state 85

    (90) factor -> PLUS value .

    TIMES           reduce using rule 90 (factor -> PLUS value .)
    DIVIDE          reduce using rule 90 (factor -> PLUS value .)
    MODULUS         reduce using rule 90 (factor -> PLUS value .)
    PLUS            reduce using rule 90 (factor -> PLUS value .)
    MINUS           reduce using rule 90 (factor -> PLUS value .)
    GREATERTHAN     reduce using rule 90 (factor -> PLUS value .)
    LESSTHAN        reduce using rule 90 (factor -> PLUS value .)
    EQUALEQUAL      reduce using rule 90 (factor -> PLUS value .)
    LESSTHANOREQUAL reduce using rule 90 (factor -> PLUS value .)
    GREATERTHANOREQUAL reduce using rule 90 (factor -> PLUS value .)
    NOTEQUAL        reduce using rule 90 (factor -> PLUS value .)
    OR              reduce using rule 90 (factor -> PLUS value .)
    AND             reduce using rule 90 (factor -> PLUS value .)
    RPARENTHESIS    reduce using rule 90 (factor -> PLUS value .)
    COMMA           reduce using rule 90 (factor -> PLUS value .)
    SEMICOLON       reduce using rule 90 (factor -> PLUS value .)
    DOUBLEDOT       reduce using rule 90 (factor -> PLUS value .)


state 86

    (91) factor -> MINUS value .

    TIMES           reduce using rule 91 (factor -> MINUS value .)
    DIVIDE          reduce using rule 91 (factor -> MINUS value .)
    MODULUS         reduce using rule 91 (factor -> MINUS value .)
    PLUS            reduce using rule 91 (factor -> MINUS value .)
    MINUS           reduce using rule 91 (factor -> MINUS value .)
    GREATERTHAN     reduce using rule 91 (factor -> MINUS value .)
    LESSTHAN        reduce using rule 91 (factor -> MINUS value .)
    EQUALEQUAL      reduce using rule 91 (factor -> MINUS value .)
    LESSTHANOREQUAL reduce using rule 91 (factor -> MINUS value .)
    GREATERTHANOREQUAL reduce using rule 91 (factor -> MINUS value .)
    NOTEQUAL        reduce using rule 91 (factor -> MINUS value .)
    OR              reduce using rule 91 (factor -> MINUS value .)
    AND             reduce using rule 91 (factor -> MINUS value .)
    RPARENTHESIS    reduce using rule 91 (factor -> MINUS value .)
    COMMA           reduce using rule 91 (factor -> MINUS value .)
    SEMICOLON       reduce using rule 91 (factor -> MINUS value .)
    DOUBLEDOT       reduce using rule 91 (factor -> MINUS value .)


state 87

    (85) termino -> factor n_math_expression_5 .
    (86) termino -> factor n_math_expression_5 . TIMES n_math_expression_3 termino
    (87) termino -> factor n_math_expression_5 . DIVIDE n_math_expression_3 termino
    (88) termino -> factor n_math_expression_5 . MODULUS n_math_expression_3 termino

    PLUS            reduce using rule 85 (termino -> factor n_math_expression_5 .)
    MINUS           reduce using rule 85 (termino -> factor n_math_expression_5 .)
    GREATERTHAN     reduce using rule 85 (termino -> factor n_math_expression_5 .)
    LESSTHAN        reduce using rule 85 (termino -> factor n_math_expression_5 .)
    EQUALEQUAL      reduce using rule 85 (termino -> factor n_math_expression_5 .)
    LESSTHANOREQUAL reduce using rule 85 (termino -> factor n_math_expression_5 .)
    GREATERTHANOREQUAL reduce using rule 85 (termino -> factor n_math_expression_5 .)
    NOTEQUAL        reduce using rule 85 (termino -> factor n_math_expression_5 .)
    OR              reduce using rule 85 (termino -> factor n_math_expression_5 .)
    AND             reduce using rule 85 (termino -> factor n_math_expression_5 .)
    RPARENTHESIS    reduce using rule 85 (termino -> factor n_math_expression_5 .)
    COMMA           reduce using rule 85 (termino -> factor n_math_expression_5 .)
    SEMICOLON       reduce using rule 85 (termino -> factor n_math_expression_5 .)
    DOUBLEDOT       reduce using rule 85 (termino -> factor n_math_expression_5 .)
    TIMES           shift and go to state 118
    DIVIDE          shift and go to state 119
    MODULUS         shift and go to state 120


state 88

    (95) value -> NAME n_variable_reference . n_math_expression_1_name
    (11) n_math_expression_1_name -> .

    TIMES           reduce using rule 11 (n_math_expression_1_name -> .)
    DIVIDE          reduce using rule 11 (n_math_expression_1_name -> .)
    MODULUS         reduce using rule 11 (n_math_expression_1_name -> .)
    PLUS            reduce using rule 11 (n_math_expression_1_name -> .)
    MINUS           reduce using rule 11 (n_math_expression_1_name -> .)
    GREATERTHAN     reduce using rule 11 (n_math_expression_1_name -> .)
    LESSTHAN        reduce using rule 11 (n_math_expression_1_name -> .)
    EQUALEQUAL      reduce using rule 11 (n_math_expression_1_name -> .)
    LESSTHANOREQUAL reduce using rule 11 (n_math_expression_1_name -> .)
    GREATERTHANOREQUAL reduce using rule 11 (n_math_expression_1_name -> .)
    NOTEQUAL        reduce using rule 11 (n_math_expression_1_name -> .)
    OR              reduce using rule 11 (n_math_expression_1_name -> .)
    AND             reduce using rule 11 (n_math_expression_1_name -> .)
    RPARENTHESIS    reduce using rule 11 (n_math_expression_1_name -> .)
    COMMA           reduce using rule 11 (n_math_expression_1_name -> .)
    SEMICOLON       reduce using rule 11 (n_math_expression_1_name -> .)
    DOUBLEDOT       reduce using rule 11 (n_math_expression_1_name -> .)

    n_math_expression_1_name       shift and go to state 121

state 89

    (56) literal -> FLOAT n_math_expression_1_float .

    TIMES           reduce using rule 56 (literal -> FLOAT n_math_expression_1_float .)
    DIVIDE          reduce using rule 56 (literal -> FLOAT n_math_expression_1_float .)
    MODULUS         reduce using rule 56 (literal -> FLOAT n_math_expression_1_float .)
    PLUS            reduce using rule 56 (literal -> FLOAT n_math_expression_1_float .)
    MINUS           reduce using rule 56 (literal -> FLOAT n_math_expression_1_float .)
    GREATERTHAN     reduce using rule 56 (literal -> FLOAT n_math_expression_1_float .)
    LESSTHAN        reduce using rule 56 (literal -> FLOAT n_math_expression_1_float .)
    EQUALEQUAL      reduce using rule 56 (literal -> FLOAT n_math_expression_1_float .)
    LESSTHANOREQUAL reduce using rule 56 (literal -> FLOAT n_math_expression_1_float .)
    GREATERTHANOREQUAL reduce using rule 56 (literal -> FLOAT n_math_expression_1_float .)
    NOTEQUAL        reduce using rule 56 (literal -> FLOAT n_math_expression_1_float .)
    OR              reduce using rule 56 (literal -> FLOAT n_math_expression_1_float .)
    AND             reduce using rule 56 (literal -> FLOAT n_math_expression_1_float .)
    RPARENTHESIS    reduce using rule 56 (literal -> FLOAT n_math_expression_1_float .)
    COMMA           reduce using rule 56 (literal -> FLOAT n_math_expression_1_float .)
    SEMICOLON       reduce using rule 56 (literal -> FLOAT n_math_expression_1_float .)
    DOUBLEDOT       reduce using rule 56 (literal -> FLOAT n_math_expression_1_float .)


state 90

    (57) literal -> INT n_math_expression_1_int .

    TIMES           reduce using rule 57 (literal -> INT n_math_expression_1_int .)
    DIVIDE          reduce using rule 57 (literal -> INT n_math_expression_1_int .)
    MODULUS         reduce using rule 57 (literal -> INT n_math_expression_1_int .)
    PLUS            reduce using rule 57 (literal -> INT n_math_expression_1_int .)
    MINUS           reduce using rule 57 (literal -> INT n_math_expression_1_int .)
    GREATERTHAN     reduce using rule 57 (literal -> INT n_math_expression_1_int .)
    LESSTHAN        reduce using rule 57 (literal -> INT n_math_expression_1_int .)
    EQUALEQUAL      reduce using rule 57 (literal -> INT n_math_expression_1_int .)
    LESSTHANOREQUAL reduce using rule 57 (literal -> INT n_math_expression_1_int .)
    GREATERTHANOREQUAL reduce using rule 57 (literal -> INT n_math_expression_1_int .)
    NOTEQUAL        reduce using rule 57 (literal -> INT n_math_expression_1_int .)
    OR              reduce using rule 57 (literal -> INT n_math_expression_1_int .)
    AND             reduce using rule 57 (literal -> INT n_math_expression_1_int .)
    RPARENTHESIS    reduce using rule 57 (literal -> INT n_math_expression_1_int .)
    COMMA           reduce using rule 57 (literal -> INT n_math_expression_1_int .)
    SEMICOLON       reduce using rule 57 (literal -> INT n_math_expression_1_int .)
    DOUBLEDOT       reduce using rule 57 (literal -> INT n_math_expression_1_int .)


state 91

    (58) literal -> STRING n_math_expression_1_string .

    TIMES           reduce using rule 58 (literal -> STRING n_math_expression_1_string .)
    DIVIDE          reduce using rule 58 (literal -> STRING n_math_expression_1_string .)
    MODULUS         reduce using rule 58 (literal -> STRING n_math_expression_1_string .)
    PLUS            reduce using rule 58 (literal -> STRING n_math_expression_1_string .)
    MINUS           reduce using rule 58 (literal -> STRING n_math_expression_1_string .)
    GREATERTHAN     reduce using rule 58 (literal -> STRING n_math_expression_1_string .)
    LESSTHAN        reduce using rule 58 (literal -> STRING n_math_expression_1_string .)
    EQUALEQUAL      reduce using rule 58 (literal -> STRING n_math_expression_1_string .)
    LESSTHANOREQUAL reduce using rule 58 (literal -> STRING n_math_expression_1_string .)
    GREATERTHANOREQUAL reduce using rule 58 (literal -> STRING n_math_expression_1_string .)
    NOTEQUAL        reduce using rule 58 (literal -> STRING n_math_expression_1_string .)
    OR              reduce using rule 58 (literal -> STRING n_math_expression_1_string .)
    AND             reduce using rule 58 (literal -> STRING n_math_expression_1_string .)
    RPARENTHESIS    reduce using rule 58 (literal -> STRING n_math_expression_1_string .)
    COMMA           reduce using rule 58 (literal -> STRING n_math_expression_1_string .)
    SEMICOLON       reduce using rule 58 (literal -> STRING n_math_expression_1_string .)
    DOUBLEDOT       reduce using rule 58 (literal -> STRING n_math_expression_1_string .)


state 92

    (110) forloop -> FOR LPARENTHESIS n_open_new_scope assign . DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope

    DOUBLEDOT       shift and go to state 122


state 93

    (97) assign -> NAME . n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (5) n_variable_reference -> .

    EQUAL           reduce using rule 5 (n_variable_reference -> .)

    n_variable_reference           shift and go to state 32

state 94

    (109) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression . RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope

    RPARENTHESIS    shift and go to state 123


state 95

    (96) assign -> type NAME n_variable_instantiate n_math_expression_1_name . EQUAL n_seen_equal_op expression

    EQUAL           shift and go to state 124


state 96

    (63) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list . DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end

    DOUBLEDOT       shift and go to state 125


state 97

    (71) parameter_list -> empty .

    DOUBLEDOT       reduce using rule 71 (parameter_list -> empty .)


state 98

    (72) parameter_list -> parameter .
    (73) parameter_list -> parameter . COMMA parameter_list

    DOUBLEDOT       reduce using rule 72 (parameter_list -> parameter .)
    COMMA           shift and go to state 126


state 99

    (75) parameter -> type . NAME n_variable_instantiate_param

    NAME            shift and go to state 127


state 100

    (97) assign -> NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op . expression
    (76) expression -> . expression_or
    (77) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (78) expression_or -> . expression_rel
    (79) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (80) expression_rel -> . exp
    (81) expression_rel -> . exp relational_operator exp n_math_expression_9
    (82) exp -> . termino n_math_expression_4
    (83) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (84) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (85) termino -> . factor n_math_expression_5
    (86) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (87) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (88) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (89) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (90) factor -> . PLUS value
    (91) factor -> . MINUS value
    (92) factor -> . value
    (93) value -> . function_call
    (94) value -> . literal
    (95) value -> . NAME n_variable_reference n_math_expression_1_name
    (67) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (56) literal -> . FLOAT n_math_expression_1_float
    (57) literal -> . INT n_math_expression_1_int
    (58) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 46
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    NAME            shift and go to state 58
    FLOAT           shift and go to state 59
    INT             shift and go to state 60
    STRING          shift and go to state 61

    expression                     shift and go to state 128
    expression_or                  shift and go to state 48
    expression_rel                 shift and go to state 49
    exp                            shift and go to state 50
    termino                        shift and go to state 51
    factor                         shift and go to state 54
    value                          shift and go to state 55
    function_call                  shift and go to state 56
    literal                        shift and go to state 57

state 101

    (67) function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list . RPARENTHESIS n_function_call_5 n_function_call_6

    RPARENTHESIS    shift and go to state 129


state 102

    (68) arg_list -> empty .

    RPARENTHESIS    reduce using rule 68 (arg_list -> empty .)


state 103

    (69) arg_list -> arg .
    (70) arg_list -> arg . COMMA n_function_call_4 arg_list

    RPARENTHESIS    reduce using rule 69 (arg_list -> arg .)
    COMMA           shift and go to state 130


state 104

    (74) arg -> expression . n_function_call_3
    (36) n_function_call_3 -> .

    COMMA           reduce using rule 36 (n_function_call_3 -> .)
    RPARENTHESIS    reduce using rule 36 (n_function_call_3 -> .)

    n_function_call_3              shift and go to state 131

state 105

    (89) factor -> LPARENTHESIS n_math_expression_6 expression . RPARENTHESIS n_math_expression_7

    RPARENTHESIS    shift and go to state 132


state 106

    (111) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY . n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (23) n_two_way_conditional_1 -> .

    IF              reduce using rule 23 (n_two_way_conditional_1 -> .)
    FOR             reduce using rule 23 (n_two_way_conditional_1 -> .)
    WHILE           reduce using rule 23 (n_two_way_conditional_1 -> .)
    NAME            reduce using rule 23 (n_two_way_conditional_1 -> .)
    INT_TYPE        reduce using rule 23 (n_two_way_conditional_1 -> .)
    STRING_TYPE     reduce using rule 23 (n_two_way_conditional_1 -> .)
    DOUBLE_TYPE     reduce using rule 23 (n_two_way_conditional_1 -> .)
    FLOAT_TYPE      reduce using rule 23 (n_two_way_conditional_1 -> .)
    BOOL_TYPE       reduce using rule 23 (n_two_way_conditional_1 -> .)
    RCURLY          reduce using rule 23 (n_two_way_conditional_1 -> .)
    FUNCTION        reduce using rule 23 (n_two_way_conditional_1 -> .)

    n_two_way_conditional_1        shift and go to state 133

state 107

    (77) expression -> expression_or AND n_math_expression_10 . expression n_math_expression_11
    (76) expression -> . expression_or
    (77) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (78) expression_or -> . expression_rel
    (79) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (80) expression_rel -> . exp
    (81) expression_rel -> . exp relational_operator exp n_math_expression_9
    (82) exp -> . termino n_math_expression_4
    (83) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (84) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (85) termino -> . factor n_math_expression_5
    (86) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (87) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (88) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (89) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (90) factor -> . PLUS value
    (91) factor -> . MINUS value
    (92) factor -> . value
    (93) value -> . function_call
    (94) value -> . literal
    (95) value -> . NAME n_variable_reference n_math_expression_1_name
    (67) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (56) literal -> . FLOAT n_math_expression_1_float
    (57) literal -> . INT n_math_expression_1_int
    (58) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 46
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    NAME            shift and go to state 58
    FLOAT           shift and go to state 59
    INT             shift and go to state 60
    STRING          shift and go to state 61

    expression_or                  shift and go to state 48
    expression                     shift and go to state 134
    expression_rel                 shift and go to state 49
    exp                            shift and go to state 50
    termino                        shift and go to state 51
    factor                         shift and go to state 54
    value                          shift and go to state 55
    function_call                  shift and go to state 56
    literal                        shift and go to state 57

state 108

    (79) expression_or -> expression_rel OR n_math_expression_10 . expression_or n_math_expression_12
    (78) expression_or -> . expression_rel
    (79) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (80) expression_rel -> . exp
    (81) expression_rel -> . exp relational_operator exp n_math_expression_9
    (82) exp -> . termino n_math_expression_4
    (83) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (84) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (85) termino -> . factor n_math_expression_5
    (86) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (87) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (88) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (89) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (90) factor -> . PLUS value
    (91) factor -> . MINUS value
    (92) factor -> . value
    (93) value -> . function_call
    (94) value -> . literal
    (95) value -> . NAME n_variable_reference n_math_expression_1_name
    (67) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (56) literal -> . FLOAT n_math_expression_1_float
    (57) literal -> . INT n_math_expression_1_int
    (58) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 46
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    NAME            shift and go to state 58
    FLOAT           shift and go to state 59
    INT             shift and go to state 60
    STRING          shift and go to state 61

    expression_rel                 shift and go to state 49
    expression_or                  shift and go to state 135
    exp                            shift and go to state 50
    termino                        shift and go to state 51
    factor                         shift and go to state 54
    value                          shift and go to state 55
    function_call                  shift and go to state 56
    literal                        shift and go to state 57

state 109

    (81) expression_rel -> exp relational_operator exp . n_math_expression_9
    (19) n_math_expression_9 -> .

    OR              reduce using rule 19 (n_math_expression_9 -> .)
    AND             reduce using rule 19 (n_math_expression_9 -> .)
    RPARENTHESIS    reduce using rule 19 (n_math_expression_9 -> .)
    COMMA           reduce using rule 19 (n_math_expression_9 -> .)
    SEMICOLON       reduce using rule 19 (n_math_expression_9 -> .)
    DOUBLEDOT       reduce using rule 19 (n_math_expression_9 -> .)

    n_math_expression_9            shift and go to state 136

state 110

    (50) relational_operator -> GREATERTHAN n_math_expression_8 .

    LPARENTHESIS    reduce using rule 50 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    PLUS            reduce using rule 50 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    MINUS           reduce using rule 50 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    NAME            reduce using rule 50 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    FLOAT           reduce using rule 50 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    INT             reduce using rule 50 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    STRING          reduce using rule 50 (relational_operator -> GREATERTHAN n_math_expression_8 .)


state 111

    (51) relational_operator -> LESSTHAN n_math_expression_8 .

    LPARENTHESIS    reduce using rule 51 (relational_operator -> LESSTHAN n_math_expression_8 .)
    PLUS            reduce using rule 51 (relational_operator -> LESSTHAN n_math_expression_8 .)
    MINUS           reduce using rule 51 (relational_operator -> LESSTHAN n_math_expression_8 .)
    NAME            reduce using rule 51 (relational_operator -> LESSTHAN n_math_expression_8 .)
    FLOAT           reduce using rule 51 (relational_operator -> LESSTHAN n_math_expression_8 .)
    INT             reduce using rule 51 (relational_operator -> LESSTHAN n_math_expression_8 .)
    STRING          reduce using rule 51 (relational_operator -> LESSTHAN n_math_expression_8 .)


state 112

    (52) relational_operator -> EQUALEQUAL n_math_expression_8 .

    LPARENTHESIS    reduce using rule 52 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    PLUS            reduce using rule 52 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    MINUS           reduce using rule 52 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    NAME            reduce using rule 52 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    FLOAT           reduce using rule 52 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    INT             reduce using rule 52 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    STRING          reduce using rule 52 (relational_operator -> EQUALEQUAL n_math_expression_8 .)


state 113

    (53) relational_operator -> LESSTHANOREQUAL n_math_expression_8 .

    LPARENTHESIS    reduce using rule 53 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    PLUS            reduce using rule 53 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    MINUS           reduce using rule 53 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    NAME            reduce using rule 53 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    FLOAT           reduce using rule 53 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    INT             reduce using rule 53 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    STRING          reduce using rule 53 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)


state 114

    (54) relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .

    LPARENTHESIS    reduce using rule 54 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    PLUS            reduce using rule 54 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    MINUS           reduce using rule 54 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    NAME            reduce using rule 54 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    FLOAT           reduce using rule 54 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    INT             reduce using rule 54 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    STRING          reduce using rule 54 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)


state 115

    (55) relational_operator -> NOTEQUAL n_math_expression_8 .

    LPARENTHESIS    reduce using rule 55 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    PLUS            reduce using rule 55 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    MINUS           reduce using rule 55 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    NAME            reduce using rule 55 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    FLOAT           reduce using rule 55 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    INT             reduce using rule 55 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    STRING          reduce using rule 55 (relational_operator -> NOTEQUAL n_math_expression_8 .)


state 116

    (83) exp -> termino n_math_expression_4 PLUS . n_math_expression_2 exp
    (12) n_math_expression_2 -> .

    LPARENTHESIS    reduce using rule 12 (n_math_expression_2 -> .)
    PLUS            reduce using rule 12 (n_math_expression_2 -> .)
    MINUS           reduce using rule 12 (n_math_expression_2 -> .)
    NAME            reduce using rule 12 (n_math_expression_2 -> .)
    FLOAT           reduce using rule 12 (n_math_expression_2 -> .)
    INT             reduce using rule 12 (n_math_expression_2 -> .)
    STRING          reduce using rule 12 (n_math_expression_2 -> .)

    n_math_expression_2            shift and go to state 137

state 117

    (84) exp -> termino n_math_expression_4 MINUS . n_math_expression_2 exp
    (12) n_math_expression_2 -> .

    LPARENTHESIS    reduce using rule 12 (n_math_expression_2 -> .)
    PLUS            reduce using rule 12 (n_math_expression_2 -> .)
    MINUS           reduce using rule 12 (n_math_expression_2 -> .)
    NAME            reduce using rule 12 (n_math_expression_2 -> .)
    FLOAT           reduce using rule 12 (n_math_expression_2 -> .)
    INT             reduce using rule 12 (n_math_expression_2 -> .)
    STRING          reduce using rule 12 (n_math_expression_2 -> .)

    n_math_expression_2            shift and go to state 138

state 118

    (86) termino -> factor n_math_expression_5 TIMES . n_math_expression_3 termino
    (13) n_math_expression_3 -> .

    LPARENTHESIS    reduce using rule 13 (n_math_expression_3 -> .)
    PLUS            reduce using rule 13 (n_math_expression_3 -> .)
    MINUS           reduce using rule 13 (n_math_expression_3 -> .)
    NAME            reduce using rule 13 (n_math_expression_3 -> .)
    FLOAT           reduce using rule 13 (n_math_expression_3 -> .)
    INT             reduce using rule 13 (n_math_expression_3 -> .)
    STRING          reduce using rule 13 (n_math_expression_3 -> .)

    n_math_expression_3            shift and go to state 139

state 119

    (87) termino -> factor n_math_expression_5 DIVIDE . n_math_expression_3 termino
    (13) n_math_expression_3 -> .

    LPARENTHESIS    reduce using rule 13 (n_math_expression_3 -> .)
    PLUS            reduce using rule 13 (n_math_expression_3 -> .)
    MINUS           reduce using rule 13 (n_math_expression_3 -> .)
    NAME            reduce using rule 13 (n_math_expression_3 -> .)
    FLOAT           reduce using rule 13 (n_math_expression_3 -> .)
    INT             reduce using rule 13 (n_math_expression_3 -> .)
    STRING          reduce using rule 13 (n_math_expression_3 -> .)

    n_math_expression_3            shift and go to state 140

state 120

    (88) termino -> factor n_math_expression_5 MODULUS . n_math_expression_3 termino
    (13) n_math_expression_3 -> .

    LPARENTHESIS    reduce using rule 13 (n_math_expression_3 -> .)
    PLUS            reduce using rule 13 (n_math_expression_3 -> .)
    MINUS           reduce using rule 13 (n_math_expression_3 -> .)
    NAME            reduce using rule 13 (n_math_expression_3 -> .)
    FLOAT           reduce using rule 13 (n_math_expression_3 -> .)
    INT             reduce using rule 13 (n_math_expression_3 -> .)
    STRING          reduce using rule 13 (n_math_expression_3 -> .)

    n_math_expression_3            shift and go to state 141

state 121

    (95) value -> NAME n_variable_reference n_math_expression_1_name .

    TIMES           reduce using rule 95 (value -> NAME n_variable_reference n_math_expression_1_name .)
    DIVIDE          reduce using rule 95 (value -> NAME n_variable_reference n_math_expression_1_name .)
    MODULUS         reduce using rule 95 (value -> NAME n_variable_reference n_math_expression_1_name .)
    PLUS            reduce using rule 95 (value -> NAME n_variable_reference n_math_expression_1_name .)
    MINUS           reduce using rule 95 (value -> NAME n_variable_reference n_math_expression_1_name .)
    GREATERTHAN     reduce using rule 95 (value -> NAME n_variable_reference n_math_expression_1_name .)
    LESSTHAN        reduce using rule 95 (value -> NAME n_variable_reference n_math_expression_1_name .)
    EQUALEQUAL      reduce using rule 95 (value -> NAME n_variable_reference n_math_expression_1_name .)
    LESSTHANOREQUAL reduce using rule 95 (value -> NAME n_variable_reference n_math_expression_1_name .)
    GREATERTHANOREQUAL reduce using rule 95 (value -> NAME n_variable_reference n_math_expression_1_name .)
    NOTEQUAL        reduce using rule 95 (value -> NAME n_variable_reference n_math_expression_1_name .)
    OR              reduce using rule 95 (value -> NAME n_variable_reference n_math_expression_1_name .)
    AND             reduce using rule 95 (value -> NAME n_variable_reference n_math_expression_1_name .)
    RPARENTHESIS    reduce using rule 95 (value -> NAME n_variable_reference n_math_expression_1_name .)
    COMMA           reduce using rule 95 (value -> NAME n_variable_reference n_math_expression_1_name .)
    SEMICOLON       reduce using rule 95 (value -> NAME n_variable_reference n_math_expression_1_name .)
    DOUBLEDOT       reduce using rule 95 (value -> NAME n_variable_reference n_math_expression_1_name .)


state 122

    (110) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT . expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (76) expression -> . expression_or
    (77) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (78) expression_or -> . expression_rel
    (79) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (80) expression_rel -> . exp
    (81) expression_rel -> . exp relational_operator exp n_math_expression_9
    (82) exp -> . termino n_math_expression_4
    (83) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (84) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (85) termino -> . factor n_math_expression_5
    (86) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (87) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (88) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (89) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (90) factor -> . PLUS value
    (91) factor -> . MINUS value
    (92) factor -> . value
    (93) value -> . function_call
    (94) value -> . literal
    (95) value -> . NAME n_variable_reference n_math_expression_1_name
    (67) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (56) literal -> . FLOAT n_math_expression_1_float
    (57) literal -> . INT n_math_expression_1_int
    (58) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 46
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    NAME            shift and go to state 58
    FLOAT           shift and go to state 59
    INT             shift and go to state 60
    STRING          shift and go to state 61

    expression                     shift and go to state 142
    expression_or                  shift and go to state 48
    expression_rel                 shift and go to state 49
    exp                            shift and go to state 50
    termino                        shift and go to state 51
    factor                         shift and go to state 54
    value                          shift and go to state 55
    function_call                  shift and go to state 56
    literal                        shift and go to state 57

state 123

    (109) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS . p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (27) p_n_pre_condition_loop_2 -> .

    LCURLY          reduce using rule 27 (p_n_pre_condition_loop_2 -> .)

    p_n_pre_condition_loop_2       shift and go to state 143

state 124

    (96) assign -> type NAME n_variable_instantiate n_math_expression_1_name EQUAL . n_seen_equal_op expression
    (29) n_seen_equal_op -> .

    LPARENTHESIS    reduce using rule 29 (n_seen_equal_op -> .)
    PLUS            reduce using rule 29 (n_seen_equal_op -> .)
    MINUS           reduce using rule 29 (n_seen_equal_op -> .)
    NAME            reduce using rule 29 (n_seen_equal_op -> .)
    FLOAT           reduce using rule 29 (n_seen_equal_op -> .)
    INT             reduce using rule 29 (n_seen_equal_op -> .)
    STRING          reduce using rule 29 (n_seen_equal_op -> .)

    n_seen_equal_op                shift and go to state 144

state 125

    (63) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT . function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end
    (59) function_type -> . type
    (60) function_type -> . VOID n_function_type
    (45) type -> . INT_TYPE n_seen_type n_function_type
    (46) type -> . STRING_TYPE n_seen_type n_function_type
    (47) type -> . DOUBLE_TYPE n_seen_type n_function_type
    (48) type -> . FLOAT_TYPE n_seen_type n_function_type
    (49) type -> . BOOL_TYPE n_seen_type n_function_type

    VOID            shift and go to state 147
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    function_type                  shift and go to state 145
    type                           shift and go to state 146

state 126

    (73) parameter_list -> parameter COMMA . parameter_list
    (71) parameter_list -> . empty
    (72) parameter_list -> . parameter
    (73) parameter_list -> . parameter COMMA parameter_list
    (41) empty -> .
    (75) parameter -> . type NAME n_variable_instantiate_param
    (45) type -> . INT_TYPE n_seen_type n_function_type
    (46) type -> . STRING_TYPE n_seen_type n_function_type
    (47) type -> . DOUBLE_TYPE n_seen_type n_function_type
    (48) type -> . FLOAT_TYPE n_seen_type n_function_type
    (49) type -> . BOOL_TYPE n_seen_type n_function_type

    DOUBLEDOT       reduce using rule 41 (empty -> .)
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    parameter                      shift and go to state 98
    parameter_list                 shift and go to state 148
    empty                          shift and go to state 97
    type                           shift and go to state 99

state 127

    (75) parameter -> type NAME . n_variable_instantiate_param
    (7) n_variable_instantiate_param -> .

    COMMA           reduce using rule 7 (n_variable_instantiate_param -> .)
    DOUBLEDOT       reduce using rule 7 (n_variable_instantiate_param -> .)

    n_variable_instantiate_param   shift and go to state 149

state 128

    (97) assign -> NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression .

    SEMICOLON       reduce using rule 97 (assign -> NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression .)
    DOUBLEDOT       reduce using rule 97 (assign -> NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression .)
    RPARENTHESIS    reduce using rule 97 (assign -> NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression .)


state 129

    (67) function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS . n_function_call_5 n_function_call_6
    (38) n_function_call_5 -> .

    SEMICOLON       reduce using rule 38 (n_function_call_5 -> .)
    TIMES           reduce using rule 38 (n_function_call_5 -> .)
    DIVIDE          reduce using rule 38 (n_function_call_5 -> .)
    MODULUS         reduce using rule 38 (n_function_call_5 -> .)
    PLUS            reduce using rule 38 (n_function_call_5 -> .)
    MINUS           reduce using rule 38 (n_function_call_5 -> .)
    GREATERTHAN     reduce using rule 38 (n_function_call_5 -> .)
    LESSTHAN        reduce using rule 38 (n_function_call_5 -> .)
    EQUALEQUAL      reduce using rule 38 (n_function_call_5 -> .)
    LESSTHANOREQUAL reduce using rule 38 (n_function_call_5 -> .)
    GREATERTHANOREQUAL reduce using rule 38 (n_function_call_5 -> .)
    NOTEQUAL        reduce using rule 38 (n_function_call_5 -> .)
    OR              reduce using rule 38 (n_function_call_5 -> .)
    AND             reduce using rule 38 (n_function_call_5 -> .)
    RPARENTHESIS    reduce using rule 38 (n_function_call_5 -> .)
    COMMA           reduce using rule 38 (n_function_call_5 -> .)
    DOUBLEDOT       reduce using rule 38 (n_function_call_5 -> .)

    n_function_call_5              shift and go to state 150

state 130

    (70) arg_list -> arg COMMA . n_function_call_4 arg_list
    (37) n_function_call_4 -> .

    LPARENTHESIS    reduce using rule 37 (n_function_call_4 -> .)
    PLUS            reduce using rule 37 (n_function_call_4 -> .)
    MINUS           reduce using rule 37 (n_function_call_4 -> .)
    NAME            reduce using rule 37 (n_function_call_4 -> .)
    FLOAT           reduce using rule 37 (n_function_call_4 -> .)
    INT             reduce using rule 37 (n_function_call_4 -> .)
    STRING          reduce using rule 37 (n_function_call_4 -> .)
    RPARENTHESIS    reduce using rule 37 (n_function_call_4 -> .)

    n_function_call_4              shift and go to state 151

state 131

    (74) arg -> expression n_function_call_3 .

    COMMA           reduce using rule 74 (arg -> expression n_function_call_3 .)
    RPARENTHESIS    reduce using rule 74 (arg -> expression n_function_call_3 .)


state 132

    (89) factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS . n_math_expression_7
    (17) n_math_expression_7 -> .

    TIMES           reduce using rule 17 (n_math_expression_7 -> .)
    DIVIDE          reduce using rule 17 (n_math_expression_7 -> .)
    MODULUS         reduce using rule 17 (n_math_expression_7 -> .)
    PLUS            reduce using rule 17 (n_math_expression_7 -> .)
    MINUS           reduce using rule 17 (n_math_expression_7 -> .)
    GREATERTHAN     reduce using rule 17 (n_math_expression_7 -> .)
    LESSTHAN        reduce using rule 17 (n_math_expression_7 -> .)
    EQUALEQUAL      reduce using rule 17 (n_math_expression_7 -> .)
    LESSTHANOREQUAL reduce using rule 17 (n_math_expression_7 -> .)
    GREATERTHANOREQUAL reduce using rule 17 (n_math_expression_7 -> .)
    NOTEQUAL        reduce using rule 17 (n_math_expression_7 -> .)
    OR              reduce using rule 17 (n_math_expression_7 -> .)
    AND             reduce using rule 17 (n_math_expression_7 -> .)
    RPARENTHESIS    reduce using rule 17 (n_math_expression_7 -> .)
    COMMA           reduce using rule 17 (n_math_expression_7 -> .)
    SEMICOLON       reduce using rule 17 (n_math_expression_7 -> .)
    DOUBLEDOT       reduce using rule 17 (n_math_expression_7 -> .)

    n_math_expression_7            shift and go to state 152

state 133

    (111) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 . n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (2) n_open_new_scope -> .

    IF              reduce using rule 2 (n_open_new_scope -> .)
    FOR             reduce using rule 2 (n_open_new_scope -> .)
    WHILE           reduce using rule 2 (n_open_new_scope -> .)
    NAME            reduce using rule 2 (n_open_new_scope -> .)
    INT_TYPE        reduce using rule 2 (n_open_new_scope -> .)
    STRING_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    DOUBLE_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    FLOAT_TYPE      reduce using rule 2 (n_open_new_scope -> .)
    BOOL_TYPE       reduce using rule 2 (n_open_new_scope -> .)
    RCURLY          reduce using rule 2 (n_open_new_scope -> .)
    FUNCTION        reduce using rule 2 (n_open_new_scope -> .)

    n_open_new_scope               shift and go to state 153

state 134

    (77) expression -> expression_or AND n_math_expression_10 expression . n_math_expression_11
    (21) n_math_expression_11 -> .

    RPARENTHESIS    reduce using rule 21 (n_math_expression_11 -> .)
    COMMA           reduce using rule 21 (n_math_expression_11 -> .)
    SEMICOLON       reduce using rule 21 (n_math_expression_11 -> .)
    DOUBLEDOT       reduce using rule 21 (n_math_expression_11 -> .)

    n_math_expression_11           shift and go to state 154

state 135

    (79) expression_or -> expression_rel OR n_math_expression_10 expression_or . n_math_expression_12
    (22) n_math_expression_12 -> .

    AND             reduce using rule 22 (n_math_expression_12 -> .)
    RPARENTHESIS    reduce using rule 22 (n_math_expression_12 -> .)
    COMMA           reduce using rule 22 (n_math_expression_12 -> .)
    SEMICOLON       reduce using rule 22 (n_math_expression_12 -> .)
    DOUBLEDOT       reduce using rule 22 (n_math_expression_12 -> .)

    n_math_expression_12           shift and go to state 155

state 136

    (81) expression_rel -> exp relational_operator exp n_math_expression_9 .

    OR              reduce using rule 81 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    AND             reduce using rule 81 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    RPARENTHESIS    reduce using rule 81 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    COMMA           reduce using rule 81 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    SEMICOLON       reduce using rule 81 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    DOUBLEDOT       reduce using rule 81 (expression_rel -> exp relational_operator exp n_math_expression_9 .)


state 137

    (83) exp -> termino n_math_expression_4 PLUS n_math_expression_2 . exp
    (82) exp -> . termino n_math_expression_4
    (83) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (84) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (85) termino -> . factor n_math_expression_5
    (86) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (87) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (88) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (89) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (90) factor -> . PLUS value
    (91) factor -> . MINUS value
    (92) factor -> . value
    (93) value -> . function_call
    (94) value -> . literal
    (95) value -> . NAME n_variable_reference n_math_expression_1_name
    (67) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (56) literal -> . FLOAT n_math_expression_1_float
    (57) literal -> . INT n_math_expression_1_int
    (58) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 46
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    NAME            shift and go to state 58
    FLOAT           shift and go to state 59
    INT             shift and go to state 60
    STRING          shift and go to state 61

    termino                        shift and go to state 51
    exp                            shift and go to state 156
    factor                         shift and go to state 54
    value                          shift and go to state 55
    function_call                  shift and go to state 56
    literal                        shift and go to state 57

state 138

    (84) exp -> termino n_math_expression_4 MINUS n_math_expression_2 . exp
    (82) exp -> . termino n_math_expression_4
    (83) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (84) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (85) termino -> . factor n_math_expression_5
    (86) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (87) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (88) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (89) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (90) factor -> . PLUS value
    (91) factor -> . MINUS value
    (92) factor -> . value
    (93) value -> . function_call
    (94) value -> . literal
    (95) value -> . NAME n_variable_reference n_math_expression_1_name
    (67) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (56) literal -> . FLOAT n_math_expression_1_float
    (57) literal -> . INT n_math_expression_1_int
    (58) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 46
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    NAME            shift and go to state 58
    FLOAT           shift and go to state 59
    INT             shift and go to state 60
    STRING          shift and go to state 61

    termino                        shift and go to state 51
    exp                            shift and go to state 157
    factor                         shift and go to state 54
    value                          shift and go to state 55
    function_call                  shift and go to state 56
    literal                        shift and go to state 57

state 139

    (86) termino -> factor n_math_expression_5 TIMES n_math_expression_3 . termino
    (85) termino -> . factor n_math_expression_5
    (86) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (87) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (88) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (89) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (90) factor -> . PLUS value
    (91) factor -> . MINUS value
    (92) factor -> . value
    (93) value -> . function_call
    (94) value -> . literal
    (95) value -> . NAME n_variable_reference n_math_expression_1_name
    (67) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (56) literal -> . FLOAT n_math_expression_1_float
    (57) literal -> . INT n_math_expression_1_int
    (58) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 46
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    NAME            shift and go to state 58
    FLOAT           shift and go to state 59
    INT             shift and go to state 60
    STRING          shift and go to state 61

    factor                         shift and go to state 54
    termino                        shift and go to state 158
    value                          shift and go to state 55
    function_call                  shift and go to state 56
    literal                        shift and go to state 57

state 140

    (87) termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 . termino
    (85) termino -> . factor n_math_expression_5
    (86) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (87) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (88) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (89) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (90) factor -> . PLUS value
    (91) factor -> . MINUS value
    (92) factor -> . value
    (93) value -> . function_call
    (94) value -> . literal
    (95) value -> . NAME n_variable_reference n_math_expression_1_name
    (67) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (56) literal -> . FLOAT n_math_expression_1_float
    (57) literal -> . INT n_math_expression_1_int
    (58) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 46
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    NAME            shift and go to state 58
    FLOAT           shift and go to state 59
    INT             shift and go to state 60
    STRING          shift and go to state 61

    factor                         shift and go to state 54
    termino                        shift and go to state 159
    value                          shift and go to state 55
    function_call                  shift and go to state 56
    literal                        shift and go to state 57

state 141

    (88) termino -> factor n_math_expression_5 MODULUS n_math_expression_3 . termino
    (85) termino -> . factor n_math_expression_5
    (86) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (87) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (88) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (89) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (90) factor -> . PLUS value
    (91) factor -> . MINUS value
    (92) factor -> . value
    (93) value -> . function_call
    (94) value -> . literal
    (95) value -> . NAME n_variable_reference n_math_expression_1_name
    (67) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (56) literal -> . FLOAT n_math_expression_1_float
    (57) literal -> . INT n_math_expression_1_int
    (58) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 46
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    NAME            shift and go to state 58
    FLOAT           shift and go to state 59
    INT             shift and go to state 60
    STRING          shift and go to state 61

    factor                         shift and go to state 54
    termino                        shift and go to state 160
    value                          shift and go to state 55
    function_call                  shift and go to state 56
    literal                        shift and go to state 57

state 142

    (110) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression . DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope

    DOUBLEDOT       shift and go to state 161


state 143

    (109) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 . LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope

    LCURLY          shift and go to state 162


state 144

    (96) assign -> type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op . expression
    (76) expression -> . expression_or
    (77) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (78) expression_or -> . expression_rel
    (79) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (80) expression_rel -> . exp
    (81) expression_rel -> . exp relational_operator exp n_math_expression_9
    (82) exp -> . termino n_math_expression_4
    (83) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (84) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (85) termino -> . factor n_math_expression_5
    (86) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (87) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (88) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (89) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (90) factor -> . PLUS value
    (91) factor -> . MINUS value
    (92) factor -> . value
    (93) value -> . function_call
    (94) value -> . literal
    (95) value -> . NAME n_variable_reference n_math_expression_1_name
    (67) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (56) literal -> . FLOAT n_math_expression_1_float
    (57) literal -> . INT n_math_expression_1_int
    (58) literal -> . STRING n_math_expression_1_string

    LPARENTHESIS    shift and go to state 46
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    NAME            shift and go to state 58
    FLOAT           shift and go to state 59
    INT             shift and go to state 60
    STRING          shift and go to state 61

    expression                     shift and go to state 163
    expression_or                  shift and go to state 48
    expression_rel                 shift and go to state 49
    exp                            shift and go to state 50
    termino                        shift and go to state 51
    factor                         shift and go to state 54
    value                          shift and go to state 55
    function_call                  shift and go to state 56
    literal                        shift and go to state 57

state 145

    (63) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type . LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end

    LCURLY          shift and go to state 164


state 146

    (59) function_type -> type .

    LCURLY          reduce using rule 59 (function_type -> type .)


state 147

    (60) function_type -> VOID . n_function_type
    (33) n_function_type -> .

    LCURLY          reduce using rule 33 (n_function_type -> .)

    n_function_type                shift and go to state 165

state 148

    (73) parameter_list -> parameter COMMA parameter_list .

    DOUBLEDOT       reduce using rule 73 (parameter_list -> parameter COMMA parameter_list .)


state 149

    (75) parameter -> type NAME n_variable_instantiate_param .

    COMMA           reduce using rule 75 (parameter -> type NAME n_variable_instantiate_param .)
    DOUBLEDOT       reduce using rule 75 (parameter -> type NAME n_variable_instantiate_param .)


state 150

    (67) function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 . n_function_call_6
    (39) n_function_call_6 -> .

    SEMICOLON       reduce using rule 39 (n_function_call_6 -> .)
    TIMES           reduce using rule 39 (n_function_call_6 -> .)
    DIVIDE          reduce using rule 39 (n_function_call_6 -> .)
    MODULUS         reduce using rule 39 (n_function_call_6 -> .)
    PLUS            reduce using rule 39 (n_function_call_6 -> .)
    MINUS           reduce using rule 39 (n_function_call_6 -> .)
    GREATERTHAN     reduce using rule 39 (n_function_call_6 -> .)
    LESSTHAN        reduce using rule 39 (n_function_call_6 -> .)
    EQUALEQUAL      reduce using rule 39 (n_function_call_6 -> .)
    LESSTHANOREQUAL reduce using rule 39 (n_function_call_6 -> .)
    GREATERTHANOREQUAL reduce using rule 39 (n_function_call_6 -> .)
    NOTEQUAL        reduce using rule 39 (n_function_call_6 -> .)
    OR              reduce using rule 39 (n_function_call_6 -> .)
    AND             reduce using rule 39 (n_function_call_6 -> .)
    RPARENTHESIS    reduce using rule 39 (n_function_call_6 -> .)
    COMMA           reduce using rule 39 (n_function_call_6 -> .)
    DOUBLEDOT       reduce using rule 39 (n_function_call_6 -> .)

    n_function_call_6              shift and go to state 166

state 151

    (70) arg_list -> arg COMMA n_function_call_4 . arg_list
    (68) arg_list -> . empty
    (69) arg_list -> . arg
    (70) arg_list -> . arg COMMA n_function_call_4 arg_list
    (41) empty -> .
    (74) arg -> . expression n_function_call_3
    (76) expression -> . expression_or
    (77) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (78) expression_or -> . expression_rel
    (79) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (80) expression_rel -> . exp
    (81) expression_rel -> . exp relational_operator exp n_math_expression_9
    (82) exp -> . termino n_math_expression_4
    (83) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (84) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (85) termino -> . factor n_math_expression_5
    (86) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (87) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (88) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (89) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (90) factor -> . PLUS value
    (91) factor -> . MINUS value
    (92) factor -> . value
    (93) value -> . function_call
    (94) value -> . literal
    (95) value -> . NAME n_variable_reference n_math_expression_1_name
    (67) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (56) literal -> . FLOAT n_math_expression_1_float
    (57) literal -> . INT n_math_expression_1_int
    (58) literal -> . STRING n_math_expression_1_string

    RPARENTHESIS    reduce using rule 41 (empty -> .)
    LPARENTHESIS    shift and go to state 46
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    NAME            shift and go to state 58
    FLOAT           shift and go to state 59
    INT             shift and go to state 60
    STRING          shift and go to state 61

    arg                            shift and go to state 103
    arg_list                       shift and go to state 167
    empty                          shift and go to state 102
    expression                     shift and go to state 104
    expression_or                  shift and go to state 48
    expression_rel                 shift and go to state 49
    exp                            shift and go to state 50
    termino                        shift and go to state 51
    factor                         shift and go to state 54
    value                          shift and go to state 55
    function_call                  shift and go to state 56
    literal                        shift and go to state 57

state 152

    (89) factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .

    TIMES           reduce using rule 89 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    DIVIDE          reduce using rule 89 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    MODULUS         reduce using rule 89 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    PLUS            reduce using rule 89 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    MINUS           reduce using rule 89 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    GREATERTHAN     reduce using rule 89 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    LESSTHAN        reduce using rule 89 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    EQUALEQUAL      reduce using rule 89 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    LESSTHANOREQUAL reduce using rule 89 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    GREATERTHANOREQUAL reduce using rule 89 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    NOTEQUAL        reduce using rule 89 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    OR              reduce using rule 89 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    AND             reduce using rule 89 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    RPARENTHESIS    reduce using rule 89 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    COMMA           reduce using rule 89 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    SEMICOLON       reduce using rule 89 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    DOUBLEDOT       reduce using rule 89 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)


state 153

    (111) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope . codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (101) codeblock -> . empty
    (102) codeblock -> . codeblock_aux codeblock
    (41) empty -> .
    (103) codeblock_aux -> . statement
    (104) codeblock_aux -> . function_definition
    (105) codeblock_aux -> . condition_if
    (106) codeblock_aux -> . loop
    (98) statement -> . statement_aux SEMICOLON
    (63) function_definition -> . n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end
    (111) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (107) loop -> . forloop
    (108) loop -> . whileloop
    (99) statement_aux -> . assign
    (100) statement_aux -> . function_call
    (30) n_before_function_definition -> .
    (110) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (109) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (96) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (97) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (67) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (45) type -> . INT_TYPE n_seen_type n_function_type
    (46) type -> . STRING_TYPE n_seen_type n_function_type
    (47) type -> . DOUBLE_TYPE n_seen_type n_function_type
    (48) type -> . FLOAT_TYPE n_seen_type n_function_type
    (49) type -> . BOOL_TYPE n_seen_type n_function_type

    RCURLY          reduce using rule 41 (empty -> .)
    IF              shift and go to state 15
    FUNCTION        reduce using rule 30 (n_before_function_definition -> .)
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    codeblock                      shift and go to state 168
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    n_before_function_definition   shift and go to state 13
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 154

    (77) expression -> expression_or AND n_math_expression_10 expression n_math_expression_11 .

    RPARENTHESIS    reduce using rule 77 (expression -> expression_or AND n_math_expression_10 expression n_math_expression_11 .)
    COMMA           reduce using rule 77 (expression -> expression_or AND n_math_expression_10 expression n_math_expression_11 .)
    SEMICOLON       reduce using rule 77 (expression -> expression_or AND n_math_expression_10 expression n_math_expression_11 .)
    DOUBLEDOT       reduce using rule 77 (expression -> expression_or AND n_math_expression_10 expression n_math_expression_11 .)


state 155

    (79) expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .

    AND             reduce using rule 79 (expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .)
    RPARENTHESIS    reduce using rule 79 (expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .)
    COMMA           reduce using rule 79 (expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .)
    SEMICOLON       reduce using rule 79 (expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .)
    DOUBLEDOT       reduce using rule 79 (expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .)


state 156

    (83) exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .

    GREATERTHAN     reduce using rule 83 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    LESSTHAN        reduce using rule 83 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    EQUALEQUAL      reduce using rule 83 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    LESSTHANOREQUAL reduce using rule 83 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    GREATERTHANOREQUAL reduce using rule 83 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    NOTEQUAL        reduce using rule 83 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    OR              reduce using rule 83 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    AND             reduce using rule 83 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    RPARENTHESIS    reduce using rule 83 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    COMMA           reduce using rule 83 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    SEMICOLON       reduce using rule 83 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    DOUBLEDOT       reduce using rule 83 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)


state 157

    (84) exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .

    GREATERTHAN     reduce using rule 84 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    LESSTHAN        reduce using rule 84 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    EQUALEQUAL      reduce using rule 84 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    LESSTHANOREQUAL reduce using rule 84 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    GREATERTHANOREQUAL reduce using rule 84 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    NOTEQUAL        reduce using rule 84 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    OR              reduce using rule 84 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    AND             reduce using rule 84 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    RPARENTHESIS    reduce using rule 84 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    COMMA           reduce using rule 84 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    SEMICOLON       reduce using rule 84 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    DOUBLEDOT       reduce using rule 84 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)


state 158

    (86) termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .

    PLUS            reduce using rule 86 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    MINUS           reduce using rule 86 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    GREATERTHAN     reduce using rule 86 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    LESSTHAN        reduce using rule 86 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    EQUALEQUAL      reduce using rule 86 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    LESSTHANOREQUAL reduce using rule 86 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    GREATERTHANOREQUAL reduce using rule 86 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    NOTEQUAL        reduce using rule 86 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    OR              reduce using rule 86 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    AND             reduce using rule 86 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    RPARENTHESIS    reduce using rule 86 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    COMMA           reduce using rule 86 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    SEMICOLON       reduce using rule 86 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    DOUBLEDOT       reduce using rule 86 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)


state 159

    (87) termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .

    PLUS            reduce using rule 87 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    MINUS           reduce using rule 87 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    GREATERTHAN     reduce using rule 87 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    LESSTHAN        reduce using rule 87 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    EQUALEQUAL      reduce using rule 87 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    LESSTHANOREQUAL reduce using rule 87 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    GREATERTHANOREQUAL reduce using rule 87 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    NOTEQUAL        reduce using rule 87 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    OR              reduce using rule 87 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    AND             reduce using rule 87 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    RPARENTHESIS    reduce using rule 87 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    COMMA           reduce using rule 87 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    SEMICOLON       reduce using rule 87 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    DOUBLEDOT       reduce using rule 87 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)


state 160

    (88) termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .

    PLUS            reduce using rule 88 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    MINUS           reduce using rule 88 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    GREATERTHAN     reduce using rule 88 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    LESSTHAN        reduce using rule 88 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    EQUALEQUAL      reduce using rule 88 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    LESSTHANOREQUAL reduce using rule 88 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    GREATERTHANOREQUAL reduce using rule 88 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    NOTEQUAL        reduce using rule 88 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    OR              reduce using rule 88 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    AND             reduce using rule 88 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    RPARENTHESIS    reduce using rule 88 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    COMMA           reduce using rule 88 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    SEMICOLON       reduce using rule 88 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    DOUBLEDOT       reduce using rule 88 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)


state 161

    (110) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT . assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (96) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (97) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (45) type -> . INT_TYPE n_seen_type n_function_type
    (46) type -> . STRING_TYPE n_seen_type n_function_type
    (47) type -> . DOUBLE_TYPE n_seen_type n_function_type
    (48) type -> . FLOAT_TYPE n_seen_type n_function_type
    (49) type -> . BOOL_TYPE n_seen_type n_function_type

    NAME            shift and go to state 93
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    assign                         shift and go to state 169
    type                           shift and go to state 22

state 162

    (109) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY . n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (2) n_open_new_scope -> .

    IF              reduce using rule 2 (n_open_new_scope -> .)
    FOR             reduce using rule 2 (n_open_new_scope -> .)
    WHILE           reduce using rule 2 (n_open_new_scope -> .)
    NAME            reduce using rule 2 (n_open_new_scope -> .)
    INT_TYPE        reduce using rule 2 (n_open_new_scope -> .)
    STRING_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    DOUBLE_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    FLOAT_TYPE      reduce using rule 2 (n_open_new_scope -> .)
    BOOL_TYPE       reduce using rule 2 (n_open_new_scope -> .)
    RCURLY          reduce using rule 2 (n_open_new_scope -> .)
    FUNCTION        reduce using rule 2 (n_open_new_scope -> .)

    n_open_new_scope               shift and go to state 170

state 163

    (96) assign -> type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression .

    SEMICOLON       reduce using rule 96 (assign -> type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression .)
    DOUBLEDOT       reduce using rule 96 (assign -> type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression .)
    RPARENTHESIS    reduce using rule 96 (assign -> type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression .)


state 164

    (63) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY . n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end
    (31) n_function_block_start -> .

    IF              reduce using rule 31 (n_function_block_start -> .)
    FOR             reduce using rule 31 (n_function_block_start -> .)
    WHILE           reduce using rule 31 (n_function_block_start -> .)
    NAME            reduce using rule 31 (n_function_block_start -> .)
    INT_TYPE        reduce using rule 31 (n_function_block_start -> .)
    STRING_TYPE     reduce using rule 31 (n_function_block_start -> .)
    DOUBLE_TYPE     reduce using rule 31 (n_function_block_start -> .)
    FLOAT_TYPE      reduce using rule 31 (n_function_block_start -> .)
    BOOL_TYPE       reduce using rule 31 (n_function_block_start -> .)
    RETURN          reduce using rule 31 (n_function_block_start -> .)
    RCURLY          reduce using rule 31 (n_function_block_start -> .)
    FUNCTION        reduce using rule 31 (n_function_block_start -> .)

    n_function_block_start         shift and go to state 171

state 165

    (60) function_type -> VOID n_function_type .

    LCURLY          reduce using rule 60 (function_type -> VOID n_function_type .)


state 166

    (67) function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .

    SEMICOLON       reduce using rule 67 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    TIMES           reduce using rule 67 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    DIVIDE          reduce using rule 67 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    MODULUS         reduce using rule 67 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    PLUS            reduce using rule 67 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    MINUS           reduce using rule 67 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    GREATERTHAN     reduce using rule 67 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    LESSTHAN        reduce using rule 67 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    EQUALEQUAL      reduce using rule 67 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    LESSTHANOREQUAL reduce using rule 67 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    GREATERTHANOREQUAL reduce using rule 67 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    NOTEQUAL        reduce using rule 67 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    OR              reduce using rule 67 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    AND             reduce using rule 67 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    RPARENTHESIS    reduce using rule 67 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    COMMA           reduce using rule 67 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    DOUBLEDOT       reduce using rule 67 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)


state 167

    (70) arg_list -> arg COMMA n_function_call_4 arg_list .

    RPARENTHESIS    reduce using rule 70 (arg_list -> arg COMMA n_function_call_4 arg_list .)


state 168

    (111) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock . RCURLY n_close_scope condition_else n_two_way_conditional_2

    RCURLY          shift and go to state 172


state 169

    (110) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign . RPARENTHESIS LCURLY codeblock RCURLY n_close_scope

    RPARENTHESIS    shift and go to state 173


state 170

    (109) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope . codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (101) codeblock -> . empty
    (102) codeblock -> . codeblock_aux codeblock
    (41) empty -> .
    (103) codeblock_aux -> . statement
    (104) codeblock_aux -> . function_definition
    (105) codeblock_aux -> . condition_if
    (106) codeblock_aux -> . loop
    (98) statement -> . statement_aux SEMICOLON
    (63) function_definition -> . n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end
    (111) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (107) loop -> . forloop
    (108) loop -> . whileloop
    (99) statement_aux -> . assign
    (100) statement_aux -> . function_call
    (30) n_before_function_definition -> .
    (110) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (109) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (96) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (97) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (67) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (45) type -> . INT_TYPE n_seen_type n_function_type
    (46) type -> . STRING_TYPE n_seen_type n_function_type
    (47) type -> . DOUBLE_TYPE n_seen_type n_function_type
    (48) type -> . FLOAT_TYPE n_seen_type n_function_type
    (49) type -> . BOOL_TYPE n_seen_type n_function_type

    RCURLY          reduce using rule 41 (empty -> .)
    IF              shift and go to state 15
    FUNCTION        reduce using rule 30 (n_before_function_definition -> .)
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    codeblock                      shift and go to state 174
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    n_before_function_definition   shift and go to state 13
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 171

    (63) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start . codeblock return RCURLY n_close_scope n_function_block_end
    (101) codeblock -> . empty
    (102) codeblock -> . codeblock_aux codeblock
    (41) empty -> .
    (103) codeblock_aux -> . statement
    (104) codeblock_aux -> . function_definition
    (105) codeblock_aux -> . condition_if
    (106) codeblock_aux -> . loop
    (98) statement -> . statement_aux SEMICOLON
    (63) function_definition -> . n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end
    (111) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (107) loop -> . forloop
    (108) loop -> . whileloop
    (99) statement_aux -> . assign
    (100) statement_aux -> . function_call
    (30) n_before_function_definition -> .
    (110) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (109) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (96) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (97) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (67) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (45) type -> . INT_TYPE n_seen_type n_function_type
    (46) type -> . STRING_TYPE n_seen_type n_function_type
    (47) type -> . DOUBLE_TYPE n_seen_type n_function_type
    (48) type -> . FLOAT_TYPE n_seen_type n_function_type
    (49) type -> . BOOL_TYPE n_seen_type n_function_type

    RETURN          reduce using rule 41 (empty -> .)
    RCURLY          reduce using rule 41 (empty -> .)
    IF              shift and go to state 15
    FUNCTION        reduce using rule 30 (n_before_function_definition -> .)
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    n_before_function_definition   shift and go to state 13
    codeblock                      shift and go to state 175
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 172

    (111) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY . n_close_scope condition_else n_two_way_conditional_2
    (4) n_close_scope -> .

    ELSE            reduce using rule 4 (n_close_scope -> .)
    IF              reduce using rule 4 (n_close_scope -> .)
    FOR             reduce using rule 4 (n_close_scope -> .)
    WHILE           reduce using rule 4 (n_close_scope -> .)
    NAME            reduce using rule 4 (n_close_scope -> .)
    INT_TYPE        reduce using rule 4 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 4 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 4 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 4 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 4 (n_close_scope -> .)
    FUNCTION        reduce using rule 4 (n_close_scope -> .)
    $end            reduce using rule 4 (n_close_scope -> .)
    RCURLY          reduce using rule 4 (n_close_scope -> .)
    RETURN          reduce using rule 4 (n_close_scope -> .)

    n_close_scope                  shift and go to state 176

state 173

    (110) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS . LCURLY codeblock RCURLY n_close_scope

    LCURLY          shift and go to state 177


state 174

    (109) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock . RCURLY p_n_pre_condition_loop_3 n_close_scope

    RCURLY          shift and go to state 178


state 175

    (63) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock . return RCURLY n_close_scope n_function_block_end
    (64) return -> . RETURN expression n_return SEMICOLON
    (65) return -> . RETURN n_return_void SEMICOLON
    (66) return -> . empty n_return_void
    (41) empty -> .

    RETURN          shift and go to state 180
    RCURLY          reduce using rule 41 (empty -> .)

    return                         shift and go to state 179
    empty                          shift and go to state 181

state 176

    (111) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope . condition_else n_two_way_conditional_2
    (112) condition_else -> . ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope
    (113) condition_else -> . empty
    (41) empty -> .

    ELSE            shift and go to state 183
    IF              reduce using rule 41 (empty -> .)
    FOR             reduce using rule 41 (empty -> .)
    WHILE           reduce using rule 41 (empty -> .)
    NAME            reduce using rule 41 (empty -> .)
    INT_TYPE        reduce using rule 41 (empty -> .)
    STRING_TYPE     reduce using rule 41 (empty -> .)
    DOUBLE_TYPE     reduce using rule 41 (empty -> .)
    FLOAT_TYPE      reduce using rule 41 (empty -> .)
    BOOL_TYPE       reduce using rule 41 (empty -> .)
    FUNCTION        reduce using rule 41 (empty -> .)
    $end            reduce using rule 41 (empty -> .)
    RCURLY          reduce using rule 41 (empty -> .)
    RETURN          reduce using rule 41 (empty -> .)

    condition_else                 shift and go to state 182
    empty                          shift and go to state 184

state 177

    (110) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY . codeblock RCURLY n_close_scope
    (101) codeblock -> . empty
    (102) codeblock -> . codeblock_aux codeblock
    (41) empty -> .
    (103) codeblock_aux -> . statement
    (104) codeblock_aux -> . function_definition
    (105) codeblock_aux -> . condition_if
    (106) codeblock_aux -> . loop
    (98) statement -> . statement_aux SEMICOLON
    (63) function_definition -> . n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end
    (111) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (107) loop -> . forloop
    (108) loop -> . whileloop
    (99) statement_aux -> . assign
    (100) statement_aux -> . function_call
    (30) n_before_function_definition -> .
    (110) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (109) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (96) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (97) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (67) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (45) type -> . INT_TYPE n_seen_type n_function_type
    (46) type -> . STRING_TYPE n_seen_type n_function_type
    (47) type -> . DOUBLE_TYPE n_seen_type n_function_type
    (48) type -> . FLOAT_TYPE n_seen_type n_function_type
    (49) type -> . BOOL_TYPE n_seen_type n_function_type

    RCURLY          reduce using rule 41 (empty -> .)
    IF              shift and go to state 15
    FUNCTION        reduce using rule 30 (n_before_function_definition -> .)
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    assign                         shift and go to state 18
    codeblock                      shift and go to state 185
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    n_before_function_definition   shift and go to state 13
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 178

    (109) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY . p_n_pre_condition_loop_3 n_close_scope
    (28) p_n_pre_condition_loop_3 -> .

    IF              reduce using rule 28 (p_n_pre_condition_loop_3 -> .)
    FOR             reduce using rule 28 (p_n_pre_condition_loop_3 -> .)
    WHILE           reduce using rule 28 (p_n_pre_condition_loop_3 -> .)
    NAME            reduce using rule 28 (p_n_pre_condition_loop_3 -> .)
    INT_TYPE        reduce using rule 28 (p_n_pre_condition_loop_3 -> .)
    STRING_TYPE     reduce using rule 28 (p_n_pre_condition_loop_3 -> .)
    DOUBLE_TYPE     reduce using rule 28 (p_n_pre_condition_loop_3 -> .)
    FLOAT_TYPE      reduce using rule 28 (p_n_pre_condition_loop_3 -> .)
    BOOL_TYPE       reduce using rule 28 (p_n_pre_condition_loop_3 -> .)
    FUNCTION        reduce using rule 28 (p_n_pre_condition_loop_3 -> .)
    $end            reduce using rule 28 (p_n_pre_condition_loop_3 -> .)
    RCURLY          reduce using rule 28 (p_n_pre_condition_loop_3 -> .)
    RETURN          reduce using rule 28 (p_n_pre_condition_loop_3 -> .)

    p_n_pre_condition_loop_3       shift and go to state 186

state 179

    (63) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return . RCURLY n_close_scope n_function_block_end

    RCURLY          shift and go to state 187


state 180

    (64) return -> RETURN . expression n_return SEMICOLON
    (65) return -> RETURN . n_return_void SEMICOLON
    (76) expression -> . expression_or
    (77) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (62) n_return_void -> .
    (78) expression_or -> . expression_rel
    (79) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (80) expression_rel -> . exp
    (81) expression_rel -> . exp relational_operator exp n_math_expression_9
    (82) exp -> . termino n_math_expression_4
    (83) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (84) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (85) termino -> . factor n_math_expression_5
    (86) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (87) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (88) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (89) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (90) factor -> . PLUS value
    (91) factor -> . MINUS value
    (92) factor -> . value
    (93) value -> . function_call
    (94) value -> . literal
    (95) value -> . NAME n_variable_reference n_math_expression_1_name
    (67) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (56) literal -> . FLOAT n_math_expression_1_float
    (57) literal -> . INT n_math_expression_1_int
    (58) literal -> . STRING n_math_expression_1_string

    SEMICOLON       reduce using rule 62 (n_return_void -> .)
    LPARENTHESIS    shift and go to state 46
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    NAME            shift and go to state 58
    FLOAT           shift and go to state 59
    INT             shift and go to state 60
    STRING          shift and go to state 61

    expression                     shift and go to state 188
    n_return_void                  shift and go to state 189
    expression_or                  shift and go to state 48
    expression_rel                 shift and go to state 49
    exp                            shift and go to state 50
    termino                        shift and go to state 51
    factor                         shift and go to state 54
    value                          shift and go to state 55
    function_call                  shift and go to state 56
    literal                        shift and go to state 57

state 181

    (66) return -> empty . n_return_void
    (62) n_return_void -> .

    RCURLY          reduce using rule 62 (n_return_void -> .)

    n_return_void                  shift and go to state 190

state 182

    (111) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else . n_two_way_conditional_2
    (24) n_two_way_conditional_2 -> .

    IF              reduce using rule 24 (n_two_way_conditional_2 -> .)
    FOR             reduce using rule 24 (n_two_way_conditional_2 -> .)
    WHILE           reduce using rule 24 (n_two_way_conditional_2 -> .)
    NAME            reduce using rule 24 (n_two_way_conditional_2 -> .)
    INT_TYPE        reduce using rule 24 (n_two_way_conditional_2 -> .)
    STRING_TYPE     reduce using rule 24 (n_two_way_conditional_2 -> .)
    DOUBLE_TYPE     reduce using rule 24 (n_two_way_conditional_2 -> .)
    FLOAT_TYPE      reduce using rule 24 (n_two_way_conditional_2 -> .)
    BOOL_TYPE       reduce using rule 24 (n_two_way_conditional_2 -> .)
    FUNCTION        reduce using rule 24 (n_two_way_conditional_2 -> .)
    $end            reduce using rule 24 (n_two_way_conditional_2 -> .)
    RCURLY          reduce using rule 24 (n_two_way_conditional_2 -> .)
    RETURN          reduce using rule 24 (n_two_way_conditional_2 -> .)

    n_two_way_conditional_2        shift and go to state 191

state 183

    (112) condition_else -> ELSE . n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope
    (25) n_two_way_conditional_3 -> .

    LCURLY          reduce using rule 25 (n_two_way_conditional_3 -> .)

    n_two_way_conditional_3        shift and go to state 192

state 184

    (113) condition_else -> empty .

    IF              reduce using rule 113 (condition_else -> empty .)
    FOR             reduce using rule 113 (condition_else -> empty .)
    WHILE           reduce using rule 113 (condition_else -> empty .)
    NAME            reduce using rule 113 (condition_else -> empty .)
    INT_TYPE        reduce using rule 113 (condition_else -> empty .)
    STRING_TYPE     reduce using rule 113 (condition_else -> empty .)
    DOUBLE_TYPE     reduce using rule 113 (condition_else -> empty .)
    FLOAT_TYPE      reduce using rule 113 (condition_else -> empty .)
    BOOL_TYPE       reduce using rule 113 (condition_else -> empty .)
    FUNCTION        reduce using rule 113 (condition_else -> empty .)
    $end            reduce using rule 113 (condition_else -> empty .)
    RCURLY          reduce using rule 113 (condition_else -> empty .)
    RETURN          reduce using rule 113 (condition_else -> empty .)


state 185

    (110) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock . RCURLY n_close_scope

    RCURLY          shift and go to state 193


state 186

    (109) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 . n_close_scope
    (4) n_close_scope -> .

    IF              reduce using rule 4 (n_close_scope -> .)
    FOR             reduce using rule 4 (n_close_scope -> .)
    WHILE           reduce using rule 4 (n_close_scope -> .)
    NAME            reduce using rule 4 (n_close_scope -> .)
    INT_TYPE        reduce using rule 4 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 4 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 4 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 4 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 4 (n_close_scope -> .)
    FUNCTION        reduce using rule 4 (n_close_scope -> .)
    $end            reduce using rule 4 (n_close_scope -> .)
    RCURLY          reduce using rule 4 (n_close_scope -> .)
    RETURN          reduce using rule 4 (n_close_scope -> .)

    n_close_scope                  shift and go to state 194

state 187

    (63) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY . n_close_scope n_function_block_end
    (4) n_close_scope -> .

    IF              reduce using rule 4 (n_close_scope -> .)
    FOR             reduce using rule 4 (n_close_scope -> .)
    WHILE           reduce using rule 4 (n_close_scope -> .)
    NAME            reduce using rule 4 (n_close_scope -> .)
    INT_TYPE        reduce using rule 4 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 4 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 4 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 4 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 4 (n_close_scope -> .)
    FUNCTION        reduce using rule 4 (n_close_scope -> .)
    $end            reduce using rule 4 (n_close_scope -> .)
    RCURLY          reduce using rule 4 (n_close_scope -> .)
    RETURN          reduce using rule 4 (n_close_scope -> .)

    n_close_scope                  shift and go to state 195

state 188

    (64) return -> RETURN expression . n_return SEMICOLON
    (61) n_return -> .

    SEMICOLON       reduce using rule 61 (n_return -> .)

    n_return                       shift and go to state 196

state 189

    (65) return -> RETURN n_return_void . SEMICOLON

    SEMICOLON       shift and go to state 197


state 190

    (66) return -> empty n_return_void .

    RCURLY          reduce using rule 66 (return -> empty n_return_void .)


state 191

    (111) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .

    IF              reduce using rule 111 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    FOR             reduce using rule 111 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    WHILE           reduce using rule 111 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    NAME            reduce using rule 111 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    INT_TYPE        reduce using rule 111 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    STRING_TYPE     reduce using rule 111 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    DOUBLE_TYPE     reduce using rule 111 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    FLOAT_TYPE      reduce using rule 111 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    BOOL_TYPE       reduce using rule 111 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    FUNCTION        reduce using rule 111 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    $end            reduce using rule 111 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    RCURLY          reduce using rule 111 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    RETURN          reduce using rule 111 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)


state 192

    (112) condition_else -> ELSE n_two_way_conditional_3 . LCURLY n_open_new_scope codeblock RCURLY n_close_scope

    LCURLY          shift and go to state 198


state 193

    (110) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY . n_close_scope
    (4) n_close_scope -> .

    IF              reduce using rule 4 (n_close_scope -> .)
    FOR             reduce using rule 4 (n_close_scope -> .)
    WHILE           reduce using rule 4 (n_close_scope -> .)
    NAME            reduce using rule 4 (n_close_scope -> .)
    INT_TYPE        reduce using rule 4 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 4 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 4 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 4 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 4 (n_close_scope -> .)
    FUNCTION        reduce using rule 4 (n_close_scope -> .)
    $end            reduce using rule 4 (n_close_scope -> .)
    RCURLY          reduce using rule 4 (n_close_scope -> .)
    RETURN          reduce using rule 4 (n_close_scope -> .)

    n_close_scope                  shift and go to state 199

state 194

    (109) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .

    IF              reduce using rule 109 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    FOR             reduce using rule 109 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    WHILE           reduce using rule 109 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    NAME            reduce using rule 109 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    INT_TYPE        reduce using rule 109 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    STRING_TYPE     reduce using rule 109 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    DOUBLE_TYPE     reduce using rule 109 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    FLOAT_TYPE      reduce using rule 109 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    BOOL_TYPE       reduce using rule 109 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    FUNCTION        reduce using rule 109 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    $end            reduce using rule 109 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    RCURLY          reduce using rule 109 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    RETURN          reduce using rule 109 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)


state 195

    (63) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope . n_function_block_end
    (32) n_function_block_end -> .

    IF              reduce using rule 32 (n_function_block_end -> .)
    FOR             reduce using rule 32 (n_function_block_end -> .)
    WHILE           reduce using rule 32 (n_function_block_end -> .)
    NAME            reduce using rule 32 (n_function_block_end -> .)
    INT_TYPE        reduce using rule 32 (n_function_block_end -> .)
    STRING_TYPE     reduce using rule 32 (n_function_block_end -> .)
    DOUBLE_TYPE     reduce using rule 32 (n_function_block_end -> .)
    FLOAT_TYPE      reduce using rule 32 (n_function_block_end -> .)
    BOOL_TYPE       reduce using rule 32 (n_function_block_end -> .)
    FUNCTION        reduce using rule 32 (n_function_block_end -> .)
    $end            reduce using rule 32 (n_function_block_end -> .)
    RCURLY          reduce using rule 32 (n_function_block_end -> .)
    RETURN          reduce using rule 32 (n_function_block_end -> .)

    n_function_block_end           shift and go to state 200

state 196

    (64) return -> RETURN expression n_return . SEMICOLON

    SEMICOLON       shift and go to state 201


state 197

    (65) return -> RETURN n_return_void SEMICOLON .

    RCURLY          reduce using rule 65 (return -> RETURN n_return_void SEMICOLON .)


state 198

    (112) condition_else -> ELSE n_two_way_conditional_3 LCURLY . n_open_new_scope codeblock RCURLY n_close_scope
    (2) n_open_new_scope -> .

    IF              reduce using rule 2 (n_open_new_scope -> .)
    FOR             reduce using rule 2 (n_open_new_scope -> .)
    WHILE           reduce using rule 2 (n_open_new_scope -> .)
    NAME            reduce using rule 2 (n_open_new_scope -> .)
    INT_TYPE        reduce using rule 2 (n_open_new_scope -> .)
    STRING_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    DOUBLE_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    FLOAT_TYPE      reduce using rule 2 (n_open_new_scope -> .)
    BOOL_TYPE       reduce using rule 2 (n_open_new_scope -> .)
    RCURLY          reduce using rule 2 (n_open_new_scope -> .)
    FUNCTION        reduce using rule 2 (n_open_new_scope -> .)

    n_open_new_scope               shift and go to state 202

state 199

    (110) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .

    IF              reduce using rule 110 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    FOR             reduce using rule 110 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    WHILE           reduce using rule 110 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    NAME            reduce using rule 110 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    INT_TYPE        reduce using rule 110 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    STRING_TYPE     reduce using rule 110 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    DOUBLE_TYPE     reduce using rule 110 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    FLOAT_TYPE      reduce using rule 110 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    BOOL_TYPE       reduce using rule 110 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    FUNCTION        reduce using rule 110 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    $end            reduce using rule 110 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    RCURLY          reduce using rule 110 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    RETURN          reduce using rule 110 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)


state 200

    (63) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end .

    IF              reduce using rule 63 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end .)
    FOR             reduce using rule 63 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end .)
    WHILE           reduce using rule 63 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end .)
    NAME            reduce using rule 63 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end .)
    INT_TYPE        reduce using rule 63 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end .)
    STRING_TYPE     reduce using rule 63 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end .)
    DOUBLE_TYPE     reduce using rule 63 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end .)
    FLOAT_TYPE      reduce using rule 63 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end .)
    BOOL_TYPE       reduce using rule 63 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end .)
    FUNCTION        reduce using rule 63 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end .)
    $end            reduce using rule 63 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end .)
    RCURLY          reduce using rule 63 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end .)
    RETURN          reduce using rule 63 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end .)


state 201

    (64) return -> RETURN expression n_return SEMICOLON .

    RCURLY          reduce using rule 64 (return -> RETURN expression n_return SEMICOLON .)


state 202

    (112) condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope . codeblock RCURLY n_close_scope
    (101) codeblock -> . empty
    (102) codeblock -> . codeblock_aux codeblock
    (41) empty -> .
    (103) codeblock_aux -> . statement
    (104) codeblock_aux -> . function_definition
    (105) codeblock_aux -> . condition_if
    (106) codeblock_aux -> . loop
    (98) statement -> . statement_aux SEMICOLON
    (63) function_definition -> . n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end
    (111) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (107) loop -> . forloop
    (108) loop -> . whileloop
    (99) statement_aux -> . assign
    (100) statement_aux -> . function_call
    (30) n_before_function_definition -> .
    (110) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (109) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (96) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (97) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (67) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (45) type -> . INT_TYPE n_seen_type n_function_type
    (46) type -> . STRING_TYPE n_seen_type n_function_type
    (47) type -> . DOUBLE_TYPE n_seen_type n_function_type
    (48) type -> . FLOAT_TYPE n_seen_type n_function_type
    (49) type -> . BOOL_TYPE n_seen_type n_function_type

    RCURLY          reduce using rule 41 (empty -> .)
    IF              shift and go to state 15
    FUNCTION        reduce using rule 30 (n_before_function_definition -> .)
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    codeblock                      shift and go to state 203
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    n_before_function_definition   shift and go to state 13
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 203

    (112) condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock . RCURLY n_close_scope

    RCURLY          shift and go to state 204


state 204

    (112) condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY . n_close_scope
    (4) n_close_scope -> .

    IF              reduce using rule 4 (n_close_scope -> .)
    FOR             reduce using rule 4 (n_close_scope -> .)
    WHILE           reduce using rule 4 (n_close_scope -> .)
    NAME            reduce using rule 4 (n_close_scope -> .)
    INT_TYPE        reduce using rule 4 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 4 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 4 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 4 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 4 (n_close_scope -> .)
    FUNCTION        reduce using rule 4 (n_close_scope -> .)
    $end            reduce using rule 4 (n_close_scope -> .)
    RCURLY          reduce using rule 4 (n_close_scope -> .)
    RETURN          reduce using rule 4 (n_close_scope -> .)

    n_close_scope                  shift and go to state 205

state 205

    (112) condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .

    IF              reduce using rule 112 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    FOR             reduce using rule 112 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    WHILE           reduce using rule 112 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    NAME            reduce using rule 112 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    INT_TYPE        reduce using rule 112 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    STRING_TYPE     reduce using rule 112 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    DOUBLE_TYPE     reduce using rule 112 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    FLOAT_TYPE      reduce using rule 112 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    BOOL_TYPE       reduce using rule 112 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    FUNCTION        reduce using rule 112 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    $end            reduce using rule 112 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    RCURLY          reduce using rule 112 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    RETURN          reduce using rule 112 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)

