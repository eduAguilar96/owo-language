Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DOT
    LBRACKET
    RBRACKET

Grammar

Rule 0     S' -> program
Rule 1     n_seen_type -> <empty>
Rule 2     n_open_new_scope -> <empty>
Rule 3     n_close_scope -> <empty>
Rule 4     n_name -> <empty>
Rule 5     n_math_expression_1 -> <empty>
Rule 6     n_math_expression_2 -> <empty>
Rule 7     n_math_expression_3 -> <empty>
Rule 8     n_math_expression_4 -> <empty>
Rule 9     n_math_expression_5 -> <empty>
Rule 10    n_math_expression_6 -> <empty>
Rule 11    n_math_expression_7 -> <empty>
Rule 12    n_math_expression_8 -> <empty>
Rule 13    n_math_expression_9 -> <empty>
Rule 14    empty -> <empty>
Rule 15    program -> program_aux codeblock
Rule 16    program_aux -> IDK
Rule 17    program_aux -> OWO
Rule 18    type -> INT_TYPE n_seen_type
Rule 19    type -> STRING_TYPE n_seen_type
Rule 20    type -> DOUBLE_TYPE n_seen_type
Rule 21    type -> FLOAT_TYPE n_seen_type
Rule 22    type -> BOOL_TYPE n_seen_type
Rule 23    relational_operator -> GREATERTHAN n_math_expression_8
Rule 24    relational_operator -> LESSTHAN n_math_expression_8
Rule 25    relational_operator -> EQUALEQUAL n_math_expression_8
Rule 26    relational_operator -> LESSTHANOREQUAL n_math_expression_8
Rule 27    relational_operator -> GREATERTHANOREQUAL n_math_expression_8
Rule 28    relational_operator -> NOTEQUAL n_math_expression_8
Rule 29    logical_operator -> AND
Rule 30    logical_operator -> OR
Rule 31    logical_operator -> NOT
Rule 32    arithmetic_operator -> PLUS
Rule 33    arithmetic_operator -> MINUS
Rule 34    arithmetic_operator -> TIMES
Rule 35    arithmetic_operator -> DIVIDE
Rule 36    arithmetic_operator -> MODULUS
Rule 37    literal -> FLOAT n_math_expression_1
Rule 38    literal -> INT n_math_expression_1
Rule 39    literal -> STRING n_math_expression_1
Rule 40    function_type -> type
Rule 41    function_type -> VOID
Rule 42    function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope
Rule 43    function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS
Rule 44    parameter_list -> empty
Rule 45    parameter_list -> parameter
Rule 46    parameter_list -> parameter COMMA parameter_list
Rule 47    parameter -> type NAME n_name
Rule 48    parameter -> assign
Rule 49    expression -> expression_or
Rule 50    expression -> expression_or AND expression
Rule 51    expression_or -> expression_rel
Rule 52    expression_or -> expression_rel OR expression_or
Rule 53    expression_rel -> exp
Rule 54    expression_rel -> exp relational_operator exp n_math_expression_9
Rule 55    exp -> termino n_math_expression_4
Rule 56    exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp
Rule 57    exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp
Rule 58    termino -> factor n_math_expression_5
Rule 59    termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino
Rule 60    termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino
Rule 61    factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
Rule 62    factor -> PLUS value
Rule 63    factor -> MINUS value
Rule 64    factor -> value
Rule 65    value -> function_call
Rule 66    value -> literal
Rule 67    value -> NAME n_math_expression_1
Rule 68    assign -> type NAME n_name EQUAL expression
Rule 69    assign -> NAME n_name EQUAL expression
Rule 70    statement -> statement_aux SEMICOLON
Rule 71    statement_aux -> assign
Rule 72    statement_aux -> function_call
Rule 73    codeblock -> empty
Rule 74    codeblock -> codeblock_aux codeblock
Rule 75    codeblock_aux -> statement
Rule 76    codeblock_aux -> function_definition
Rule 77    codeblock_aux -> condition_if
Rule 78    codeblock_aux -> loop
Rule 79    loop -> forloop
Rule 80    loop -> whileloop
Rule 81    whileloop -> WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope
Rule 82    forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
Rule 83    condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else
Rule 84    condition_else -> ELSE LCURLY n_open_new_scope codeblock RCURLY n_close_scope
Rule 85    condition_else -> empty

Terminals, with rules where they appear

AND                  : 29 50
BOOL_TYPE            : 22
COMMA                : 46
DIVIDE               : 35 60
DOT                  : 
DOUBLEDOT            : 42 82 82
DOUBLE_TYPE          : 20
ELSE                 : 84
EQUAL                : 68 69
EQUALEQUAL           : 25
FLOAT                : 37
FLOAT_TYPE           : 21
FOR                  : 82
FUNCTION             : 42
GREATERTHAN          : 23
GREATERTHANOREQUAL   : 27
IDK                  : 16
IF                   : 83
INT                  : 38
INT_TYPE             : 18
LBRACKET             : 
LCURLY               : 42 81 82 83 84
LESSTHAN             : 24
LESSTHANOREQUAL      : 26
LPARENTHESIS         : 43 61 81 82 83
MINUS                : 33 57 63
MODULUS              : 36
NAME                 : 42 43 47 67 68 69
NOT                  : 31
NOTEQUAL             : 28
OR                   : 30 52
OWO                  : 17
PLUS                 : 32 56 62
RBRACKET             : 
RCURLY               : 42 81 82 83 84
RPARENTHESIS         : 43 61 81 82 83
SEMICOLON            : 70
STRING               : 39
STRING_TYPE          : 19
TIMES                : 34 59
VOID                 : 41
WHILE                : 81
error                : 

Nonterminals, with rules where they appear

arithmetic_operator  : 
assign               : 48 71 82 82
codeblock            : 15 42 74 81 82 83 84
codeblock_aux        : 74
condition_else       : 83
condition_if         : 77
empty                : 44 73 85
exp                  : 53 54 54 56 57
expression           : 50 61 68 69 81 82 83
expression_or        : 49 50 52
expression_rel       : 51 52
factor               : 58 59 60
forloop              : 79
function_call        : 65 72
function_definition  : 76
function_type        : 42
literal              : 66
logical_operator     : 
loop                 : 78
n_close_scope        : 42 81 82 83 84
n_math_expression_1  : 37 38 39 67
n_math_expression_2  : 56 57
n_math_expression_3  : 59 60
n_math_expression_4  : 55 56 57
n_math_expression_5  : 58 59 60
n_math_expression_6  : 61
n_math_expression_7  : 61
n_math_expression_8  : 23 24 25 26 27 28
n_math_expression_9  : 54
n_name               : 47 68 69
n_open_new_scope     : 42 81 82 83 84
n_seen_type          : 18 19 20 21 22
parameter            : 45 46
parameter_list       : 42 43 46
program              : 0
program_aux          : 15
relational_operator  : 54
statement            : 75
statement_aux        : 70
termino              : 55 56 57 59 60
type                 : 40 47 68
value                : 62 63 64
whileloop            : 80

Parsing method: LALR

state 0

    (0) S' -> . program
    (15) program -> . program_aux codeblock
    (16) program_aux -> . IDK
    (17) program_aux -> . OWO

    IDK             shift and go to state 3
    OWO             shift and go to state 4

    program                        shift and go to state 1
    program_aux                    shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (15) program -> program_aux . codeblock
    (73) codeblock -> . empty
    (74) codeblock -> . codeblock_aux codeblock
    (14) empty -> .
    (75) codeblock_aux -> . statement
    (76) codeblock_aux -> . function_definition
    (77) codeblock_aux -> . condition_if
    (78) codeblock_aux -> . loop
    (70) statement -> . statement_aux SEMICOLON
    (42) function_definition -> . FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope
    (83) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else
    (79) loop -> . forloop
    (80) loop -> . whileloop
    (71) statement_aux -> . assign
    (72) statement_aux -> . function_call
    (82) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (81) whileloop -> . WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope
    (68) assign -> . type NAME n_name EQUAL expression
    (69) assign -> . NAME n_name EQUAL expression
    (43) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (18) type -> . INT_TYPE n_seen_type
    (19) type -> . STRING_TYPE n_seen_type
    (20) type -> . DOUBLE_TYPE n_seen_type
    (21) type -> . FLOAT_TYPE n_seen_type
    (22) type -> . BOOL_TYPE n_seen_type

    $end            reduce using rule 14 (empty -> .)
    FUNCTION        shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    codeblock                      shift and go to state 5
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 3

    (16) program_aux -> IDK .

    FUNCTION        reduce using rule 16 (program_aux -> IDK .)
    IF              reduce using rule 16 (program_aux -> IDK .)
    FOR             reduce using rule 16 (program_aux -> IDK .)
    WHILE           reduce using rule 16 (program_aux -> IDK .)
    NAME            reduce using rule 16 (program_aux -> IDK .)
    INT_TYPE        reduce using rule 16 (program_aux -> IDK .)
    STRING_TYPE     reduce using rule 16 (program_aux -> IDK .)
    DOUBLE_TYPE     reduce using rule 16 (program_aux -> IDK .)
    FLOAT_TYPE      reduce using rule 16 (program_aux -> IDK .)
    BOOL_TYPE       reduce using rule 16 (program_aux -> IDK .)
    $end            reduce using rule 16 (program_aux -> IDK .)


state 4

    (17) program_aux -> OWO .

    FUNCTION        reduce using rule 17 (program_aux -> OWO .)
    IF              reduce using rule 17 (program_aux -> OWO .)
    FOR             reduce using rule 17 (program_aux -> OWO .)
    WHILE           reduce using rule 17 (program_aux -> OWO .)
    NAME            reduce using rule 17 (program_aux -> OWO .)
    INT_TYPE        reduce using rule 17 (program_aux -> OWO .)
    STRING_TYPE     reduce using rule 17 (program_aux -> OWO .)
    DOUBLE_TYPE     reduce using rule 17 (program_aux -> OWO .)
    FLOAT_TYPE      reduce using rule 17 (program_aux -> OWO .)
    BOOL_TYPE       reduce using rule 17 (program_aux -> OWO .)
    $end            reduce using rule 17 (program_aux -> OWO .)


state 5

    (15) program -> program_aux codeblock .

    $end            reduce using rule 15 (program -> program_aux codeblock .)


state 6

    (73) codeblock -> empty .

    $end            reduce using rule 73 (codeblock -> empty .)
    RCURLY          reduce using rule 73 (codeblock -> empty .)


state 7

    (74) codeblock -> codeblock_aux . codeblock
    (73) codeblock -> . empty
    (74) codeblock -> . codeblock_aux codeblock
    (14) empty -> .
    (75) codeblock_aux -> . statement
    (76) codeblock_aux -> . function_definition
    (77) codeblock_aux -> . condition_if
    (78) codeblock_aux -> . loop
    (70) statement -> . statement_aux SEMICOLON
    (42) function_definition -> . FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope
    (83) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else
    (79) loop -> . forloop
    (80) loop -> . whileloop
    (71) statement_aux -> . assign
    (72) statement_aux -> . function_call
    (82) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (81) whileloop -> . WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope
    (68) assign -> . type NAME n_name EQUAL expression
    (69) assign -> . NAME n_name EQUAL expression
    (43) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (18) type -> . INT_TYPE n_seen_type
    (19) type -> . STRING_TYPE n_seen_type
    (20) type -> . DOUBLE_TYPE n_seen_type
    (21) type -> . FLOAT_TYPE n_seen_type
    (22) type -> . BOOL_TYPE n_seen_type

    $end            reduce using rule 14 (empty -> .)
    RCURLY          reduce using rule 14 (empty -> .)
    FUNCTION        shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    codeblock_aux                  shift and go to state 7
    codeblock                      shift and go to state 28
    empty                          shift and go to state 6
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 8

    (75) codeblock_aux -> statement .

    FUNCTION        reduce using rule 75 (codeblock_aux -> statement .)
    IF              reduce using rule 75 (codeblock_aux -> statement .)
    FOR             reduce using rule 75 (codeblock_aux -> statement .)
    WHILE           reduce using rule 75 (codeblock_aux -> statement .)
    NAME            reduce using rule 75 (codeblock_aux -> statement .)
    INT_TYPE        reduce using rule 75 (codeblock_aux -> statement .)
    STRING_TYPE     reduce using rule 75 (codeblock_aux -> statement .)
    DOUBLE_TYPE     reduce using rule 75 (codeblock_aux -> statement .)
    FLOAT_TYPE      reduce using rule 75 (codeblock_aux -> statement .)
    BOOL_TYPE       reduce using rule 75 (codeblock_aux -> statement .)
    $end            reduce using rule 75 (codeblock_aux -> statement .)
    RCURLY          reduce using rule 75 (codeblock_aux -> statement .)


state 9

    (76) codeblock_aux -> function_definition .

    FUNCTION        reduce using rule 76 (codeblock_aux -> function_definition .)
    IF              reduce using rule 76 (codeblock_aux -> function_definition .)
    FOR             reduce using rule 76 (codeblock_aux -> function_definition .)
    WHILE           reduce using rule 76 (codeblock_aux -> function_definition .)
    NAME            reduce using rule 76 (codeblock_aux -> function_definition .)
    INT_TYPE        reduce using rule 76 (codeblock_aux -> function_definition .)
    STRING_TYPE     reduce using rule 76 (codeblock_aux -> function_definition .)
    DOUBLE_TYPE     reduce using rule 76 (codeblock_aux -> function_definition .)
    FLOAT_TYPE      reduce using rule 76 (codeblock_aux -> function_definition .)
    BOOL_TYPE       reduce using rule 76 (codeblock_aux -> function_definition .)
    $end            reduce using rule 76 (codeblock_aux -> function_definition .)
    RCURLY          reduce using rule 76 (codeblock_aux -> function_definition .)


state 10

    (77) codeblock_aux -> condition_if .

    FUNCTION        reduce using rule 77 (codeblock_aux -> condition_if .)
    IF              reduce using rule 77 (codeblock_aux -> condition_if .)
    FOR             reduce using rule 77 (codeblock_aux -> condition_if .)
    WHILE           reduce using rule 77 (codeblock_aux -> condition_if .)
    NAME            reduce using rule 77 (codeblock_aux -> condition_if .)
    INT_TYPE        reduce using rule 77 (codeblock_aux -> condition_if .)
    STRING_TYPE     reduce using rule 77 (codeblock_aux -> condition_if .)
    DOUBLE_TYPE     reduce using rule 77 (codeblock_aux -> condition_if .)
    FLOAT_TYPE      reduce using rule 77 (codeblock_aux -> condition_if .)
    BOOL_TYPE       reduce using rule 77 (codeblock_aux -> condition_if .)
    $end            reduce using rule 77 (codeblock_aux -> condition_if .)
    RCURLY          reduce using rule 77 (codeblock_aux -> condition_if .)


state 11

    (78) codeblock_aux -> loop .

    FUNCTION        reduce using rule 78 (codeblock_aux -> loop .)
    IF              reduce using rule 78 (codeblock_aux -> loop .)
    FOR             reduce using rule 78 (codeblock_aux -> loop .)
    WHILE           reduce using rule 78 (codeblock_aux -> loop .)
    NAME            reduce using rule 78 (codeblock_aux -> loop .)
    INT_TYPE        reduce using rule 78 (codeblock_aux -> loop .)
    STRING_TYPE     reduce using rule 78 (codeblock_aux -> loop .)
    DOUBLE_TYPE     reduce using rule 78 (codeblock_aux -> loop .)
    FLOAT_TYPE      reduce using rule 78 (codeblock_aux -> loop .)
    BOOL_TYPE       reduce using rule 78 (codeblock_aux -> loop .)
    $end            reduce using rule 78 (codeblock_aux -> loop .)
    RCURLY          reduce using rule 78 (codeblock_aux -> loop .)


state 12

    (70) statement -> statement_aux . SEMICOLON

    SEMICOLON       shift and go to state 29


state 13

    (42) function_definition -> FUNCTION . NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope

    NAME            shift and go to state 30


state 14

    (69) assign -> NAME . n_name EQUAL expression
    (43) function_call -> NAME . LPARENTHESIS parameter_list RPARENTHESIS
    (4) n_name -> .

    LPARENTHESIS    shift and go to state 32
    EQUAL           reduce using rule 4 (n_name -> .)

    n_name                         shift and go to state 31

state 15

    (83) condition_if -> IF . LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else

    LPARENTHESIS    shift and go to state 33


state 16

    (79) loop -> forloop .

    FUNCTION        reduce using rule 79 (loop -> forloop .)
    IF              reduce using rule 79 (loop -> forloop .)
    FOR             reduce using rule 79 (loop -> forloop .)
    WHILE           reduce using rule 79 (loop -> forloop .)
    NAME            reduce using rule 79 (loop -> forloop .)
    INT_TYPE        reduce using rule 79 (loop -> forloop .)
    STRING_TYPE     reduce using rule 79 (loop -> forloop .)
    DOUBLE_TYPE     reduce using rule 79 (loop -> forloop .)
    FLOAT_TYPE      reduce using rule 79 (loop -> forloop .)
    BOOL_TYPE       reduce using rule 79 (loop -> forloop .)
    $end            reduce using rule 79 (loop -> forloop .)
    RCURLY          reduce using rule 79 (loop -> forloop .)


state 17

    (80) loop -> whileloop .

    FUNCTION        reduce using rule 80 (loop -> whileloop .)
    IF              reduce using rule 80 (loop -> whileloop .)
    FOR             reduce using rule 80 (loop -> whileloop .)
    WHILE           reduce using rule 80 (loop -> whileloop .)
    NAME            reduce using rule 80 (loop -> whileloop .)
    INT_TYPE        reduce using rule 80 (loop -> whileloop .)
    STRING_TYPE     reduce using rule 80 (loop -> whileloop .)
    DOUBLE_TYPE     reduce using rule 80 (loop -> whileloop .)
    FLOAT_TYPE      reduce using rule 80 (loop -> whileloop .)
    BOOL_TYPE       reduce using rule 80 (loop -> whileloop .)
    $end            reduce using rule 80 (loop -> whileloop .)
    RCURLY          reduce using rule 80 (loop -> whileloop .)


state 18

    (71) statement_aux -> assign .

    SEMICOLON       reduce using rule 71 (statement_aux -> assign .)


state 19

    (72) statement_aux -> function_call .

    SEMICOLON       reduce using rule 72 (statement_aux -> function_call .)


state 20

    (82) forloop -> FOR . LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope

    LPARENTHESIS    shift and go to state 34


state 21

    (81) whileloop -> WHILE . LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope

    LPARENTHESIS    shift and go to state 35


state 22

    (68) assign -> type . NAME n_name EQUAL expression

    NAME            shift and go to state 36


state 23

    (18) type -> INT_TYPE . n_seen_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)
    LCURLY          reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 37

state 24

    (19) type -> STRING_TYPE . n_seen_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)
    LCURLY          reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 38

state 25

    (20) type -> DOUBLE_TYPE . n_seen_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)
    LCURLY          reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 39

state 26

    (21) type -> FLOAT_TYPE . n_seen_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)
    LCURLY          reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 40

state 27

    (22) type -> BOOL_TYPE . n_seen_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)
    LCURLY          reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 41

state 28

    (74) codeblock -> codeblock_aux codeblock .

    $end            reduce using rule 74 (codeblock -> codeblock_aux codeblock .)
    RCURLY          reduce using rule 74 (codeblock -> codeblock_aux codeblock .)


state 29

    (70) statement -> statement_aux SEMICOLON .

    FUNCTION        reduce using rule 70 (statement -> statement_aux SEMICOLON .)
    IF              reduce using rule 70 (statement -> statement_aux SEMICOLON .)
    FOR             reduce using rule 70 (statement -> statement_aux SEMICOLON .)
    WHILE           reduce using rule 70 (statement -> statement_aux SEMICOLON .)
    NAME            reduce using rule 70 (statement -> statement_aux SEMICOLON .)
    INT_TYPE        reduce using rule 70 (statement -> statement_aux SEMICOLON .)
    STRING_TYPE     reduce using rule 70 (statement -> statement_aux SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 70 (statement -> statement_aux SEMICOLON .)
    FLOAT_TYPE      reduce using rule 70 (statement -> statement_aux SEMICOLON .)
    BOOL_TYPE       reduce using rule 70 (statement -> statement_aux SEMICOLON .)
    $end            reduce using rule 70 (statement -> statement_aux SEMICOLON .)
    RCURLY          reduce using rule 70 (statement -> statement_aux SEMICOLON .)


state 30

    (42) function_definition -> FUNCTION NAME . n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope
    (2) n_open_new_scope -> .

    INT_TYPE        reduce using rule 2 (n_open_new_scope -> .)
    STRING_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    DOUBLE_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    FLOAT_TYPE      reduce using rule 2 (n_open_new_scope -> .)
    BOOL_TYPE       reduce using rule 2 (n_open_new_scope -> .)
    NAME            reduce using rule 2 (n_open_new_scope -> .)
    DOUBLEDOT       reduce using rule 2 (n_open_new_scope -> .)

    n_open_new_scope               shift and go to state 42

state 31

    (69) assign -> NAME n_name . EQUAL expression

    EQUAL           shift and go to state 43


state 32

    (43) function_call -> NAME LPARENTHESIS . parameter_list RPARENTHESIS
    (44) parameter_list -> . empty
    (45) parameter_list -> . parameter
    (46) parameter_list -> . parameter COMMA parameter_list
    (14) empty -> .
    (47) parameter -> . type NAME n_name
    (48) parameter -> . assign
    (18) type -> . INT_TYPE n_seen_type
    (19) type -> . STRING_TYPE n_seen_type
    (20) type -> . DOUBLE_TYPE n_seen_type
    (21) type -> . FLOAT_TYPE n_seen_type
    (22) type -> . BOOL_TYPE n_seen_type
    (68) assign -> . type NAME n_name EQUAL expression
    (69) assign -> . NAME n_name EQUAL expression

    RPARENTHESIS    reduce using rule 14 (empty -> .)
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27
    NAME            shift and go to state 44

    parameter_list                 shift and go to state 45
    empty                          shift and go to state 46
    parameter                      shift and go to state 47
    type                           shift and go to state 48
    assign                         shift and go to state 49

state 33

    (83) condition_if -> IF LPARENTHESIS . expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else
    (49) expression -> . expression_or
    (50) expression -> . expression_or AND expression
    (51) expression_or -> . expression_rel
    (52) expression_or -> . expression_rel OR expression_or
    (53) expression_rel -> . exp
    (54) expression_rel -> . exp relational_operator exp n_math_expression_9
    (55) exp -> . termino n_math_expression_4
    (56) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (57) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (58) termino -> . factor n_math_expression_5
    (59) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (60) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (61) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (62) factor -> . PLUS value
    (63) factor -> . MINUS value
    (64) factor -> . value
    (65) value -> . function_call
    (66) value -> . literal
    (67) value -> . NAME n_math_expression_1
    (43) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (37) literal -> . FLOAT n_math_expression_1
    (38) literal -> . INT n_math_expression_1
    (39) literal -> . STRING n_math_expression_1

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    expression                     shift and go to state 51
    expression_or                  shift and go to state 52
    expression_rel                 shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 55
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 34

    (82) forloop -> FOR LPARENTHESIS . n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (2) n_open_new_scope -> .

    NAME            reduce using rule 2 (n_open_new_scope -> .)
    INT_TYPE        reduce using rule 2 (n_open_new_scope -> .)
    STRING_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    DOUBLE_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    FLOAT_TYPE      reduce using rule 2 (n_open_new_scope -> .)
    BOOL_TYPE       reduce using rule 2 (n_open_new_scope -> .)

    n_open_new_scope               shift and go to state 66

state 35

    (81) whileloop -> WHILE LPARENTHESIS . expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope
    (49) expression -> . expression_or
    (50) expression -> . expression_or AND expression
    (51) expression_or -> . expression_rel
    (52) expression_or -> . expression_rel OR expression_or
    (53) expression_rel -> . exp
    (54) expression_rel -> . exp relational_operator exp n_math_expression_9
    (55) exp -> . termino n_math_expression_4
    (56) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (57) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (58) termino -> . factor n_math_expression_5
    (59) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (60) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (61) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (62) factor -> . PLUS value
    (63) factor -> . MINUS value
    (64) factor -> . value
    (65) value -> . function_call
    (66) value -> . literal
    (67) value -> . NAME n_math_expression_1
    (43) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (37) literal -> . FLOAT n_math_expression_1
    (38) literal -> . INT n_math_expression_1
    (39) literal -> . STRING n_math_expression_1

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    expression                     shift and go to state 67
    expression_or                  shift and go to state 52
    expression_rel                 shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 55
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 36

    (68) assign -> type NAME . n_name EQUAL expression
    (4) n_name -> .

    EQUAL           reduce using rule 4 (n_name -> .)

    n_name                         shift and go to state 68

state 37

    (18) type -> INT_TYPE n_seen_type .

    NAME            reduce using rule 18 (type -> INT_TYPE n_seen_type .)
    LCURLY          reduce using rule 18 (type -> INT_TYPE n_seen_type .)


state 38

    (19) type -> STRING_TYPE n_seen_type .

    NAME            reduce using rule 19 (type -> STRING_TYPE n_seen_type .)
    LCURLY          reduce using rule 19 (type -> STRING_TYPE n_seen_type .)


state 39

    (20) type -> DOUBLE_TYPE n_seen_type .

    NAME            reduce using rule 20 (type -> DOUBLE_TYPE n_seen_type .)
    LCURLY          reduce using rule 20 (type -> DOUBLE_TYPE n_seen_type .)


state 40

    (21) type -> FLOAT_TYPE n_seen_type .

    NAME            reduce using rule 21 (type -> FLOAT_TYPE n_seen_type .)
    LCURLY          reduce using rule 21 (type -> FLOAT_TYPE n_seen_type .)


state 41

    (22) type -> BOOL_TYPE n_seen_type .

    NAME            reduce using rule 22 (type -> BOOL_TYPE n_seen_type .)
    LCURLY          reduce using rule 22 (type -> BOOL_TYPE n_seen_type .)


state 42

    (42) function_definition -> FUNCTION NAME n_open_new_scope . parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope
    (44) parameter_list -> . empty
    (45) parameter_list -> . parameter
    (46) parameter_list -> . parameter COMMA parameter_list
    (14) empty -> .
    (47) parameter -> . type NAME n_name
    (48) parameter -> . assign
    (18) type -> . INT_TYPE n_seen_type
    (19) type -> . STRING_TYPE n_seen_type
    (20) type -> . DOUBLE_TYPE n_seen_type
    (21) type -> . FLOAT_TYPE n_seen_type
    (22) type -> . BOOL_TYPE n_seen_type
    (68) assign -> . type NAME n_name EQUAL expression
    (69) assign -> . NAME n_name EQUAL expression

    DOUBLEDOT       reduce using rule 14 (empty -> .)
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27
    NAME            shift and go to state 44

    parameter_list                 shift and go to state 69
    empty                          shift and go to state 46
    parameter                      shift and go to state 47
    type                           shift and go to state 48
    assign                         shift and go to state 49

state 43

    (69) assign -> NAME n_name EQUAL . expression
    (49) expression -> . expression_or
    (50) expression -> . expression_or AND expression
    (51) expression_or -> . expression_rel
    (52) expression_or -> . expression_rel OR expression_or
    (53) expression_rel -> . exp
    (54) expression_rel -> . exp relational_operator exp n_math_expression_9
    (55) exp -> . termino n_math_expression_4
    (56) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (57) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (58) termino -> . factor n_math_expression_5
    (59) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (60) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (61) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (62) factor -> . PLUS value
    (63) factor -> . MINUS value
    (64) factor -> . value
    (65) value -> . function_call
    (66) value -> . literal
    (67) value -> . NAME n_math_expression_1
    (43) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (37) literal -> . FLOAT n_math_expression_1
    (38) literal -> . INT n_math_expression_1
    (39) literal -> . STRING n_math_expression_1

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    expression                     shift and go to state 70
    expression_or                  shift and go to state 52
    expression_rel                 shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 55
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 44

    (69) assign -> NAME . n_name EQUAL expression
    (4) n_name -> .

    EQUAL           reduce using rule 4 (n_name -> .)

    n_name                         shift and go to state 31

state 45

    (43) function_call -> NAME LPARENTHESIS parameter_list . RPARENTHESIS

    RPARENTHESIS    shift and go to state 71


state 46

    (44) parameter_list -> empty .

    RPARENTHESIS    reduce using rule 44 (parameter_list -> empty .)
    DOUBLEDOT       reduce using rule 44 (parameter_list -> empty .)


state 47

    (45) parameter_list -> parameter .
    (46) parameter_list -> parameter . COMMA parameter_list

    RPARENTHESIS    reduce using rule 45 (parameter_list -> parameter .)
    DOUBLEDOT       reduce using rule 45 (parameter_list -> parameter .)
    COMMA           shift and go to state 72


state 48

    (47) parameter -> type . NAME n_name
    (68) assign -> type . NAME n_name EQUAL expression

    NAME            shift and go to state 73


state 49

    (48) parameter -> assign .

    COMMA           reduce using rule 48 (parameter -> assign .)
    RPARENTHESIS    reduce using rule 48 (parameter -> assign .)
    DOUBLEDOT       reduce using rule 48 (parameter -> assign .)


state 50

    (61) factor -> LPARENTHESIS . n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (10) n_math_expression_6 -> .

    LPARENTHESIS    reduce using rule 10 (n_math_expression_6 -> .)
    PLUS            reduce using rule 10 (n_math_expression_6 -> .)
    MINUS           reduce using rule 10 (n_math_expression_6 -> .)
    NAME            reduce using rule 10 (n_math_expression_6 -> .)
    FLOAT           reduce using rule 10 (n_math_expression_6 -> .)
    INT             reduce using rule 10 (n_math_expression_6 -> .)
    STRING          reduce using rule 10 (n_math_expression_6 -> .)

    n_math_expression_6            shift and go to state 74

state 51

    (83) condition_if -> IF LPARENTHESIS expression . RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else

    RPARENTHESIS    shift and go to state 75


state 52

    (49) expression -> expression_or .
    (50) expression -> expression_or . AND expression

    RPARENTHESIS    reduce using rule 49 (expression -> expression_or .)
    SEMICOLON       reduce using rule 49 (expression -> expression_or .)
    COMMA           reduce using rule 49 (expression -> expression_or .)
    DOUBLEDOT       reduce using rule 49 (expression -> expression_or .)
    AND             shift and go to state 76


state 53

    (51) expression_or -> expression_rel .
    (52) expression_or -> expression_rel . OR expression_or

    AND             reduce using rule 51 (expression_or -> expression_rel .)
    RPARENTHESIS    reduce using rule 51 (expression_or -> expression_rel .)
    SEMICOLON       reduce using rule 51 (expression_or -> expression_rel .)
    COMMA           reduce using rule 51 (expression_or -> expression_rel .)
    DOUBLEDOT       reduce using rule 51 (expression_or -> expression_rel .)
    OR              shift and go to state 77


state 54

    (53) expression_rel -> exp .
    (54) expression_rel -> exp . relational_operator exp n_math_expression_9
    (23) relational_operator -> . GREATERTHAN n_math_expression_8
    (24) relational_operator -> . LESSTHAN n_math_expression_8
    (25) relational_operator -> . EQUALEQUAL n_math_expression_8
    (26) relational_operator -> . LESSTHANOREQUAL n_math_expression_8
    (27) relational_operator -> . GREATERTHANOREQUAL n_math_expression_8
    (28) relational_operator -> . NOTEQUAL n_math_expression_8

    OR              reduce using rule 53 (expression_rel -> exp .)
    AND             reduce using rule 53 (expression_rel -> exp .)
    RPARENTHESIS    reduce using rule 53 (expression_rel -> exp .)
    SEMICOLON       reduce using rule 53 (expression_rel -> exp .)
    COMMA           reduce using rule 53 (expression_rel -> exp .)
    DOUBLEDOT       reduce using rule 53 (expression_rel -> exp .)
    GREATERTHAN     shift and go to state 79
    LESSTHAN        shift and go to state 80
    EQUALEQUAL      shift and go to state 81
    LESSTHANOREQUAL shift and go to state 82
    GREATERTHANOREQUAL shift and go to state 83
    NOTEQUAL        shift and go to state 84

    relational_operator            shift and go to state 78

state 55

    (55) exp -> termino . n_math_expression_4
    (56) exp -> termino . n_math_expression_4 PLUS n_math_expression_2 exp
    (57) exp -> termino . n_math_expression_4 MINUS n_math_expression_2 exp
    (8) n_math_expression_4 -> .

    PLUS            reduce using rule 8 (n_math_expression_4 -> .)
    MINUS           reduce using rule 8 (n_math_expression_4 -> .)
    GREATERTHAN     reduce using rule 8 (n_math_expression_4 -> .)
    LESSTHAN        reduce using rule 8 (n_math_expression_4 -> .)
    EQUALEQUAL      reduce using rule 8 (n_math_expression_4 -> .)
    LESSTHANOREQUAL reduce using rule 8 (n_math_expression_4 -> .)
    GREATERTHANOREQUAL reduce using rule 8 (n_math_expression_4 -> .)
    NOTEQUAL        reduce using rule 8 (n_math_expression_4 -> .)
    OR              reduce using rule 8 (n_math_expression_4 -> .)
    AND             reduce using rule 8 (n_math_expression_4 -> .)
    RPARENTHESIS    reduce using rule 8 (n_math_expression_4 -> .)
    SEMICOLON       reduce using rule 8 (n_math_expression_4 -> .)
    COMMA           reduce using rule 8 (n_math_expression_4 -> .)
    DOUBLEDOT       reduce using rule 8 (n_math_expression_4 -> .)

    n_math_expression_4            shift and go to state 85

state 56

    (62) factor -> PLUS . value
    (65) value -> . function_call
    (66) value -> . literal
    (67) value -> . NAME n_math_expression_1
    (43) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (37) literal -> . FLOAT n_math_expression_1
    (38) literal -> . INT n_math_expression_1
    (39) literal -> . STRING n_math_expression_1

    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    value                          shift and go to state 86
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 57

    (63) factor -> MINUS . value
    (65) value -> . function_call
    (66) value -> . literal
    (67) value -> . NAME n_math_expression_1
    (43) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (37) literal -> . FLOAT n_math_expression_1
    (38) literal -> . INT n_math_expression_1
    (39) literal -> . STRING n_math_expression_1

    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    value                          shift and go to state 87
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 58

    (58) termino -> factor . n_math_expression_5
    (59) termino -> factor . n_math_expression_5 TIMES n_math_expression_3 termino
    (60) termino -> factor . n_math_expression_5 DIVIDE n_math_expression_3 termino
    (9) n_math_expression_5 -> .

    TIMES           reduce using rule 9 (n_math_expression_5 -> .)
    DIVIDE          reduce using rule 9 (n_math_expression_5 -> .)
    PLUS            reduce using rule 9 (n_math_expression_5 -> .)
    MINUS           reduce using rule 9 (n_math_expression_5 -> .)
    GREATERTHAN     reduce using rule 9 (n_math_expression_5 -> .)
    LESSTHAN        reduce using rule 9 (n_math_expression_5 -> .)
    EQUALEQUAL      reduce using rule 9 (n_math_expression_5 -> .)
    LESSTHANOREQUAL reduce using rule 9 (n_math_expression_5 -> .)
    GREATERTHANOREQUAL reduce using rule 9 (n_math_expression_5 -> .)
    NOTEQUAL        reduce using rule 9 (n_math_expression_5 -> .)
    OR              reduce using rule 9 (n_math_expression_5 -> .)
    AND             reduce using rule 9 (n_math_expression_5 -> .)
    RPARENTHESIS    reduce using rule 9 (n_math_expression_5 -> .)
    SEMICOLON       reduce using rule 9 (n_math_expression_5 -> .)
    COMMA           reduce using rule 9 (n_math_expression_5 -> .)
    DOUBLEDOT       reduce using rule 9 (n_math_expression_5 -> .)

    n_math_expression_5            shift and go to state 88

state 59

    (64) factor -> value .

    TIMES           reduce using rule 64 (factor -> value .)
    DIVIDE          reduce using rule 64 (factor -> value .)
    PLUS            reduce using rule 64 (factor -> value .)
    MINUS           reduce using rule 64 (factor -> value .)
    GREATERTHAN     reduce using rule 64 (factor -> value .)
    LESSTHAN        reduce using rule 64 (factor -> value .)
    EQUALEQUAL      reduce using rule 64 (factor -> value .)
    LESSTHANOREQUAL reduce using rule 64 (factor -> value .)
    GREATERTHANOREQUAL reduce using rule 64 (factor -> value .)
    NOTEQUAL        reduce using rule 64 (factor -> value .)
    OR              reduce using rule 64 (factor -> value .)
    AND             reduce using rule 64 (factor -> value .)
    RPARENTHESIS    reduce using rule 64 (factor -> value .)
    SEMICOLON       reduce using rule 64 (factor -> value .)
    COMMA           reduce using rule 64 (factor -> value .)
    DOUBLEDOT       reduce using rule 64 (factor -> value .)


state 60

    (65) value -> function_call .

    TIMES           reduce using rule 65 (value -> function_call .)
    DIVIDE          reduce using rule 65 (value -> function_call .)
    PLUS            reduce using rule 65 (value -> function_call .)
    MINUS           reduce using rule 65 (value -> function_call .)
    GREATERTHAN     reduce using rule 65 (value -> function_call .)
    LESSTHAN        reduce using rule 65 (value -> function_call .)
    EQUALEQUAL      reduce using rule 65 (value -> function_call .)
    LESSTHANOREQUAL reduce using rule 65 (value -> function_call .)
    GREATERTHANOREQUAL reduce using rule 65 (value -> function_call .)
    NOTEQUAL        reduce using rule 65 (value -> function_call .)
    OR              reduce using rule 65 (value -> function_call .)
    AND             reduce using rule 65 (value -> function_call .)
    RPARENTHESIS    reduce using rule 65 (value -> function_call .)
    SEMICOLON       reduce using rule 65 (value -> function_call .)
    COMMA           reduce using rule 65 (value -> function_call .)
    DOUBLEDOT       reduce using rule 65 (value -> function_call .)


state 61

    (66) value -> literal .

    TIMES           reduce using rule 66 (value -> literal .)
    DIVIDE          reduce using rule 66 (value -> literal .)
    PLUS            reduce using rule 66 (value -> literal .)
    MINUS           reduce using rule 66 (value -> literal .)
    GREATERTHAN     reduce using rule 66 (value -> literal .)
    LESSTHAN        reduce using rule 66 (value -> literal .)
    EQUALEQUAL      reduce using rule 66 (value -> literal .)
    LESSTHANOREQUAL reduce using rule 66 (value -> literal .)
    GREATERTHANOREQUAL reduce using rule 66 (value -> literal .)
    NOTEQUAL        reduce using rule 66 (value -> literal .)
    OR              reduce using rule 66 (value -> literal .)
    AND             reduce using rule 66 (value -> literal .)
    RPARENTHESIS    reduce using rule 66 (value -> literal .)
    SEMICOLON       reduce using rule 66 (value -> literal .)
    COMMA           reduce using rule 66 (value -> literal .)
    DOUBLEDOT       reduce using rule 66 (value -> literal .)


state 62

    (67) value -> NAME . n_math_expression_1
    (43) function_call -> NAME . LPARENTHESIS parameter_list RPARENTHESIS
    (5) n_math_expression_1 -> .

    LPARENTHESIS    shift and go to state 32
    TIMES           reduce using rule 5 (n_math_expression_1 -> .)
    DIVIDE          reduce using rule 5 (n_math_expression_1 -> .)
    PLUS            reduce using rule 5 (n_math_expression_1 -> .)
    MINUS           reduce using rule 5 (n_math_expression_1 -> .)
    GREATERTHAN     reduce using rule 5 (n_math_expression_1 -> .)
    LESSTHAN        reduce using rule 5 (n_math_expression_1 -> .)
    EQUALEQUAL      reduce using rule 5 (n_math_expression_1 -> .)
    LESSTHANOREQUAL reduce using rule 5 (n_math_expression_1 -> .)
    GREATERTHANOREQUAL reduce using rule 5 (n_math_expression_1 -> .)
    NOTEQUAL        reduce using rule 5 (n_math_expression_1 -> .)
    OR              reduce using rule 5 (n_math_expression_1 -> .)
    AND             reduce using rule 5 (n_math_expression_1 -> .)
    RPARENTHESIS    reduce using rule 5 (n_math_expression_1 -> .)
    SEMICOLON       reduce using rule 5 (n_math_expression_1 -> .)
    COMMA           reduce using rule 5 (n_math_expression_1 -> .)
    DOUBLEDOT       reduce using rule 5 (n_math_expression_1 -> .)

    n_math_expression_1            shift and go to state 89

state 63

    (37) literal -> FLOAT . n_math_expression_1
    (5) n_math_expression_1 -> .

    TIMES           reduce using rule 5 (n_math_expression_1 -> .)
    DIVIDE          reduce using rule 5 (n_math_expression_1 -> .)
    PLUS            reduce using rule 5 (n_math_expression_1 -> .)
    MINUS           reduce using rule 5 (n_math_expression_1 -> .)
    GREATERTHAN     reduce using rule 5 (n_math_expression_1 -> .)
    LESSTHAN        reduce using rule 5 (n_math_expression_1 -> .)
    EQUALEQUAL      reduce using rule 5 (n_math_expression_1 -> .)
    LESSTHANOREQUAL reduce using rule 5 (n_math_expression_1 -> .)
    GREATERTHANOREQUAL reduce using rule 5 (n_math_expression_1 -> .)
    NOTEQUAL        reduce using rule 5 (n_math_expression_1 -> .)
    OR              reduce using rule 5 (n_math_expression_1 -> .)
    AND             reduce using rule 5 (n_math_expression_1 -> .)
    RPARENTHESIS    reduce using rule 5 (n_math_expression_1 -> .)
    SEMICOLON       reduce using rule 5 (n_math_expression_1 -> .)
    COMMA           reduce using rule 5 (n_math_expression_1 -> .)
    DOUBLEDOT       reduce using rule 5 (n_math_expression_1 -> .)

    n_math_expression_1            shift and go to state 90

state 64

    (38) literal -> INT . n_math_expression_1
    (5) n_math_expression_1 -> .

    TIMES           reduce using rule 5 (n_math_expression_1 -> .)
    DIVIDE          reduce using rule 5 (n_math_expression_1 -> .)
    PLUS            reduce using rule 5 (n_math_expression_1 -> .)
    MINUS           reduce using rule 5 (n_math_expression_1 -> .)
    GREATERTHAN     reduce using rule 5 (n_math_expression_1 -> .)
    LESSTHAN        reduce using rule 5 (n_math_expression_1 -> .)
    EQUALEQUAL      reduce using rule 5 (n_math_expression_1 -> .)
    LESSTHANOREQUAL reduce using rule 5 (n_math_expression_1 -> .)
    GREATERTHANOREQUAL reduce using rule 5 (n_math_expression_1 -> .)
    NOTEQUAL        reduce using rule 5 (n_math_expression_1 -> .)
    OR              reduce using rule 5 (n_math_expression_1 -> .)
    AND             reduce using rule 5 (n_math_expression_1 -> .)
    RPARENTHESIS    reduce using rule 5 (n_math_expression_1 -> .)
    SEMICOLON       reduce using rule 5 (n_math_expression_1 -> .)
    COMMA           reduce using rule 5 (n_math_expression_1 -> .)
    DOUBLEDOT       reduce using rule 5 (n_math_expression_1 -> .)

    n_math_expression_1            shift and go to state 91

state 65

    (39) literal -> STRING . n_math_expression_1
    (5) n_math_expression_1 -> .

    TIMES           reduce using rule 5 (n_math_expression_1 -> .)
    DIVIDE          reduce using rule 5 (n_math_expression_1 -> .)
    PLUS            reduce using rule 5 (n_math_expression_1 -> .)
    MINUS           reduce using rule 5 (n_math_expression_1 -> .)
    GREATERTHAN     reduce using rule 5 (n_math_expression_1 -> .)
    LESSTHAN        reduce using rule 5 (n_math_expression_1 -> .)
    EQUALEQUAL      reduce using rule 5 (n_math_expression_1 -> .)
    LESSTHANOREQUAL reduce using rule 5 (n_math_expression_1 -> .)
    GREATERTHANOREQUAL reduce using rule 5 (n_math_expression_1 -> .)
    NOTEQUAL        reduce using rule 5 (n_math_expression_1 -> .)
    OR              reduce using rule 5 (n_math_expression_1 -> .)
    AND             reduce using rule 5 (n_math_expression_1 -> .)
    RPARENTHESIS    reduce using rule 5 (n_math_expression_1 -> .)
    SEMICOLON       reduce using rule 5 (n_math_expression_1 -> .)
    COMMA           reduce using rule 5 (n_math_expression_1 -> .)
    DOUBLEDOT       reduce using rule 5 (n_math_expression_1 -> .)

    n_math_expression_1            shift and go to state 92

state 66

    (82) forloop -> FOR LPARENTHESIS n_open_new_scope . assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (68) assign -> . type NAME n_name EQUAL expression
    (69) assign -> . NAME n_name EQUAL expression
    (18) type -> . INT_TYPE n_seen_type
    (19) type -> . STRING_TYPE n_seen_type
    (20) type -> . DOUBLE_TYPE n_seen_type
    (21) type -> . FLOAT_TYPE n_seen_type
    (22) type -> . BOOL_TYPE n_seen_type

    NAME            shift and go to state 44
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    assign                         shift and go to state 93
    type                           shift and go to state 22

state 67

    (81) whileloop -> WHILE LPARENTHESIS expression . RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope

    RPARENTHESIS    shift and go to state 94


state 68

    (68) assign -> type NAME n_name . EQUAL expression

    EQUAL           shift and go to state 95


state 69

    (42) function_definition -> FUNCTION NAME n_open_new_scope parameter_list . DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope

    DOUBLEDOT       shift and go to state 96


state 70

    (69) assign -> NAME n_name EQUAL expression .

    SEMICOLON       reduce using rule 69 (assign -> NAME n_name EQUAL expression .)
    COMMA           reduce using rule 69 (assign -> NAME n_name EQUAL expression .)
    RPARENTHESIS    reduce using rule 69 (assign -> NAME n_name EQUAL expression .)
    DOUBLEDOT       reduce using rule 69 (assign -> NAME n_name EQUAL expression .)


state 71

    (43) function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .

    SEMICOLON       reduce using rule 43 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    TIMES           reduce using rule 43 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    DIVIDE          reduce using rule 43 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    PLUS            reduce using rule 43 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    MINUS           reduce using rule 43 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    GREATERTHAN     reduce using rule 43 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    LESSTHAN        reduce using rule 43 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    EQUALEQUAL      reduce using rule 43 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    LESSTHANOREQUAL reduce using rule 43 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    GREATERTHANOREQUAL reduce using rule 43 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    NOTEQUAL        reduce using rule 43 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    OR              reduce using rule 43 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    AND             reduce using rule 43 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    RPARENTHESIS    reduce using rule 43 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    COMMA           reduce using rule 43 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)
    DOUBLEDOT       reduce using rule 43 (function_call -> NAME LPARENTHESIS parameter_list RPARENTHESIS .)


state 72

    (46) parameter_list -> parameter COMMA . parameter_list
    (44) parameter_list -> . empty
    (45) parameter_list -> . parameter
    (46) parameter_list -> . parameter COMMA parameter_list
    (14) empty -> .
    (47) parameter -> . type NAME n_name
    (48) parameter -> . assign
    (18) type -> . INT_TYPE n_seen_type
    (19) type -> . STRING_TYPE n_seen_type
    (20) type -> . DOUBLE_TYPE n_seen_type
    (21) type -> . FLOAT_TYPE n_seen_type
    (22) type -> . BOOL_TYPE n_seen_type
    (68) assign -> . type NAME n_name EQUAL expression
    (69) assign -> . NAME n_name EQUAL expression

    RPARENTHESIS    reduce using rule 14 (empty -> .)
    DOUBLEDOT       reduce using rule 14 (empty -> .)
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27
    NAME            shift and go to state 44

    parameter                      shift and go to state 47
    parameter_list                 shift and go to state 97
    empty                          shift and go to state 46
    type                           shift and go to state 48
    assign                         shift and go to state 49

state 73

    (47) parameter -> type NAME . n_name
    (68) assign -> type NAME . n_name EQUAL expression
    (4) n_name -> .

    EQUAL           reduce using rule 4 (n_name -> .)
    COMMA           reduce using rule 4 (n_name -> .)
    RPARENTHESIS    reduce using rule 4 (n_name -> .)
    DOUBLEDOT       reduce using rule 4 (n_name -> .)

    n_name                         shift and go to state 98

state 74

    (61) factor -> LPARENTHESIS n_math_expression_6 . expression RPARENTHESIS n_math_expression_7
    (49) expression -> . expression_or
    (50) expression -> . expression_or AND expression
    (51) expression_or -> . expression_rel
    (52) expression_or -> . expression_rel OR expression_or
    (53) expression_rel -> . exp
    (54) expression_rel -> . exp relational_operator exp n_math_expression_9
    (55) exp -> . termino n_math_expression_4
    (56) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (57) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (58) termino -> . factor n_math_expression_5
    (59) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (60) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (61) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (62) factor -> . PLUS value
    (63) factor -> . MINUS value
    (64) factor -> . value
    (65) value -> . function_call
    (66) value -> . literal
    (67) value -> . NAME n_math_expression_1
    (43) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (37) literal -> . FLOAT n_math_expression_1
    (38) literal -> . INT n_math_expression_1
    (39) literal -> . STRING n_math_expression_1

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    expression                     shift and go to state 99
    expression_or                  shift and go to state 52
    expression_rel                 shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 55
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 75

    (83) condition_if -> IF LPARENTHESIS expression RPARENTHESIS . LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else

    LCURLY          shift and go to state 100


state 76

    (50) expression -> expression_or AND . expression
    (49) expression -> . expression_or
    (50) expression -> . expression_or AND expression
    (51) expression_or -> . expression_rel
    (52) expression_or -> . expression_rel OR expression_or
    (53) expression_rel -> . exp
    (54) expression_rel -> . exp relational_operator exp n_math_expression_9
    (55) exp -> . termino n_math_expression_4
    (56) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (57) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (58) termino -> . factor n_math_expression_5
    (59) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (60) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (61) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (62) factor -> . PLUS value
    (63) factor -> . MINUS value
    (64) factor -> . value
    (65) value -> . function_call
    (66) value -> . literal
    (67) value -> . NAME n_math_expression_1
    (43) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (37) literal -> . FLOAT n_math_expression_1
    (38) literal -> . INT n_math_expression_1
    (39) literal -> . STRING n_math_expression_1

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    expression_or                  shift and go to state 52
    expression                     shift and go to state 101
    expression_rel                 shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 55
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 77

    (52) expression_or -> expression_rel OR . expression_or
    (51) expression_or -> . expression_rel
    (52) expression_or -> . expression_rel OR expression_or
    (53) expression_rel -> . exp
    (54) expression_rel -> . exp relational_operator exp n_math_expression_9
    (55) exp -> . termino n_math_expression_4
    (56) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (57) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (58) termino -> . factor n_math_expression_5
    (59) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (60) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (61) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (62) factor -> . PLUS value
    (63) factor -> . MINUS value
    (64) factor -> . value
    (65) value -> . function_call
    (66) value -> . literal
    (67) value -> . NAME n_math_expression_1
    (43) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (37) literal -> . FLOAT n_math_expression_1
    (38) literal -> . INT n_math_expression_1
    (39) literal -> . STRING n_math_expression_1

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    expression_rel                 shift and go to state 53
    expression_or                  shift and go to state 102
    exp                            shift and go to state 54
    termino                        shift and go to state 55
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 78

    (54) expression_rel -> exp relational_operator . exp n_math_expression_9
    (55) exp -> . termino n_math_expression_4
    (56) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (57) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (58) termino -> . factor n_math_expression_5
    (59) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (60) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (61) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (62) factor -> . PLUS value
    (63) factor -> . MINUS value
    (64) factor -> . value
    (65) value -> . function_call
    (66) value -> . literal
    (67) value -> . NAME n_math_expression_1
    (43) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (37) literal -> . FLOAT n_math_expression_1
    (38) literal -> . INT n_math_expression_1
    (39) literal -> . STRING n_math_expression_1

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    exp                            shift and go to state 103
    termino                        shift and go to state 55
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 79

    (23) relational_operator -> GREATERTHAN . n_math_expression_8
    (12) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 12 (n_math_expression_8 -> .)
    PLUS            reduce using rule 12 (n_math_expression_8 -> .)
    MINUS           reduce using rule 12 (n_math_expression_8 -> .)
    NAME            reduce using rule 12 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 12 (n_math_expression_8 -> .)
    INT             reduce using rule 12 (n_math_expression_8 -> .)
    STRING          reduce using rule 12 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 104

state 80

    (24) relational_operator -> LESSTHAN . n_math_expression_8
    (12) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 12 (n_math_expression_8 -> .)
    PLUS            reduce using rule 12 (n_math_expression_8 -> .)
    MINUS           reduce using rule 12 (n_math_expression_8 -> .)
    NAME            reduce using rule 12 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 12 (n_math_expression_8 -> .)
    INT             reduce using rule 12 (n_math_expression_8 -> .)
    STRING          reduce using rule 12 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 105

state 81

    (25) relational_operator -> EQUALEQUAL . n_math_expression_8
    (12) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 12 (n_math_expression_8 -> .)
    PLUS            reduce using rule 12 (n_math_expression_8 -> .)
    MINUS           reduce using rule 12 (n_math_expression_8 -> .)
    NAME            reduce using rule 12 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 12 (n_math_expression_8 -> .)
    INT             reduce using rule 12 (n_math_expression_8 -> .)
    STRING          reduce using rule 12 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 106

state 82

    (26) relational_operator -> LESSTHANOREQUAL . n_math_expression_8
    (12) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 12 (n_math_expression_8 -> .)
    PLUS            reduce using rule 12 (n_math_expression_8 -> .)
    MINUS           reduce using rule 12 (n_math_expression_8 -> .)
    NAME            reduce using rule 12 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 12 (n_math_expression_8 -> .)
    INT             reduce using rule 12 (n_math_expression_8 -> .)
    STRING          reduce using rule 12 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 107

state 83

    (27) relational_operator -> GREATERTHANOREQUAL . n_math_expression_8
    (12) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 12 (n_math_expression_8 -> .)
    PLUS            reduce using rule 12 (n_math_expression_8 -> .)
    MINUS           reduce using rule 12 (n_math_expression_8 -> .)
    NAME            reduce using rule 12 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 12 (n_math_expression_8 -> .)
    INT             reduce using rule 12 (n_math_expression_8 -> .)
    STRING          reduce using rule 12 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 108

state 84

    (28) relational_operator -> NOTEQUAL . n_math_expression_8
    (12) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 12 (n_math_expression_8 -> .)
    PLUS            reduce using rule 12 (n_math_expression_8 -> .)
    MINUS           reduce using rule 12 (n_math_expression_8 -> .)
    NAME            reduce using rule 12 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 12 (n_math_expression_8 -> .)
    INT             reduce using rule 12 (n_math_expression_8 -> .)
    STRING          reduce using rule 12 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 109

state 85

    (55) exp -> termino n_math_expression_4 .
    (56) exp -> termino n_math_expression_4 . PLUS n_math_expression_2 exp
    (57) exp -> termino n_math_expression_4 . MINUS n_math_expression_2 exp

    GREATERTHAN     reduce using rule 55 (exp -> termino n_math_expression_4 .)
    LESSTHAN        reduce using rule 55 (exp -> termino n_math_expression_4 .)
    EQUALEQUAL      reduce using rule 55 (exp -> termino n_math_expression_4 .)
    LESSTHANOREQUAL reduce using rule 55 (exp -> termino n_math_expression_4 .)
    GREATERTHANOREQUAL reduce using rule 55 (exp -> termino n_math_expression_4 .)
    NOTEQUAL        reduce using rule 55 (exp -> termino n_math_expression_4 .)
    OR              reduce using rule 55 (exp -> termino n_math_expression_4 .)
    AND             reduce using rule 55 (exp -> termino n_math_expression_4 .)
    RPARENTHESIS    reduce using rule 55 (exp -> termino n_math_expression_4 .)
    SEMICOLON       reduce using rule 55 (exp -> termino n_math_expression_4 .)
    COMMA           reduce using rule 55 (exp -> termino n_math_expression_4 .)
    DOUBLEDOT       reduce using rule 55 (exp -> termino n_math_expression_4 .)
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111


state 86

    (62) factor -> PLUS value .

    TIMES           reduce using rule 62 (factor -> PLUS value .)
    DIVIDE          reduce using rule 62 (factor -> PLUS value .)
    PLUS            reduce using rule 62 (factor -> PLUS value .)
    MINUS           reduce using rule 62 (factor -> PLUS value .)
    GREATERTHAN     reduce using rule 62 (factor -> PLUS value .)
    LESSTHAN        reduce using rule 62 (factor -> PLUS value .)
    EQUALEQUAL      reduce using rule 62 (factor -> PLUS value .)
    LESSTHANOREQUAL reduce using rule 62 (factor -> PLUS value .)
    GREATERTHANOREQUAL reduce using rule 62 (factor -> PLUS value .)
    NOTEQUAL        reduce using rule 62 (factor -> PLUS value .)
    OR              reduce using rule 62 (factor -> PLUS value .)
    AND             reduce using rule 62 (factor -> PLUS value .)
    RPARENTHESIS    reduce using rule 62 (factor -> PLUS value .)
    SEMICOLON       reduce using rule 62 (factor -> PLUS value .)
    COMMA           reduce using rule 62 (factor -> PLUS value .)
    DOUBLEDOT       reduce using rule 62 (factor -> PLUS value .)


state 87

    (63) factor -> MINUS value .

    TIMES           reduce using rule 63 (factor -> MINUS value .)
    DIVIDE          reduce using rule 63 (factor -> MINUS value .)
    PLUS            reduce using rule 63 (factor -> MINUS value .)
    MINUS           reduce using rule 63 (factor -> MINUS value .)
    GREATERTHAN     reduce using rule 63 (factor -> MINUS value .)
    LESSTHAN        reduce using rule 63 (factor -> MINUS value .)
    EQUALEQUAL      reduce using rule 63 (factor -> MINUS value .)
    LESSTHANOREQUAL reduce using rule 63 (factor -> MINUS value .)
    GREATERTHANOREQUAL reduce using rule 63 (factor -> MINUS value .)
    NOTEQUAL        reduce using rule 63 (factor -> MINUS value .)
    OR              reduce using rule 63 (factor -> MINUS value .)
    AND             reduce using rule 63 (factor -> MINUS value .)
    RPARENTHESIS    reduce using rule 63 (factor -> MINUS value .)
    SEMICOLON       reduce using rule 63 (factor -> MINUS value .)
    COMMA           reduce using rule 63 (factor -> MINUS value .)
    DOUBLEDOT       reduce using rule 63 (factor -> MINUS value .)


state 88

    (58) termino -> factor n_math_expression_5 .
    (59) termino -> factor n_math_expression_5 . TIMES n_math_expression_3 termino
    (60) termino -> factor n_math_expression_5 . DIVIDE n_math_expression_3 termino

    PLUS            reduce using rule 58 (termino -> factor n_math_expression_5 .)
    MINUS           reduce using rule 58 (termino -> factor n_math_expression_5 .)
    GREATERTHAN     reduce using rule 58 (termino -> factor n_math_expression_5 .)
    LESSTHAN        reduce using rule 58 (termino -> factor n_math_expression_5 .)
    EQUALEQUAL      reduce using rule 58 (termino -> factor n_math_expression_5 .)
    LESSTHANOREQUAL reduce using rule 58 (termino -> factor n_math_expression_5 .)
    GREATERTHANOREQUAL reduce using rule 58 (termino -> factor n_math_expression_5 .)
    NOTEQUAL        reduce using rule 58 (termino -> factor n_math_expression_5 .)
    OR              reduce using rule 58 (termino -> factor n_math_expression_5 .)
    AND             reduce using rule 58 (termino -> factor n_math_expression_5 .)
    RPARENTHESIS    reduce using rule 58 (termino -> factor n_math_expression_5 .)
    SEMICOLON       reduce using rule 58 (termino -> factor n_math_expression_5 .)
    COMMA           reduce using rule 58 (termino -> factor n_math_expression_5 .)
    DOUBLEDOT       reduce using rule 58 (termino -> factor n_math_expression_5 .)
    TIMES           shift and go to state 112
    DIVIDE          shift and go to state 113


state 89

    (67) value -> NAME n_math_expression_1 .

    TIMES           reduce using rule 67 (value -> NAME n_math_expression_1 .)
    DIVIDE          reduce using rule 67 (value -> NAME n_math_expression_1 .)
    PLUS            reduce using rule 67 (value -> NAME n_math_expression_1 .)
    MINUS           reduce using rule 67 (value -> NAME n_math_expression_1 .)
    GREATERTHAN     reduce using rule 67 (value -> NAME n_math_expression_1 .)
    LESSTHAN        reduce using rule 67 (value -> NAME n_math_expression_1 .)
    EQUALEQUAL      reduce using rule 67 (value -> NAME n_math_expression_1 .)
    LESSTHANOREQUAL reduce using rule 67 (value -> NAME n_math_expression_1 .)
    GREATERTHANOREQUAL reduce using rule 67 (value -> NAME n_math_expression_1 .)
    NOTEQUAL        reduce using rule 67 (value -> NAME n_math_expression_1 .)
    OR              reduce using rule 67 (value -> NAME n_math_expression_1 .)
    AND             reduce using rule 67 (value -> NAME n_math_expression_1 .)
    RPARENTHESIS    reduce using rule 67 (value -> NAME n_math_expression_1 .)
    SEMICOLON       reduce using rule 67 (value -> NAME n_math_expression_1 .)
    COMMA           reduce using rule 67 (value -> NAME n_math_expression_1 .)
    DOUBLEDOT       reduce using rule 67 (value -> NAME n_math_expression_1 .)


state 90

    (37) literal -> FLOAT n_math_expression_1 .

    TIMES           reduce using rule 37 (literal -> FLOAT n_math_expression_1 .)
    DIVIDE          reduce using rule 37 (literal -> FLOAT n_math_expression_1 .)
    PLUS            reduce using rule 37 (literal -> FLOAT n_math_expression_1 .)
    MINUS           reduce using rule 37 (literal -> FLOAT n_math_expression_1 .)
    GREATERTHAN     reduce using rule 37 (literal -> FLOAT n_math_expression_1 .)
    LESSTHAN        reduce using rule 37 (literal -> FLOAT n_math_expression_1 .)
    EQUALEQUAL      reduce using rule 37 (literal -> FLOAT n_math_expression_1 .)
    LESSTHANOREQUAL reduce using rule 37 (literal -> FLOAT n_math_expression_1 .)
    GREATERTHANOREQUAL reduce using rule 37 (literal -> FLOAT n_math_expression_1 .)
    NOTEQUAL        reduce using rule 37 (literal -> FLOAT n_math_expression_1 .)
    OR              reduce using rule 37 (literal -> FLOAT n_math_expression_1 .)
    AND             reduce using rule 37 (literal -> FLOAT n_math_expression_1 .)
    RPARENTHESIS    reduce using rule 37 (literal -> FLOAT n_math_expression_1 .)
    SEMICOLON       reduce using rule 37 (literal -> FLOAT n_math_expression_1 .)
    COMMA           reduce using rule 37 (literal -> FLOAT n_math_expression_1 .)
    DOUBLEDOT       reduce using rule 37 (literal -> FLOAT n_math_expression_1 .)


state 91

    (38) literal -> INT n_math_expression_1 .

    TIMES           reduce using rule 38 (literal -> INT n_math_expression_1 .)
    DIVIDE          reduce using rule 38 (literal -> INT n_math_expression_1 .)
    PLUS            reduce using rule 38 (literal -> INT n_math_expression_1 .)
    MINUS           reduce using rule 38 (literal -> INT n_math_expression_1 .)
    GREATERTHAN     reduce using rule 38 (literal -> INT n_math_expression_1 .)
    LESSTHAN        reduce using rule 38 (literal -> INT n_math_expression_1 .)
    EQUALEQUAL      reduce using rule 38 (literal -> INT n_math_expression_1 .)
    LESSTHANOREQUAL reduce using rule 38 (literal -> INT n_math_expression_1 .)
    GREATERTHANOREQUAL reduce using rule 38 (literal -> INT n_math_expression_1 .)
    NOTEQUAL        reduce using rule 38 (literal -> INT n_math_expression_1 .)
    OR              reduce using rule 38 (literal -> INT n_math_expression_1 .)
    AND             reduce using rule 38 (literal -> INT n_math_expression_1 .)
    RPARENTHESIS    reduce using rule 38 (literal -> INT n_math_expression_1 .)
    SEMICOLON       reduce using rule 38 (literal -> INT n_math_expression_1 .)
    COMMA           reduce using rule 38 (literal -> INT n_math_expression_1 .)
    DOUBLEDOT       reduce using rule 38 (literal -> INT n_math_expression_1 .)


state 92

    (39) literal -> STRING n_math_expression_1 .

    TIMES           reduce using rule 39 (literal -> STRING n_math_expression_1 .)
    DIVIDE          reduce using rule 39 (literal -> STRING n_math_expression_1 .)
    PLUS            reduce using rule 39 (literal -> STRING n_math_expression_1 .)
    MINUS           reduce using rule 39 (literal -> STRING n_math_expression_1 .)
    GREATERTHAN     reduce using rule 39 (literal -> STRING n_math_expression_1 .)
    LESSTHAN        reduce using rule 39 (literal -> STRING n_math_expression_1 .)
    EQUALEQUAL      reduce using rule 39 (literal -> STRING n_math_expression_1 .)
    LESSTHANOREQUAL reduce using rule 39 (literal -> STRING n_math_expression_1 .)
    GREATERTHANOREQUAL reduce using rule 39 (literal -> STRING n_math_expression_1 .)
    NOTEQUAL        reduce using rule 39 (literal -> STRING n_math_expression_1 .)
    OR              reduce using rule 39 (literal -> STRING n_math_expression_1 .)
    AND             reduce using rule 39 (literal -> STRING n_math_expression_1 .)
    RPARENTHESIS    reduce using rule 39 (literal -> STRING n_math_expression_1 .)
    SEMICOLON       reduce using rule 39 (literal -> STRING n_math_expression_1 .)
    COMMA           reduce using rule 39 (literal -> STRING n_math_expression_1 .)
    DOUBLEDOT       reduce using rule 39 (literal -> STRING n_math_expression_1 .)


state 93

    (82) forloop -> FOR LPARENTHESIS n_open_new_scope assign . DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope

    DOUBLEDOT       shift and go to state 114


state 94

    (81) whileloop -> WHILE LPARENTHESIS expression RPARENTHESIS . LCURLY n_open_new_scope codeblock RCURLY n_close_scope

    LCURLY          shift and go to state 115


state 95

    (68) assign -> type NAME n_name EQUAL . expression
    (49) expression -> . expression_or
    (50) expression -> . expression_or AND expression
    (51) expression_or -> . expression_rel
    (52) expression_or -> . expression_rel OR expression_or
    (53) expression_rel -> . exp
    (54) expression_rel -> . exp relational_operator exp n_math_expression_9
    (55) exp -> . termino n_math_expression_4
    (56) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (57) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (58) termino -> . factor n_math_expression_5
    (59) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (60) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (61) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (62) factor -> . PLUS value
    (63) factor -> . MINUS value
    (64) factor -> . value
    (65) value -> . function_call
    (66) value -> . literal
    (67) value -> . NAME n_math_expression_1
    (43) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (37) literal -> . FLOAT n_math_expression_1
    (38) literal -> . INT n_math_expression_1
    (39) literal -> . STRING n_math_expression_1

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    expression                     shift and go to state 116
    expression_or                  shift and go to state 52
    expression_rel                 shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 55
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 96

    (42) function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT . function_type LCURLY codeblock RCURLY n_close_scope
    (40) function_type -> . type
    (41) function_type -> . VOID
    (18) type -> . INT_TYPE n_seen_type
    (19) type -> . STRING_TYPE n_seen_type
    (20) type -> . DOUBLE_TYPE n_seen_type
    (21) type -> . FLOAT_TYPE n_seen_type
    (22) type -> . BOOL_TYPE n_seen_type

    VOID            shift and go to state 119
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    function_type                  shift and go to state 117
    type                           shift and go to state 118

state 97

    (46) parameter_list -> parameter COMMA parameter_list .

    RPARENTHESIS    reduce using rule 46 (parameter_list -> parameter COMMA parameter_list .)
    DOUBLEDOT       reduce using rule 46 (parameter_list -> parameter COMMA parameter_list .)


state 98

    (47) parameter -> type NAME n_name .
    (68) assign -> type NAME n_name . EQUAL expression

    COMMA           reduce using rule 47 (parameter -> type NAME n_name .)
    RPARENTHESIS    reduce using rule 47 (parameter -> type NAME n_name .)
    DOUBLEDOT       reduce using rule 47 (parameter -> type NAME n_name .)
    EQUAL           shift and go to state 95


state 99

    (61) factor -> LPARENTHESIS n_math_expression_6 expression . RPARENTHESIS n_math_expression_7

    RPARENTHESIS    shift and go to state 120


state 100

    (83) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY . n_open_new_scope codeblock RCURLY n_close_scope condition_else
    (2) n_open_new_scope -> .

    FUNCTION        reduce using rule 2 (n_open_new_scope -> .)
    IF              reduce using rule 2 (n_open_new_scope -> .)
    FOR             reduce using rule 2 (n_open_new_scope -> .)
    WHILE           reduce using rule 2 (n_open_new_scope -> .)
    NAME            reduce using rule 2 (n_open_new_scope -> .)
    INT_TYPE        reduce using rule 2 (n_open_new_scope -> .)
    STRING_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    DOUBLE_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    FLOAT_TYPE      reduce using rule 2 (n_open_new_scope -> .)
    BOOL_TYPE       reduce using rule 2 (n_open_new_scope -> .)
    RCURLY          reduce using rule 2 (n_open_new_scope -> .)

    n_open_new_scope               shift and go to state 121

state 101

    (50) expression -> expression_or AND expression .

    RPARENTHESIS    reduce using rule 50 (expression -> expression_or AND expression .)
    SEMICOLON       reduce using rule 50 (expression -> expression_or AND expression .)
    COMMA           reduce using rule 50 (expression -> expression_or AND expression .)
    DOUBLEDOT       reduce using rule 50 (expression -> expression_or AND expression .)


state 102

    (52) expression_or -> expression_rel OR expression_or .

    AND             reduce using rule 52 (expression_or -> expression_rel OR expression_or .)
    RPARENTHESIS    reduce using rule 52 (expression_or -> expression_rel OR expression_or .)
    SEMICOLON       reduce using rule 52 (expression_or -> expression_rel OR expression_or .)
    COMMA           reduce using rule 52 (expression_or -> expression_rel OR expression_or .)
    DOUBLEDOT       reduce using rule 52 (expression_or -> expression_rel OR expression_or .)


state 103

    (54) expression_rel -> exp relational_operator exp . n_math_expression_9
    (13) n_math_expression_9 -> .

    OR              reduce using rule 13 (n_math_expression_9 -> .)
    AND             reduce using rule 13 (n_math_expression_9 -> .)
    RPARENTHESIS    reduce using rule 13 (n_math_expression_9 -> .)
    SEMICOLON       reduce using rule 13 (n_math_expression_9 -> .)
    COMMA           reduce using rule 13 (n_math_expression_9 -> .)
    DOUBLEDOT       reduce using rule 13 (n_math_expression_9 -> .)

    n_math_expression_9            shift and go to state 122

state 104

    (23) relational_operator -> GREATERTHAN n_math_expression_8 .

    LPARENTHESIS    reduce using rule 23 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    PLUS            reduce using rule 23 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    MINUS           reduce using rule 23 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    NAME            reduce using rule 23 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    FLOAT           reduce using rule 23 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    INT             reduce using rule 23 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    STRING          reduce using rule 23 (relational_operator -> GREATERTHAN n_math_expression_8 .)


state 105

    (24) relational_operator -> LESSTHAN n_math_expression_8 .

    LPARENTHESIS    reduce using rule 24 (relational_operator -> LESSTHAN n_math_expression_8 .)
    PLUS            reduce using rule 24 (relational_operator -> LESSTHAN n_math_expression_8 .)
    MINUS           reduce using rule 24 (relational_operator -> LESSTHAN n_math_expression_8 .)
    NAME            reduce using rule 24 (relational_operator -> LESSTHAN n_math_expression_8 .)
    FLOAT           reduce using rule 24 (relational_operator -> LESSTHAN n_math_expression_8 .)
    INT             reduce using rule 24 (relational_operator -> LESSTHAN n_math_expression_8 .)
    STRING          reduce using rule 24 (relational_operator -> LESSTHAN n_math_expression_8 .)


state 106

    (25) relational_operator -> EQUALEQUAL n_math_expression_8 .

    LPARENTHESIS    reduce using rule 25 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    PLUS            reduce using rule 25 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    MINUS           reduce using rule 25 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    NAME            reduce using rule 25 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    FLOAT           reduce using rule 25 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    INT             reduce using rule 25 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    STRING          reduce using rule 25 (relational_operator -> EQUALEQUAL n_math_expression_8 .)


state 107

    (26) relational_operator -> LESSTHANOREQUAL n_math_expression_8 .

    LPARENTHESIS    reduce using rule 26 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    PLUS            reduce using rule 26 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    MINUS           reduce using rule 26 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    NAME            reduce using rule 26 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    FLOAT           reduce using rule 26 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    INT             reduce using rule 26 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    STRING          reduce using rule 26 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)


state 108

    (27) relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .

    LPARENTHESIS    reduce using rule 27 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    PLUS            reduce using rule 27 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    MINUS           reduce using rule 27 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    NAME            reduce using rule 27 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    FLOAT           reduce using rule 27 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    INT             reduce using rule 27 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    STRING          reduce using rule 27 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)


state 109

    (28) relational_operator -> NOTEQUAL n_math_expression_8 .

    LPARENTHESIS    reduce using rule 28 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    PLUS            reduce using rule 28 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    MINUS           reduce using rule 28 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    NAME            reduce using rule 28 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    FLOAT           reduce using rule 28 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    INT             reduce using rule 28 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    STRING          reduce using rule 28 (relational_operator -> NOTEQUAL n_math_expression_8 .)


state 110

    (56) exp -> termino n_math_expression_4 PLUS . n_math_expression_2 exp
    (6) n_math_expression_2 -> .

    LPARENTHESIS    reduce using rule 6 (n_math_expression_2 -> .)
    PLUS            reduce using rule 6 (n_math_expression_2 -> .)
    MINUS           reduce using rule 6 (n_math_expression_2 -> .)
    NAME            reduce using rule 6 (n_math_expression_2 -> .)
    FLOAT           reduce using rule 6 (n_math_expression_2 -> .)
    INT             reduce using rule 6 (n_math_expression_2 -> .)
    STRING          reduce using rule 6 (n_math_expression_2 -> .)

    n_math_expression_2            shift and go to state 123

state 111

    (57) exp -> termino n_math_expression_4 MINUS . n_math_expression_2 exp
    (6) n_math_expression_2 -> .

    LPARENTHESIS    reduce using rule 6 (n_math_expression_2 -> .)
    PLUS            reduce using rule 6 (n_math_expression_2 -> .)
    MINUS           reduce using rule 6 (n_math_expression_2 -> .)
    NAME            reduce using rule 6 (n_math_expression_2 -> .)
    FLOAT           reduce using rule 6 (n_math_expression_2 -> .)
    INT             reduce using rule 6 (n_math_expression_2 -> .)
    STRING          reduce using rule 6 (n_math_expression_2 -> .)

    n_math_expression_2            shift and go to state 124

state 112

    (59) termino -> factor n_math_expression_5 TIMES . n_math_expression_3 termino
    (7) n_math_expression_3 -> .

    LPARENTHESIS    reduce using rule 7 (n_math_expression_3 -> .)
    PLUS            reduce using rule 7 (n_math_expression_3 -> .)
    MINUS           reduce using rule 7 (n_math_expression_3 -> .)
    NAME            reduce using rule 7 (n_math_expression_3 -> .)
    FLOAT           reduce using rule 7 (n_math_expression_3 -> .)
    INT             reduce using rule 7 (n_math_expression_3 -> .)
    STRING          reduce using rule 7 (n_math_expression_3 -> .)

    n_math_expression_3            shift and go to state 125

state 113

    (60) termino -> factor n_math_expression_5 DIVIDE . n_math_expression_3 termino
    (7) n_math_expression_3 -> .

    LPARENTHESIS    reduce using rule 7 (n_math_expression_3 -> .)
    PLUS            reduce using rule 7 (n_math_expression_3 -> .)
    MINUS           reduce using rule 7 (n_math_expression_3 -> .)
    NAME            reduce using rule 7 (n_math_expression_3 -> .)
    FLOAT           reduce using rule 7 (n_math_expression_3 -> .)
    INT             reduce using rule 7 (n_math_expression_3 -> .)
    STRING          reduce using rule 7 (n_math_expression_3 -> .)

    n_math_expression_3            shift and go to state 126

state 114

    (82) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT . expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (49) expression -> . expression_or
    (50) expression -> . expression_or AND expression
    (51) expression_or -> . expression_rel
    (52) expression_or -> . expression_rel OR expression_or
    (53) expression_rel -> . exp
    (54) expression_rel -> . exp relational_operator exp n_math_expression_9
    (55) exp -> . termino n_math_expression_4
    (56) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (57) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (58) termino -> . factor n_math_expression_5
    (59) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (60) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (61) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (62) factor -> . PLUS value
    (63) factor -> . MINUS value
    (64) factor -> . value
    (65) value -> . function_call
    (66) value -> . literal
    (67) value -> . NAME n_math_expression_1
    (43) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (37) literal -> . FLOAT n_math_expression_1
    (38) literal -> . INT n_math_expression_1
    (39) literal -> . STRING n_math_expression_1

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    expression                     shift and go to state 127
    expression_or                  shift and go to state 52
    expression_rel                 shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 55
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 115

    (81) whileloop -> WHILE LPARENTHESIS expression RPARENTHESIS LCURLY . n_open_new_scope codeblock RCURLY n_close_scope
    (2) n_open_new_scope -> .

    FUNCTION        reduce using rule 2 (n_open_new_scope -> .)
    IF              reduce using rule 2 (n_open_new_scope -> .)
    FOR             reduce using rule 2 (n_open_new_scope -> .)
    WHILE           reduce using rule 2 (n_open_new_scope -> .)
    NAME            reduce using rule 2 (n_open_new_scope -> .)
    INT_TYPE        reduce using rule 2 (n_open_new_scope -> .)
    STRING_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    DOUBLE_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    FLOAT_TYPE      reduce using rule 2 (n_open_new_scope -> .)
    BOOL_TYPE       reduce using rule 2 (n_open_new_scope -> .)
    RCURLY          reduce using rule 2 (n_open_new_scope -> .)

    n_open_new_scope               shift and go to state 128

state 116

    (68) assign -> type NAME n_name EQUAL expression .

    SEMICOLON       reduce using rule 68 (assign -> type NAME n_name EQUAL expression .)
    COMMA           reduce using rule 68 (assign -> type NAME n_name EQUAL expression .)
    RPARENTHESIS    reduce using rule 68 (assign -> type NAME n_name EQUAL expression .)
    DOUBLEDOT       reduce using rule 68 (assign -> type NAME n_name EQUAL expression .)


state 117

    (42) function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type . LCURLY codeblock RCURLY n_close_scope

    LCURLY          shift and go to state 129


state 118

    (40) function_type -> type .

    LCURLY          reduce using rule 40 (function_type -> type .)


state 119

    (41) function_type -> VOID .

    LCURLY          reduce using rule 41 (function_type -> VOID .)


state 120

    (61) factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS . n_math_expression_7
    (11) n_math_expression_7 -> .

    TIMES           reduce using rule 11 (n_math_expression_7 -> .)
    DIVIDE          reduce using rule 11 (n_math_expression_7 -> .)
    PLUS            reduce using rule 11 (n_math_expression_7 -> .)
    MINUS           reduce using rule 11 (n_math_expression_7 -> .)
    GREATERTHAN     reduce using rule 11 (n_math_expression_7 -> .)
    LESSTHAN        reduce using rule 11 (n_math_expression_7 -> .)
    EQUALEQUAL      reduce using rule 11 (n_math_expression_7 -> .)
    LESSTHANOREQUAL reduce using rule 11 (n_math_expression_7 -> .)
    GREATERTHANOREQUAL reduce using rule 11 (n_math_expression_7 -> .)
    NOTEQUAL        reduce using rule 11 (n_math_expression_7 -> .)
    OR              reduce using rule 11 (n_math_expression_7 -> .)
    AND             reduce using rule 11 (n_math_expression_7 -> .)
    RPARENTHESIS    reduce using rule 11 (n_math_expression_7 -> .)
    SEMICOLON       reduce using rule 11 (n_math_expression_7 -> .)
    COMMA           reduce using rule 11 (n_math_expression_7 -> .)
    DOUBLEDOT       reduce using rule 11 (n_math_expression_7 -> .)

    n_math_expression_7            shift and go to state 130

state 121

    (83) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope . codeblock RCURLY n_close_scope condition_else
    (73) codeblock -> . empty
    (74) codeblock -> . codeblock_aux codeblock
    (14) empty -> .
    (75) codeblock_aux -> . statement
    (76) codeblock_aux -> . function_definition
    (77) codeblock_aux -> . condition_if
    (78) codeblock_aux -> . loop
    (70) statement -> . statement_aux SEMICOLON
    (42) function_definition -> . FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope
    (83) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else
    (79) loop -> . forloop
    (80) loop -> . whileloop
    (71) statement_aux -> . assign
    (72) statement_aux -> . function_call
    (82) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (81) whileloop -> . WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope
    (68) assign -> . type NAME n_name EQUAL expression
    (69) assign -> . NAME n_name EQUAL expression
    (43) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (18) type -> . INT_TYPE n_seen_type
    (19) type -> . STRING_TYPE n_seen_type
    (20) type -> . DOUBLE_TYPE n_seen_type
    (21) type -> . FLOAT_TYPE n_seen_type
    (22) type -> . BOOL_TYPE n_seen_type

    RCURLY          reduce using rule 14 (empty -> .)
    FUNCTION        shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    codeblock                      shift and go to state 131
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 122

    (54) expression_rel -> exp relational_operator exp n_math_expression_9 .

    OR              reduce using rule 54 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    AND             reduce using rule 54 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    RPARENTHESIS    reduce using rule 54 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    SEMICOLON       reduce using rule 54 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    COMMA           reduce using rule 54 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    DOUBLEDOT       reduce using rule 54 (expression_rel -> exp relational_operator exp n_math_expression_9 .)


state 123

    (56) exp -> termino n_math_expression_4 PLUS n_math_expression_2 . exp
    (55) exp -> . termino n_math_expression_4
    (56) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (57) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (58) termino -> . factor n_math_expression_5
    (59) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (60) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (61) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (62) factor -> . PLUS value
    (63) factor -> . MINUS value
    (64) factor -> . value
    (65) value -> . function_call
    (66) value -> . literal
    (67) value -> . NAME n_math_expression_1
    (43) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (37) literal -> . FLOAT n_math_expression_1
    (38) literal -> . INT n_math_expression_1
    (39) literal -> . STRING n_math_expression_1

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    termino                        shift and go to state 55
    exp                            shift and go to state 132
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 124

    (57) exp -> termino n_math_expression_4 MINUS n_math_expression_2 . exp
    (55) exp -> . termino n_math_expression_4
    (56) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (57) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (58) termino -> . factor n_math_expression_5
    (59) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (60) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (61) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (62) factor -> . PLUS value
    (63) factor -> . MINUS value
    (64) factor -> . value
    (65) value -> . function_call
    (66) value -> . literal
    (67) value -> . NAME n_math_expression_1
    (43) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (37) literal -> . FLOAT n_math_expression_1
    (38) literal -> . INT n_math_expression_1
    (39) literal -> . STRING n_math_expression_1

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    termino                        shift and go to state 55
    exp                            shift and go to state 133
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 125

    (59) termino -> factor n_math_expression_5 TIMES n_math_expression_3 . termino
    (58) termino -> . factor n_math_expression_5
    (59) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (60) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (61) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (62) factor -> . PLUS value
    (63) factor -> . MINUS value
    (64) factor -> . value
    (65) value -> . function_call
    (66) value -> . literal
    (67) value -> . NAME n_math_expression_1
    (43) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (37) literal -> . FLOAT n_math_expression_1
    (38) literal -> . INT n_math_expression_1
    (39) literal -> . STRING n_math_expression_1

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    factor                         shift and go to state 58
    termino                        shift and go to state 134
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 126

    (60) termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 . termino
    (58) termino -> . factor n_math_expression_5
    (59) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (60) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (61) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (62) factor -> . PLUS value
    (63) factor -> . MINUS value
    (64) factor -> . value
    (65) value -> . function_call
    (66) value -> . literal
    (67) value -> . NAME n_math_expression_1
    (43) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (37) literal -> . FLOAT n_math_expression_1
    (38) literal -> . INT n_math_expression_1
    (39) literal -> . STRING n_math_expression_1

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65

    factor                         shift and go to state 58
    termino                        shift and go to state 135
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 127

    (82) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression . DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope

    DOUBLEDOT       shift and go to state 136


state 128

    (81) whileloop -> WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope . codeblock RCURLY n_close_scope
    (73) codeblock -> . empty
    (74) codeblock -> . codeblock_aux codeblock
    (14) empty -> .
    (75) codeblock_aux -> . statement
    (76) codeblock_aux -> . function_definition
    (77) codeblock_aux -> . condition_if
    (78) codeblock_aux -> . loop
    (70) statement -> . statement_aux SEMICOLON
    (42) function_definition -> . FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope
    (83) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else
    (79) loop -> . forloop
    (80) loop -> . whileloop
    (71) statement_aux -> . assign
    (72) statement_aux -> . function_call
    (82) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (81) whileloop -> . WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope
    (68) assign -> . type NAME n_name EQUAL expression
    (69) assign -> . NAME n_name EQUAL expression
    (43) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (18) type -> . INT_TYPE n_seen_type
    (19) type -> . STRING_TYPE n_seen_type
    (20) type -> . DOUBLE_TYPE n_seen_type
    (21) type -> . FLOAT_TYPE n_seen_type
    (22) type -> . BOOL_TYPE n_seen_type

    RCURLY          reduce using rule 14 (empty -> .)
    FUNCTION        shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    codeblock                      shift and go to state 137
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 129

    (42) function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY . codeblock RCURLY n_close_scope
    (73) codeblock -> . empty
    (74) codeblock -> . codeblock_aux codeblock
    (14) empty -> .
    (75) codeblock_aux -> . statement
    (76) codeblock_aux -> . function_definition
    (77) codeblock_aux -> . condition_if
    (78) codeblock_aux -> . loop
    (70) statement -> . statement_aux SEMICOLON
    (42) function_definition -> . FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope
    (83) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else
    (79) loop -> . forloop
    (80) loop -> . whileloop
    (71) statement_aux -> . assign
    (72) statement_aux -> . function_call
    (82) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (81) whileloop -> . WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope
    (68) assign -> . type NAME n_name EQUAL expression
    (69) assign -> . NAME n_name EQUAL expression
    (43) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (18) type -> . INT_TYPE n_seen_type
    (19) type -> . STRING_TYPE n_seen_type
    (20) type -> . DOUBLE_TYPE n_seen_type
    (21) type -> . FLOAT_TYPE n_seen_type
    (22) type -> . BOOL_TYPE n_seen_type

    RCURLY          reduce using rule 14 (empty -> .)
    FUNCTION        shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    codeblock                      shift and go to state 138
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 130

    (61) factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .

    TIMES           reduce using rule 61 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    DIVIDE          reduce using rule 61 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    PLUS            reduce using rule 61 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    MINUS           reduce using rule 61 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    GREATERTHAN     reduce using rule 61 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    LESSTHAN        reduce using rule 61 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    EQUALEQUAL      reduce using rule 61 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    LESSTHANOREQUAL reduce using rule 61 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    GREATERTHANOREQUAL reduce using rule 61 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    NOTEQUAL        reduce using rule 61 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    OR              reduce using rule 61 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    AND             reduce using rule 61 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    RPARENTHESIS    reduce using rule 61 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    SEMICOLON       reduce using rule 61 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    COMMA           reduce using rule 61 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    DOUBLEDOT       reduce using rule 61 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)


state 131

    (83) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock . RCURLY n_close_scope condition_else

    RCURLY          shift and go to state 139


state 132

    (56) exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .

    GREATERTHAN     reduce using rule 56 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    LESSTHAN        reduce using rule 56 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    EQUALEQUAL      reduce using rule 56 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    LESSTHANOREQUAL reduce using rule 56 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    GREATERTHANOREQUAL reduce using rule 56 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    NOTEQUAL        reduce using rule 56 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    OR              reduce using rule 56 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    AND             reduce using rule 56 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    RPARENTHESIS    reduce using rule 56 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    SEMICOLON       reduce using rule 56 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    COMMA           reduce using rule 56 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    DOUBLEDOT       reduce using rule 56 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)


state 133

    (57) exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .

    GREATERTHAN     reduce using rule 57 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    LESSTHAN        reduce using rule 57 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    EQUALEQUAL      reduce using rule 57 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    LESSTHANOREQUAL reduce using rule 57 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    GREATERTHANOREQUAL reduce using rule 57 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    NOTEQUAL        reduce using rule 57 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    OR              reduce using rule 57 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    AND             reduce using rule 57 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    RPARENTHESIS    reduce using rule 57 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    SEMICOLON       reduce using rule 57 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    COMMA           reduce using rule 57 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    DOUBLEDOT       reduce using rule 57 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)


state 134

    (59) termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .

    PLUS            reduce using rule 59 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    MINUS           reduce using rule 59 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    GREATERTHAN     reduce using rule 59 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    LESSTHAN        reduce using rule 59 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    EQUALEQUAL      reduce using rule 59 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    LESSTHANOREQUAL reduce using rule 59 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    GREATERTHANOREQUAL reduce using rule 59 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    NOTEQUAL        reduce using rule 59 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    OR              reduce using rule 59 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    AND             reduce using rule 59 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    RPARENTHESIS    reduce using rule 59 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    SEMICOLON       reduce using rule 59 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    COMMA           reduce using rule 59 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    DOUBLEDOT       reduce using rule 59 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)


state 135

    (60) termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .

    PLUS            reduce using rule 60 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    MINUS           reduce using rule 60 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    GREATERTHAN     reduce using rule 60 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    LESSTHAN        reduce using rule 60 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    EQUALEQUAL      reduce using rule 60 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    LESSTHANOREQUAL reduce using rule 60 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    GREATERTHANOREQUAL reduce using rule 60 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    NOTEQUAL        reduce using rule 60 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    OR              reduce using rule 60 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    AND             reduce using rule 60 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    RPARENTHESIS    reduce using rule 60 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    SEMICOLON       reduce using rule 60 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    COMMA           reduce using rule 60 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    DOUBLEDOT       reduce using rule 60 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)


state 136

    (82) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT . assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (68) assign -> . type NAME n_name EQUAL expression
    (69) assign -> . NAME n_name EQUAL expression
    (18) type -> . INT_TYPE n_seen_type
    (19) type -> . STRING_TYPE n_seen_type
    (20) type -> . DOUBLE_TYPE n_seen_type
    (21) type -> . FLOAT_TYPE n_seen_type
    (22) type -> . BOOL_TYPE n_seen_type

    NAME            shift and go to state 44
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    assign                         shift and go to state 140
    type                           shift and go to state 22

state 137

    (81) whileloop -> WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock . RCURLY n_close_scope

    RCURLY          shift and go to state 141


state 138

    (42) function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock . RCURLY n_close_scope

    RCURLY          shift and go to state 142


state 139

    (83) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY . n_close_scope condition_else
    (3) n_close_scope -> .

    ELSE            reduce using rule 3 (n_close_scope -> .)
    FUNCTION        reduce using rule 3 (n_close_scope -> .)
    IF              reduce using rule 3 (n_close_scope -> .)
    FOR             reduce using rule 3 (n_close_scope -> .)
    WHILE           reduce using rule 3 (n_close_scope -> .)
    NAME            reduce using rule 3 (n_close_scope -> .)
    INT_TYPE        reduce using rule 3 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 3 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 3 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 3 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 3 (n_close_scope -> .)
    $end            reduce using rule 3 (n_close_scope -> .)
    RCURLY          reduce using rule 3 (n_close_scope -> .)

    n_close_scope                  shift and go to state 143

state 140

    (82) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign . RPARENTHESIS LCURLY codeblock RCURLY n_close_scope

    RPARENTHESIS    shift and go to state 144


state 141

    (81) whileloop -> WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY . n_close_scope
    (3) n_close_scope -> .

    FUNCTION        reduce using rule 3 (n_close_scope -> .)
    IF              reduce using rule 3 (n_close_scope -> .)
    FOR             reduce using rule 3 (n_close_scope -> .)
    WHILE           reduce using rule 3 (n_close_scope -> .)
    NAME            reduce using rule 3 (n_close_scope -> .)
    INT_TYPE        reduce using rule 3 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 3 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 3 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 3 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 3 (n_close_scope -> .)
    $end            reduce using rule 3 (n_close_scope -> .)
    RCURLY          reduce using rule 3 (n_close_scope -> .)

    n_close_scope                  shift and go to state 145

state 142

    (42) function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY . n_close_scope
    (3) n_close_scope -> .

    FUNCTION        reduce using rule 3 (n_close_scope -> .)
    IF              reduce using rule 3 (n_close_scope -> .)
    FOR             reduce using rule 3 (n_close_scope -> .)
    WHILE           reduce using rule 3 (n_close_scope -> .)
    NAME            reduce using rule 3 (n_close_scope -> .)
    INT_TYPE        reduce using rule 3 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 3 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 3 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 3 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 3 (n_close_scope -> .)
    $end            reduce using rule 3 (n_close_scope -> .)
    RCURLY          reduce using rule 3 (n_close_scope -> .)

    n_close_scope                  shift and go to state 146

state 143

    (83) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope . condition_else
    (84) condition_else -> . ELSE LCURLY n_open_new_scope codeblock RCURLY n_close_scope
    (85) condition_else -> . empty
    (14) empty -> .

    ELSE            shift and go to state 148
    FUNCTION        reduce using rule 14 (empty -> .)
    IF              reduce using rule 14 (empty -> .)
    FOR             reduce using rule 14 (empty -> .)
    WHILE           reduce using rule 14 (empty -> .)
    NAME            reduce using rule 14 (empty -> .)
    INT_TYPE        reduce using rule 14 (empty -> .)
    STRING_TYPE     reduce using rule 14 (empty -> .)
    DOUBLE_TYPE     reduce using rule 14 (empty -> .)
    FLOAT_TYPE      reduce using rule 14 (empty -> .)
    BOOL_TYPE       reduce using rule 14 (empty -> .)
    $end            reduce using rule 14 (empty -> .)
    RCURLY          reduce using rule 14 (empty -> .)

    condition_else                 shift and go to state 147
    empty                          shift and go to state 149

state 144

    (82) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS . LCURLY codeblock RCURLY n_close_scope

    LCURLY          shift and go to state 150


state 145

    (81) whileloop -> WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope .

    FUNCTION        reduce using rule 81 (whileloop -> WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    IF              reduce using rule 81 (whileloop -> WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    FOR             reduce using rule 81 (whileloop -> WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    WHILE           reduce using rule 81 (whileloop -> WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    NAME            reduce using rule 81 (whileloop -> WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    INT_TYPE        reduce using rule 81 (whileloop -> WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    STRING_TYPE     reduce using rule 81 (whileloop -> WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    DOUBLE_TYPE     reduce using rule 81 (whileloop -> WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    FLOAT_TYPE      reduce using rule 81 (whileloop -> WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    BOOL_TYPE       reduce using rule 81 (whileloop -> WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    $end            reduce using rule 81 (whileloop -> WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    RCURLY          reduce using rule 81 (whileloop -> WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)


state 146

    (42) function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .

    FUNCTION        reduce using rule 42 (function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    IF              reduce using rule 42 (function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    FOR             reduce using rule 42 (function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    WHILE           reduce using rule 42 (function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    NAME            reduce using rule 42 (function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    INT_TYPE        reduce using rule 42 (function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    STRING_TYPE     reduce using rule 42 (function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    DOUBLE_TYPE     reduce using rule 42 (function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    FLOAT_TYPE      reduce using rule 42 (function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    BOOL_TYPE       reduce using rule 42 (function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    $end            reduce using rule 42 (function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)
    RCURLY          reduce using rule 42 (function_definition -> FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope .)


state 147

    (83) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else .

    FUNCTION        reduce using rule 83 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else .)
    IF              reduce using rule 83 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else .)
    FOR             reduce using rule 83 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else .)
    WHILE           reduce using rule 83 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else .)
    NAME            reduce using rule 83 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else .)
    INT_TYPE        reduce using rule 83 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else .)
    STRING_TYPE     reduce using rule 83 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else .)
    DOUBLE_TYPE     reduce using rule 83 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else .)
    FLOAT_TYPE      reduce using rule 83 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else .)
    BOOL_TYPE       reduce using rule 83 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else .)
    $end            reduce using rule 83 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else .)
    RCURLY          reduce using rule 83 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else .)


state 148

    (84) condition_else -> ELSE . LCURLY n_open_new_scope codeblock RCURLY n_close_scope

    LCURLY          shift and go to state 151


state 149

    (85) condition_else -> empty .

    FUNCTION        reduce using rule 85 (condition_else -> empty .)
    IF              reduce using rule 85 (condition_else -> empty .)
    FOR             reduce using rule 85 (condition_else -> empty .)
    WHILE           reduce using rule 85 (condition_else -> empty .)
    NAME            reduce using rule 85 (condition_else -> empty .)
    INT_TYPE        reduce using rule 85 (condition_else -> empty .)
    STRING_TYPE     reduce using rule 85 (condition_else -> empty .)
    DOUBLE_TYPE     reduce using rule 85 (condition_else -> empty .)
    FLOAT_TYPE      reduce using rule 85 (condition_else -> empty .)
    BOOL_TYPE       reduce using rule 85 (condition_else -> empty .)
    $end            reduce using rule 85 (condition_else -> empty .)
    RCURLY          reduce using rule 85 (condition_else -> empty .)


state 150

    (82) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY . codeblock RCURLY n_close_scope
    (73) codeblock -> . empty
    (74) codeblock -> . codeblock_aux codeblock
    (14) empty -> .
    (75) codeblock_aux -> . statement
    (76) codeblock_aux -> . function_definition
    (77) codeblock_aux -> . condition_if
    (78) codeblock_aux -> . loop
    (70) statement -> . statement_aux SEMICOLON
    (42) function_definition -> . FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope
    (83) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else
    (79) loop -> . forloop
    (80) loop -> . whileloop
    (71) statement_aux -> . assign
    (72) statement_aux -> . function_call
    (82) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (81) whileloop -> . WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope
    (68) assign -> . type NAME n_name EQUAL expression
    (69) assign -> . NAME n_name EQUAL expression
    (43) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (18) type -> . INT_TYPE n_seen_type
    (19) type -> . STRING_TYPE n_seen_type
    (20) type -> . DOUBLE_TYPE n_seen_type
    (21) type -> . FLOAT_TYPE n_seen_type
    (22) type -> . BOOL_TYPE n_seen_type

    RCURLY          reduce using rule 14 (empty -> .)
    FUNCTION        shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    assign                         shift and go to state 18
    codeblock                      shift and go to state 152
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 151

    (84) condition_else -> ELSE LCURLY . n_open_new_scope codeblock RCURLY n_close_scope
    (2) n_open_new_scope -> .

    FUNCTION        reduce using rule 2 (n_open_new_scope -> .)
    IF              reduce using rule 2 (n_open_new_scope -> .)
    FOR             reduce using rule 2 (n_open_new_scope -> .)
    WHILE           reduce using rule 2 (n_open_new_scope -> .)
    NAME            reduce using rule 2 (n_open_new_scope -> .)
    INT_TYPE        reduce using rule 2 (n_open_new_scope -> .)
    STRING_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    DOUBLE_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    FLOAT_TYPE      reduce using rule 2 (n_open_new_scope -> .)
    BOOL_TYPE       reduce using rule 2 (n_open_new_scope -> .)
    RCURLY          reduce using rule 2 (n_open_new_scope -> .)

    n_open_new_scope               shift and go to state 153

state 152

    (82) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock . RCURLY n_close_scope

    RCURLY          shift and go to state 154


state 153

    (84) condition_else -> ELSE LCURLY n_open_new_scope . codeblock RCURLY n_close_scope
    (73) codeblock -> . empty
    (74) codeblock -> . codeblock_aux codeblock
    (14) empty -> .
    (75) codeblock_aux -> . statement
    (76) codeblock_aux -> . function_definition
    (77) codeblock_aux -> . condition_if
    (78) codeblock_aux -> . loop
    (70) statement -> . statement_aux SEMICOLON
    (42) function_definition -> . FUNCTION NAME n_open_new_scope parameter_list DOUBLEDOT function_type LCURLY codeblock RCURLY n_close_scope
    (83) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope condition_else
    (79) loop -> . forloop
    (80) loop -> . whileloop
    (71) statement_aux -> . assign
    (72) statement_aux -> . function_call
    (82) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (81) whileloop -> . WHILE LPARENTHESIS expression RPARENTHESIS LCURLY n_open_new_scope codeblock RCURLY n_close_scope
    (68) assign -> . type NAME n_name EQUAL expression
    (69) assign -> . NAME n_name EQUAL expression
    (43) function_call -> . NAME LPARENTHESIS parameter_list RPARENTHESIS
    (18) type -> . INT_TYPE n_seen_type
    (19) type -> . STRING_TYPE n_seen_type
    (20) type -> . DOUBLE_TYPE n_seen_type
    (21) type -> . FLOAT_TYPE n_seen_type
    (22) type -> . BOOL_TYPE n_seen_type

    RCURLY          reduce using rule 14 (empty -> .)
    FUNCTION        shift and go to state 13
    IF              shift and go to state 15
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    NAME            shift and go to state 14
    INT_TYPE        shift and go to state 23
    STRING_TYPE     shift and go to state 24
    DOUBLE_TYPE     shift and go to state 25
    FLOAT_TYPE      shift and go to state 26
    BOOL_TYPE       shift and go to state 27

    codeblock                      shift and go to state 155
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    function_call                  shift and go to state 19
    type                           shift and go to state 22

state 154

    (82) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY . n_close_scope
    (3) n_close_scope -> .

    FUNCTION        reduce using rule 3 (n_close_scope -> .)
    IF              reduce using rule 3 (n_close_scope -> .)
    FOR             reduce using rule 3 (n_close_scope -> .)
    WHILE           reduce using rule 3 (n_close_scope -> .)
    NAME            reduce using rule 3 (n_close_scope -> .)
    INT_TYPE        reduce using rule 3 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 3 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 3 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 3 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 3 (n_close_scope -> .)
    $end            reduce using rule 3 (n_close_scope -> .)
    RCURLY          reduce using rule 3 (n_close_scope -> .)

    n_close_scope                  shift and go to state 156

state 155

    (84) condition_else -> ELSE LCURLY n_open_new_scope codeblock . RCURLY n_close_scope

    RCURLY          shift and go to state 157


state 156

    (82) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .

    FUNCTION        reduce using rule 82 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    IF              reduce using rule 82 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    FOR             reduce using rule 82 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    WHILE           reduce using rule 82 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    NAME            reduce using rule 82 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    INT_TYPE        reduce using rule 82 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    STRING_TYPE     reduce using rule 82 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    DOUBLE_TYPE     reduce using rule 82 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    FLOAT_TYPE      reduce using rule 82 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    BOOL_TYPE       reduce using rule 82 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    $end            reduce using rule 82 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    RCURLY          reduce using rule 82 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)


state 157

    (84) condition_else -> ELSE LCURLY n_open_new_scope codeblock RCURLY . n_close_scope
    (3) n_close_scope -> .

    FUNCTION        reduce using rule 3 (n_close_scope -> .)
    IF              reduce using rule 3 (n_close_scope -> .)
    FOR             reduce using rule 3 (n_close_scope -> .)
    WHILE           reduce using rule 3 (n_close_scope -> .)
    NAME            reduce using rule 3 (n_close_scope -> .)
    INT_TYPE        reduce using rule 3 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 3 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 3 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 3 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 3 (n_close_scope -> .)
    $end            reduce using rule 3 (n_close_scope -> .)
    RCURLY          reduce using rule 3 (n_close_scope -> .)

    n_close_scope                  shift and go to state 158

state 158

    (84) condition_else -> ELSE LCURLY n_open_new_scope codeblock RCURLY n_close_scope .

    FUNCTION        reduce using rule 84 (condition_else -> ELSE LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    IF              reduce using rule 84 (condition_else -> ELSE LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    FOR             reduce using rule 84 (condition_else -> ELSE LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    WHILE           reduce using rule 84 (condition_else -> ELSE LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    NAME            reduce using rule 84 (condition_else -> ELSE LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    INT_TYPE        reduce using rule 84 (condition_else -> ELSE LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    STRING_TYPE     reduce using rule 84 (condition_else -> ELSE LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    DOUBLE_TYPE     reduce using rule 84 (condition_else -> ELSE LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    FLOAT_TYPE      reduce using rule 84 (condition_else -> ELSE LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    BOOL_TYPE       reduce using rule 84 (condition_else -> ELSE LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    $end            reduce using rule 84 (condition_else -> ELSE LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    RCURLY          reduce using rule 84 (condition_else -> ELSE LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)

