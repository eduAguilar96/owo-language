Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DOT
    LBRACKET
    NOT
    RBRACKET

Grammar

Rule 0     S' -> program
Rule 1     n_seen_type -> <empty>
Rule 2     n_open_new_scope -> <empty>
Rule 3     n_open_new_scope_function -> <empty>
Rule 4     n_close_scope -> <empty>
Rule 5     n_variable_reference -> <empty>
Rule 6     n_variable_instantiate -> <empty>
Rule 7     n_variable_instantiate_param -> <empty>
Rule 8     n_math_expression_1_int -> <empty>
Rule 9     n_math_expression_1_float -> <empty>
Rule 10    n_math_expression_1_string -> <empty>
Rule 11    n_math_expression_1_bool -> <empty>
Rule 12    n_math_expression_1_name -> <empty>
Rule 13    n_math_expression_2 -> <empty>
Rule 14    n_math_expression_3 -> <empty>
Rule 15    n_math_expression_4 -> <empty>
Rule 16    n_math_expression_5 -> <empty>
Rule 17    n_math_expression_6 -> <empty>
Rule 18    n_math_expression_7 -> <empty>
Rule 19    n_math_expression_8 -> <empty>
Rule 20    n_math_expression_9 -> <empty>
Rule 21    n_math_expression_10 -> <empty>
Rule 22    n_math_expression_11 -> <empty>
Rule 23    n_math_expression_12 -> <empty>
Rule 24    n_two_way_conditional_1 -> <empty>
Rule 25    n_two_way_conditional_2 -> <empty>
Rule 26    n_two_way_conditional_3 -> <empty>
Rule 27    p_n_pre_condition_loop_1 -> <empty>
Rule 28    p_n_pre_condition_loop_2 -> <empty>
Rule 29    p_n_pre_condition_loop_3 -> <empty>
Rule 30    n_seen_equal_op -> <empty>
Rule 31    n_before_function_definition -> <empty>
Rule 32    n_function_block_start -> <empty>
Rule 33    n_function_block_end -> <empty>
Rule 34    n_function_type -> <empty>
Rule 35    n_function_call_1 -> <empty>
Rule 36    n_function_call_2 -> <empty>
Rule 37    n_function_call_3 -> <empty>
Rule 38    n_function_call_4 -> <empty>
Rule 39    n_function_call_5 -> <empty>
Rule 40    n_function_call_6 -> <empty>
Rule 41    n_return -> <empty>
Rule 42    n_return_void -> <empty>
Rule 43    n_print -> <empty>
Rule 44    n_end -> <empty>
Rule 45    empty -> <empty>
Rule 46    program -> program_aux codeblock n_end
Rule 47    program_aux -> IDK
Rule 48    program_aux -> OWO
Rule 49    type -> INT_TYPE n_seen_type
Rule 50    type -> STRING_TYPE n_seen_type
Rule 51    type -> DOUBLE_TYPE n_seen_type
Rule 52    type -> FLOAT_TYPE n_seen_type
Rule 53    type -> BOOL_TYPE n_seen_type
Rule 54    relational_operator -> GREATERTHAN n_math_expression_8
Rule 55    relational_operator -> LESSTHAN n_math_expression_8
Rule 56    relational_operator -> EQUALEQUAL n_math_expression_8
Rule 57    relational_operator -> LESSTHANOREQUAL n_math_expression_8
Rule 58    relational_operator -> GREATERTHANOREQUAL n_math_expression_8
Rule 59    relational_operator -> NOTEQUAL n_math_expression_8
Rule 60    literal -> FLOAT n_math_expression_1_float
Rule 61    literal -> INT n_math_expression_1_int
Rule 62    literal -> STRING n_math_expression_1_string
Rule 63    literal -> TRUE n_math_expression_1_bool
Rule 64    literal -> FALSE n_math_expression_1_bool
Rule 65    function_type -> VOID n_function_type
Rule 66    function_type -> INT_TYPE n_function_type
Rule 67    function_type -> STRING_TYPE n_function_type
Rule 68    function_type -> DOUBLE_TYPE n_function_type
Rule 69    function_type -> FLOAT_TYPE n_function_type
Rule 70    function_type -> BOOL_TYPE n_function_type
Rule 71    function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end
Rule 72    return -> RETURN expression n_return SEMICOLON
Rule 73    return -> RETURN n_return_void SEMICOLON
Rule 74    return -> empty
Rule 75    function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
Rule 76    function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
Rule 77    arg_list -> arg
Rule 78    arg_list -> arg COMMA n_function_call_4 arg_list
Rule 79    parameter_list -> empty
Rule 80    parameter_list -> parameter
Rule 81    parameter_list -> parameter COMMA parameter_list
Rule 82    arg -> expression n_function_call_3
Rule 83    parameter -> type NAME n_variable_instantiate_param
Rule 84    expression -> expression_or
Rule 85    expression -> expression_or AND n_math_expression_10 expression n_math_expression_11
Rule 86    expression_or -> expression_rel
Rule 87    expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12
Rule 88    expression_rel -> exp
Rule 89    expression_rel -> exp relational_operator exp n_math_expression_9
Rule 90    exp -> termino n_math_expression_4
Rule 91    exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp
Rule 92    exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp
Rule 93    termino -> factor n_math_expression_5
Rule 94    termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino
Rule 95    termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino
Rule 96    termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino
Rule 97    factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
Rule 98    factor -> PLUS value
Rule 99    factor -> MINUS value
Rule 100   factor -> value
Rule 101   value -> function_call
Rule 102   value -> literal
Rule 103   value -> NAME n_variable_reference n_math_expression_1_name
Rule 104   declare -> type NAME n_variable_instantiate
Rule 105   assign -> type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
Rule 106   assign -> NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
Rule 107   print -> PRINT LPARENTHESIS expression n_print RPARENTHESIS
Rule 108   statement -> statement_aux SEMICOLON
Rule 109   statement_aux -> assign
Rule 110   statement_aux -> declare
Rule 111   statement_aux -> function_call
Rule 112   statement_aux -> print
Rule 113   codeblock -> empty
Rule 114   codeblock -> codeblock_aux codeblock
Rule 115   codeblock_aux -> statement
Rule 116   codeblock_aux -> function_definition
Rule 117   codeblock_aux -> condition_if
Rule 118   codeblock_aux -> loop
Rule 119   loop -> forloop
Rule 120   loop -> whileloop
Rule 121   whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
Rule 122   forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
Rule 123   condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
Rule 124   condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope
Rule 125   condition_else -> empty

Terminals, with rules where they appear

AND                  : 85
BOOL_TYPE            : 53 70
COMMA                : 78 81
DIVIDE               : 95
DOT                  : 
DOUBLEDOT            : 71 122 122
DOUBLE_TYPE          : 51 68
ELSE                 : 124
EQUAL                : 105 106
EQUALEQUAL           : 56
FALSE                : 64
FLOAT                : 60
FLOAT_TYPE           : 52 69
FOR                  : 122
FUNCTION             : 71
GREATERTHAN          : 54
GREATERTHANOREQUAL   : 58
IDK                  : 47
IF                   : 123
INT                  : 61
INT_TYPE             : 49 66
LBRACKET             : 
LCURLY               : 71 121 122 123 124
LESSTHAN             : 55
LESSTHANOREQUAL      : 57
LPARENTHESIS         : 75 76 97 107 121 122 123
MINUS                : 92 99
MODULUS              : 96
NAME                 : 71 75 76 83 103 104 105 106
NOT                  : 
NOTEQUAL             : 59
OR                   : 87
OWO                  : 48
PLUS                 : 91 98
PRINT                : 107
RBRACKET             : 
RCURLY               : 71 121 122 123 124
RETURN               : 72 73
RPARENTHESIS         : 75 76 97 107 121 122 123
SEMICOLON            : 72 73 108
STRING               : 62
STRING_TYPE          : 50 67
TIMES                : 94
TRUE                 : 63
VOID                 : 65
WHILE                : 121
error                : 

Nonterminals, with rules where they appear

arg                  : 77 78
arg_list             : 75 78
assign               : 109 122 122
codeblock            : 46 71 114 121 122 123 124
codeblock_aux        : 114
condition_else       : 123
condition_if         : 117
declare              : 110
empty                : 74 79 113 125
exp                  : 88 89 89 91 92
expression           : 72 82 85 97 105 106 107 121 122 123
expression_or        : 84 85 87
expression_rel       : 86 87
factor               : 93 94 95 96
forloop              : 119
function_call        : 101 111
function_definition  : 116
function_type        : 71
literal              : 102
loop                 : 118
n_before_function_definition : 71
n_close_scope        : 71 121 122 123 124
n_end                : 46
n_function_block_end : 71
n_function_block_start : 71
n_function_call_1    : 75 76
n_function_call_2    : 75
n_function_call_3    : 82
n_function_call_4    : 78
n_function_call_5    : 75
n_function_call_6    : 75 76
n_function_type      : 65 66 67 68 69 70
n_math_expression_10 : 85 87
n_math_expression_11 : 85
n_math_expression_12 : 87
n_math_expression_1_bool : 63 64
n_math_expression_1_float : 60
n_math_expression_1_int : 61
n_math_expression_1_name : 103 105 106
n_math_expression_1_string : 62
n_math_expression_2  : 91 92
n_math_expression_3  : 94 95 96
n_math_expression_4  : 90 91 92
n_math_expression_5  : 93 94 95 96
n_math_expression_6  : 97
n_math_expression_7  : 97
n_math_expression_8  : 54 55 56 57 58 59
n_math_expression_9  : 89
n_open_new_scope     : 121 122 123 124
n_open_new_scope_function : 71
n_print              : 107
n_return             : 72
n_return_void        : 73
n_seen_equal_op      : 105 106
n_seen_type          : 49 50 51 52 53
n_two_way_conditional_1 : 123
n_two_way_conditional_2 : 123
n_two_way_conditional_3 : 124
n_variable_instantiate : 104 105
n_variable_instantiate_param : 83
n_variable_reference : 103 106
p_n_pre_condition_loop_1 : 121
p_n_pre_condition_loop_2 : 121
p_n_pre_condition_loop_3 : 121
parameter            : 80 81
parameter_list       : 71 81
print                : 112
program              : 0
program_aux          : 46
relational_operator  : 89
return               : 71
statement            : 115
statement_aux        : 108
termino              : 90 91 92 94 95 96
type                 : 83 104 105
value                : 98 99 100
whileloop            : 120

Parsing method: LALR

state 0

    (0) S' -> . program
    (46) program -> . program_aux codeblock n_end
    (47) program_aux -> . IDK
    (48) program_aux -> . OWO

    IDK             shift and go to state 3
    OWO             shift and go to state 4

    program                        shift and go to state 1
    program_aux                    shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (46) program -> program_aux . codeblock n_end
    (113) codeblock -> . empty
    (114) codeblock -> . codeblock_aux codeblock
    (45) empty -> .
    (115) codeblock_aux -> . statement
    (116) codeblock_aux -> . function_definition
    (117) codeblock_aux -> . condition_if
    (118) codeblock_aux -> . loop
    (108) statement -> . statement_aux SEMICOLON
    (71) function_definition -> . n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end
    (123) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (119) loop -> . forloop
    (120) loop -> . whileloop
    (109) statement_aux -> . assign
    (110) statement_aux -> . declare
    (111) statement_aux -> . function_call
    (112) statement_aux -> . print
    (31) n_before_function_definition -> .
    (122) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (121) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (105) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (106) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (104) declare -> . type NAME n_variable_instantiate
    (75) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (76) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (107) print -> . PRINT LPARENTHESIS expression n_print RPARENTHESIS
    (49) type -> . INT_TYPE n_seen_type
    (50) type -> . STRING_TYPE n_seen_type
    (51) type -> . DOUBLE_TYPE n_seen_type
    (52) type -> . FLOAT_TYPE n_seen_type
    (53) type -> . BOOL_TYPE n_seen_type

    $end            reduce using rule 45 (empty -> .)
    IF              shift and go to state 15
    FUNCTION        reduce using rule 31 (n_before_function_definition -> .)
    FOR             shift and go to state 22
    WHILE           shift and go to state 23
    NAME            shift and go to state 14
    PRINT           shift and go to state 25
    INT_TYPE        shift and go to state 26
    STRING_TYPE     shift and go to state 27
    DOUBLE_TYPE     shift and go to state 28
    FLOAT_TYPE      shift and go to state 29
    BOOL_TYPE       shift and go to state 30

    codeblock                      shift and go to state 5
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    n_before_function_definition   shift and go to state 13
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    declare                        shift and go to state 19
    function_call                  shift and go to state 20
    print                          shift and go to state 21
    type                           shift and go to state 24

state 3

    (47) program_aux -> IDK .

    IF              reduce using rule 47 (program_aux -> IDK .)
    FOR             reduce using rule 47 (program_aux -> IDK .)
    WHILE           reduce using rule 47 (program_aux -> IDK .)
    NAME            reduce using rule 47 (program_aux -> IDK .)
    PRINT           reduce using rule 47 (program_aux -> IDK .)
    INT_TYPE        reduce using rule 47 (program_aux -> IDK .)
    STRING_TYPE     reduce using rule 47 (program_aux -> IDK .)
    DOUBLE_TYPE     reduce using rule 47 (program_aux -> IDK .)
    FLOAT_TYPE      reduce using rule 47 (program_aux -> IDK .)
    BOOL_TYPE       reduce using rule 47 (program_aux -> IDK .)
    FUNCTION        reduce using rule 47 (program_aux -> IDK .)
    $end            reduce using rule 47 (program_aux -> IDK .)


state 4

    (48) program_aux -> OWO .

    IF              reduce using rule 48 (program_aux -> OWO .)
    FOR             reduce using rule 48 (program_aux -> OWO .)
    WHILE           reduce using rule 48 (program_aux -> OWO .)
    NAME            reduce using rule 48 (program_aux -> OWO .)
    PRINT           reduce using rule 48 (program_aux -> OWO .)
    INT_TYPE        reduce using rule 48 (program_aux -> OWO .)
    STRING_TYPE     reduce using rule 48 (program_aux -> OWO .)
    DOUBLE_TYPE     reduce using rule 48 (program_aux -> OWO .)
    FLOAT_TYPE      reduce using rule 48 (program_aux -> OWO .)
    BOOL_TYPE       reduce using rule 48 (program_aux -> OWO .)
    FUNCTION        reduce using rule 48 (program_aux -> OWO .)
    $end            reduce using rule 48 (program_aux -> OWO .)


state 5

    (46) program -> program_aux codeblock . n_end
    (44) n_end -> .

    $end            reduce using rule 44 (n_end -> .)

    n_end                          shift and go to state 31

state 6

    (113) codeblock -> empty .

    $end            reduce using rule 113 (codeblock -> empty .)
    RCURLY          reduce using rule 113 (codeblock -> empty .)
    RETURN          reduce using rule 113 (codeblock -> empty .)


state 7

    (114) codeblock -> codeblock_aux . codeblock
    (113) codeblock -> . empty
    (114) codeblock -> . codeblock_aux codeblock
    (45) empty -> .
    (115) codeblock_aux -> . statement
    (116) codeblock_aux -> . function_definition
    (117) codeblock_aux -> . condition_if
    (118) codeblock_aux -> . loop
    (108) statement -> . statement_aux SEMICOLON
    (71) function_definition -> . n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end
    (123) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (119) loop -> . forloop
    (120) loop -> . whileloop
    (109) statement_aux -> . assign
    (110) statement_aux -> . declare
    (111) statement_aux -> . function_call
    (112) statement_aux -> . print
    (31) n_before_function_definition -> .
    (122) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (121) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (105) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (106) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (104) declare -> . type NAME n_variable_instantiate
    (75) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (76) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (107) print -> . PRINT LPARENTHESIS expression n_print RPARENTHESIS
    (49) type -> . INT_TYPE n_seen_type
    (50) type -> . STRING_TYPE n_seen_type
    (51) type -> . DOUBLE_TYPE n_seen_type
    (52) type -> . FLOAT_TYPE n_seen_type
    (53) type -> . BOOL_TYPE n_seen_type

    $end            reduce using rule 45 (empty -> .)
    RCURLY          reduce using rule 45 (empty -> .)
    RETURN          reduce using rule 45 (empty -> .)
    IF              shift and go to state 15
    FUNCTION        reduce using rule 31 (n_before_function_definition -> .)
    FOR             shift and go to state 22
    WHILE           shift and go to state 23
    NAME            shift and go to state 14
    PRINT           shift and go to state 25
    INT_TYPE        shift and go to state 26
    STRING_TYPE     shift and go to state 27
    DOUBLE_TYPE     shift and go to state 28
    FLOAT_TYPE      shift and go to state 29
    BOOL_TYPE       shift and go to state 30

    codeblock_aux                  shift and go to state 7
    codeblock                      shift and go to state 32
    empty                          shift and go to state 6
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    n_before_function_definition   shift and go to state 13
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    declare                        shift and go to state 19
    function_call                  shift and go to state 20
    print                          shift and go to state 21
    type                           shift and go to state 24

state 8

    (115) codeblock_aux -> statement .

    IF              reduce using rule 115 (codeblock_aux -> statement .)
    FOR             reduce using rule 115 (codeblock_aux -> statement .)
    WHILE           reduce using rule 115 (codeblock_aux -> statement .)
    NAME            reduce using rule 115 (codeblock_aux -> statement .)
    PRINT           reduce using rule 115 (codeblock_aux -> statement .)
    INT_TYPE        reduce using rule 115 (codeblock_aux -> statement .)
    STRING_TYPE     reduce using rule 115 (codeblock_aux -> statement .)
    DOUBLE_TYPE     reduce using rule 115 (codeblock_aux -> statement .)
    FLOAT_TYPE      reduce using rule 115 (codeblock_aux -> statement .)
    BOOL_TYPE       reduce using rule 115 (codeblock_aux -> statement .)
    FUNCTION        reduce using rule 115 (codeblock_aux -> statement .)
    $end            reduce using rule 115 (codeblock_aux -> statement .)
    RCURLY          reduce using rule 115 (codeblock_aux -> statement .)
    RETURN          reduce using rule 115 (codeblock_aux -> statement .)


state 9

    (116) codeblock_aux -> function_definition .

    IF              reduce using rule 116 (codeblock_aux -> function_definition .)
    FOR             reduce using rule 116 (codeblock_aux -> function_definition .)
    WHILE           reduce using rule 116 (codeblock_aux -> function_definition .)
    NAME            reduce using rule 116 (codeblock_aux -> function_definition .)
    PRINT           reduce using rule 116 (codeblock_aux -> function_definition .)
    INT_TYPE        reduce using rule 116 (codeblock_aux -> function_definition .)
    STRING_TYPE     reduce using rule 116 (codeblock_aux -> function_definition .)
    DOUBLE_TYPE     reduce using rule 116 (codeblock_aux -> function_definition .)
    FLOAT_TYPE      reduce using rule 116 (codeblock_aux -> function_definition .)
    BOOL_TYPE       reduce using rule 116 (codeblock_aux -> function_definition .)
    FUNCTION        reduce using rule 116 (codeblock_aux -> function_definition .)
    $end            reduce using rule 116 (codeblock_aux -> function_definition .)
    RCURLY          reduce using rule 116 (codeblock_aux -> function_definition .)
    RETURN          reduce using rule 116 (codeblock_aux -> function_definition .)


state 10

    (117) codeblock_aux -> condition_if .

    IF              reduce using rule 117 (codeblock_aux -> condition_if .)
    FOR             reduce using rule 117 (codeblock_aux -> condition_if .)
    WHILE           reduce using rule 117 (codeblock_aux -> condition_if .)
    NAME            reduce using rule 117 (codeblock_aux -> condition_if .)
    PRINT           reduce using rule 117 (codeblock_aux -> condition_if .)
    INT_TYPE        reduce using rule 117 (codeblock_aux -> condition_if .)
    STRING_TYPE     reduce using rule 117 (codeblock_aux -> condition_if .)
    DOUBLE_TYPE     reduce using rule 117 (codeblock_aux -> condition_if .)
    FLOAT_TYPE      reduce using rule 117 (codeblock_aux -> condition_if .)
    BOOL_TYPE       reduce using rule 117 (codeblock_aux -> condition_if .)
    FUNCTION        reduce using rule 117 (codeblock_aux -> condition_if .)
    $end            reduce using rule 117 (codeblock_aux -> condition_if .)
    RCURLY          reduce using rule 117 (codeblock_aux -> condition_if .)
    RETURN          reduce using rule 117 (codeblock_aux -> condition_if .)


state 11

    (118) codeblock_aux -> loop .

    IF              reduce using rule 118 (codeblock_aux -> loop .)
    FOR             reduce using rule 118 (codeblock_aux -> loop .)
    WHILE           reduce using rule 118 (codeblock_aux -> loop .)
    NAME            reduce using rule 118 (codeblock_aux -> loop .)
    PRINT           reduce using rule 118 (codeblock_aux -> loop .)
    INT_TYPE        reduce using rule 118 (codeblock_aux -> loop .)
    STRING_TYPE     reduce using rule 118 (codeblock_aux -> loop .)
    DOUBLE_TYPE     reduce using rule 118 (codeblock_aux -> loop .)
    FLOAT_TYPE      reduce using rule 118 (codeblock_aux -> loop .)
    BOOL_TYPE       reduce using rule 118 (codeblock_aux -> loop .)
    FUNCTION        reduce using rule 118 (codeblock_aux -> loop .)
    $end            reduce using rule 118 (codeblock_aux -> loop .)
    RCURLY          reduce using rule 118 (codeblock_aux -> loop .)
    RETURN          reduce using rule 118 (codeblock_aux -> loop .)


state 12

    (108) statement -> statement_aux . SEMICOLON

    SEMICOLON       shift and go to state 33


state 13

    (71) function_definition -> n_before_function_definition . FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end

    FUNCTION        shift and go to state 34


state 14

    (106) assign -> NAME . n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (75) function_call -> NAME . n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (76) function_call -> NAME . n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (5) n_variable_reference -> .
    (35) n_function_call_1 -> .

    EQUAL           reduce using rule 5 (n_variable_reference -> .)
    LPARENTHESIS    reduce using rule 35 (n_function_call_1 -> .)

    n_variable_reference           shift and go to state 35
    n_function_call_1              shift and go to state 36

state 15

    (123) condition_if -> IF . LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2

    LPARENTHESIS    shift and go to state 37


state 16

    (119) loop -> forloop .

    IF              reduce using rule 119 (loop -> forloop .)
    FOR             reduce using rule 119 (loop -> forloop .)
    WHILE           reduce using rule 119 (loop -> forloop .)
    NAME            reduce using rule 119 (loop -> forloop .)
    PRINT           reduce using rule 119 (loop -> forloop .)
    INT_TYPE        reduce using rule 119 (loop -> forloop .)
    STRING_TYPE     reduce using rule 119 (loop -> forloop .)
    DOUBLE_TYPE     reduce using rule 119 (loop -> forloop .)
    FLOAT_TYPE      reduce using rule 119 (loop -> forloop .)
    BOOL_TYPE       reduce using rule 119 (loop -> forloop .)
    FUNCTION        reduce using rule 119 (loop -> forloop .)
    $end            reduce using rule 119 (loop -> forloop .)
    RCURLY          reduce using rule 119 (loop -> forloop .)
    RETURN          reduce using rule 119 (loop -> forloop .)


state 17

    (120) loop -> whileloop .

    IF              reduce using rule 120 (loop -> whileloop .)
    FOR             reduce using rule 120 (loop -> whileloop .)
    WHILE           reduce using rule 120 (loop -> whileloop .)
    NAME            reduce using rule 120 (loop -> whileloop .)
    PRINT           reduce using rule 120 (loop -> whileloop .)
    INT_TYPE        reduce using rule 120 (loop -> whileloop .)
    STRING_TYPE     reduce using rule 120 (loop -> whileloop .)
    DOUBLE_TYPE     reduce using rule 120 (loop -> whileloop .)
    FLOAT_TYPE      reduce using rule 120 (loop -> whileloop .)
    BOOL_TYPE       reduce using rule 120 (loop -> whileloop .)
    FUNCTION        reduce using rule 120 (loop -> whileloop .)
    $end            reduce using rule 120 (loop -> whileloop .)
    RCURLY          reduce using rule 120 (loop -> whileloop .)
    RETURN          reduce using rule 120 (loop -> whileloop .)


state 18

    (109) statement_aux -> assign .

    SEMICOLON       reduce using rule 109 (statement_aux -> assign .)


state 19

    (110) statement_aux -> declare .

    SEMICOLON       reduce using rule 110 (statement_aux -> declare .)


state 20

    (111) statement_aux -> function_call .

    SEMICOLON       reduce using rule 111 (statement_aux -> function_call .)


state 21

    (112) statement_aux -> print .

    SEMICOLON       reduce using rule 112 (statement_aux -> print .)


state 22

    (122) forloop -> FOR . LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope

    LPARENTHESIS    shift and go to state 38


state 23

    (121) whileloop -> WHILE . p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (27) p_n_pre_condition_loop_1 -> .

    LPARENTHESIS    reduce using rule 27 (p_n_pre_condition_loop_1 -> .)

    p_n_pre_condition_loop_1       shift and go to state 39

state 24

    (105) assign -> type . NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (104) declare -> type . NAME n_variable_instantiate

    NAME            shift and go to state 40


state 25

    (107) print -> PRINT . LPARENTHESIS expression n_print RPARENTHESIS

    LPARENTHESIS    shift and go to state 41


state 26

    (49) type -> INT_TYPE . n_seen_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 42

state 27

    (50) type -> STRING_TYPE . n_seen_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 43

state 28

    (51) type -> DOUBLE_TYPE . n_seen_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 44

state 29

    (52) type -> FLOAT_TYPE . n_seen_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 45

state 30

    (53) type -> BOOL_TYPE . n_seen_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 46

state 31

    (46) program -> program_aux codeblock n_end .

    $end            reduce using rule 46 (program -> program_aux codeblock n_end .)


state 32

    (114) codeblock -> codeblock_aux codeblock .

    $end            reduce using rule 114 (codeblock -> codeblock_aux codeblock .)
    RCURLY          reduce using rule 114 (codeblock -> codeblock_aux codeblock .)
    RETURN          reduce using rule 114 (codeblock -> codeblock_aux codeblock .)


state 33

    (108) statement -> statement_aux SEMICOLON .

    IF              reduce using rule 108 (statement -> statement_aux SEMICOLON .)
    FOR             reduce using rule 108 (statement -> statement_aux SEMICOLON .)
    WHILE           reduce using rule 108 (statement -> statement_aux SEMICOLON .)
    NAME            reduce using rule 108 (statement -> statement_aux SEMICOLON .)
    PRINT           reduce using rule 108 (statement -> statement_aux SEMICOLON .)
    INT_TYPE        reduce using rule 108 (statement -> statement_aux SEMICOLON .)
    STRING_TYPE     reduce using rule 108 (statement -> statement_aux SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 108 (statement -> statement_aux SEMICOLON .)
    FLOAT_TYPE      reduce using rule 108 (statement -> statement_aux SEMICOLON .)
    BOOL_TYPE       reduce using rule 108 (statement -> statement_aux SEMICOLON .)
    FUNCTION        reduce using rule 108 (statement -> statement_aux SEMICOLON .)
    $end            reduce using rule 108 (statement -> statement_aux SEMICOLON .)
    RCURLY          reduce using rule 108 (statement -> statement_aux SEMICOLON .)
    RETURN          reduce using rule 108 (statement -> statement_aux SEMICOLON .)


state 34

    (71) function_definition -> n_before_function_definition FUNCTION . NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end

    NAME            shift and go to state 47


state 35

    (106) assign -> NAME n_variable_reference . n_math_expression_1_name EQUAL n_seen_equal_op expression
    (12) n_math_expression_1_name -> .

    EQUAL           reduce using rule 12 (n_math_expression_1_name -> .)

    n_math_expression_1_name       shift and go to state 48

state 36

    (75) function_call -> NAME n_function_call_1 . LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (76) function_call -> NAME n_function_call_1 . LPARENTHESIS RPARENTHESIS n_function_call_6

    LPARENTHESIS    shift and go to state 49


state 37

    (123) condition_if -> IF LPARENTHESIS . expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (84) expression -> . expression_or
    (85) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (86) expression_or -> . expression_rel
    (87) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (88) expression_rel -> . exp
    (89) expression_rel -> . exp relational_operator exp n_math_expression_9
    (90) exp -> . termino n_math_expression_4
    (91) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (92) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (93) termino -> . factor n_math_expression_5
    (94) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (95) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (96) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (97) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (98) factor -> . PLUS value
    (99) factor -> . MINUS value
    (100) factor -> . value
    (101) value -> . function_call
    (102) value -> . literal
    (103) value -> . NAME n_variable_reference n_math_expression_1_name
    (75) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (76) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (60) literal -> . FLOAT n_math_expression_1_float
    (61) literal -> . INT n_math_expression_1_int
    (62) literal -> . STRING n_math_expression_1_string
    (63) literal -> . TRUE n_math_expression_1_bool
    (64) literal -> . FALSE n_math_expression_1_bool

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67

    expression                     shift and go to state 51
    expression_or                  shift and go to state 52
    expression_rel                 shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 55
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 38

    (122) forloop -> FOR LPARENTHESIS . n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (2) n_open_new_scope -> .

    NAME            reduce using rule 2 (n_open_new_scope -> .)
    INT_TYPE        reduce using rule 2 (n_open_new_scope -> .)
    STRING_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    DOUBLE_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    FLOAT_TYPE      reduce using rule 2 (n_open_new_scope -> .)
    BOOL_TYPE       reduce using rule 2 (n_open_new_scope -> .)

    n_open_new_scope               shift and go to state 68

state 39

    (121) whileloop -> WHILE p_n_pre_condition_loop_1 . LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope

    LPARENTHESIS    shift and go to state 69


state 40

    (105) assign -> type NAME . n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (104) declare -> type NAME . n_variable_instantiate
    (6) n_variable_instantiate -> .

    EQUAL           reduce using rule 6 (n_variable_instantiate -> .)
    SEMICOLON       reduce using rule 6 (n_variable_instantiate -> .)

    n_variable_instantiate         shift and go to state 70

state 41

    (107) print -> PRINT LPARENTHESIS . expression n_print RPARENTHESIS
    (84) expression -> . expression_or
    (85) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (86) expression_or -> . expression_rel
    (87) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (88) expression_rel -> . exp
    (89) expression_rel -> . exp relational_operator exp n_math_expression_9
    (90) exp -> . termino n_math_expression_4
    (91) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (92) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (93) termino -> . factor n_math_expression_5
    (94) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (95) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (96) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (97) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (98) factor -> . PLUS value
    (99) factor -> . MINUS value
    (100) factor -> . value
    (101) value -> . function_call
    (102) value -> . literal
    (103) value -> . NAME n_variable_reference n_math_expression_1_name
    (75) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (76) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (60) literal -> . FLOAT n_math_expression_1_float
    (61) literal -> . INT n_math_expression_1_int
    (62) literal -> . STRING n_math_expression_1_string
    (63) literal -> . TRUE n_math_expression_1_bool
    (64) literal -> . FALSE n_math_expression_1_bool

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67

    expression                     shift and go to state 71
    expression_or                  shift and go to state 52
    expression_rel                 shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 55
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 42

    (49) type -> INT_TYPE n_seen_type .

    NAME            reduce using rule 49 (type -> INT_TYPE n_seen_type .)


state 43

    (50) type -> STRING_TYPE n_seen_type .

    NAME            reduce using rule 50 (type -> STRING_TYPE n_seen_type .)


state 44

    (51) type -> DOUBLE_TYPE n_seen_type .

    NAME            reduce using rule 51 (type -> DOUBLE_TYPE n_seen_type .)


state 45

    (52) type -> FLOAT_TYPE n_seen_type .

    NAME            reduce using rule 52 (type -> FLOAT_TYPE n_seen_type .)


state 46

    (53) type -> BOOL_TYPE n_seen_type .

    NAME            reduce using rule 53 (type -> BOOL_TYPE n_seen_type .)


state 47

    (71) function_definition -> n_before_function_definition FUNCTION NAME . n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end
    (3) n_open_new_scope_function -> .

    INT_TYPE        reduce using rule 3 (n_open_new_scope_function -> .)
    STRING_TYPE     reduce using rule 3 (n_open_new_scope_function -> .)
    DOUBLE_TYPE     reduce using rule 3 (n_open_new_scope_function -> .)
    FLOAT_TYPE      reduce using rule 3 (n_open_new_scope_function -> .)
    BOOL_TYPE       reduce using rule 3 (n_open_new_scope_function -> .)
    DOUBLEDOT       reduce using rule 3 (n_open_new_scope_function -> .)

    n_open_new_scope_function      shift and go to state 72

state 48

    (106) assign -> NAME n_variable_reference n_math_expression_1_name . EQUAL n_seen_equal_op expression

    EQUAL           shift and go to state 73


state 49

    (75) function_call -> NAME n_function_call_1 LPARENTHESIS . n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (76) function_call -> NAME n_function_call_1 LPARENTHESIS . RPARENTHESIS n_function_call_6
    (36) n_function_call_2 -> .

    RPARENTHESIS    shift and go to state 75
    LPARENTHESIS    reduce using rule 36 (n_function_call_2 -> .)
    PLUS            reduce using rule 36 (n_function_call_2 -> .)
    MINUS           reduce using rule 36 (n_function_call_2 -> .)
    NAME            reduce using rule 36 (n_function_call_2 -> .)
    FLOAT           reduce using rule 36 (n_function_call_2 -> .)
    INT             reduce using rule 36 (n_function_call_2 -> .)
    STRING          reduce using rule 36 (n_function_call_2 -> .)
    TRUE            reduce using rule 36 (n_function_call_2 -> .)
    FALSE           reduce using rule 36 (n_function_call_2 -> .)

    n_function_call_2              shift and go to state 74

state 50

    (97) factor -> LPARENTHESIS . n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (17) n_math_expression_6 -> .

    LPARENTHESIS    reduce using rule 17 (n_math_expression_6 -> .)
    PLUS            reduce using rule 17 (n_math_expression_6 -> .)
    MINUS           reduce using rule 17 (n_math_expression_6 -> .)
    NAME            reduce using rule 17 (n_math_expression_6 -> .)
    FLOAT           reduce using rule 17 (n_math_expression_6 -> .)
    INT             reduce using rule 17 (n_math_expression_6 -> .)
    STRING          reduce using rule 17 (n_math_expression_6 -> .)
    TRUE            reduce using rule 17 (n_math_expression_6 -> .)
    FALSE           reduce using rule 17 (n_math_expression_6 -> .)

    n_math_expression_6            shift and go to state 76

state 51

    (123) condition_if -> IF LPARENTHESIS expression . RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2

    RPARENTHESIS    shift and go to state 77


state 52

    (84) expression -> expression_or .
    (85) expression -> expression_or . AND n_math_expression_10 expression n_math_expression_11

    RPARENTHESIS    reduce using rule 84 (expression -> expression_or .)
    COMMA           reduce using rule 84 (expression -> expression_or .)
    SEMICOLON       reduce using rule 84 (expression -> expression_or .)
    DOUBLEDOT       reduce using rule 84 (expression -> expression_or .)
    AND             shift and go to state 78


state 53

    (86) expression_or -> expression_rel .
    (87) expression_or -> expression_rel . OR n_math_expression_10 expression_or n_math_expression_12

    AND             reduce using rule 86 (expression_or -> expression_rel .)
    RPARENTHESIS    reduce using rule 86 (expression_or -> expression_rel .)
    COMMA           reduce using rule 86 (expression_or -> expression_rel .)
    SEMICOLON       reduce using rule 86 (expression_or -> expression_rel .)
    DOUBLEDOT       reduce using rule 86 (expression_or -> expression_rel .)
    OR              shift and go to state 79


state 54

    (88) expression_rel -> exp .
    (89) expression_rel -> exp . relational_operator exp n_math_expression_9
    (54) relational_operator -> . GREATERTHAN n_math_expression_8
    (55) relational_operator -> . LESSTHAN n_math_expression_8
    (56) relational_operator -> . EQUALEQUAL n_math_expression_8
    (57) relational_operator -> . LESSTHANOREQUAL n_math_expression_8
    (58) relational_operator -> . GREATERTHANOREQUAL n_math_expression_8
    (59) relational_operator -> . NOTEQUAL n_math_expression_8

    OR              reduce using rule 88 (expression_rel -> exp .)
    AND             reduce using rule 88 (expression_rel -> exp .)
    RPARENTHESIS    reduce using rule 88 (expression_rel -> exp .)
    COMMA           reduce using rule 88 (expression_rel -> exp .)
    SEMICOLON       reduce using rule 88 (expression_rel -> exp .)
    DOUBLEDOT       reduce using rule 88 (expression_rel -> exp .)
    GREATERTHAN     shift and go to state 81
    LESSTHAN        shift and go to state 82
    EQUALEQUAL      shift and go to state 83
    LESSTHANOREQUAL shift and go to state 84
    GREATERTHANOREQUAL shift and go to state 85
    NOTEQUAL        shift and go to state 86

    relational_operator            shift and go to state 80

state 55

    (90) exp -> termino . n_math_expression_4
    (91) exp -> termino . n_math_expression_4 PLUS n_math_expression_2 exp
    (92) exp -> termino . n_math_expression_4 MINUS n_math_expression_2 exp
    (15) n_math_expression_4 -> .

    PLUS            reduce using rule 15 (n_math_expression_4 -> .)
    MINUS           reduce using rule 15 (n_math_expression_4 -> .)
    GREATERTHAN     reduce using rule 15 (n_math_expression_4 -> .)
    LESSTHAN        reduce using rule 15 (n_math_expression_4 -> .)
    EQUALEQUAL      reduce using rule 15 (n_math_expression_4 -> .)
    LESSTHANOREQUAL reduce using rule 15 (n_math_expression_4 -> .)
    GREATERTHANOREQUAL reduce using rule 15 (n_math_expression_4 -> .)
    NOTEQUAL        reduce using rule 15 (n_math_expression_4 -> .)
    OR              reduce using rule 15 (n_math_expression_4 -> .)
    AND             reduce using rule 15 (n_math_expression_4 -> .)
    RPARENTHESIS    reduce using rule 15 (n_math_expression_4 -> .)
    COMMA           reduce using rule 15 (n_math_expression_4 -> .)
    SEMICOLON       reduce using rule 15 (n_math_expression_4 -> .)
    DOUBLEDOT       reduce using rule 15 (n_math_expression_4 -> .)

    n_math_expression_4            shift and go to state 87

state 56

    (98) factor -> PLUS . value
    (101) value -> . function_call
    (102) value -> . literal
    (103) value -> . NAME n_variable_reference n_math_expression_1_name
    (75) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (76) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (60) literal -> . FLOAT n_math_expression_1_float
    (61) literal -> . INT n_math_expression_1_int
    (62) literal -> . STRING n_math_expression_1_string
    (63) literal -> . TRUE n_math_expression_1_bool
    (64) literal -> . FALSE n_math_expression_1_bool

    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67

    value                          shift and go to state 88
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 57

    (99) factor -> MINUS . value
    (101) value -> . function_call
    (102) value -> . literal
    (103) value -> . NAME n_variable_reference n_math_expression_1_name
    (75) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (76) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (60) literal -> . FLOAT n_math_expression_1_float
    (61) literal -> . INT n_math_expression_1_int
    (62) literal -> . STRING n_math_expression_1_string
    (63) literal -> . TRUE n_math_expression_1_bool
    (64) literal -> . FALSE n_math_expression_1_bool

    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67

    value                          shift and go to state 89
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 58

    (93) termino -> factor . n_math_expression_5
    (94) termino -> factor . n_math_expression_5 TIMES n_math_expression_3 termino
    (95) termino -> factor . n_math_expression_5 DIVIDE n_math_expression_3 termino
    (96) termino -> factor . n_math_expression_5 MODULUS n_math_expression_3 termino
    (16) n_math_expression_5 -> .

    TIMES           reduce using rule 16 (n_math_expression_5 -> .)
    DIVIDE          reduce using rule 16 (n_math_expression_5 -> .)
    MODULUS         reduce using rule 16 (n_math_expression_5 -> .)
    PLUS            reduce using rule 16 (n_math_expression_5 -> .)
    MINUS           reduce using rule 16 (n_math_expression_5 -> .)
    GREATERTHAN     reduce using rule 16 (n_math_expression_5 -> .)
    LESSTHAN        reduce using rule 16 (n_math_expression_5 -> .)
    EQUALEQUAL      reduce using rule 16 (n_math_expression_5 -> .)
    LESSTHANOREQUAL reduce using rule 16 (n_math_expression_5 -> .)
    GREATERTHANOREQUAL reduce using rule 16 (n_math_expression_5 -> .)
    NOTEQUAL        reduce using rule 16 (n_math_expression_5 -> .)
    OR              reduce using rule 16 (n_math_expression_5 -> .)
    AND             reduce using rule 16 (n_math_expression_5 -> .)
    RPARENTHESIS    reduce using rule 16 (n_math_expression_5 -> .)
    COMMA           reduce using rule 16 (n_math_expression_5 -> .)
    SEMICOLON       reduce using rule 16 (n_math_expression_5 -> .)
    DOUBLEDOT       reduce using rule 16 (n_math_expression_5 -> .)

    n_math_expression_5            shift and go to state 90

state 59

    (100) factor -> value .

    TIMES           reduce using rule 100 (factor -> value .)
    DIVIDE          reduce using rule 100 (factor -> value .)
    MODULUS         reduce using rule 100 (factor -> value .)
    PLUS            reduce using rule 100 (factor -> value .)
    MINUS           reduce using rule 100 (factor -> value .)
    GREATERTHAN     reduce using rule 100 (factor -> value .)
    LESSTHAN        reduce using rule 100 (factor -> value .)
    EQUALEQUAL      reduce using rule 100 (factor -> value .)
    LESSTHANOREQUAL reduce using rule 100 (factor -> value .)
    GREATERTHANOREQUAL reduce using rule 100 (factor -> value .)
    NOTEQUAL        reduce using rule 100 (factor -> value .)
    OR              reduce using rule 100 (factor -> value .)
    AND             reduce using rule 100 (factor -> value .)
    RPARENTHESIS    reduce using rule 100 (factor -> value .)
    COMMA           reduce using rule 100 (factor -> value .)
    SEMICOLON       reduce using rule 100 (factor -> value .)
    DOUBLEDOT       reduce using rule 100 (factor -> value .)


state 60

    (101) value -> function_call .

    TIMES           reduce using rule 101 (value -> function_call .)
    DIVIDE          reduce using rule 101 (value -> function_call .)
    MODULUS         reduce using rule 101 (value -> function_call .)
    PLUS            reduce using rule 101 (value -> function_call .)
    MINUS           reduce using rule 101 (value -> function_call .)
    GREATERTHAN     reduce using rule 101 (value -> function_call .)
    LESSTHAN        reduce using rule 101 (value -> function_call .)
    EQUALEQUAL      reduce using rule 101 (value -> function_call .)
    LESSTHANOREQUAL reduce using rule 101 (value -> function_call .)
    GREATERTHANOREQUAL reduce using rule 101 (value -> function_call .)
    NOTEQUAL        reduce using rule 101 (value -> function_call .)
    OR              reduce using rule 101 (value -> function_call .)
    AND             reduce using rule 101 (value -> function_call .)
    RPARENTHESIS    reduce using rule 101 (value -> function_call .)
    COMMA           reduce using rule 101 (value -> function_call .)
    SEMICOLON       reduce using rule 101 (value -> function_call .)
    DOUBLEDOT       reduce using rule 101 (value -> function_call .)


state 61

    (102) value -> literal .

    TIMES           reduce using rule 102 (value -> literal .)
    DIVIDE          reduce using rule 102 (value -> literal .)
    MODULUS         reduce using rule 102 (value -> literal .)
    PLUS            reduce using rule 102 (value -> literal .)
    MINUS           reduce using rule 102 (value -> literal .)
    GREATERTHAN     reduce using rule 102 (value -> literal .)
    LESSTHAN        reduce using rule 102 (value -> literal .)
    EQUALEQUAL      reduce using rule 102 (value -> literal .)
    LESSTHANOREQUAL reduce using rule 102 (value -> literal .)
    GREATERTHANOREQUAL reduce using rule 102 (value -> literal .)
    NOTEQUAL        reduce using rule 102 (value -> literal .)
    OR              reduce using rule 102 (value -> literal .)
    AND             reduce using rule 102 (value -> literal .)
    RPARENTHESIS    reduce using rule 102 (value -> literal .)
    COMMA           reduce using rule 102 (value -> literal .)
    SEMICOLON       reduce using rule 102 (value -> literal .)
    DOUBLEDOT       reduce using rule 102 (value -> literal .)


state 62

    (103) value -> NAME . n_variable_reference n_math_expression_1_name
    (75) function_call -> NAME . n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (76) function_call -> NAME . n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (5) n_variable_reference -> .
    (35) n_function_call_1 -> .

    TIMES           reduce using rule 5 (n_variable_reference -> .)
    DIVIDE          reduce using rule 5 (n_variable_reference -> .)
    MODULUS         reduce using rule 5 (n_variable_reference -> .)
    PLUS            reduce using rule 5 (n_variable_reference -> .)
    MINUS           reduce using rule 5 (n_variable_reference -> .)
    GREATERTHAN     reduce using rule 5 (n_variable_reference -> .)
    LESSTHAN        reduce using rule 5 (n_variable_reference -> .)
    EQUALEQUAL      reduce using rule 5 (n_variable_reference -> .)
    LESSTHANOREQUAL reduce using rule 5 (n_variable_reference -> .)
    GREATERTHANOREQUAL reduce using rule 5 (n_variable_reference -> .)
    NOTEQUAL        reduce using rule 5 (n_variable_reference -> .)
    OR              reduce using rule 5 (n_variable_reference -> .)
    AND             reduce using rule 5 (n_variable_reference -> .)
    RPARENTHESIS    reduce using rule 5 (n_variable_reference -> .)
    COMMA           reduce using rule 5 (n_variable_reference -> .)
    SEMICOLON       reduce using rule 5 (n_variable_reference -> .)
    DOUBLEDOT       reduce using rule 5 (n_variable_reference -> .)
    LPARENTHESIS    reduce using rule 35 (n_function_call_1 -> .)

    n_variable_reference           shift and go to state 91
    n_function_call_1              shift and go to state 36

state 63

    (60) literal -> FLOAT . n_math_expression_1_float
    (9) n_math_expression_1_float -> .

    TIMES           reduce using rule 9 (n_math_expression_1_float -> .)
    DIVIDE          reduce using rule 9 (n_math_expression_1_float -> .)
    MODULUS         reduce using rule 9 (n_math_expression_1_float -> .)
    PLUS            reduce using rule 9 (n_math_expression_1_float -> .)
    MINUS           reduce using rule 9 (n_math_expression_1_float -> .)
    GREATERTHAN     reduce using rule 9 (n_math_expression_1_float -> .)
    LESSTHAN        reduce using rule 9 (n_math_expression_1_float -> .)
    EQUALEQUAL      reduce using rule 9 (n_math_expression_1_float -> .)
    LESSTHANOREQUAL reduce using rule 9 (n_math_expression_1_float -> .)
    GREATERTHANOREQUAL reduce using rule 9 (n_math_expression_1_float -> .)
    NOTEQUAL        reduce using rule 9 (n_math_expression_1_float -> .)
    OR              reduce using rule 9 (n_math_expression_1_float -> .)
    AND             reduce using rule 9 (n_math_expression_1_float -> .)
    RPARENTHESIS    reduce using rule 9 (n_math_expression_1_float -> .)
    COMMA           reduce using rule 9 (n_math_expression_1_float -> .)
    SEMICOLON       reduce using rule 9 (n_math_expression_1_float -> .)
    DOUBLEDOT       reduce using rule 9 (n_math_expression_1_float -> .)

    n_math_expression_1_float      shift and go to state 92

state 64

    (61) literal -> INT . n_math_expression_1_int
    (8) n_math_expression_1_int -> .

    TIMES           reduce using rule 8 (n_math_expression_1_int -> .)
    DIVIDE          reduce using rule 8 (n_math_expression_1_int -> .)
    MODULUS         reduce using rule 8 (n_math_expression_1_int -> .)
    PLUS            reduce using rule 8 (n_math_expression_1_int -> .)
    MINUS           reduce using rule 8 (n_math_expression_1_int -> .)
    GREATERTHAN     reduce using rule 8 (n_math_expression_1_int -> .)
    LESSTHAN        reduce using rule 8 (n_math_expression_1_int -> .)
    EQUALEQUAL      reduce using rule 8 (n_math_expression_1_int -> .)
    LESSTHANOREQUAL reduce using rule 8 (n_math_expression_1_int -> .)
    GREATERTHANOREQUAL reduce using rule 8 (n_math_expression_1_int -> .)
    NOTEQUAL        reduce using rule 8 (n_math_expression_1_int -> .)
    OR              reduce using rule 8 (n_math_expression_1_int -> .)
    AND             reduce using rule 8 (n_math_expression_1_int -> .)
    RPARENTHESIS    reduce using rule 8 (n_math_expression_1_int -> .)
    COMMA           reduce using rule 8 (n_math_expression_1_int -> .)
    SEMICOLON       reduce using rule 8 (n_math_expression_1_int -> .)
    DOUBLEDOT       reduce using rule 8 (n_math_expression_1_int -> .)

    n_math_expression_1_int        shift and go to state 93

state 65

    (62) literal -> STRING . n_math_expression_1_string
    (10) n_math_expression_1_string -> .

    TIMES           reduce using rule 10 (n_math_expression_1_string -> .)
    DIVIDE          reduce using rule 10 (n_math_expression_1_string -> .)
    MODULUS         reduce using rule 10 (n_math_expression_1_string -> .)
    PLUS            reduce using rule 10 (n_math_expression_1_string -> .)
    MINUS           reduce using rule 10 (n_math_expression_1_string -> .)
    GREATERTHAN     reduce using rule 10 (n_math_expression_1_string -> .)
    LESSTHAN        reduce using rule 10 (n_math_expression_1_string -> .)
    EQUALEQUAL      reduce using rule 10 (n_math_expression_1_string -> .)
    LESSTHANOREQUAL reduce using rule 10 (n_math_expression_1_string -> .)
    GREATERTHANOREQUAL reduce using rule 10 (n_math_expression_1_string -> .)
    NOTEQUAL        reduce using rule 10 (n_math_expression_1_string -> .)
    OR              reduce using rule 10 (n_math_expression_1_string -> .)
    AND             reduce using rule 10 (n_math_expression_1_string -> .)
    RPARENTHESIS    reduce using rule 10 (n_math_expression_1_string -> .)
    COMMA           reduce using rule 10 (n_math_expression_1_string -> .)
    SEMICOLON       reduce using rule 10 (n_math_expression_1_string -> .)
    DOUBLEDOT       reduce using rule 10 (n_math_expression_1_string -> .)

    n_math_expression_1_string     shift and go to state 94

state 66

    (63) literal -> TRUE . n_math_expression_1_bool
    (11) n_math_expression_1_bool -> .

    TIMES           reduce using rule 11 (n_math_expression_1_bool -> .)
    DIVIDE          reduce using rule 11 (n_math_expression_1_bool -> .)
    MODULUS         reduce using rule 11 (n_math_expression_1_bool -> .)
    PLUS            reduce using rule 11 (n_math_expression_1_bool -> .)
    MINUS           reduce using rule 11 (n_math_expression_1_bool -> .)
    GREATERTHAN     reduce using rule 11 (n_math_expression_1_bool -> .)
    LESSTHAN        reduce using rule 11 (n_math_expression_1_bool -> .)
    EQUALEQUAL      reduce using rule 11 (n_math_expression_1_bool -> .)
    LESSTHANOREQUAL reduce using rule 11 (n_math_expression_1_bool -> .)
    GREATERTHANOREQUAL reduce using rule 11 (n_math_expression_1_bool -> .)
    NOTEQUAL        reduce using rule 11 (n_math_expression_1_bool -> .)
    OR              reduce using rule 11 (n_math_expression_1_bool -> .)
    AND             reduce using rule 11 (n_math_expression_1_bool -> .)
    RPARENTHESIS    reduce using rule 11 (n_math_expression_1_bool -> .)
    COMMA           reduce using rule 11 (n_math_expression_1_bool -> .)
    SEMICOLON       reduce using rule 11 (n_math_expression_1_bool -> .)
    DOUBLEDOT       reduce using rule 11 (n_math_expression_1_bool -> .)

    n_math_expression_1_bool       shift and go to state 95

state 67

    (64) literal -> FALSE . n_math_expression_1_bool
    (11) n_math_expression_1_bool -> .

    TIMES           reduce using rule 11 (n_math_expression_1_bool -> .)
    DIVIDE          reduce using rule 11 (n_math_expression_1_bool -> .)
    MODULUS         reduce using rule 11 (n_math_expression_1_bool -> .)
    PLUS            reduce using rule 11 (n_math_expression_1_bool -> .)
    MINUS           reduce using rule 11 (n_math_expression_1_bool -> .)
    GREATERTHAN     reduce using rule 11 (n_math_expression_1_bool -> .)
    LESSTHAN        reduce using rule 11 (n_math_expression_1_bool -> .)
    EQUALEQUAL      reduce using rule 11 (n_math_expression_1_bool -> .)
    LESSTHANOREQUAL reduce using rule 11 (n_math_expression_1_bool -> .)
    GREATERTHANOREQUAL reduce using rule 11 (n_math_expression_1_bool -> .)
    NOTEQUAL        reduce using rule 11 (n_math_expression_1_bool -> .)
    OR              reduce using rule 11 (n_math_expression_1_bool -> .)
    AND             reduce using rule 11 (n_math_expression_1_bool -> .)
    RPARENTHESIS    reduce using rule 11 (n_math_expression_1_bool -> .)
    COMMA           reduce using rule 11 (n_math_expression_1_bool -> .)
    SEMICOLON       reduce using rule 11 (n_math_expression_1_bool -> .)
    DOUBLEDOT       reduce using rule 11 (n_math_expression_1_bool -> .)

    n_math_expression_1_bool       shift and go to state 96

state 68

    (122) forloop -> FOR LPARENTHESIS n_open_new_scope . assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (105) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (106) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (49) type -> . INT_TYPE n_seen_type
    (50) type -> . STRING_TYPE n_seen_type
    (51) type -> . DOUBLE_TYPE n_seen_type
    (52) type -> . FLOAT_TYPE n_seen_type
    (53) type -> . BOOL_TYPE n_seen_type

    NAME            shift and go to state 99
    INT_TYPE        shift and go to state 26
    STRING_TYPE     shift and go to state 27
    DOUBLE_TYPE     shift and go to state 28
    FLOAT_TYPE      shift and go to state 29
    BOOL_TYPE       shift and go to state 30

    assign                         shift and go to state 97
    type                           shift and go to state 98

state 69

    (121) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS . expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (84) expression -> . expression_or
    (85) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (86) expression_or -> . expression_rel
    (87) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (88) expression_rel -> . exp
    (89) expression_rel -> . exp relational_operator exp n_math_expression_9
    (90) exp -> . termino n_math_expression_4
    (91) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (92) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (93) termino -> . factor n_math_expression_5
    (94) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (95) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (96) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (97) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (98) factor -> . PLUS value
    (99) factor -> . MINUS value
    (100) factor -> . value
    (101) value -> . function_call
    (102) value -> . literal
    (103) value -> . NAME n_variable_reference n_math_expression_1_name
    (75) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (76) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (60) literal -> . FLOAT n_math_expression_1_float
    (61) literal -> . INT n_math_expression_1_int
    (62) literal -> . STRING n_math_expression_1_string
    (63) literal -> . TRUE n_math_expression_1_bool
    (64) literal -> . FALSE n_math_expression_1_bool

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67

    expression                     shift and go to state 100
    expression_or                  shift and go to state 52
    expression_rel                 shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 55
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 70

    (105) assign -> type NAME n_variable_instantiate . n_math_expression_1_name EQUAL n_seen_equal_op expression
    (104) declare -> type NAME n_variable_instantiate .
    (12) n_math_expression_1_name -> .

    SEMICOLON       reduce using rule 104 (declare -> type NAME n_variable_instantiate .)
    EQUAL           reduce using rule 12 (n_math_expression_1_name -> .)

    n_math_expression_1_name       shift and go to state 101

state 71

    (107) print -> PRINT LPARENTHESIS expression . n_print RPARENTHESIS
    (43) n_print -> .

    RPARENTHESIS    reduce using rule 43 (n_print -> .)

    n_print                        shift and go to state 102

state 72

    (71) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function . parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end
    (79) parameter_list -> . empty
    (80) parameter_list -> . parameter
    (81) parameter_list -> . parameter COMMA parameter_list
    (45) empty -> .
    (83) parameter -> . type NAME n_variable_instantiate_param
    (49) type -> . INT_TYPE n_seen_type
    (50) type -> . STRING_TYPE n_seen_type
    (51) type -> . DOUBLE_TYPE n_seen_type
    (52) type -> . FLOAT_TYPE n_seen_type
    (53) type -> . BOOL_TYPE n_seen_type

    DOUBLEDOT       reduce using rule 45 (empty -> .)
    INT_TYPE        shift and go to state 26
    STRING_TYPE     shift and go to state 27
    DOUBLE_TYPE     shift and go to state 28
    FLOAT_TYPE      shift and go to state 29
    BOOL_TYPE       shift and go to state 30

    parameter_list                 shift and go to state 103
    empty                          shift and go to state 104
    parameter                      shift and go to state 105
    type                           shift and go to state 106

state 73

    (106) assign -> NAME n_variable_reference n_math_expression_1_name EQUAL . n_seen_equal_op expression
    (30) n_seen_equal_op -> .

    LPARENTHESIS    reduce using rule 30 (n_seen_equal_op -> .)
    PLUS            reduce using rule 30 (n_seen_equal_op -> .)
    MINUS           reduce using rule 30 (n_seen_equal_op -> .)
    NAME            reduce using rule 30 (n_seen_equal_op -> .)
    FLOAT           reduce using rule 30 (n_seen_equal_op -> .)
    INT             reduce using rule 30 (n_seen_equal_op -> .)
    STRING          reduce using rule 30 (n_seen_equal_op -> .)
    TRUE            reduce using rule 30 (n_seen_equal_op -> .)
    FALSE           reduce using rule 30 (n_seen_equal_op -> .)

    n_seen_equal_op                shift and go to state 107

state 74

    (75) function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 . arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (77) arg_list -> . arg
    (78) arg_list -> . arg COMMA n_function_call_4 arg_list
    (82) arg -> . expression n_function_call_3
    (84) expression -> . expression_or
    (85) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (86) expression_or -> . expression_rel
    (87) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (88) expression_rel -> . exp
    (89) expression_rel -> . exp relational_operator exp n_math_expression_9
    (90) exp -> . termino n_math_expression_4
    (91) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (92) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (93) termino -> . factor n_math_expression_5
    (94) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (95) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (96) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (97) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (98) factor -> . PLUS value
    (99) factor -> . MINUS value
    (100) factor -> . value
    (101) value -> . function_call
    (102) value -> . literal
    (103) value -> . NAME n_variable_reference n_math_expression_1_name
    (75) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (76) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (60) literal -> . FLOAT n_math_expression_1_float
    (61) literal -> . INT n_math_expression_1_int
    (62) literal -> . STRING n_math_expression_1_string
    (63) literal -> . TRUE n_math_expression_1_bool
    (64) literal -> . FALSE n_math_expression_1_bool

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67

    arg_list                       shift and go to state 108
    arg                            shift and go to state 109
    expression                     shift and go to state 110
    expression_or                  shift and go to state 52
    expression_rel                 shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 55
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 75

    (76) function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS . n_function_call_6
    (40) n_function_call_6 -> .

    SEMICOLON       reduce using rule 40 (n_function_call_6 -> .)
    TIMES           reduce using rule 40 (n_function_call_6 -> .)
    DIVIDE          reduce using rule 40 (n_function_call_6 -> .)
    MODULUS         reduce using rule 40 (n_function_call_6 -> .)
    PLUS            reduce using rule 40 (n_function_call_6 -> .)
    MINUS           reduce using rule 40 (n_function_call_6 -> .)
    GREATERTHAN     reduce using rule 40 (n_function_call_6 -> .)
    LESSTHAN        reduce using rule 40 (n_function_call_6 -> .)
    EQUALEQUAL      reduce using rule 40 (n_function_call_6 -> .)
    LESSTHANOREQUAL reduce using rule 40 (n_function_call_6 -> .)
    GREATERTHANOREQUAL reduce using rule 40 (n_function_call_6 -> .)
    NOTEQUAL        reduce using rule 40 (n_function_call_6 -> .)
    OR              reduce using rule 40 (n_function_call_6 -> .)
    AND             reduce using rule 40 (n_function_call_6 -> .)
    RPARENTHESIS    reduce using rule 40 (n_function_call_6 -> .)
    COMMA           reduce using rule 40 (n_function_call_6 -> .)
    DOUBLEDOT       reduce using rule 40 (n_function_call_6 -> .)

    n_function_call_6              shift and go to state 111

state 76

    (97) factor -> LPARENTHESIS n_math_expression_6 . expression RPARENTHESIS n_math_expression_7
    (84) expression -> . expression_or
    (85) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (86) expression_or -> . expression_rel
    (87) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (88) expression_rel -> . exp
    (89) expression_rel -> . exp relational_operator exp n_math_expression_9
    (90) exp -> . termino n_math_expression_4
    (91) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (92) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (93) termino -> . factor n_math_expression_5
    (94) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (95) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (96) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (97) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (98) factor -> . PLUS value
    (99) factor -> . MINUS value
    (100) factor -> . value
    (101) value -> . function_call
    (102) value -> . literal
    (103) value -> . NAME n_variable_reference n_math_expression_1_name
    (75) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (76) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (60) literal -> . FLOAT n_math_expression_1_float
    (61) literal -> . INT n_math_expression_1_int
    (62) literal -> . STRING n_math_expression_1_string
    (63) literal -> . TRUE n_math_expression_1_bool
    (64) literal -> . FALSE n_math_expression_1_bool

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67

    expression                     shift and go to state 112
    expression_or                  shift and go to state 52
    expression_rel                 shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 55
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 77

    (123) condition_if -> IF LPARENTHESIS expression RPARENTHESIS . LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2

    LCURLY          shift and go to state 113


state 78

    (85) expression -> expression_or AND . n_math_expression_10 expression n_math_expression_11
    (21) n_math_expression_10 -> .

    LPARENTHESIS    reduce using rule 21 (n_math_expression_10 -> .)
    PLUS            reduce using rule 21 (n_math_expression_10 -> .)
    MINUS           reduce using rule 21 (n_math_expression_10 -> .)
    NAME            reduce using rule 21 (n_math_expression_10 -> .)
    FLOAT           reduce using rule 21 (n_math_expression_10 -> .)
    INT             reduce using rule 21 (n_math_expression_10 -> .)
    STRING          reduce using rule 21 (n_math_expression_10 -> .)
    TRUE            reduce using rule 21 (n_math_expression_10 -> .)
    FALSE           reduce using rule 21 (n_math_expression_10 -> .)

    n_math_expression_10           shift and go to state 114

state 79

    (87) expression_or -> expression_rel OR . n_math_expression_10 expression_or n_math_expression_12
    (21) n_math_expression_10 -> .

    LPARENTHESIS    reduce using rule 21 (n_math_expression_10 -> .)
    PLUS            reduce using rule 21 (n_math_expression_10 -> .)
    MINUS           reduce using rule 21 (n_math_expression_10 -> .)
    NAME            reduce using rule 21 (n_math_expression_10 -> .)
    FLOAT           reduce using rule 21 (n_math_expression_10 -> .)
    INT             reduce using rule 21 (n_math_expression_10 -> .)
    STRING          reduce using rule 21 (n_math_expression_10 -> .)
    TRUE            reduce using rule 21 (n_math_expression_10 -> .)
    FALSE           reduce using rule 21 (n_math_expression_10 -> .)

    n_math_expression_10           shift and go to state 115

state 80

    (89) expression_rel -> exp relational_operator . exp n_math_expression_9
    (90) exp -> . termino n_math_expression_4
    (91) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (92) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (93) termino -> . factor n_math_expression_5
    (94) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (95) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (96) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (97) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (98) factor -> . PLUS value
    (99) factor -> . MINUS value
    (100) factor -> . value
    (101) value -> . function_call
    (102) value -> . literal
    (103) value -> . NAME n_variable_reference n_math_expression_1_name
    (75) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (76) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (60) literal -> . FLOAT n_math_expression_1_float
    (61) literal -> . INT n_math_expression_1_int
    (62) literal -> . STRING n_math_expression_1_string
    (63) literal -> . TRUE n_math_expression_1_bool
    (64) literal -> . FALSE n_math_expression_1_bool

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67

    exp                            shift and go to state 116
    termino                        shift and go to state 55
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 81

    (54) relational_operator -> GREATERTHAN . n_math_expression_8
    (19) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 19 (n_math_expression_8 -> .)
    PLUS            reduce using rule 19 (n_math_expression_8 -> .)
    MINUS           reduce using rule 19 (n_math_expression_8 -> .)
    NAME            reduce using rule 19 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 19 (n_math_expression_8 -> .)
    INT             reduce using rule 19 (n_math_expression_8 -> .)
    STRING          reduce using rule 19 (n_math_expression_8 -> .)
    TRUE            reduce using rule 19 (n_math_expression_8 -> .)
    FALSE           reduce using rule 19 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 117

state 82

    (55) relational_operator -> LESSTHAN . n_math_expression_8
    (19) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 19 (n_math_expression_8 -> .)
    PLUS            reduce using rule 19 (n_math_expression_8 -> .)
    MINUS           reduce using rule 19 (n_math_expression_8 -> .)
    NAME            reduce using rule 19 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 19 (n_math_expression_8 -> .)
    INT             reduce using rule 19 (n_math_expression_8 -> .)
    STRING          reduce using rule 19 (n_math_expression_8 -> .)
    TRUE            reduce using rule 19 (n_math_expression_8 -> .)
    FALSE           reduce using rule 19 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 118

state 83

    (56) relational_operator -> EQUALEQUAL . n_math_expression_8
    (19) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 19 (n_math_expression_8 -> .)
    PLUS            reduce using rule 19 (n_math_expression_8 -> .)
    MINUS           reduce using rule 19 (n_math_expression_8 -> .)
    NAME            reduce using rule 19 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 19 (n_math_expression_8 -> .)
    INT             reduce using rule 19 (n_math_expression_8 -> .)
    STRING          reduce using rule 19 (n_math_expression_8 -> .)
    TRUE            reduce using rule 19 (n_math_expression_8 -> .)
    FALSE           reduce using rule 19 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 119

state 84

    (57) relational_operator -> LESSTHANOREQUAL . n_math_expression_8
    (19) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 19 (n_math_expression_8 -> .)
    PLUS            reduce using rule 19 (n_math_expression_8 -> .)
    MINUS           reduce using rule 19 (n_math_expression_8 -> .)
    NAME            reduce using rule 19 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 19 (n_math_expression_8 -> .)
    INT             reduce using rule 19 (n_math_expression_8 -> .)
    STRING          reduce using rule 19 (n_math_expression_8 -> .)
    TRUE            reduce using rule 19 (n_math_expression_8 -> .)
    FALSE           reduce using rule 19 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 120

state 85

    (58) relational_operator -> GREATERTHANOREQUAL . n_math_expression_8
    (19) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 19 (n_math_expression_8 -> .)
    PLUS            reduce using rule 19 (n_math_expression_8 -> .)
    MINUS           reduce using rule 19 (n_math_expression_8 -> .)
    NAME            reduce using rule 19 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 19 (n_math_expression_8 -> .)
    INT             reduce using rule 19 (n_math_expression_8 -> .)
    STRING          reduce using rule 19 (n_math_expression_8 -> .)
    TRUE            reduce using rule 19 (n_math_expression_8 -> .)
    FALSE           reduce using rule 19 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 121

state 86

    (59) relational_operator -> NOTEQUAL . n_math_expression_8
    (19) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 19 (n_math_expression_8 -> .)
    PLUS            reduce using rule 19 (n_math_expression_8 -> .)
    MINUS           reduce using rule 19 (n_math_expression_8 -> .)
    NAME            reduce using rule 19 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 19 (n_math_expression_8 -> .)
    INT             reduce using rule 19 (n_math_expression_8 -> .)
    STRING          reduce using rule 19 (n_math_expression_8 -> .)
    TRUE            reduce using rule 19 (n_math_expression_8 -> .)
    FALSE           reduce using rule 19 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 122

state 87

    (90) exp -> termino n_math_expression_4 .
    (91) exp -> termino n_math_expression_4 . PLUS n_math_expression_2 exp
    (92) exp -> termino n_math_expression_4 . MINUS n_math_expression_2 exp

    GREATERTHAN     reduce using rule 90 (exp -> termino n_math_expression_4 .)
    LESSTHAN        reduce using rule 90 (exp -> termino n_math_expression_4 .)
    EQUALEQUAL      reduce using rule 90 (exp -> termino n_math_expression_4 .)
    LESSTHANOREQUAL reduce using rule 90 (exp -> termino n_math_expression_4 .)
    GREATERTHANOREQUAL reduce using rule 90 (exp -> termino n_math_expression_4 .)
    NOTEQUAL        reduce using rule 90 (exp -> termino n_math_expression_4 .)
    OR              reduce using rule 90 (exp -> termino n_math_expression_4 .)
    AND             reduce using rule 90 (exp -> termino n_math_expression_4 .)
    RPARENTHESIS    reduce using rule 90 (exp -> termino n_math_expression_4 .)
    COMMA           reduce using rule 90 (exp -> termino n_math_expression_4 .)
    SEMICOLON       reduce using rule 90 (exp -> termino n_math_expression_4 .)
    DOUBLEDOT       reduce using rule 90 (exp -> termino n_math_expression_4 .)
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124


state 88

    (98) factor -> PLUS value .

    TIMES           reduce using rule 98 (factor -> PLUS value .)
    DIVIDE          reduce using rule 98 (factor -> PLUS value .)
    MODULUS         reduce using rule 98 (factor -> PLUS value .)
    PLUS            reduce using rule 98 (factor -> PLUS value .)
    MINUS           reduce using rule 98 (factor -> PLUS value .)
    GREATERTHAN     reduce using rule 98 (factor -> PLUS value .)
    LESSTHAN        reduce using rule 98 (factor -> PLUS value .)
    EQUALEQUAL      reduce using rule 98 (factor -> PLUS value .)
    LESSTHANOREQUAL reduce using rule 98 (factor -> PLUS value .)
    GREATERTHANOREQUAL reduce using rule 98 (factor -> PLUS value .)
    NOTEQUAL        reduce using rule 98 (factor -> PLUS value .)
    OR              reduce using rule 98 (factor -> PLUS value .)
    AND             reduce using rule 98 (factor -> PLUS value .)
    RPARENTHESIS    reduce using rule 98 (factor -> PLUS value .)
    COMMA           reduce using rule 98 (factor -> PLUS value .)
    SEMICOLON       reduce using rule 98 (factor -> PLUS value .)
    DOUBLEDOT       reduce using rule 98 (factor -> PLUS value .)


state 89

    (99) factor -> MINUS value .

    TIMES           reduce using rule 99 (factor -> MINUS value .)
    DIVIDE          reduce using rule 99 (factor -> MINUS value .)
    MODULUS         reduce using rule 99 (factor -> MINUS value .)
    PLUS            reduce using rule 99 (factor -> MINUS value .)
    MINUS           reduce using rule 99 (factor -> MINUS value .)
    GREATERTHAN     reduce using rule 99 (factor -> MINUS value .)
    LESSTHAN        reduce using rule 99 (factor -> MINUS value .)
    EQUALEQUAL      reduce using rule 99 (factor -> MINUS value .)
    LESSTHANOREQUAL reduce using rule 99 (factor -> MINUS value .)
    GREATERTHANOREQUAL reduce using rule 99 (factor -> MINUS value .)
    NOTEQUAL        reduce using rule 99 (factor -> MINUS value .)
    OR              reduce using rule 99 (factor -> MINUS value .)
    AND             reduce using rule 99 (factor -> MINUS value .)
    RPARENTHESIS    reduce using rule 99 (factor -> MINUS value .)
    COMMA           reduce using rule 99 (factor -> MINUS value .)
    SEMICOLON       reduce using rule 99 (factor -> MINUS value .)
    DOUBLEDOT       reduce using rule 99 (factor -> MINUS value .)


state 90

    (93) termino -> factor n_math_expression_5 .
    (94) termino -> factor n_math_expression_5 . TIMES n_math_expression_3 termino
    (95) termino -> factor n_math_expression_5 . DIVIDE n_math_expression_3 termino
    (96) termino -> factor n_math_expression_5 . MODULUS n_math_expression_3 termino

    PLUS            reduce using rule 93 (termino -> factor n_math_expression_5 .)
    MINUS           reduce using rule 93 (termino -> factor n_math_expression_5 .)
    GREATERTHAN     reduce using rule 93 (termino -> factor n_math_expression_5 .)
    LESSTHAN        reduce using rule 93 (termino -> factor n_math_expression_5 .)
    EQUALEQUAL      reduce using rule 93 (termino -> factor n_math_expression_5 .)
    LESSTHANOREQUAL reduce using rule 93 (termino -> factor n_math_expression_5 .)
    GREATERTHANOREQUAL reduce using rule 93 (termino -> factor n_math_expression_5 .)
    NOTEQUAL        reduce using rule 93 (termino -> factor n_math_expression_5 .)
    OR              reduce using rule 93 (termino -> factor n_math_expression_5 .)
    AND             reduce using rule 93 (termino -> factor n_math_expression_5 .)
    RPARENTHESIS    reduce using rule 93 (termino -> factor n_math_expression_5 .)
    COMMA           reduce using rule 93 (termino -> factor n_math_expression_5 .)
    SEMICOLON       reduce using rule 93 (termino -> factor n_math_expression_5 .)
    DOUBLEDOT       reduce using rule 93 (termino -> factor n_math_expression_5 .)
    TIMES           shift and go to state 125
    DIVIDE          shift and go to state 126
    MODULUS         shift and go to state 127


state 91

    (103) value -> NAME n_variable_reference . n_math_expression_1_name
    (12) n_math_expression_1_name -> .

    TIMES           reduce using rule 12 (n_math_expression_1_name -> .)
    DIVIDE          reduce using rule 12 (n_math_expression_1_name -> .)
    MODULUS         reduce using rule 12 (n_math_expression_1_name -> .)
    PLUS            reduce using rule 12 (n_math_expression_1_name -> .)
    MINUS           reduce using rule 12 (n_math_expression_1_name -> .)
    GREATERTHAN     reduce using rule 12 (n_math_expression_1_name -> .)
    LESSTHAN        reduce using rule 12 (n_math_expression_1_name -> .)
    EQUALEQUAL      reduce using rule 12 (n_math_expression_1_name -> .)
    LESSTHANOREQUAL reduce using rule 12 (n_math_expression_1_name -> .)
    GREATERTHANOREQUAL reduce using rule 12 (n_math_expression_1_name -> .)
    NOTEQUAL        reduce using rule 12 (n_math_expression_1_name -> .)
    OR              reduce using rule 12 (n_math_expression_1_name -> .)
    AND             reduce using rule 12 (n_math_expression_1_name -> .)
    RPARENTHESIS    reduce using rule 12 (n_math_expression_1_name -> .)
    COMMA           reduce using rule 12 (n_math_expression_1_name -> .)
    SEMICOLON       reduce using rule 12 (n_math_expression_1_name -> .)
    DOUBLEDOT       reduce using rule 12 (n_math_expression_1_name -> .)

    n_math_expression_1_name       shift and go to state 128

state 92

    (60) literal -> FLOAT n_math_expression_1_float .

    TIMES           reduce using rule 60 (literal -> FLOAT n_math_expression_1_float .)
    DIVIDE          reduce using rule 60 (literal -> FLOAT n_math_expression_1_float .)
    MODULUS         reduce using rule 60 (literal -> FLOAT n_math_expression_1_float .)
    PLUS            reduce using rule 60 (literal -> FLOAT n_math_expression_1_float .)
    MINUS           reduce using rule 60 (literal -> FLOAT n_math_expression_1_float .)
    GREATERTHAN     reduce using rule 60 (literal -> FLOAT n_math_expression_1_float .)
    LESSTHAN        reduce using rule 60 (literal -> FLOAT n_math_expression_1_float .)
    EQUALEQUAL      reduce using rule 60 (literal -> FLOAT n_math_expression_1_float .)
    LESSTHANOREQUAL reduce using rule 60 (literal -> FLOAT n_math_expression_1_float .)
    GREATERTHANOREQUAL reduce using rule 60 (literal -> FLOAT n_math_expression_1_float .)
    NOTEQUAL        reduce using rule 60 (literal -> FLOAT n_math_expression_1_float .)
    OR              reduce using rule 60 (literal -> FLOAT n_math_expression_1_float .)
    AND             reduce using rule 60 (literal -> FLOAT n_math_expression_1_float .)
    RPARENTHESIS    reduce using rule 60 (literal -> FLOAT n_math_expression_1_float .)
    COMMA           reduce using rule 60 (literal -> FLOAT n_math_expression_1_float .)
    SEMICOLON       reduce using rule 60 (literal -> FLOAT n_math_expression_1_float .)
    DOUBLEDOT       reduce using rule 60 (literal -> FLOAT n_math_expression_1_float .)


state 93

    (61) literal -> INT n_math_expression_1_int .

    TIMES           reduce using rule 61 (literal -> INT n_math_expression_1_int .)
    DIVIDE          reduce using rule 61 (literal -> INT n_math_expression_1_int .)
    MODULUS         reduce using rule 61 (literal -> INT n_math_expression_1_int .)
    PLUS            reduce using rule 61 (literal -> INT n_math_expression_1_int .)
    MINUS           reduce using rule 61 (literal -> INT n_math_expression_1_int .)
    GREATERTHAN     reduce using rule 61 (literal -> INT n_math_expression_1_int .)
    LESSTHAN        reduce using rule 61 (literal -> INT n_math_expression_1_int .)
    EQUALEQUAL      reduce using rule 61 (literal -> INT n_math_expression_1_int .)
    LESSTHANOREQUAL reduce using rule 61 (literal -> INT n_math_expression_1_int .)
    GREATERTHANOREQUAL reduce using rule 61 (literal -> INT n_math_expression_1_int .)
    NOTEQUAL        reduce using rule 61 (literal -> INT n_math_expression_1_int .)
    OR              reduce using rule 61 (literal -> INT n_math_expression_1_int .)
    AND             reduce using rule 61 (literal -> INT n_math_expression_1_int .)
    RPARENTHESIS    reduce using rule 61 (literal -> INT n_math_expression_1_int .)
    COMMA           reduce using rule 61 (literal -> INT n_math_expression_1_int .)
    SEMICOLON       reduce using rule 61 (literal -> INT n_math_expression_1_int .)
    DOUBLEDOT       reduce using rule 61 (literal -> INT n_math_expression_1_int .)


state 94

    (62) literal -> STRING n_math_expression_1_string .

    TIMES           reduce using rule 62 (literal -> STRING n_math_expression_1_string .)
    DIVIDE          reduce using rule 62 (literal -> STRING n_math_expression_1_string .)
    MODULUS         reduce using rule 62 (literal -> STRING n_math_expression_1_string .)
    PLUS            reduce using rule 62 (literal -> STRING n_math_expression_1_string .)
    MINUS           reduce using rule 62 (literal -> STRING n_math_expression_1_string .)
    GREATERTHAN     reduce using rule 62 (literal -> STRING n_math_expression_1_string .)
    LESSTHAN        reduce using rule 62 (literal -> STRING n_math_expression_1_string .)
    EQUALEQUAL      reduce using rule 62 (literal -> STRING n_math_expression_1_string .)
    LESSTHANOREQUAL reduce using rule 62 (literal -> STRING n_math_expression_1_string .)
    GREATERTHANOREQUAL reduce using rule 62 (literal -> STRING n_math_expression_1_string .)
    NOTEQUAL        reduce using rule 62 (literal -> STRING n_math_expression_1_string .)
    OR              reduce using rule 62 (literal -> STRING n_math_expression_1_string .)
    AND             reduce using rule 62 (literal -> STRING n_math_expression_1_string .)
    RPARENTHESIS    reduce using rule 62 (literal -> STRING n_math_expression_1_string .)
    COMMA           reduce using rule 62 (literal -> STRING n_math_expression_1_string .)
    SEMICOLON       reduce using rule 62 (literal -> STRING n_math_expression_1_string .)
    DOUBLEDOT       reduce using rule 62 (literal -> STRING n_math_expression_1_string .)


state 95

    (63) literal -> TRUE n_math_expression_1_bool .

    TIMES           reduce using rule 63 (literal -> TRUE n_math_expression_1_bool .)
    DIVIDE          reduce using rule 63 (literal -> TRUE n_math_expression_1_bool .)
    MODULUS         reduce using rule 63 (literal -> TRUE n_math_expression_1_bool .)
    PLUS            reduce using rule 63 (literal -> TRUE n_math_expression_1_bool .)
    MINUS           reduce using rule 63 (literal -> TRUE n_math_expression_1_bool .)
    GREATERTHAN     reduce using rule 63 (literal -> TRUE n_math_expression_1_bool .)
    LESSTHAN        reduce using rule 63 (literal -> TRUE n_math_expression_1_bool .)
    EQUALEQUAL      reduce using rule 63 (literal -> TRUE n_math_expression_1_bool .)
    LESSTHANOREQUAL reduce using rule 63 (literal -> TRUE n_math_expression_1_bool .)
    GREATERTHANOREQUAL reduce using rule 63 (literal -> TRUE n_math_expression_1_bool .)
    NOTEQUAL        reduce using rule 63 (literal -> TRUE n_math_expression_1_bool .)
    OR              reduce using rule 63 (literal -> TRUE n_math_expression_1_bool .)
    AND             reduce using rule 63 (literal -> TRUE n_math_expression_1_bool .)
    RPARENTHESIS    reduce using rule 63 (literal -> TRUE n_math_expression_1_bool .)
    COMMA           reduce using rule 63 (literal -> TRUE n_math_expression_1_bool .)
    SEMICOLON       reduce using rule 63 (literal -> TRUE n_math_expression_1_bool .)
    DOUBLEDOT       reduce using rule 63 (literal -> TRUE n_math_expression_1_bool .)


state 96

    (64) literal -> FALSE n_math_expression_1_bool .

    TIMES           reduce using rule 64 (literal -> FALSE n_math_expression_1_bool .)
    DIVIDE          reduce using rule 64 (literal -> FALSE n_math_expression_1_bool .)
    MODULUS         reduce using rule 64 (literal -> FALSE n_math_expression_1_bool .)
    PLUS            reduce using rule 64 (literal -> FALSE n_math_expression_1_bool .)
    MINUS           reduce using rule 64 (literal -> FALSE n_math_expression_1_bool .)
    GREATERTHAN     reduce using rule 64 (literal -> FALSE n_math_expression_1_bool .)
    LESSTHAN        reduce using rule 64 (literal -> FALSE n_math_expression_1_bool .)
    EQUALEQUAL      reduce using rule 64 (literal -> FALSE n_math_expression_1_bool .)
    LESSTHANOREQUAL reduce using rule 64 (literal -> FALSE n_math_expression_1_bool .)
    GREATERTHANOREQUAL reduce using rule 64 (literal -> FALSE n_math_expression_1_bool .)
    NOTEQUAL        reduce using rule 64 (literal -> FALSE n_math_expression_1_bool .)
    OR              reduce using rule 64 (literal -> FALSE n_math_expression_1_bool .)
    AND             reduce using rule 64 (literal -> FALSE n_math_expression_1_bool .)
    RPARENTHESIS    reduce using rule 64 (literal -> FALSE n_math_expression_1_bool .)
    COMMA           reduce using rule 64 (literal -> FALSE n_math_expression_1_bool .)
    SEMICOLON       reduce using rule 64 (literal -> FALSE n_math_expression_1_bool .)
    DOUBLEDOT       reduce using rule 64 (literal -> FALSE n_math_expression_1_bool .)


state 97

    (122) forloop -> FOR LPARENTHESIS n_open_new_scope assign . DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope

    DOUBLEDOT       shift and go to state 129


state 98

    (105) assign -> type . NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression

    NAME            shift and go to state 130


state 99

    (106) assign -> NAME . n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (5) n_variable_reference -> .

    EQUAL           reduce using rule 5 (n_variable_reference -> .)

    n_variable_reference           shift and go to state 35

state 100

    (121) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression . RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope

    RPARENTHESIS    shift and go to state 131


state 101

    (105) assign -> type NAME n_variable_instantiate n_math_expression_1_name . EQUAL n_seen_equal_op expression

    EQUAL           shift and go to state 132


state 102

    (107) print -> PRINT LPARENTHESIS expression n_print . RPARENTHESIS

    RPARENTHESIS    shift and go to state 133


state 103

    (71) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list . DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end

    DOUBLEDOT       shift and go to state 134


state 104

    (79) parameter_list -> empty .

    DOUBLEDOT       reduce using rule 79 (parameter_list -> empty .)


state 105

    (80) parameter_list -> parameter .
    (81) parameter_list -> parameter . COMMA parameter_list

    DOUBLEDOT       reduce using rule 80 (parameter_list -> parameter .)
    COMMA           shift and go to state 135


state 106

    (83) parameter -> type . NAME n_variable_instantiate_param

    NAME            shift and go to state 136


state 107

    (106) assign -> NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op . expression
    (84) expression -> . expression_or
    (85) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (86) expression_or -> . expression_rel
    (87) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (88) expression_rel -> . exp
    (89) expression_rel -> . exp relational_operator exp n_math_expression_9
    (90) exp -> . termino n_math_expression_4
    (91) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (92) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (93) termino -> . factor n_math_expression_5
    (94) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (95) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (96) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (97) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (98) factor -> . PLUS value
    (99) factor -> . MINUS value
    (100) factor -> . value
    (101) value -> . function_call
    (102) value -> . literal
    (103) value -> . NAME n_variable_reference n_math_expression_1_name
    (75) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (76) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (60) literal -> . FLOAT n_math_expression_1_float
    (61) literal -> . INT n_math_expression_1_int
    (62) literal -> . STRING n_math_expression_1_string
    (63) literal -> . TRUE n_math_expression_1_bool
    (64) literal -> . FALSE n_math_expression_1_bool

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67

    expression                     shift and go to state 137
    expression_or                  shift and go to state 52
    expression_rel                 shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 55
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 108

    (75) function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list . RPARENTHESIS n_function_call_5 n_function_call_6

    RPARENTHESIS    shift and go to state 138


state 109

    (77) arg_list -> arg .
    (78) arg_list -> arg . COMMA n_function_call_4 arg_list

    RPARENTHESIS    reduce using rule 77 (arg_list -> arg .)
    COMMA           shift and go to state 139


state 110

    (82) arg -> expression . n_function_call_3
    (37) n_function_call_3 -> .

    COMMA           reduce using rule 37 (n_function_call_3 -> .)
    RPARENTHESIS    reduce using rule 37 (n_function_call_3 -> .)

    n_function_call_3              shift and go to state 140

state 111

    (76) function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .

    SEMICOLON       reduce using rule 76 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    TIMES           reduce using rule 76 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    DIVIDE          reduce using rule 76 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    MODULUS         reduce using rule 76 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    PLUS            reduce using rule 76 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    MINUS           reduce using rule 76 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    GREATERTHAN     reduce using rule 76 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    LESSTHAN        reduce using rule 76 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    EQUALEQUAL      reduce using rule 76 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    LESSTHANOREQUAL reduce using rule 76 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    GREATERTHANOREQUAL reduce using rule 76 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    NOTEQUAL        reduce using rule 76 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    OR              reduce using rule 76 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    AND             reduce using rule 76 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    RPARENTHESIS    reduce using rule 76 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    COMMA           reduce using rule 76 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    DOUBLEDOT       reduce using rule 76 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)


state 112

    (97) factor -> LPARENTHESIS n_math_expression_6 expression . RPARENTHESIS n_math_expression_7

    RPARENTHESIS    shift and go to state 141


state 113

    (123) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY . n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (24) n_two_way_conditional_1 -> .

    IF              reduce using rule 24 (n_two_way_conditional_1 -> .)
    FOR             reduce using rule 24 (n_two_way_conditional_1 -> .)
    WHILE           reduce using rule 24 (n_two_way_conditional_1 -> .)
    NAME            reduce using rule 24 (n_two_way_conditional_1 -> .)
    PRINT           reduce using rule 24 (n_two_way_conditional_1 -> .)
    INT_TYPE        reduce using rule 24 (n_two_way_conditional_1 -> .)
    STRING_TYPE     reduce using rule 24 (n_two_way_conditional_1 -> .)
    DOUBLE_TYPE     reduce using rule 24 (n_two_way_conditional_1 -> .)
    FLOAT_TYPE      reduce using rule 24 (n_two_way_conditional_1 -> .)
    BOOL_TYPE       reduce using rule 24 (n_two_way_conditional_1 -> .)
    RCURLY          reduce using rule 24 (n_two_way_conditional_1 -> .)
    FUNCTION        reduce using rule 24 (n_two_way_conditional_1 -> .)

    n_two_way_conditional_1        shift and go to state 142

state 114

    (85) expression -> expression_or AND n_math_expression_10 . expression n_math_expression_11
    (84) expression -> . expression_or
    (85) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (86) expression_or -> . expression_rel
    (87) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (88) expression_rel -> . exp
    (89) expression_rel -> . exp relational_operator exp n_math_expression_9
    (90) exp -> . termino n_math_expression_4
    (91) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (92) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (93) termino -> . factor n_math_expression_5
    (94) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (95) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (96) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (97) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (98) factor -> . PLUS value
    (99) factor -> . MINUS value
    (100) factor -> . value
    (101) value -> . function_call
    (102) value -> . literal
    (103) value -> . NAME n_variable_reference n_math_expression_1_name
    (75) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (76) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (60) literal -> . FLOAT n_math_expression_1_float
    (61) literal -> . INT n_math_expression_1_int
    (62) literal -> . STRING n_math_expression_1_string
    (63) literal -> . TRUE n_math_expression_1_bool
    (64) literal -> . FALSE n_math_expression_1_bool

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67

    expression_or                  shift and go to state 52
    expression                     shift and go to state 143
    expression_rel                 shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 55
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 115

    (87) expression_or -> expression_rel OR n_math_expression_10 . expression_or n_math_expression_12
    (86) expression_or -> . expression_rel
    (87) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (88) expression_rel -> . exp
    (89) expression_rel -> . exp relational_operator exp n_math_expression_9
    (90) exp -> . termino n_math_expression_4
    (91) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (92) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (93) termino -> . factor n_math_expression_5
    (94) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (95) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (96) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (97) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (98) factor -> . PLUS value
    (99) factor -> . MINUS value
    (100) factor -> . value
    (101) value -> . function_call
    (102) value -> . literal
    (103) value -> . NAME n_variable_reference n_math_expression_1_name
    (75) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (76) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (60) literal -> . FLOAT n_math_expression_1_float
    (61) literal -> . INT n_math_expression_1_int
    (62) literal -> . STRING n_math_expression_1_string
    (63) literal -> . TRUE n_math_expression_1_bool
    (64) literal -> . FALSE n_math_expression_1_bool

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67

    expression_rel                 shift and go to state 53
    expression_or                  shift and go to state 144
    exp                            shift and go to state 54
    termino                        shift and go to state 55
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 116

    (89) expression_rel -> exp relational_operator exp . n_math_expression_9
    (20) n_math_expression_9 -> .

    OR              reduce using rule 20 (n_math_expression_9 -> .)
    AND             reduce using rule 20 (n_math_expression_9 -> .)
    RPARENTHESIS    reduce using rule 20 (n_math_expression_9 -> .)
    COMMA           reduce using rule 20 (n_math_expression_9 -> .)
    SEMICOLON       reduce using rule 20 (n_math_expression_9 -> .)
    DOUBLEDOT       reduce using rule 20 (n_math_expression_9 -> .)

    n_math_expression_9            shift and go to state 145

state 117

    (54) relational_operator -> GREATERTHAN n_math_expression_8 .

    LPARENTHESIS    reduce using rule 54 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    PLUS            reduce using rule 54 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    MINUS           reduce using rule 54 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    NAME            reduce using rule 54 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    FLOAT           reduce using rule 54 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    INT             reduce using rule 54 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    STRING          reduce using rule 54 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    TRUE            reduce using rule 54 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    FALSE           reduce using rule 54 (relational_operator -> GREATERTHAN n_math_expression_8 .)


state 118

    (55) relational_operator -> LESSTHAN n_math_expression_8 .

    LPARENTHESIS    reduce using rule 55 (relational_operator -> LESSTHAN n_math_expression_8 .)
    PLUS            reduce using rule 55 (relational_operator -> LESSTHAN n_math_expression_8 .)
    MINUS           reduce using rule 55 (relational_operator -> LESSTHAN n_math_expression_8 .)
    NAME            reduce using rule 55 (relational_operator -> LESSTHAN n_math_expression_8 .)
    FLOAT           reduce using rule 55 (relational_operator -> LESSTHAN n_math_expression_8 .)
    INT             reduce using rule 55 (relational_operator -> LESSTHAN n_math_expression_8 .)
    STRING          reduce using rule 55 (relational_operator -> LESSTHAN n_math_expression_8 .)
    TRUE            reduce using rule 55 (relational_operator -> LESSTHAN n_math_expression_8 .)
    FALSE           reduce using rule 55 (relational_operator -> LESSTHAN n_math_expression_8 .)


state 119

    (56) relational_operator -> EQUALEQUAL n_math_expression_8 .

    LPARENTHESIS    reduce using rule 56 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    PLUS            reduce using rule 56 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    MINUS           reduce using rule 56 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    NAME            reduce using rule 56 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    FLOAT           reduce using rule 56 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    INT             reduce using rule 56 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    STRING          reduce using rule 56 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    TRUE            reduce using rule 56 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    FALSE           reduce using rule 56 (relational_operator -> EQUALEQUAL n_math_expression_8 .)


state 120

    (57) relational_operator -> LESSTHANOREQUAL n_math_expression_8 .

    LPARENTHESIS    reduce using rule 57 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    PLUS            reduce using rule 57 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    MINUS           reduce using rule 57 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    NAME            reduce using rule 57 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    FLOAT           reduce using rule 57 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    INT             reduce using rule 57 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    STRING          reduce using rule 57 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    TRUE            reduce using rule 57 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    FALSE           reduce using rule 57 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)


state 121

    (58) relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .

    LPARENTHESIS    reduce using rule 58 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    PLUS            reduce using rule 58 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    MINUS           reduce using rule 58 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    NAME            reduce using rule 58 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    FLOAT           reduce using rule 58 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    INT             reduce using rule 58 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    STRING          reduce using rule 58 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    TRUE            reduce using rule 58 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    FALSE           reduce using rule 58 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)


state 122

    (59) relational_operator -> NOTEQUAL n_math_expression_8 .

    LPARENTHESIS    reduce using rule 59 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    PLUS            reduce using rule 59 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    MINUS           reduce using rule 59 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    NAME            reduce using rule 59 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    FLOAT           reduce using rule 59 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    INT             reduce using rule 59 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    STRING          reduce using rule 59 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    TRUE            reduce using rule 59 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    FALSE           reduce using rule 59 (relational_operator -> NOTEQUAL n_math_expression_8 .)


state 123

    (91) exp -> termino n_math_expression_4 PLUS . n_math_expression_2 exp
    (13) n_math_expression_2 -> .

    LPARENTHESIS    reduce using rule 13 (n_math_expression_2 -> .)
    PLUS            reduce using rule 13 (n_math_expression_2 -> .)
    MINUS           reduce using rule 13 (n_math_expression_2 -> .)
    NAME            reduce using rule 13 (n_math_expression_2 -> .)
    FLOAT           reduce using rule 13 (n_math_expression_2 -> .)
    INT             reduce using rule 13 (n_math_expression_2 -> .)
    STRING          reduce using rule 13 (n_math_expression_2 -> .)
    TRUE            reduce using rule 13 (n_math_expression_2 -> .)
    FALSE           reduce using rule 13 (n_math_expression_2 -> .)

    n_math_expression_2            shift and go to state 146

state 124

    (92) exp -> termino n_math_expression_4 MINUS . n_math_expression_2 exp
    (13) n_math_expression_2 -> .

    LPARENTHESIS    reduce using rule 13 (n_math_expression_2 -> .)
    PLUS            reduce using rule 13 (n_math_expression_2 -> .)
    MINUS           reduce using rule 13 (n_math_expression_2 -> .)
    NAME            reduce using rule 13 (n_math_expression_2 -> .)
    FLOAT           reduce using rule 13 (n_math_expression_2 -> .)
    INT             reduce using rule 13 (n_math_expression_2 -> .)
    STRING          reduce using rule 13 (n_math_expression_2 -> .)
    TRUE            reduce using rule 13 (n_math_expression_2 -> .)
    FALSE           reduce using rule 13 (n_math_expression_2 -> .)

    n_math_expression_2            shift and go to state 147

state 125

    (94) termino -> factor n_math_expression_5 TIMES . n_math_expression_3 termino
    (14) n_math_expression_3 -> .

    LPARENTHESIS    reduce using rule 14 (n_math_expression_3 -> .)
    PLUS            reduce using rule 14 (n_math_expression_3 -> .)
    MINUS           reduce using rule 14 (n_math_expression_3 -> .)
    NAME            reduce using rule 14 (n_math_expression_3 -> .)
    FLOAT           reduce using rule 14 (n_math_expression_3 -> .)
    INT             reduce using rule 14 (n_math_expression_3 -> .)
    STRING          reduce using rule 14 (n_math_expression_3 -> .)
    TRUE            reduce using rule 14 (n_math_expression_3 -> .)
    FALSE           reduce using rule 14 (n_math_expression_3 -> .)

    n_math_expression_3            shift and go to state 148

state 126

    (95) termino -> factor n_math_expression_5 DIVIDE . n_math_expression_3 termino
    (14) n_math_expression_3 -> .

    LPARENTHESIS    reduce using rule 14 (n_math_expression_3 -> .)
    PLUS            reduce using rule 14 (n_math_expression_3 -> .)
    MINUS           reduce using rule 14 (n_math_expression_3 -> .)
    NAME            reduce using rule 14 (n_math_expression_3 -> .)
    FLOAT           reduce using rule 14 (n_math_expression_3 -> .)
    INT             reduce using rule 14 (n_math_expression_3 -> .)
    STRING          reduce using rule 14 (n_math_expression_3 -> .)
    TRUE            reduce using rule 14 (n_math_expression_3 -> .)
    FALSE           reduce using rule 14 (n_math_expression_3 -> .)

    n_math_expression_3            shift and go to state 149

state 127

    (96) termino -> factor n_math_expression_5 MODULUS . n_math_expression_3 termino
    (14) n_math_expression_3 -> .

    LPARENTHESIS    reduce using rule 14 (n_math_expression_3 -> .)
    PLUS            reduce using rule 14 (n_math_expression_3 -> .)
    MINUS           reduce using rule 14 (n_math_expression_3 -> .)
    NAME            reduce using rule 14 (n_math_expression_3 -> .)
    FLOAT           reduce using rule 14 (n_math_expression_3 -> .)
    INT             reduce using rule 14 (n_math_expression_3 -> .)
    STRING          reduce using rule 14 (n_math_expression_3 -> .)
    TRUE            reduce using rule 14 (n_math_expression_3 -> .)
    FALSE           reduce using rule 14 (n_math_expression_3 -> .)

    n_math_expression_3            shift and go to state 150

state 128

    (103) value -> NAME n_variable_reference n_math_expression_1_name .

    TIMES           reduce using rule 103 (value -> NAME n_variable_reference n_math_expression_1_name .)
    DIVIDE          reduce using rule 103 (value -> NAME n_variable_reference n_math_expression_1_name .)
    MODULUS         reduce using rule 103 (value -> NAME n_variable_reference n_math_expression_1_name .)
    PLUS            reduce using rule 103 (value -> NAME n_variable_reference n_math_expression_1_name .)
    MINUS           reduce using rule 103 (value -> NAME n_variable_reference n_math_expression_1_name .)
    GREATERTHAN     reduce using rule 103 (value -> NAME n_variable_reference n_math_expression_1_name .)
    LESSTHAN        reduce using rule 103 (value -> NAME n_variable_reference n_math_expression_1_name .)
    EQUALEQUAL      reduce using rule 103 (value -> NAME n_variable_reference n_math_expression_1_name .)
    LESSTHANOREQUAL reduce using rule 103 (value -> NAME n_variable_reference n_math_expression_1_name .)
    GREATERTHANOREQUAL reduce using rule 103 (value -> NAME n_variable_reference n_math_expression_1_name .)
    NOTEQUAL        reduce using rule 103 (value -> NAME n_variable_reference n_math_expression_1_name .)
    OR              reduce using rule 103 (value -> NAME n_variable_reference n_math_expression_1_name .)
    AND             reduce using rule 103 (value -> NAME n_variable_reference n_math_expression_1_name .)
    RPARENTHESIS    reduce using rule 103 (value -> NAME n_variable_reference n_math_expression_1_name .)
    COMMA           reduce using rule 103 (value -> NAME n_variable_reference n_math_expression_1_name .)
    SEMICOLON       reduce using rule 103 (value -> NAME n_variable_reference n_math_expression_1_name .)
    DOUBLEDOT       reduce using rule 103 (value -> NAME n_variable_reference n_math_expression_1_name .)


state 129

    (122) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT . expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (84) expression -> . expression_or
    (85) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (86) expression_or -> . expression_rel
    (87) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (88) expression_rel -> . exp
    (89) expression_rel -> . exp relational_operator exp n_math_expression_9
    (90) exp -> . termino n_math_expression_4
    (91) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (92) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (93) termino -> . factor n_math_expression_5
    (94) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (95) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (96) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (97) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (98) factor -> . PLUS value
    (99) factor -> . MINUS value
    (100) factor -> . value
    (101) value -> . function_call
    (102) value -> . literal
    (103) value -> . NAME n_variable_reference n_math_expression_1_name
    (75) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (76) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (60) literal -> . FLOAT n_math_expression_1_float
    (61) literal -> . INT n_math_expression_1_int
    (62) literal -> . STRING n_math_expression_1_string
    (63) literal -> . TRUE n_math_expression_1_bool
    (64) literal -> . FALSE n_math_expression_1_bool

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67

    expression                     shift and go to state 151
    expression_or                  shift and go to state 52
    expression_rel                 shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 55
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 130

    (105) assign -> type NAME . n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (6) n_variable_instantiate -> .

    EQUAL           reduce using rule 6 (n_variable_instantiate -> .)

    n_variable_instantiate         shift and go to state 152

state 131

    (121) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS . p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (28) p_n_pre_condition_loop_2 -> .

    LCURLY          reduce using rule 28 (p_n_pre_condition_loop_2 -> .)

    p_n_pre_condition_loop_2       shift and go to state 153

state 132

    (105) assign -> type NAME n_variable_instantiate n_math_expression_1_name EQUAL . n_seen_equal_op expression
    (30) n_seen_equal_op -> .

    LPARENTHESIS    reduce using rule 30 (n_seen_equal_op -> .)
    PLUS            reduce using rule 30 (n_seen_equal_op -> .)
    MINUS           reduce using rule 30 (n_seen_equal_op -> .)
    NAME            reduce using rule 30 (n_seen_equal_op -> .)
    FLOAT           reduce using rule 30 (n_seen_equal_op -> .)
    INT             reduce using rule 30 (n_seen_equal_op -> .)
    STRING          reduce using rule 30 (n_seen_equal_op -> .)
    TRUE            reduce using rule 30 (n_seen_equal_op -> .)
    FALSE           reduce using rule 30 (n_seen_equal_op -> .)

    n_seen_equal_op                shift and go to state 154

state 133

    (107) print -> PRINT LPARENTHESIS expression n_print RPARENTHESIS .

    SEMICOLON       reduce using rule 107 (print -> PRINT LPARENTHESIS expression n_print RPARENTHESIS .)


state 134

    (71) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT . function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end
    (65) function_type -> . VOID n_function_type
    (66) function_type -> . INT_TYPE n_function_type
    (67) function_type -> . STRING_TYPE n_function_type
    (68) function_type -> . DOUBLE_TYPE n_function_type
    (69) function_type -> . FLOAT_TYPE n_function_type
    (70) function_type -> . BOOL_TYPE n_function_type

    VOID            shift and go to state 156
    INT_TYPE        shift and go to state 157
    STRING_TYPE     shift and go to state 158
    DOUBLE_TYPE     shift and go to state 159
    FLOAT_TYPE      shift and go to state 160
    BOOL_TYPE       shift and go to state 161

    function_type                  shift and go to state 155

state 135

    (81) parameter_list -> parameter COMMA . parameter_list
    (79) parameter_list -> . empty
    (80) parameter_list -> . parameter
    (81) parameter_list -> . parameter COMMA parameter_list
    (45) empty -> .
    (83) parameter -> . type NAME n_variable_instantiate_param
    (49) type -> . INT_TYPE n_seen_type
    (50) type -> . STRING_TYPE n_seen_type
    (51) type -> . DOUBLE_TYPE n_seen_type
    (52) type -> . FLOAT_TYPE n_seen_type
    (53) type -> . BOOL_TYPE n_seen_type

    DOUBLEDOT       reduce using rule 45 (empty -> .)
    INT_TYPE        shift and go to state 26
    STRING_TYPE     shift and go to state 27
    DOUBLE_TYPE     shift and go to state 28
    FLOAT_TYPE      shift and go to state 29
    BOOL_TYPE       shift and go to state 30

    parameter                      shift and go to state 105
    parameter_list                 shift and go to state 162
    empty                          shift and go to state 104
    type                           shift and go to state 106

state 136

    (83) parameter -> type NAME . n_variable_instantiate_param
    (7) n_variable_instantiate_param -> .

    COMMA           reduce using rule 7 (n_variable_instantiate_param -> .)
    DOUBLEDOT       reduce using rule 7 (n_variable_instantiate_param -> .)

    n_variable_instantiate_param   shift and go to state 163

state 137

    (106) assign -> NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression .

    SEMICOLON       reduce using rule 106 (assign -> NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression .)
    DOUBLEDOT       reduce using rule 106 (assign -> NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression .)
    RPARENTHESIS    reduce using rule 106 (assign -> NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression .)


state 138

    (75) function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS . n_function_call_5 n_function_call_6
    (39) n_function_call_5 -> .

    SEMICOLON       reduce using rule 39 (n_function_call_5 -> .)
    TIMES           reduce using rule 39 (n_function_call_5 -> .)
    DIVIDE          reduce using rule 39 (n_function_call_5 -> .)
    MODULUS         reduce using rule 39 (n_function_call_5 -> .)
    PLUS            reduce using rule 39 (n_function_call_5 -> .)
    MINUS           reduce using rule 39 (n_function_call_5 -> .)
    GREATERTHAN     reduce using rule 39 (n_function_call_5 -> .)
    LESSTHAN        reduce using rule 39 (n_function_call_5 -> .)
    EQUALEQUAL      reduce using rule 39 (n_function_call_5 -> .)
    LESSTHANOREQUAL reduce using rule 39 (n_function_call_5 -> .)
    GREATERTHANOREQUAL reduce using rule 39 (n_function_call_5 -> .)
    NOTEQUAL        reduce using rule 39 (n_function_call_5 -> .)
    OR              reduce using rule 39 (n_function_call_5 -> .)
    AND             reduce using rule 39 (n_function_call_5 -> .)
    RPARENTHESIS    reduce using rule 39 (n_function_call_5 -> .)
    COMMA           reduce using rule 39 (n_function_call_5 -> .)
    DOUBLEDOT       reduce using rule 39 (n_function_call_5 -> .)

    n_function_call_5              shift and go to state 164

state 139

    (78) arg_list -> arg COMMA . n_function_call_4 arg_list
    (38) n_function_call_4 -> .

    LPARENTHESIS    reduce using rule 38 (n_function_call_4 -> .)
    PLUS            reduce using rule 38 (n_function_call_4 -> .)
    MINUS           reduce using rule 38 (n_function_call_4 -> .)
    NAME            reduce using rule 38 (n_function_call_4 -> .)
    FLOAT           reduce using rule 38 (n_function_call_4 -> .)
    INT             reduce using rule 38 (n_function_call_4 -> .)
    STRING          reduce using rule 38 (n_function_call_4 -> .)
    TRUE            reduce using rule 38 (n_function_call_4 -> .)
    FALSE           reduce using rule 38 (n_function_call_4 -> .)

    n_function_call_4              shift and go to state 165

state 140

    (82) arg -> expression n_function_call_3 .

    COMMA           reduce using rule 82 (arg -> expression n_function_call_3 .)
    RPARENTHESIS    reduce using rule 82 (arg -> expression n_function_call_3 .)


state 141

    (97) factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS . n_math_expression_7
    (18) n_math_expression_7 -> .

    TIMES           reduce using rule 18 (n_math_expression_7 -> .)
    DIVIDE          reduce using rule 18 (n_math_expression_7 -> .)
    MODULUS         reduce using rule 18 (n_math_expression_7 -> .)
    PLUS            reduce using rule 18 (n_math_expression_7 -> .)
    MINUS           reduce using rule 18 (n_math_expression_7 -> .)
    GREATERTHAN     reduce using rule 18 (n_math_expression_7 -> .)
    LESSTHAN        reduce using rule 18 (n_math_expression_7 -> .)
    EQUALEQUAL      reduce using rule 18 (n_math_expression_7 -> .)
    LESSTHANOREQUAL reduce using rule 18 (n_math_expression_7 -> .)
    GREATERTHANOREQUAL reduce using rule 18 (n_math_expression_7 -> .)
    NOTEQUAL        reduce using rule 18 (n_math_expression_7 -> .)
    OR              reduce using rule 18 (n_math_expression_7 -> .)
    AND             reduce using rule 18 (n_math_expression_7 -> .)
    RPARENTHESIS    reduce using rule 18 (n_math_expression_7 -> .)
    COMMA           reduce using rule 18 (n_math_expression_7 -> .)
    SEMICOLON       reduce using rule 18 (n_math_expression_7 -> .)
    DOUBLEDOT       reduce using rule 18 (n_math_expression_7 -> .)

    n_math_expression_7            shift and go to state 166

state 142

    (123) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 . n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (2) n_open_new_scope -> .

    IF              reduce using rule 2 (n_open_new_scope -> .)
    FOR             reduce using rule 2 (n_open_new_scope -> .)
    WHILE           reduce using rule 2 (n_open_new_scope -> .)
    NAME            reduce using rule 2 (n_open_new_scope -> .)
    PRINT           reduce using rule 2 (n_open_new_scope -> .)
    INT_TYPE        reduce using rule 2 (n_open_new_scope -> .)
    STRING_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    DOUBLE_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    FLOAT_TYPE      reduce using rule 2 (n_open_new_scope -> .)
    BOOL_TYPE       reduce using rule 2 (n_open_new_scope -> .)
    RCURLY          reduce using rule 2 (n_open_new_scope -> .)
    FUNCTION        reduce using rule 2 (n_open_new_scope -> .)

    n_open_new_scope               shift and go to state 167

state 143

    (85) expression -> expression_or AND n_math_expression_10 expression . n_math_expression_11
    (22) n_math_expression_11 -> .

    RPARENTHESIS    reduce using rule 22 (n_math_expression_11 -> .)
    COMMA           reduce using rule 22 (n_math_expression_11 -> .)
    SEMICOLON       reduce using rule 22 (n_math_expression_11 -> .)
    DOUBLEDOT       reduce using rule 22 (n_math_expression_11 -> .)

    n_math_expression_11           shift and go to state 168

state 144

    (87) expression_or -> expression_rel OR n_math_expression_10 expression_or . n_math_expression_12
    (23) n_math_expression_12 -> .

    AND             reduce using rule 23 (n_math_expression_12 -> .)
    RPARENTHESIS    reduce using rule 23 (n_math_expression_12 -> .)
    COMMA           reduce using rule 23 (n_math_expression_12 -> .)
    SEMICOLON       reduce using rule 23 (n_math_expression_12 -> .)
    DOUBLEDOT       reduce using rule 23 (n_math_expression_12 -> .)

    n_math_expression_12           shift and go to state 169

state 145

    (89) expression_rel -> exp relational_operator exp n_math_expression_9 .

    OR              reduce using rule 89 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    AND             reduce using rule 89 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    RPARENTHESIS    reduce using rule 89 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    COMMA           reduce using rule 89 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    SEMICOLON       reduce using rule 89 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    DOUBLEDOT       reduce using rule 89 (expression_rel -> exp relational_operator exp n_math_expression_9 .)


state 146

    (91) exp -> termino n_math_expression_4 PLUS n_math_expression_2 . exp
    (90) exp -> . termino n_math_expression_4
    (91) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (92) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (93) termino -> . factor n_math_expression_5
    (94) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (95) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (96) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (97) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (98) factor -> . PLUS value
    (99) factor -> . MINUS value
    (100) factor -> . value
    (101) value -> . function_call
    (102) value -> . literal
    (103) value -> . NAME n_variable_reference n_math_expression_1_name
    (75) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (76) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (60) literal -> . FLOAT n_math_expression_1_float
    (61) literal -> . INT n_math_expression_1_int
    (62) literal -> . STRING n_math_expression_1_string
    (63) literal -> . TRUE n_math_expression_1_bool
    (64) literal -> . FALSE n_math_expression_1_bool

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67

    termino                        shift and go to state 55
    exp                            shift and go to state 170
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 147

    (92) exp -> termino n_math_expression_4 MINUS n_math_expression_2 . exp
    (90) exp -> . termino n_math_expression_4
    (91) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (92) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (93) termino -> . factor n_math_expression_5
    (94) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (95) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (96) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (97) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (98) factor -> . PLUS value
    (99) factor -> . MINUS value
    (100) factor -> . value
    (101) value -> . function_call
    (102) value -> . literal
    (103) value -> . NAME n_variable_reference n_math_expression_1_name
    (75) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (76) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (60) literal -> . FLOAT n_math_expression_1_float
    (61) literal -> . INT n_math_expression_1_int
    (62) literal -> . STRING n_math_expression_1_string
    (63) literal -> . TRUE n_math_expression_1_bool
    (64) literal -> . FALSE n_math_expression_1_bool

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67

    termino                        shift and go to state 55
    exp                            shift and go to state 171
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 148

    (94) termino -> factor n_math_expression_5 TIMES n_math_expression_3 . termino
    (93) termino -> . factor n_math_expression_5
    (94) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (95) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (96) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (97) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (98) factor -> . PLUS value
    (99) factor -> . MINUS value
    (100) factor -> . value
    (101) value -> . function_call
    (102) value -> . literal
    (103) value -> . NAME n_variable_reference n_math_expression_1_name
    (75) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (76) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (60) literal -> . FLOAT n_math_expression_1_float
    (61) literal -> . INT n_math_expression_1_int
    (62) literal -> . STRING n_math_expression_1_string
    (63) literal -> . TRUE n_math_expression_1_bool
    (64) literal -> . FALSE n_math_expression_1_bool

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67

    factor                         shift and go to state 58
    termino                        shift and go to state 172
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 149

    (95) termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 . termino
    (93) termino -> . factor n_math_expression_5
    (94) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (95) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (96) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (97) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (98) factor -> . PLUS value
    (99) factor -> . MINUS value
    (100) factor -> . value
    (101) value -> . function_call
    (102) value -> . literal
    (103) value -> . NAME n_variable_reference n_math_expression_1_name
    (75) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (76) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (60) literal -> . FLOAT n_math_expression_1_float
    (61) literal -> . INT n_math_expression_1_int
    (62) literal -> . STRING n_math_expression_1_string
    (63) literal -> . TRUE n_math_expression_1_bool
    (64) literal -> . FALSE n_math_expression_1_bool

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67

    factor                         shift and go to state 58
    termino                        shift and go to state 173
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 150

    (96) termino -> factor n_math_expression_5 MODULUS n_math_expression_3 . termino
    (93) termino -> . factor n_math_expression_5
    (94) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (95) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (96) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (97) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (98) factor -> . PLUS value
    (99) factor -> . MINUS value
    (100) factor -> . value
    (101) value -> . function_call
    (102) value -> . literal
    (103) value -> . NAME n_variable_reference n_math_expression_1_name
    (75) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (76) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (60) literal -> . FLOAT n_math_expression_1_float
    (61) literal -> . INT n_math_expression_1_int
    (62) literal -> . STRING n_math_expression_1_string
    (63) literal -> . TRUE n_math_expression_1_bool
    (64) literal -> . FALSE n_math_expression_1_bool

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67

    factor                         shift and go to state 58
    termino                        shift and go to state 174
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 151

    (122) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression . DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope

    DOUBLEDOT       shift and go to state 175


state 152

    (105) assign -> type NAME n_variable_instantiate . n_math_expression_1_name EQUAL n_seen_equal_op expression
    (12) n_math_expression_1_name -> .

    EQUAL           reduce using rule 12 (n_math_expression_1_name -> .)

    n_math_expression_1_name       shift and go to state 101

state 153

    (121) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 . LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope

    LCURLY          shift and go to state 176


state 154

    (105) assign -> type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op . expression
    (84) expression -> . expression_or
    (85) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (86) expression_or -> . expression_rel
    (87) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (88) expression_rel -> . exp
    (89) expression_rel -> . exp relational_operator exp n_math_expression_9
    (90) exp -> . termino n_math_expression_4
    (91) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (92) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (93) termino -> . factor n_math_expression_5
    (94) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (95) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (96) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (97) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (98) factor -> . PLUS value
    (99) factor -> . MINUS value
    (100) factor -> . value
    (101) value -> . function_call
    (102) value -> . literal
    (103) value -> . NAME n_variable_reference n_math_expression_1_name
    (75) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (76) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (60) literal -> . FLOAT n_math_expression_1_float
    (61) literal -> . INT n_math_expression_1_int
    (62) literal -> . STRING n_math_expression_1_string
    (63) literal -> . TRUE n_math_expression_1_bool
    (64) literal -> . FALSE n_math_expression_1_bool

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67

    expression                     shift and go to state 177
    expression_or                  shift and go to state 52
    expression_rel                 shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 55
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 155

    (71) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type . LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end

    LCURLY          shift and go to state 178


state 156

    (65) function_type -> VOID . n_function_type
    (34) n_function_type -> .

    LCURLY          reduce using rule 34 (n_function_type -> .)

    n_function_type                shift and go to state 179

state 157

    (66) function_type -> INT_TYPE . n_function_type
    (34) n_function_type -> .

    LCURLY          reduce using rule 34 (n_function_type -> .)

    n_function_type                shift and go to state 180

state 158

    (67) function_type -> STRING_TYPE . n_function_type
    (34) n_function_type -> .

    LCURLY          reduce using rule 34 (n_function_type -> .)

    n_function_type                shift and go to state 181

state 159

    (68) function_type -> DOUBLE_TYPE . n_function_type
    (34) n_function_type -> .

    LCURLY          reduce using rule 34 (n_function_type -> .)

    n_function_type                shift and go to state 182

state 160

    (69) function_type -> FLOAT_TYPE . n_function_type
    (34) n_function_type -> .

    LCURLY          reduce using rule 34 (n_function_type -> .)

    n_function_type                shift and go to state 183

state 161

    (70) function_type -> BOOL_TYPE . n_function_type
    (34) n_function_type -> .

    LCURLY          reduce using rule 34 (n_function_type -> .)

    n_function_type                shift and go to state 184

state 162

    (81) parameter_list -> parameter COMMA parameter_list .

    DOUBLEDOT       reduce using rule 81 (parameter_list -> parameter COMMA parameter_list .)


state 163

    (83) parameter -> type NAME n_variable_instantiate_param .

    COMMA           reduce using rule 83 (parameter -> type NAME n_variable_instantiate_param .)
    DOUBLEDOT       reduce using rule 83 (parameter -> type NAME n_variable_instantiate_param .)


state 164

    (75) function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 . n_function_call_6
    (40) n_function_call_6 -> .

    SEMICOLON       reduce using rule 40 (n_function_call_6 -> .)
    TIMES           reduce using rule 40 (n_function_call_6 -> .)
    DIVIDE          reduce using rule 40 (n_function_call_6 -> .)
    MODULUS         reduce using rule 40 (n_function_call_6 -> .)
    PLUS            reduce using rule 40 (n_function_call_6 -> .)
    MINUS           reduce using rule 40 (n_function_call_6 -> .)
    GREATERTHAN     reduce using rule 40 (n_function_call_6 -> .)
    LESSTHAN        reduce using rule 40 (n_function_call_6 -> .)
    EQUALEQUAL      reduce using rule 40 (n_function_call_6 -> .)
    LESSTHANOREQUAL reduce using rule 40 (n_function_call_6 -> .)
    GREATERTHANOREQUAL reduce using rule 40 (n_function_call_6 -> .)
    NOTEQUAL        reduce using rule 40 (n_function_call_6 -> .)
    OR              reduce using rule 40 (n_function_call_6 -> .)
    AND             reduce using rule 40 (n_function_call_6 -> .)
    RPARENTHESIS    reduce using rule 40 (n_function_call_6 -> .)
    COMMA           reduce using rule 40 (n_function_call_6 -> .)
    DOUBLEDOT       reduce using rule 40 (n_function_call_6 -> .)

    n_function_call_6              shift and go to state 185

state 165

    (78) arg_list -> arg COMMA n_function_call_4 . arg_list
    (77) arg_list -> . arg
    (78) arg_list -> . arg COMMA n_function_call_4 arg_list
    (82) arg -> . expression n_function_call_3
    (84) expression -> . expression_or
    (85) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (86) expression_or -> . expression_rel
    (87) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (88) expression_rel -> . exp
    (89) expression_rel -> . exp relational_operator exp n_math_expression_9
    (90) exp -> . termino n_math_expression_4
    (91) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (92) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (93) termino -> . factor n_math_expression_5
    (94) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (95) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (96) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (97) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (98) factor -> . PLUS value
    (99) factor -> . MINUS value
    (100) factor -> . value
    (101) value -> . function_call
    (102) value -> . literal
    (103) value -> . NAME n_variable_reference n_math_expression_1_name
    (75) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (76) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (60) literal -> . FLOAT n_math_expression_1_float
    (61) literal -> . INT n_math_expression_1_int
    (62) literal -> . STRING n_math_expression_1_string
    (63) literal -> . TRUE n_math_expression_1_bool
    (64) literal -> . FALSE n_math_expression_1_bool

    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67

    arg                            shift and go to state 109
    arg_list                       shift and go to state 186
    expression                     shift and go to state 110
    expression_or                  shift and go to state 52
    expression_rel                 shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 55
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 166

    (97) factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .

    TIMES           reduce using rule 97 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    DIVIDE          reduce using rule 97 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    MODULUS         reduce using rule 97 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    PLUS            reduce using rule 97 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    MINUS           reduce using rule 97 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    GREATERTHAN     reduce using rule 97 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    LESSTHAN        reduce using rule 97 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    EQUALEQUAL      reduce using rule 97 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    LESSTHANOREQUAL reduce using rule 97 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    GREATERTHANOREQUAL reduce using rule 97 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    NOTEQUAL        reduce using rule 97 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    OR              reduce using rule 97 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    AND             reduce using rule 97 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    RPARENTHESIS    reduce using rule 97 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    COMMA           reduce using rule 97 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    SEMICOLON       reduce using rule 97 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    DOUBLEDOT       reduce using rule 97 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)


state 167

    (123) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope . codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (113) codeblock -> . empty
    (114) codeblock -> . codeblock_aux codeblock
    (45) empty -> .
    (115) codeblock_aux -> . statement
    (116) codeblock_aux -> . function_definition
    (117) codeblock_aux -> . condition_if
    (118) codeblock_aux -> . loop
    (108) statement -> . statement_aux SEMICOLON
    (71) function_definition -> . n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end
    (123) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (119) loop -> . forloop
    (120) loop -> . whileloop
    (109) statement_aux -> . assign
    (110) statement_aux -> . declare
    (111) statement_aux -> . function_call
    (112) statement_aux -> . print
    (31) n_before_function_definition -> .
    (122) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (121) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (105) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (106) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (104) declare -> . type NAME n_variable_instantiate
    (75) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (76) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (107) print -> . PRINT LPARENTHESIS expression n_print RPARENTHESIS
    (49) type -> . INT_TYPE n_seen_type
    (50) type -> . STRING_TYPE n_seen_type
    (51) type -> . DOUBLE_TYPE n_seen_type
    (52) type -> . FLOAT_TYPE n_seen_type
    (53) type -> . BOOL_TYPE n_seen_type

    RCURLY          reduce using rule 45 (empty -> .)
    IF              shift and go to state 15
    FUNCTION        reduce using rule 31 (n_before_function_definition -> .)
    FOR             shift and go to state 22
    WHILE           shift and go to state 23
    NAME            shift and go to state 14
    PRINT           shift and go to state 25
    INT_TYPE        shift and go to state 26
    STRING_TYPE     shift and go to state 27
    DOUBLE_TYPE     shift and go to state 28
    FLOAT_TYPE      shift and go to state 29
    BOOL_TYPE       shift and go to state 30

    codeblock                      shift and go to state 187
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    n_before_function_definition   shift and go to state 13
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    declare                        shift and go to state 19
    function_call                  shift and go to state 20
    print                          shift and go to state 21
    type                           shift and go to state 24

state 168

    (85) expression -> expression_or AND n_math_expression_10 expression n_math_expression_11 .

    RPARENTHESIS    reduce using rule 85 (expression -> expression_or AND n_math_expression_10 expression n_math_expression_11 .)
    COMMA           reduce using rule 85 (expression -> expression_or AND n_math_expression_10 expression n_math_expression_11 .)
    SEMICOLON       reduce using rule 85 (expression -> expression_or AND n_math_expression_10 expression n_math_expression_11 .)
    DOUBLEDOT       reduce using rule 85 (expression -> expression_or AND n_math_expression_10 expression n_math_expression_11 .)


state 169

    (87) expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .

    AND             reduce using rule 87 (expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .)
    RPARENTHESIS    reduce using rule 87 (expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .)
    COMMA           reduce using rule 87 (expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .)
    SEMICOLON       reduce using rule 87 (expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .)
    DOUBLEDOT       reduce using rule 87 (expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .)


state 170

    (91) exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .

    GREATERTHAN     reduce using rule 91 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    LESSTHAN        reduce using rule 91 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    EQUALEQUAL      reduce using rule 91 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    LESSTHANOREQUAL reduce using rule 91 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    GREATERTHANOREQUAL reduce using rule 91 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    NOTEQUAL        reduce using rule 91 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    OR              reduce using rule 91 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    AND             reduce using rule 91 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    RPARENTHESIS    reduce using rule 91 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    COMMA           reduce using rule 91 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    SEMICOLON       reduce using rule 91 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    DOUBLEDOT       reduce using rule 91 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)


state 171

    (92) exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .

    GREATERTHAN     reduce using rule 92 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    LESSTHAN        reduce using rule 92 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    EQUALEQUAL      reduce using rule 92 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    LESSTHANOREQUAL reduce using rule 92 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    GREATERTHANOREQUAL reduce using rule 92 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    NOTEQUAL        reduce using rule 92 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    OR              reduce using rule 92 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    AND             reduce using rule 92 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    RPARENTHESIS    reduce using rule 92 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    COMMA           reduce using rule 92 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    SEMICOLON       reduce using rule 92 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    DOUBLEDOT       reduce using rule 92 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)


state 172

    (94) termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .

    PLUS            reduce using rule 94 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    MINUS           reduce using rule 94 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    GREATERTHAN     reduce using rule 94 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    LESSTHAN        reduce using rule 94 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    EQUALEQUAL      reduce using rule 94 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    LESSTHANOREQUAL reduce using rule 94 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    GREATERTHANOREQUAL reduce using rule 94 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    NOTEQUAL        reduce using rule 94 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    OR              reduce using rule 94 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    AND             reduce using rule 94 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    RPARENTHESIS    reduce using rule 94 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    COMMA           reduce using rule 94 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    SEMICOLON       reduce using rule 94 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    DOUBLEDOT       reduce using rule 94 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)


state 173

    (95) termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .

    PLUS            reduce using rule 95 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    MINUS           reduce using rule 95 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    GREATERTHAN     reduce using rule 95 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    LESSTHAN        reduce using rule 95 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    EQUALEQUAL      reduce using rule 95 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    LESSTHANOREQUAL reduce using rule 95 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    GREATERTHANOREQUAL reduce using rule 95 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    NOTEQUAL        reduce using rule 95 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    OR              reduce using rule 95 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    AND             reduce using rule 95 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    RPARENTHESIS    reduce using rule 95 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    COMMA           reduce using rule 95 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    SEMICOLON       reduce using rule 95 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    DOUBLEDOT       reduce using rule 95 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)


state 174

    (96) termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .

    PLUS            reduce using rule 96 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    MINUS           reduce using rule 96 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    GREATERTHAN     reduce using rule 96 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    LESSTHAN        reduce using rule 96 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    EQUALEQUAL      reduce using rule 96 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    LESSTHANOREQUAL reduce using rule 96 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    GREATERTHANOREQUAL reduce using rule 96 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    NOTEQUAL        reduce using rule 96 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    OR              reduce using rule 96 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    AND             reduce using rule 96 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    RPARENTHESIS    reduce using rule 96 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    COMMA           reduce using rule 96 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    SEMICOLON       reduce using rule 96 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    DOUBLEDOT       reduce using rule 96 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)


state 175

    (122) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT . assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (105) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (106) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (49) type -> . INT_TYPE n_seen_type
    (50) type -> . STRING_TYPE n_seen_type
    (51) type -> . DOUBLE_TYPE n_seen_type
    (52) type -> . FLOAT_TYPE n_seen_type
    (53) type -> . BOOL_TYPE n_seen_type

    NAME            shift and go to state 99
    INT_TYPE        shift and go to state 26
    STRING_TYPE     shift and go to state 27
    DOUBLE_TYPE     shift and go to state 28
    FLOAT_TYPE      shift and go to state 29
    BOOL_TYPE       shift and go to state 30

    assign                         shift and go to state 188
    type                           shift and go to state 98

state 176

    (121) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY . n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (2) n_open_new_scope -> .

    IF              reduce using rule 2 (n_open_new_scope -> .)
    FOR             reduce using rule 2 (n_open_new_scope -> .)
    WHILE           reduce using rule 2 (n_open_new_scope -> .)
    NAME            reduce using rule 2 (n_open_new_scope -> .)
    PRINT           reduce using rule 2 (n_open_new_scope -> .)
    INT_TYPE        reduce using rule 2 (n_open_new_scope -> .)
    STRING_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    DOUBLE_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    FLOAT_TYPE      reduce using rule 2 (n_open_new_scope -> .)
    BOOL_TYPE       reduce using rule 2 (n_open_new_scope -> .)
    RCURLY          reduce using rule 2 (n_open_new_scope -> .)
    FUNCTION        reduce using rule 2 (n_open_new_scope -> .)

    n_open_new_scope               shift and go to state 189

state 177

    (105) assign -> type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression .

    SEMICOLON       reduce using rule 105 (assign -> type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression .)
    DOUBLEDOT       reduce using rule 105 (assign -> type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression .)
    RPARENTHESIS    reduce using rule 105 (assign -> type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression .)


state 178

    (71) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY . n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end
    (32) n_function_block_start -> .

    IF              reduce using rule 32 (n_function_block_start -> .)
    FOR             reduce using rule 32 (n_function_block_start -> .)
    WHILE           reduce using rule 32 (n_function_block_start -> .)
    NAME            reduce using rule 32 (n_function_block_start -> .)
    PRINT           reduce using rule 32 (n_function_block_start -> .)
    INT_TYPE        reduce using rule 32 (n_function_block_start -> .)
    STRING_TYPE     reduce using rule 32 (n_function_block_start -> .)
    DOUBLE_TYPE     reduce using rule 32 (n_function_block_start -> .)
    FLOAT_TYPE      reduce using rule 32 (n_function_block_start -> .)
    BOOL_TYPE       reduce using rule 32 (n_function_block_start -> .)
    RETURN          reduce using rule 32 (n_function_block_start -> .)
    RCURLY          reduce using rule 32 (n_function_block_start -> .)
    FUNCTION        reduce using rule 32 (n_function_block_start -> .)

    n_function_block_start         shift and go to state 190

state 179

    (65) function_type -> VOID n_function_type .

    LCURLY          reduce using rule 65 (function_type -> VOID n_function_type .)


state 180

    (66) function_type -> INT_TYPE n_function_type .

    LCURLY          reduce using rule 66 (function_type -> INT_TYPE n_function_type .)


state 181

    (67) function_type -> STRING_TYPE n_function_type .

    LCURLY          reduce using rule 67 (function_type -> STRING_TYPE n_function_type .)


state 182

    (68) function_type -> DOUBLE_TYPE n_function_type .

    LCURLY          reduce using rule 68 (function_type -> DOUBLE_TYPE n_function_type .)


state 183

    (69) function_type -> FLOAT_TYPE n_function_type .

    LCURLY          reduce using rule 69 (function_type -> FLOAT_TYPE n_function_type .)


state 184

    (70) function_type -> BOOL_TYPE n_function_type .

    LCURLY          reduce using rule 70 (function_type -> BOOL_TYPE n_function_type .)


state 185

    (75) function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .

    SEMICOLON       reduce using rule 75 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    TIMES           reduce using rule 75 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    DIVIDE          reduce using rule 75 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    MODULUS         reduce using rule 75 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    PLUS            reduce using rule 75 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    MINUS           reduce using rule 75 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    GREATERTHAN     reduce using rule 75 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    LESSTHAN        reduce using rule 75 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    EQUALEQUAL      reduce using rule 75 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    LESSTHANOREQUAL reduce using rule 75 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    GREATERTHANOREQUAL reduce using rule 75 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    NOTEQUAL        reduce using rule 75 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    OR              reduce using rule 75 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    AND             reduce using rule 75 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    RPARENTHESIS    reduce using rule 75 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    COMMA           reduce using rule 75 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    DOUBLEDOT       reduce using rule 75 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)


state 186

    (78) arg_list -> arg COMMA n_function_call_4 arg_list .

    RPARENTHESIS    reduce using rule 78 (arg_list -> arg COMMA n_function_call_4 arg_list .)


state 187

    (123) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock . RCURLY n_close_scope condition_else n_two_way_conditional_2

    RCURLY          shift and go to state 191


state 188

    (122) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign . RPARENTHESIS LCURLY codeblock RCURLY n_close_scope

    RPARENTHESIS    shift and go to state 192


state 189

    (121) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope . codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (113) codeblock -> . empty
    (114) codeblock -> . codeblock_aux codeblock
    (45) empty -> .
    (115) codeblock_aux -> . statement
    (116) codeblock_aux -> . function_definition
    (117) codeblock_aux -> . condition_if
    (118) codeblock_aux -> . loop
    (108) statement -> . statement_aux SEMICOLON
    (71) function_definition -> . n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end
    (123) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (119) loop -> . forloop
    (120) loop -> . whileloop
    (109) statement_aux -> . assign
    (110) statement_aux -> . declare
    (111) statement_aux -> . function_call
    (112) statement_aux -> . print
    (31) n_before_function_definition -> .
    (122) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (121) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (105) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (106) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (104) declare -> . type NAME n_variable_instantiate
    (75) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (76) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (107) print -> . PRINT LPARENTHESIS expression n_print RPARENTHESIS
    (49) type -> . INT_TYPE n_seen_type
    (50) type -> . STRING_TYPE n_seen_type
    (51) type -> . DOUBLE_TYPE n_seen_type
    (52) type -> . FLOAT_TYPE n_seen_type
    (53) type -> . BOOL_TYPE n_seen_type

    RCURLY          reduce using rule 45 (empty -> .)
    IF              shift and go to state 15
    FUNCTION        reduce using rule 31 (n_before_function_definition -> .)
    FOR             shift and go to state 22
    WHILE           shift and go to state 23
    NAME            shift and go to state 14
    PRINT           shift and go to state 25
    INT_TYPE        shift and go to state 26
    STRING_TYPE     shift and go to state 27
    DOUBLE_TYPE     shift and go to state 28
    FLOAT_TYPE      shift and go to state 29
    BOOL_TYPE       shift and go to state 30

    codeblock                      shift and go to state 193
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    n_before_function_definition   shift and go to state 13
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    declare                        shift and go to state 19
    function_call                  shift and go to state 20
    print                          shift and go to state 21
    type                           shift and go to state 24

state 190

    (71) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start . codeblock return RCURLY n_close_scope n_function_block_end
    (113) codeblock -> . empty
    (114) codeblock -> . codeblock_aux codeblock
    (45) empty -> .
    (115) codeblock_aux -> . statement
    (116) codeblock_aux -> . function_definition
    (117) codeblock_aux -> . condition_if
    (118) codeblock_aux -> . loop
    (108) statement -> . statement_aux SEMICOLON
    (71) function_definition -> . n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end
    (123) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (119) loop -> . forloop
    (120) loop -> . whileloop
    (109) statement_aux -> . assign
    (110) statement_aux -> . declare
    (111) statement_aux -> . function_call
    (112) statement_aux -> . print
    (31) n_before_function_definition -> .
    (122) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (121) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (105) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (106) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (104) declare -> . type NAME n_variable_instantiate
    (75) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (76) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (107) print -> . PRINT LPARENTHESIS expression n_print RPARENTHESIS
    (49) type -> . INT_TYPE n_seen_type
    (50) type -> . STRING_TYPE n_seen_type
    (51) type -> . DOUBLE_TYPE n_seen_type
    (52) type -> . FLOAT_TYPE n_seen_type
    (53) type -> . BOOL_TYPE n_seen_type

    RETURN          reduce using rule 45 (empty -> .)
    RCURLY          reduce using rule 45 (empty -> .)
    IF              shift and go to state 15
    FUNCTION        reduce using rule 31 (n_before_function_definition -> .)
    FOR             shift and go to state 22
    WHILE           shift and go to state 23
    NAME            shift and go to state 14
    PRINT           shift and go to state 25
    INT_TYPE        shift and go to state 26
    STRING_TYPE     shift and go to state 27
    DOUBLE_TYPE     shift and go to state 28
    FLOAT_TYPE      shift and go to state 29
    BOOL_TYPE       shift and go to state 30

    n_before_function_definition   shift and go to state 13
    codeblock                      shift and go to state 194
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    declare                        shift and go to state 19
    function_call                  shift and go to state 20
    print                          shift and go to state 21
    type                           shift and go to state 24

state 191

    (123) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY . n_close_scope condition_else n_two_way_conditional_2
    (4) n_close_scope -> .

    ELSE            reduce using rule 4 (n_close_scope -> .)
    IF              reduce using rule 4 (n_close_scope -> .)
    FOR             reduce using rule 4 (n_close_scope -> .)
    WHILE           reduce using rule 4 (n_close_scope -> .)
    NAME            reduce using rule 4 (n_close_scope -> .)
    PRINT           reduce using rule 4 (n_close_scope -> .)
    INT_TYPE        reduce using rule 4 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 4 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 4 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 4 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 4 (n_close_scope -> .)
    FUNCTION        reduce using rule 4 (n_close_scope -> .)
    $end            reduce using rule 4 (n_close_scope -> .)
    RCURLY          reduce using rule 4 (n_close_scope -> .)
    RETURN          reduce using rule 4 (n_close_scope -> .)

    n_close_scope                  shift and go to state 195

state 192

    (122) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS . LCURLY codeblock RCURLY n_close_scope

    LCURLY          shift and go to state 196


state 193

    (121) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock . RCURLY p_n_pre_condition_loop_3 n_close_scope

    RCURLY          shift and go to state 197


state 194

    (71) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock . return RCURLY n_close_scope n_function_block_end
    (72) return -> . RETURN expression n_return SEMICOLON
    (73) return -> . RETURN n_return_void SEMICOLON
    (74) return -> . empty
    (45) empty -> .

    RETURN          shift and go to state 199
    RCURLY          reduce using rule 45 (empty -> .)

    return                         shift and go to state 198
    empty                          shift and go to state 200

state 195

    (123) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope . condition_else n_two_way_conditional_2
    (124) condition_else -> . ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope
    (125) condition_else -> . empty
    (45) empty -> .

    ELSE            shift and go to state 202
    IF              reduce using rule 45 (empty -> .)
    FOR             reduce using rule 45 (empty -> .)
    WHILE           reduce using rule 45 (empty -> .)
    NAME            reduce using rule 45 (empty -> .)
    PRINT           reduce using rule 45 (empty -> .)
    INT_TYPE        reduce using rule 45 (empty -> .)
    STRING_TYPE     reduce using rule 45 (empty -> .)
    DOUBLE_TYPE     reduce using rule 45 (empty -> .)
    FLOAT_TYPE      reduce using rule 45 (empty -> .)
    BOOL_TYPE       reduce using rule 45 (empty -> .)
    FUNCTION        reduce using rule 45 (empty -> .)
    $end            reduce using rule 45 (empty -> .)
    RCURLY          reduce using rule 45 (empty -> .)
    RETURN          reduce using rule 45 (empty -> .)

    condition_else                 shift and go to state 201
    empty                          shift and go to state 203

state 196

    (122) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY . codeblock RCURLY n_close_scope
    (113) codeblock -> . empty
    (114) codeblock -> . codeblock_aux codeblock
    (45) empty -> .
    (115) codeblock_aux -> . statement
    (116) codeblock_aux -> . function_definition
    (117) codeblock_aux -> . condition_if
    (118) codeblock_aux -> . loop
    (108) statement -> . statement_aux SEMICOLON
    (71) function_definition -> . n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end
    (123) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (119) loop -> . forloop
    (120) loop -> . whileloop
    (109) statement_aux -> . assign
    (110) statement_aux -> . declare
    (111) statement_aux -> . function_call
    (112) statement_aux -> . print
    (31) n_before_function_definition -> .
    (122) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (121) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (105) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (106) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (104) declare -> . type NAME n_variable_instantiate
    (75) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (76) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (107) print -> . PRINT LPARENTHESIS expression n_print RPARENTHESIS
    (49) type -> . INT_TYPE n_seen_type
    (50) type -> . STRING_TYPE n_seen_type
    (51) type -> . DOUBLE_TYPE n_seen_type
    (52) type -> . FLOAT_TYPE n_seen_type
    (53) type -> . BOOL_TYPE n_seen_type

    RCURLY          reduce using rule 45 (empty -> .)
    IF              shift and go to state 15
    FUNCTION        reduce using rule 31 (n_before_function_definition -> .)
    FOR             shift and go to state 22
    WHILE           shift and go to state 23
    NAME            shift and go to state 14
    PRINT           shift and go to state 25
    INT_TYPE        shift and go to state 26
    STRING_TYPE     shift and go to state 27
    DOUBLE_TYPE     shift and go to state 28
    FLOAT_TYPE      shift and go to state 29
    BOOL_TYPE       shift and go to state 30

    assign                         shift and go to state 18
    codeblock                      shift and go to state 204
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    n_before_function_definition   shift and go to state 13
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    declare                        shift and go to state 19
    function_call                  shift and go to state 20
    print                          shift and go to state 21
    type                           shift and go to state 24

state 197

    (121) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY . p_n_pre_condition_loop_3 n_close_scope
    (29) p_n_pre_condition_loop_3 -> .

    IF              reduce using rule 29 (p_n_pre_condition_loop_3 -> .)
    FOR             reduce using rule 29 (p_n_pre_condition_loop_3 -> .)
    WHILE           reduce using rule 29 (p_n_pre_condition_loop_3 -> .)
    NAME            reduce using rule 29 (p_n_pre_condition_loop_3 -> .)
    PRINT           reduce using rule 29 (p_n_pre_condition_loop_3 -> .)
    INT_TYPE        reduce using rule 29 (p_n_pre_condition_loop_3 -> .)
    STRING_TYPE     reduce using rule 29 (p_n_pre_condition_loop_3 -> .)
    DOUBLE_TYPE     reduce using rule 29 (p_n_pre_condition_loop_3 -> .)
    FLOAT_TYPE      reduce using rule 29 (p_n_pre_condition_loop_3 -> .)
    BOOL_TYPE       reduce using rule 29 (p_n_pre_condition_loop_3 -> .)
    FUNCTION        reduce using rule 29 (p_n_pre_condition_loop_3 -> .)
    $end            reduce using rule 29 (p_n_pre_condition_loop_3 -> .)
    RCURLY          reduce using rule 29 (p_n_pre_condition_loop_3 -> .)
    RETURN          reduce using rule 29 (p_n_pre_condition_loop_3 -> .)

    p_n_pre_condition_loop_3       shift and go to state 205

state 198

    (71) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return . RCURLY n_close_scope n_function_block_end

    RCURLY          shift and go to state 206


state 199

    (72) return -> RETURN . expression n_return SEMICOLON
    (73) return -> RETURN . n_return_void SEMICOLON
    (84) expression -> . expression_or
    (85) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (42) n_return_void -> .
    (86) expression_or -> . expression_rel
    (87) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (88) expression_rel -> . exp
    (89) expression_rel -> . exp relational_operator exp n_math_expression_9
    (90) exp -> . termino n_math_expression_4
    (91) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (92) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (93) termino -> . factor n_math_expression_5
    (94) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (95) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (96) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (97) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (98) factor -> . PLUS value
    (99) factor -> . MINUS value
    (100) factor -> . value
    (101) value -> . function_call
    (102) value -> . literal
    (103) value -> . NAME n_variable_reference n_math_expression_1_name
    (75) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (76) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (60) literal -> . FLOAT n_math_expression_1_float
    (61) literal -> . INT n_math_expression_1_int
    (62) literal -> . STRING n_math_expression_1_string
    (63) literal -> . TRUE n_math_expression_1_bool
    (64) literal -> . FALSE n_math_expression_1_bool

    SEMICOLON       reduce using rule 42 (n_return_void -> .)
    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NAME            shift and go to state 62
    FLOAT           shift and go to state 63
    INT             shift and go to state 64
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67

    expression                     shift and go to state 207
    n_return_void                  shift and go to state 208
    expression_or                  shift and go to state 52
    expression_rel                 shift and go to state 53
    exp                            shift and go to state 54
    termino                        shift and go to state 55
    factor                         shift and go to state 58
    value                          shift and go to state 59
    function_call                  shift and go to state 60
    literal                        shift and go to state 61

state 200

    (74) return -> empty .

    RCURLY          reduce using rule 74 (return -> empty .)


state 201

    (123) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else . n_two_way_conditional_2
    (25) n_two_way_conditional_2 -> .

    IF              reduce using rule 25 (n_two_way_conditional_2 -> .)
    FOR             reduce using rule 25 (n_two_way_conditional_2 -> .)
    WHILE           reduce using rule 25 (n_two_way_conditional_2 -> .)
    NAME            reduce using rule 25 (n_two_way_conditional_2 -> .)
    PRINT           reduce using rule 25 (n_two_way_conditional_2 -> .)
    INT_TYPE        reduce using rule 25 (n_two_way_conditional_2 -> .)
    STRING_TYPE     reduce using rule 25 (n_two_way_conditional_2 -> .)
    DOUBLE_TYPE     reduce using rule 25 (n_two_way_conditional_2 -> .)
    FLOAT_TYPE      reduce using rule 25 (n_two_way_conditional_2 -> .)
    BOOL_TYPE       reduce using rule 25 (n_two_way_conditional_2 -> .)
    FUNCTION        reduce using rule 25 (n_two_way_conditional_2 -> .)
    $end            reduce using rule 25 (n_two_way_conditional_2 -> .)
    RCURLY          reduce using rule 25 (n_two_way_conditional_2 -> .)
    RETURN          reduce using rule 25 (n_two_way_conditional_2 -> .)

    n_two_way_conditional_2        shift and go to state 209

state 202

    (124) condition_else -> ELSE . n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope
    (26) n_two_way_conditional_3 -> .

    LCURLY          reduce using rule 26 (n_two_way_conditional_3 -> .)

    n_two_way_conditional_3        shift and go to state 210

state 203

    (125) condition_else -> empty .

    IF              reduce using rule 125 (condition_else -> empty .)
    FOR             reduce using rule 125 (condition_else -> empty .)
    WHILE           reduce using rule 125 (condition_else -> empty .)
    NAME            reduce using rule 125 (condition_else -> empty .)
    PRINT           reduce using rule 125 (condition_else -> empty .)
    INT_TYPE        reduce using rule 125 (condition_else -> empty .)
    STRING_TYPE     reduce using rule 125 (condition_else -> empty .)
    DOUBLE_TYPE     reduce using rule 125 (condition_else -> empty .)
    FLOAT_TYPE      reduce using rule 125 (condition_else -> empty .)
    BOOL_TYPE       reduce using rule 125 (condition_else -> empty .)
    FUNCTION        reduce using rule 125 (condition_else -> empty .)
    $end            reduce using rule 125 (condition_else -> empty .)
    RCURLY          reduce using rule 125 (condition_else -> empty .)
    RETURN          reduce using rule 125 (condition_else -> empty .)


state 204

    (122) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock . RCURLY n_close_scope

    RCURLY          shift and go to state 211


state 205

    (121) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 . n_close_scope
    (4) n_close_scope -> .

    IF              reduce using rule 4 (n_close_scope -> .)
    FOR             reduce using rule 4 (n_close_scope -> .)
    WHILE           reduce using rule 4 (n_close_scope -> .)
    NAME            reduce using rule 4 (n_close_scope -> .)
    PRINT           reduce using rule 4 (n_close_scope -> .)
    INT_TYPE        reduce using rule 4 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 4 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 4 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 4 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 4 (n_close_scope -> .)
    FUNCTION        reduce using rule 4 (n_close_scope -> .)
    $end            reduce using rule 4 (n_close_scope -> .)
    RCURLY          reduce using rule 4 (n_close_scope -> .)
    RETURN          reduce using rule 4 (n_close_scope -> .)

    n_close_scope                  shift and go to state 212

state 206

    (71) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY . n_close_scope n_function_block_end
    (4) n_close_scope -> .

    IF              reduce using rule 4 (n_close_scope -> .)
    FOR             reduce using rule 4 (n_close_scope -> .)
    WHILE           reduce using rule 4 (n_close_scope -> .)
    NAME            reduce using rule 4 (n_close_scope -> .)
    PRINT           reduce using rule 4 (n_close_scope -> .)
    INT_TYPE        reduce using rule 4 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 4 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 4 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 4 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 4 (n_close_scope -> .)
    FUNCTION        reduce using rule 4 (n_close_scope -> .)
    $end            reduce using rule 4 (n_close_scope -> .)
    RCURLY          reduce using rule 4 (n_close_scope -> .)
    RETURN          reduce using rule 4 (n_close_scope -> .)

    n_close_scope                  shift and go to state 213

state 207

    (72) return -> RETURN expression . n_return SEMICOLON
    (41) n_return -> .

    SEMICOLON       reduce using rule 41 (n_return -> .)

    n_return                       shift and go to state 214

state 208

    (73) return -> RETURN n_return_void . SEMICOLON

    SEMICOLON       shift and go to state 215


state 209

    (123) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .

    IF              reduce using rule 123 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    FOR             reduce using rule 123 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    WHILE           reduce using rule 123 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    NAME            reduce using rule 123 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    PRINT           reduce using rule 123 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    INT_TYPE        reduce using rule 123 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    STRING_TYPE     reduce using rule 123 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    DOUBLE_TYPE     reduce using rule 123 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    FLOAT_TYPE      reduce using rule 123 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    BOOL_TYPE       reduce using rule 123 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    FUNCTION        reduce using rule 123 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    $end            reduce using rule 123 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    RCURLY          reduce using rule 123 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    RETURN          reduce using rule 123 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)


state 210

    (124) condition_else -> ELSE n_two_way_conditional_3 . LCURLY n_open_new_scope codeblock RCURLY n_close_scope

    LCURLY          shift and go to state 216


state 211

    (122) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY . n_close_scope
    (4) n_close_scope -> .

    IF              reduce using rule 4 (n_close_scope -> .)
    FOR             reduce using rule 4 (n_close_scope -> .)
    WHILE           reduce using rule 4 (n_close_scope -> .)
    NAME            reduce using rule 4 (n_close_scope -> .)
    PRINT           reduce using rule 4 (n_close_scope -> .)
    INT_TYPE        reduce using rule 4 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 4 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 4 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 4 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 4 (n_close_scope -> .)
    FUNCTION        reduce using rule 4 (n_close_scope -> .)
    $end            reduce using rule 4 (n_close_scope -> .)
    RCURLY          reduce using rule 4 (n_close_scope -> .)
    RETURN          reduce using rule 4 (n_close_scope -> .)

    n_close_scope                  shift and go to state 217

state 212

    (121) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .

    IF              reduce using rule 121 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    FOR             reduce using rule 121 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    WHILE           reduce using rule 121 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    NAME            reduce using rule 121 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    PRINT           reduce using rule 121 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    INT_TYPE        reduce using rule 121 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    STRING_TYPE     reduce using rule 121 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    DOUBLE_TYPE     reduce using rule 121 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    FLOAT_TYPE      reduce using rule 121 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    BOOL_TYPE       reduce using rule 121 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    FUNCTION        reduce using rule 121 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    $end            reduce using rule 121 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    RCURLY          reduce using rule 121 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    RETURN          reduce using rule 121 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)


state 213

    (71) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope . n_function_block_end
    (33) n_function_block_end -> .

    IF              reduce using rule 33 (n_function_block_end -> .)
    FOR             reduce using rule 33 (n_function_block_end -> .)
    WHILE           reduce using rule 33 (n_function_block_end -> .)
    NAME            reduce using rule 33 (n_function_block_end -> .)
    PRINT           reduce using rule 33 (n_function_block_end -> .)
    INT_TYPE        reduce using rule 33 (n_function_block_end -> .)
    STRING_TYPE     reduce using rule 33 (n_function_block_end -> .)
    DOUBLE_TYPE     reduce using rule 33 (n_function_block_end -> .)
    FLOAT_TYPE      reduce using rule 33 (n_function_block_end -> .)
    BOOL_TYPE       reduce using rule 33 (n_function_block_end -> .)
    FUNCTION        reduce using rule 33 (n_function_block_end -> .)
    $end            reduce using rule 33 (n_function_block_end -> .)
    RCURLY          reduce using rule 33 (n_function_block_end -> .)
    RETURN          reduce using rule 33 (n_function_block_end -> .)

    n_function_block_end           shift and go to state 218

state 214

    (72) return -> RETURN expression n_return . SEMICOLON

    SEMICOLON       shift and go to state 219


state 215

    (73) return -> RETURN n_return_void SEMICOLON .

    RCURLY          reduce using rule 73 (return -> RETURN n_return_void SEMICOLON .)


state 216

    (124) condition_else -> ELSE n_two_way_conditional_3 LCURLY . n_open_new_scope codeblock RCURLY n_close_scope
    (2) n_open_new_scope -> .

    IF              reduce using rule 2 (n_open_new_scope -> .)
    FOR             reduce using rule 2 (n_open_new_scope -> .)
    WHILE           reduce using rule 2 (n_open_new_scope -> .)
    NAME            reduce using rule 2 (n_open_new_scope -> .)
    PRINT           reduce using rule 2 (n_open_new_scope -> .)
    INT_TYPE        reduce using rule 2 (n_open_new_scope -> .)
    STRING_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    DOUBLE_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    FLOAT_TYPE      reduce using rule 2 (n_open_new_scope -> .)
    BOOL_TYPE       reduce using rule 2 (n_open_new_scope -> .)
    RCURLY          reduce using rule 2 (n_open_new_scope -> .)
    FUNCTION        reduce using rule 2 (n_open_new_scope -> .)

    n_open_new_scope               shift and go to state 220

state 217

    (122) forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .

    IF              reduce using rule 122 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    FOR             reduce using rule 122 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    WHILE           reduce using rule 122 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    NAME            reduce using rule 122 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    PRINT           reduce using rule 122 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    INT_TYPE        reduce using rule 122 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    STRING_TYPE     reduce using rule 122 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    DOUBLE_TYPE     reduce using rule 122 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    FLOAT_TYPE      reduce using rule 122 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    BOOL_TYPE       reduce using rule 122 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    FUNCTION        reduce using rule 122 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    $end            reduce using rule 122 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    RCURLY          reduce using rule 122 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)
    RETURN          reduce using rule 122 (forloop -> FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope .)


state 218

    (71) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end .

    IF              reduce using rule 71 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end .)
    FOR             reduce using rule 71 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end .)
    WHILE           reduce using rule 71 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end .)
    NAME            reduce using rule 71 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end .)
    PRINT           reduce using rule 71 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end .)
    INT_TYPE        reduce using rule 71 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end .)
    STRING_TYPE     reduce using rule 71 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end .)
    DOUBLE_TYPE     reduce using rule 71 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end .)
    FLOAT_TYPE      reduce using rule 71 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end .)
    BOOL_TYPE       reduce using rule 71 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end .)
    FUNCTION        reduce using rule 71 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end .)
    $end            reduce using rule 71 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end .)
    RCURLY          reduce using rule 71 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end .)
    RETURN          reduce using rule 71 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end .)


state 219

    (72) return -> RETURN expression n_return SEMICOLON .

    RCURLY          reduce using rule 72 (return -> RETURN expression n_return SEMICOLON .)


state 220

    (124) condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope . codeblock RCURLY n_close_scope
    (113) codeblock -> . empty
    (114) codeblock -> . codeblock_aux codeblock
    (45) empty -> .
    (115) codeblock_aux -> . statement
    (116) codeblock_aux -> . function_definition
    (117) codeblock_aux -> . condition_if
    (118) codeblock_aux -> . loop
    (108) statement -> . statement_aux SEMICOLON
    (71) function_definition -> . n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock return RCURLY n_close_scope n_function_block_end
    (123) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (119) loop -> . forloop
    (120) loop -> . whileloop
    (109) statement_aux -> . assign
    (110) statement_aux -> . declare
    (111) statement_aux -> . function_call
    (112) statement_aux -> . print
    (31) n_before_function_definition -> .
    (122) forloop -> . FOR LPARENTHESIS n_open_new_scope assign DOUBLEDOT expression DOUBLEDOT assign RPARENTHESIS LCURLY codeblock RCURLY n_close_scope
    (121) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (105) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (106) assign -> . NAME n_variable_reference n_math_expression_1_name EQUAL n_seen_equal_op expression
    (104) declare -> . type NAME n_variable_instantiate
    (75) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (76) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (107) print -> . PRINT LPARENTHESIS expression n_print RPARENTHESIS
    (49) type -> . INT_TYPE n_seen_type
    (50) type -> . STRING_TYPE n_seen_type
    (51) type -> . DOUBLE_TYPE n_seen_type
    (52) type -> . FLOAT_TYPE n_seen_type
    (53) type -> . BOOL_TYPE n_seen_type

    RCURLY          reduce using rule 45 (empty -> .)
    IF              shift and go to state 15
    FUNCTION        reduce using rule 31 (n_before_function_definition -> .)
    FOR             shift and go to state 22
    WHILE           shift and go to state 23
    NAME            shift and go to state 14
    PRINT           shift and go to state 25
    INT_TYPE        shift and go to state 26
    STRING_TYPE     shift and go to state 27
    DOUBLE_TYPE     shift and go to state 28
    FLOAT_TYPE      shift and go to state 29
    BOOL_TYPE       shift and go to state 30

    codeblock                      shift and go to state 221
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    statement_aux                  shift and go to state 12
    n_before_function_definition   shift and go to state 13
    forloop                        shift and go to state 16
    whileloop                      shift and go to state 17
    assign                         shift and go to state 18
    declare                        shift and go to state 19
    function_call                  shift and go to state 20
    print                          shift and go to state 21
    type                           shift and go to state 24

state 221

    (124) condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock . RCURLY n_close_scope

    RCURLY          shift and go to state 222


state 222

    (124) condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY . n_close_scope
    (4) n_close_scope -> .

    IF              reduce using rule 4 (n_close_scope -> .)
    FOR             reduce using rule 4 (n_close_scope -> .)
    WHILE           reduce using rule 4 (n_close_scope -> .)
    NAME            reduce using rule 4 (n_close_scope -> .)
    PRINT           reduce using rule 4 (n_close_scope -> .)
    INT_TYPE        reduce using rule 4 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 4 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 4 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 4 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 4 (n_close_scope -> .)
    FUNCTION        reduce using rule 4 (n_close_scope -> .)
    $end            reduce using rule 4 (n_close_scope -> .)
    RCURLY          reduce using rule 4 (n_close_scope -> .)
    RETURN          reduce using rule 4 (n_close_scope -> .)

    n_close_scope                  shift and go to state 223

state 223

    (124) condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .

    IF              reduce using rule 124 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    FOR             reduce using rule 124 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    WHILE           reduce using rule 124 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    NAME            reduce using rule 124 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    PRINT           reduce using rule 124 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    INT_TYPE        reduce using rule 124 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    STRING_TYPE     reduce using rule 124 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    DOUBLE_TYPE     reduce using rule 124 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    FLOAT_TYPE      reduce using rule 124 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    BOOL_TYPE       reduce using rule 124 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    FUNCTION        reduce using rule 124 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    $end            reduce using rule 124 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    RCURLY          reduce using rule 124 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    RETURN          reduce using rule 124 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)

