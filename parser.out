Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     n_seen_type -> <empty>
Rule 2     n_open_new_scope -> <empty>
Rule 3     n_open_new_scope_function -> <empty>
Rule 4     n_close_scope -> <empty>
Rule 5     n_variable_reference -> <empty>
Rule 6     n_variable_instantiate -> <empty>
Rule 7     n_variable_instantiate_param -> <empty>
Rule 8     n_math_expression_1_int -> <empty>
Rule 9     n_math_expression_1_float -> <empty>
Rule 10    n_math_expression_1_string -> <empty>
Rule 11    n_math_expression_1_bool -> <empty>
Rule 12    n_math_expression_1_name -> <empty>
Rule 13    n_math_expression_2 -> <empty>
Rule 14    n_math_expression_3 -> <empty>
Rule 15    n_math_expression_4 -> <empty>
Rule 16    n_math_expression_5 -> <empty>
Rule 17    n_math_expression_6 -> <empty>
Rule 18    n_math_expression_7 -> <empty>
Rule 19    n_math_expression_8 -> <empty>
Rule 20    n_math_expression_9 -> <empty>
Rule 21    n_math_expression_10 -> <empty>
Rule 22    n_math_expression_11 -> <empty>
Rule 23    n_math_expression_12 -> <empty>
Rule 24    n_two_way_conditional_1 -> <empty>
Rule 25    n_two_way_conditional_2 -> <empty>
Rule 26    n_two_way_conditional_3 -> <empty>
Rule 27    p_n_pre_condition_loop_1 -> <empty>
Rule 28    p_n_pre_condition_loop_2 -> <empty>
Rule 29    p_n_pre_condition_loop_3 -> <empty>
Rule 30    n_seen_equal_op -> <empty>
Rule 31    n_before_function_definition -> <empty>
Rule 32    n_function_block_start -> <empty>
Rule 33    n_function_block_end -> <empty>
Rule 34    n_function_type -> <empty>
Rule 35    n_function_call_1 -> <empty>
Rule 36    n_function_call_2 -> <empty>
Rule 37    n_function_call_3 -> <empty>
Rule 38    n_function_call_4 -> <empty>
Rule 39    n_function_call_5 -> <empty>
Rule 40    n_function_call_6 -> <empty>
Rule 41    n_return -> <empty>
Rule 42    n_return_void -> <empty>
Rule 43    n_print -> <empty>
Rule 44    n_input_string -> <empty>
Rule 45    n_input_int -> <empty>
Rule 46    n_input_float -> <empty>
Rule 47    n_arr_reference -> <empty>
Rule 48    n_matrix_reference -> <empty>
Rule 49    n_arr_instantiate_name -> <empty>
Rule 50    n_arr_reference_name -> <empty>
Rule 51    n_arr_instantiate_size -> <empty>
Rule 52    n_arr_instantiate -> <empty>
Rule 53    n_matrix_instantiate -> <empty>
Rule 54    n_end -> <empty>
Rule 55    empty -> <empty>
Rule 56    program -> program_aux codeblock n_end
Rule 57    program_aux -> IDK
Rule 58    program_aux -> OWO
Rule 59    type -> INT_TYPE n_seen_type
Rule 60    type -> STRING_TYPE n_seen_type
Rule 61    type -> DOUBLE_TYPE n_seen_type
Rule 62    type -> FLOAT_TYPE n_seen_type
Rule 63    type -> BOOL_TYPE n_seen_type
Rule 64    relational_operator -> GREATERTHAN n_math_expression_8
Rule 65    relational_operator -> LESSTHAN n_math_expression_8
Rule 66    relational_operator -> EQUALEQUAL n_math_expression_8
Rule 67    relational_operator -> LESSTHANOREQUAL n_math_expression_8
Rule 68    relational_operator -> GREATERTHANOREQUAL n_math_expression_8
Rule 69    relational_operator -> NOTEQUAL n_math_expression_8
Rule 70    literal -> FLOAT n_math_expression_1_float
Rule 71    literal -> INT n_math_expression_1_int
Rule 72    literal -> STRING n_math_expression_1_string
Rule 73    literal -> TRUE n_math_expression_1_bool
Rule 74    literal -> FALSE n_math_expression_1_bool
Rule 75    function_type -> VOID n_function_type
Rule 76    function_type -> INT_TYPE n_function_type
Rule 77    function_type -> STRING_TYPE n_function_type
Rule 78    function_type -> DOUBLE_TYPE n_function_type
Rule 79    function_type -> FLOAT_TYPE n_function_type
Rule 80    function_type -> BOOL_TYPE n_function_type
Rule 81    function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end
Rule 82    return -> RETURN expression n_return SEMICOLON
Rule 83    return -> RETURN n_return_void SEMICOLON
Rule 84    function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
Rule 85    function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
Rule 86    arg_list -> arg
Rule 87    arg_list -> arg COMMA n_function_call_4 arg_list
Rule 88    parameter_list -> empty
Rule 89    parameter_list -> parameter
Rule 90    parameter_list -> parameter COMMA parameter_list
Rule 91    arg -> expression n_function_call_3
Rule 92    parameter -> type NAME n_variable_instantiate_param
Rule 93    expression -> expression_or
Rule 94    expression -> expression_or AND n_math_expression_10 expression n_math_expression_11
Rule 95    expression_or -> expression_rel
Rule 96    expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12
Rule 97    expression_rel -> exp
Rule 98    expression_rel -> exp relational_operator exp n_math_expression_9
Rule 99    exp -> termino n_math_expression_4
Rule 100   exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp
Rule 101   exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp
Rule 102   termino -> factor n_math_expression_5
Rule 103   termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino
Rule 104   termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino
Rule 105   termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino
Rule 106   factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
Rule 107   factor -> PLUS value
Rule 108   factor -> MINUS value
Rule 109   factor -> value
Rule 110   input -> INPUTSTRING LPARENTHESIS RPARENTHESIS n_input_string
Rule 111   input -> INPUTINT LPARENTHESIS RPARENTHESIS n_input_int
Rule 112   input -> INPUTFLOAT LPARENTHESIS RPARENTHESIS n_input_float
Rule 113   value -> function_call
Rule 114   value -> literal
Rule 115   value -> reference
Rule 116   value -> input
Rule 117   reference -> NAME n_variable_reference n_math_expression_1_name
Rule 118   reference -> arr_reference
Rule 119   arr_reference -> <empty>
Rule 120   arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference
Rule 121   arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference
Rule 122   declare -> type NAME n_variable_instantiate
Rule 123   declare -> type NAME n_arr_instantiate_name LBRACKET INT n_arr_instantiate_size RBRACKET n_arr_instantiate
Rule 124   declare -> type NAME n_arr_instantiate_name LBRACKET INT n_arr_instantiate_size RBRACKET LBRACKET INT n_arr_instantiate_size RBRACKET n_matrix_instantiate
Rule 125   assign -> type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
Rule 126   assign -> reference EQUAL n_seen_equal_op expression
Rule 127   print -> PRINT LPARENTHESIS expression n_print RPARENTHESIS
Rule 128   statement -> statement_aux SEMICOLON
Rule 129   statement_aux -> assign
Rule 130   statement_aux -> declare
Rule 131   statement_aux -> function_call
Rule 132   statement_aux -> print
Rule 133   codeblock -> empty
Rule 134   codeblock -> codeblock_aux codeblock
Rule 135   codeblock_aux -> statement
Rule 136   codeblock_aux -> function_definition
Rule 137   codeblock_aux -> condition_if
Rule 138   codeblock_aux -> loop
Rule 139   codeblock_aux -> return
Rule 140   loop -> whileloop
Rule 141   whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
Rule 142   condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
Rule 143   condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope
Rule 144   condition_else -> empty

Terminals, with rules where they appear

AND                  : 94
BOOL_TYPE            : 63 80
COMMA                : 87 90
DIVIDE               : 104
DOUBLEDOT            : 81
DOUBLE_TYPE          : 61 78
ELSE                 : 143
EQUAL                : 125 126
EQUALEQUAL           : 66
FALSE                : 74
FLOAT                : 70
FLOAT_TYPE           : 62 79
FUNCTION             : 81
GREATERTHAN          : 64
GREATERTHANOREQUAL   : 68
IDK                  : 57
IF                   : 142
INPUTFLOAT           : 112
INPUTINT             : 111
INPUTSTRING          : 110
INT                  : 71 123 124 124
INT_TYPE             : 59 76
LBRACKET             : 120 121 121 123 124 124
LCURLY               : 81 141 142 143
LESSTHAN             : 65
LESSTHANOREQUAL      : 67
LPARENTHESIS         : 84 85 106 110 111 112 127 141 142
MINUS                : 101 108
MODULUS              : 105
NAME                 : 81 84 85 92 117 120 121 122 123 124 125
NOTEQUAL             : 69
OR                   : 96
OWO                  : 58
PLUS                 : 100 107
PRINT                : 127
RBRACKET             : 120 121 121 123 124 124
RCURLY               : 81 141 142 143
RETURN               : 82 83
RPARENTHESIS         : 84 85 106 110 111 112 127 141 142
SEMICOLON            : 82 83 128
STRING               : 72
STRING_TYPE          : 60 77
TIMES                : 103
TRUE                 : 73
VOID                 : 75
WHILE                : 141
error                : 

Nonterminals, with rules where they appear

arg                  : 86 87
arg_list             : 84 87
arr_reference        : 118
assign               : 129
codeblock            : 56 81 134 141 142 143
codeblock_aux        : 134
condition_else       : 142
condition_if         : 137
declare              : 130
empty                : 88 133 144
exp                  : 97 98 98 100 101
expression           : 82 91 94 106 120 121 121 125 126 127 141 142
expression_or        : 93 94 96
expression_rel       : 95 96
factor               : 102 103 104 105
function_call        : 113 131
function_definition  : 136
function_type        : 81
input                : 116
literal              : 114
loop                 : 138
n_arr_instantiate    : 123
n_arr_instantiate_name : 123 124
n_arr_instantiate_size : 123 124 124
n_arr_reference      : 120
n_arr_reference_name : 120 121
n_before_function_definition : 81
n_close_scope        : 81 141 142 143
n_end                : 56
n_function_block_end : 81
n_function_block_start : 81
n_function_call_1    : 84 85
n_function_call_2    : 84
n_function_call_3    : 91
n_function_call_4    : 87
n_function_call_5    : 84
n_function_call_6    : 84 85
n_function_type      : 75 76 77 78 79 80
n_input_float        : 112
n_input_int          : 111
n_input_string       : 110
n_math_expression_10 : 94 96
n_math_expression_11 : 94
n_math_expression_12 : 96
n_math_expression_1_bool : 73 74
n_math_expression_1_float : 70
n_math_expression_1_int : 71
n_math_expression_1_name : 117 125
n_math_expression_1_string : 72
n_math_expression_2  : 100 101
n_math_expression_3  : 103 104 105
n_math_expression_4  : 99 100 101
n_math_expression_5  : 102 103 104 105
n_math_expression_6  : 106
n_math_expression_7  : 106
n_math_expression_8  : 64 65 66 67 68 69
n_math_expression_9  : 98
n_matrix_instantiate : 124
n_matrix_reference   : 121
n_open_new_scope     : 141 142 143
n_open_new_scope_function : 81
n_print              : 127
n_return             : 82
n_return_void        : 83
n_seen_equal_op      : 125 126
n_seen_type          : 59 60 61 62 63
n_two_way_conditional_1 : 142
n_two_way_conditional_2 : 142
n_two_way_conditional_3 : 143
n_variable_instantiate : 122 125
n_variable_instantiate_param : 92
n_variable_reference : 117
p_n_pre_condition_loop_1 : 141
p_n_pre_condition_loop_2 : 141
p_n_pre_condition_loop_3 : 141
parameter            : 89 90
parameter_list       : 81 90
print                : 132
program              : 0
program_aux          : 56
reference            : 115 126
relational_operator  : 98
return               : 139
statement            : 135
statement_aux        : 128
termino              : 99 100 101 103 104 105
type                 : 92 122 123 124 125
value                : 107 108 109
whileloop            : 140

Parsing method: LALR

state 0

    (0) S' -> . program
    (56) program -> . program_aux codeblock n_end
    (57) program_aux -> . IDK
    (58) program_aux -> . OWO

    IDK             shift and go to state 3
    OWO             shift and go to state 4

    program                        shift and go to state 1
    program_aux                    shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (56) program -> program_aux . codeblock n_end
    (133) codeblock -> . empty
    (134) codeblock -> . codeblock_aux codeblock
    (55) empty -> .
    (135) codeblock_aux -> . statement
    (136) codeblock_aux -> . function_definition
    (137) codeblock_aux -> . condition_if
    (138) codeblock_aux -> . loop
    (139) codeblock_aux -> . return
    (128) statement -> . statement_aux SEMICOLON
    (81) function_definition -> . n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end
    (142) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (140) loop -> . whileloop
    (82) return -> . RETURN expression n_return SEMICOLON
    (83) return -> . RETURN n_return_void SEMICOLON
    (129) statement_aux -> . assign
    (130) statement_aux -> . declare
    (131) statement_aux -> . function_call
    (132) statement_aux -> . print
    (31) n_before_function_definition -> .
    (141) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (125) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (126) assign -> . reference EQUAL n_seen_equal_op expression
    (122) declare -> . type NAME n_variable_instantiate
    (123) declare -> . type NAME n_arr_instantiate_name LBRACKET INT n_arr_instantiate_size RBRACKET n_arr_instantiate
    (124) declare -> . type NAME n_arr_instantiate_name LBRACKET INT n_arr_instantiate_size RBRACKET LBRACKET INT n_arr_instantiate_size RBRACKET n_matrix_instantiate
    (84) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (85) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (127) print -> . PRINT LPARENTHESIS expression n_print RPARENTHESIS
    (59) type -> . INT_TYPE n_seen_type
    (60) type -> . STRING_TYPE n_seen_type
    (61) type -> . DOUBLE_TYPE n_seen_type
    (62) type -> . FLOAT_TYPE n_seen_type
    (63) type -> . BOOL_TYPE n_seen_type
    (117) reference -> . NAME n_variable_reference n_math_expression_1_name
    (118) reference -> . arr_reference
    (119) arr_reference -> .
    (120) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference
    (121) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference

    $end            reduce using rule 55 (empty -> .)
    IF              shift and go to state 16
    RETURN          shift and go to state 18
    FUNCTION        reduce using rule 31 (n_before_function_definition -> .)
    WHILE           shift and go to state 23
    NAME            shift and go to state 15
    PRINT           shift and go to state 26
    INT_TYPE        shift and go to state 27
    STRING_TYPE     shift and go to state 28
    DOUBLE_TYPE     shift and go to state 29
    FLOAT_TYPE      shift and go to state 30
    BOOL_TYPE       shift and go to state 31
    EQUAL           reduce using rule 119 (arr_reference -> .)

    codeblock                      shift and go to state 5
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    return                         shift and go to state 12
    statement_aux                  shift and go to state 13
    n_before_function_definition   shift and go to state 14
    whileloop                      shift and go to state 17
    assign                         shift and go to state 19
    declare                        shift and go to state 20
    function_call                  shift and go to state 21
    print                          shift and go to state 22
    type                           shift and go to state 24
    reference                      shift and go to state 25
    arr_reference                  shift and go to state 32

state 3

    (57) program_aux -> IDK .

    IF              reduce using rule 57 (program_aux -> IDK .)
    RETURN          reduce using rule 57 (program_aux -> IDK .)
    WHILE           reduce using rule 57 (program_aux -> IDK .)
    NAME            reduce using rule 57 (program_aux -> IDK .)
    PRINT           reduce using rule 57 (program_aux -> IDK .)
    INT_TYPE        reduce using rule 57 (program_aux -> IDK .)
    STRING_TYPE     reduce using rule 57 (program_aux -> IDK .)
    DOUBLE_TYPE     reduce using rule 57 (program_aux -> IDK .)
    FLOAT_TYPE      reduce using rule 57 (program_aux -> IDK .)
    BOOL_TYPE       reduce using rule 57 (program_aux -> IDK .)
    FUNCTION        reduce using rule 57 (program_aux -> IDK .)
    EQUAL           reduce using rule 57 (program_aux -> IDK .)
    $end            reduce using rule 57 (program_aux -> IDK .)


state 4

    (58) program_aux -> OWO .

    IF              reduce using rule 58 (program_aux -> OWO .)
    RETURN          reduce using rule 58 (program_aux -> OWO .)
    WHILE           reduce using rule 58 (program_aux -> OWO .)
    NAME            reduce using rule 58 (program_aux -> OWO .)
    PRINT           reduce using rule 58 (program_aux -> OWO .)
    INT_TYPE        reduce using rule 58 (program_aux -> OWO .)
    STRING_TYPE     reduce using rule 58 (program_aux -> OWO .)
    DOUBLE_TYPE     reduce using rule 58 (program_aux -> OWO .)
    FLOAT_TYPE      reduce using rule 58 (program_aux -> OWO .)
    BOOL_TYPE       reduce using rule 58 (program_aux -> OWO .)
    FUNCTION        reduce using rule 58 (program_aux -> OWO .)
    EQUAL           reduce using rule 58 (program_aux -> OWO .)
    $end            reduce using rule 58 (program_aux -> OWO .)


state 5

    (56) program -> program_aux codeblock . n_end
    (54) n_end -> .

    $end            reduce using rule 54 (n_end -> .)

    n_end                          shift and go to state 33

state 6

    (133) codeblock -> empty .

    $end            reduce using rule 133 (codeblock -> empty .)
    RCURLY          reduce using rule 133 (codeblock -> empty .)


state 7

    (134) codeblock -> codeblock_aux . codeblock
    (133) codeblock -> . empty
    (134) codeblock -> . codeblock_aux codeblock
    (55) empty -> .
    (135) codeblock_aux -> . statement
    (136) codeblock_aux -> . function_definition
    (137) codeblock_aux -> . condition_if
    (138) codeblock_aux -> . loop
    (139) codeblock_aux -> . return
    (128) statement -> . statement_aux SEMICOLON
    (81) function_definition -> . n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end
    (142) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (140) loop -> . whileloop
    (82) return -> . RETURN expression n_return SEMICOLON
    (83) return -> . RETURN n_return_void SEMICOLON
    (129) statement_aux -> . assign
    (130) statement_aux -> . declare
    (131) statement_aux -> . function_call
    (132) statement_aux -> . print
    (31) n_before_function_definition -> .
    (141) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (125) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (126) assign -> . reference EQUAL n_seen_equal_op expression
    (122) declare -> . type NAME n_variable_instantiate
    (123) declare -> . type NAME n_arr_instantiate_name LBRACKET INT n_arr_instantiate_size RBRACKET n_arr_instantiate
    (124) declare -> . type NAME n_arr_instantiate_name LBRACKET INT n_arr_instantiate_size RBRACKET LBRACKET INT n_arr_instantiate_size RBRACKET n_matrix_instantiate
    (84) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (85) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (127) print -> . PRINT LPARENTHESIS expression n_print RPARENTHESIS
    (59) type -> . INT_TYPE n_seen_type
    (60) type -> . STRING_TYPE n_seen_type
    (61) type -> . DOUBLE_TYPE n_seen_type
    (62) type -> . FLOAT_TYPE n_seen_type
    (63) type -> . BOOL_TYPE n_seen_type
    (117) reference -> . NAME n_variable_reference n_math_expression_1_name
    (118) reference -> . arr_reference
    (119) arr_reference -> .
    (120) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference
    (121) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference

    $end            reduce using rule 55 (empty -> .)
    RCURLY          reduce using rule 55 (empty -> .)
    IF              shift and go to state 16
    RETURN          shift and go to state 18
    FUNCTION        reduce using rule 31 (n_before_function_definition -> .)
    WHILE           shift and go to state 23
    NAME            shift and go to state 15
    PRINT           shift and go to state 26
    INT_TYPE        shift and go to state 27
    STRING_TYPE     shift and go to state 28
    DOUBLE_TYPE     shift and go to state 29
    FLOAT_TYPE      shift and go to state 30
    BOOL_TYPE       shift and go to state 31
    EQUAL           reduce using rule 119 (arr_reference -> .)

    codeblock_aux                  shift and go to state 7
    codeblock                      shift and go to state 34
    empty                          shift and go to state 6
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    return                         shift and go to state 12
    statement_aux                  shift and go to state 13
    n_before_function_definition   shift and go to state 14
    whileloop                      shift and go to state 17
    assign                         shift and go to state 19
    declare                        shift and go to state 20
    function_call                  shift and go to state 21
    print                          shift and go to state 22
    type                           shift and go to state 24
    reference                      shift and go to state 25
    arr_reference                  shift and go to state 32

state 8

    (135) codeblock_aux -> statement .

    IF              reduce using rule 135 (codeblock_aux -> statement .)
    RETURN          reduce using rule 135 (codeblock_aux -> statement .)
    WHILE           reduce using rule 135 (codeblock_aux -> statement .)
    NAME            reduce using rule 135 (codeblock_aux -> statement .)
    PRINT           reduce using rule 135 (codeblock_aux -> statement .)
    INT_TYPE        reduce using rule 135 (codeblock_aux -> statement .)
    STRING_TYPE     reduce using rule 135 (codeblock_aux -> statement .)
    DOUBLE_TYPE     reduce using rule 135 (codeblock_aux -> statement .)
    FLOAT_TYPE      reduce using rule 135 (codeblock_aux -> statement .)
    BOOL_TYPE       reduce using rule 135 (codeblock_aux -> statement .)
    FUNCTION        reduce using rule 135 (codeblock_aux -> statement .)
    EQUAL           reduce using rule 135 (codeblock_aux -> statement .)
    $end            reduce using rule 135 (codeblock_aux -> statement .)
    RCURLY          reduce using rule 135 (codeblock_aux -> statement .)


state 9

    (136) codeblock_aux -> function_definition .

    IF              reduce using rule 136 (codeblock_aux -> function_definition .)
    RETURN          reduce using rule 136 (codeblock_aux -> function_definition .)
    WHILE           reduce using rule 136 (codeblock_aux -> function_definition .)
    NAME            reduce using rule 136 (codeblock_aux -> function_definition .)
    PRINT           reduce using rule 136 (codeblock_aux -> function_definition .)
    INT_TYPE        reduce using rule 136 (codeblock_aux -> function_definition .)
    STRING_TYPE     reduce using rule 136 (codeblock_aux -> function_definition .)
    DOUBLE_TYPE     reduce using rule 136 (codeblock_aux -> function_definition .)
    FLOAT_TYPE      reduce using rule 136 (codeblock_aux -> function_definition .)
    BOOL_TYPE       reduce using rule 136 (codeblock_aux -> function_definition .)
    FUNCTION        reduce using rule 136 (codeblock_aux -> function_definition .)
    EQUAL           reduce using rule 136 (codeblock_aux -> function_definition .)
    $end            reduce using rule 136 (codeblock_aux -> function_definition .)
    RCURLY          reduce using rule 136 (codeblock_aux -> function_definition .)


state 10

    (137) codeblock_aux -> condition_if .

    IF              reduce using rule 137 (codeblock_aux -> condition_if .)
    RETURN          reduce using rule 137 (codeblock_aux -> condition_if .)
    WHILE           reduce using rule 137 (codeblock_aux -> condition_if .)
    NAME            reduce using rule 137 (codeblock_aux -> condition_if .)
    PRINT           reduce using rule 137 (codeblock_aux -> condition_if .)
    INT_TYPE        reduce using rule 137 (codeblock_aux -> condition_if .)
    STRING_TYPE     reduce using rule 137 (codeblock_aux -> condition_if .)
    DOUBLE_TYPE     reduce using rule 137 (codeblock_aux -> condition_if .)
    FLOAT_TYPE      reduce using rule 137 (codeblock_aux -> condition_if .)
    BOOL_TYPE       reduce using rule 137 (codeblock_aux -> condition_if .)
    FUNCTION        reduce using rule 137 (codeblock_aux -> condition_if .)
    EQUAL           reduce using rule 137 (codeblock_aux -> condition_if .)
    $end            reduce using rule 137 (codeblock_aux -> condition_if .)
    RCURLY          reduce using rule 137 (codeblock_aux -> condition_if .)


state 11

    (138) codeblock_aux -> loop .

    IF              reduce using rule 138 (codeblock_aux -> loop .)
    RETURN          reduce using rule 138 (codeblock_aux -> loop .)
    WHILE           reduce using rule 138 (codeblock_aux -> loop .)
    NAME            reduce using rule 138 (codeblock_aux -> loop .)
    PRINT           reduce using rule 138 (codeblock_aux -> loop .)
    INT_TYPE        reduce using rule 138 (codeblock_aux -> loop .)
    STRING_TYPE     reduce using rule 138 (codeblock_aux -> loop .)
    DOUBLE_TYPE     reduce using rule 138 (codeblock_aux -> loop .)
    FLOAT_TYPE      reduce using rule 138 (codeblock_aux -> loop .)
    BOOL_TYPE       reduce using rule 138 (codeblock_aux -> loop .)
    FUNCTION        reduce using rule 138 (codeblock_aux -> loop .)
    EQUAL           reduce using rule 138 (codeblock_aux -> loop .)
    $end            reduce using rule 138 (codeblock_aux -> loop .)
    RCURLY          reduce using rule 138 (codeblock_aux -> loop .)


state 12

    (139) codeblock_aux -> return .

    IF              reduce using rule 139 (codeblock_aux -> return .)
    RETURN          reduce using rule 139 (codeblock_aux -> return .)
    WHILE           reduce using rule 139 (codeblock_aux -> return .)
    NAME            reduce using rule 139 (codeblock_aux -> return .)
    PRINT           reduce using rule 139 (codeblock_aux -> return .)
    INT_TYPE        reduce using rule 139 (codeblock_aux -> return .)
    STRING_TYPE     reduce using rule 139 (codeblock_aux -> return .)
    DOUBLE_TYPE     reduce using rule 139 (codeblock_aux -> return .)
    FLOAT_TYPE      reduce using rule 139 (codeblock_aux -> return .)
    BOOL_TYPE       reduce using rule 139 (codeblock_aux -> return .)
    FUNCTION        reduce using rule 139 (codeblock_aux -> return .)
    EQUAL           reduce using rule 139 (codeblock_aux -> return .)
    $end            reduce using rule 139 (codeblock_aux -> return .)
    RCURLY          reduce using rule 139 (codeblock_aux -> return .)


state 13

    (128) statement -> statement_aux . SEMICOLON

    SEMICOLON       shift and go to state 35


state 14

    (81) function_definition -> n_before_function_definition . FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end

    FUNCTION        shift and go to state 36


state 15

    (84) function_call -> NAME . n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (85) function_call -> NAME . n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (117) reference -> NAME . n_variable_reference n_math_expression_1_name
    (120) arr_reference -> NAME . n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference
    (121) arr_reference -> NAME . n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference
    (35) n_function_call_1 -> .
    (5) n_variable_reference -> .
    (50) n_arr_reference_name -> .

    LPARENTHESIS    reduce using rule 35 (n_function_call_1 -> .)
    EQUAL           reduce using rule 5 (n_variable_reference -> .)
    TIMES           reduce using rule 5 (n_variable_reference -> .)
    DIVIDE          reduce using rule 5 (n_variable_reference -> .)
    MODULUS         reduce using rule 5 (n_variable_reference -> .)
    PLUS            reduce using rule 5 (n_variable_reference -> .)
    MINUS           reduce using rule 5 (n_variable_reference -> .)
    GREATERTHAN     reduce using rule 5 (n_variable_reference -> .)
    LESSTHAN        reduce using rule 5 (n_variable_reference -> .)
    EQUALEQUAL      reduce using rule 5 (n_variable_reference -> .)
    LESSTHANOREQUAL reduce using rule 5 (n_variable_reference -> .)
    GREATERTHANOREQUAL reduce using rule 5 (n_variable_reference -> .)
    NOTEQUAL        reduce using rule 5 (n_variable_reference -> .)
    OR              reduce using rule 5 (n_variable_reference -> .)
    AND             reduce using rule 5 (n_variable_reference -> .)
    SEMICOLON       reduce using rule 5 (n_variable_reference -> .)
    RPARENTHESIS    reduce using rule 5 (n_variable_reference -> .)
    RBRACKET        reduce using rule 5 (n_variable_reference -> .)
    COMMA           reduce using rule 5 (n_variable_reference -> .)
    LBRACKET        reduce using rule 50 (n_arr_reference_name -> .)

    n_function_call_1              shift and go to state 37
    n_variable_reference           shift and go to state 38
    n_arr_reference_name           shift and go to state 39

state 16

    (142) condition_if -> IF . LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2

    LPARENTHESIS    shift and go to state 40


state 17

    (140) loop -> whileloop .

    IF              reduce using rule 140 (loop -> whileloop .)
    RETURN          reduce using rule 140 (loop -> whileloop .)
    WHILE           reduce using rule 140 (loop -> whileloop .)
    NAME            reduce using rule 140 (loop -> whileloop .)
    PRINT           reduce using rule 140 (loop -> whileloop .)
    INT_TYPE        reduce using rule 140 (loop -> whileloop .)
    STRING_TYPE     reduce using rule 140 (loop -> whileloop .)
    DOUBLE_TYPE     reduce using rule 140 (loop -> whileloop .)
    FLOAT_TYPE      reduce using rule 140 (loop -> whileloop .)
    BOOL_TYPE       reduce using rule 140 (loop -> whileloop .)
    FUNCTION        reduce using rule 140 (loop -> whileloop .)
    EQUAL           reduce using rule 140 (loop -> whileloop .)
    $end            reduce using rule 140 (loop -> whileloop .)
    RCURLY          reduce using rule 140 (loop -> whileloop .)


state 18

    (82) return -> RETURN . expression n_return SEMICOLON
    (83) return -> RETURN . n_return_void SEMICOLON
    (93) expression -> . expression_or
    (94) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (42) n_return_void -> .
    (95) expression_or -> . expression_rel
    (96) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (97) expression_rel -> . exp
    (98) expression_rel -> . exp relational_operator exp n_math_expression_9
    (99) exp -> . termino n_math_expression_4
    (100) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (101) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (102) termino -> . factor n_math_expression_5
    (103) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (104) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (105) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (106) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (107) factor -> . PLUS value
    (108) factor -> . MINUS value
    (109) factor -> . value
    (113) value -> . function_call
    (114) value -> . literal
    (115) value -> . reference
    (116) value -> . input
    (84) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (85) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (70) literal -> . FLOAT n_math_expression_1_float
    (71) literal -> . INT n_math_expression_1_int
    (72) literal -> . STRING n_math_expression_1_string
    (73) literal -> . TRUE n_math_expression_1_bool
    (74) literal -> . FALSE n_math_expression_1_bool
    (117) reference -> . NAME n_variable_reference n_math_expression_1_name
    (118) reference -> . arr_reference
    (110) input -> . INPUTSTRING LPARENTHESIS RPARENTHESIS n_input_string
    (111) input -> . INPUTINT LPARENTHESIS RPARENTHESIS n_input_int
    (112) input -> . INPUTFLOAT LPARENTHESIS RPARENTHESIS n_input_float
    (119) arr_reference -> .
    (120) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference
    (121) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for SEMICOLON resolved using rule 42 (n_return_void -> .)
    SEMICOLON       reduce using rule 42 (n_return_void -> .)
    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    NAME            shift and go to state 15
    FLOAT           shift and go to state 56
    INT             shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    INPUTSTRING     shift and go to state 61
    INPUTINT        shift and go to state 62
    INPUTFLOAT      shift and go to state 63
    TIMES           reduce using rule 119 (arr_reference -> .)
    DIVIDE          reduce using rule 119 (arr_reference -> .)
    MODULUS         reduce using rule 119 (arr_reference -> .)
    GREATERTHAN     reduce using rule 119 (arr_reference -> .)
    LESSTHAN        reduce using rule 119 (arr_reference -> .)
    EQUALEQUAL      reduce using rule 119 (arr_reference -> .)
    LESSTHANOREQUAL reduce using rule 119 (arr_reference -> .)
    GREATERTHANOREQUAL reduce using rule 119 (arr_reference -> .)
    NOTEQUAL        reduce using rule 119 (arr_reference -> .)
    OR              reduce using rule 119 (arr_reference -> .)
    AND             reduce using rule 119 (arr_reference -> .)

  ! PLUS            [ reduce using rule 119 (arr_reference -> .) ]
  ! MINUS           [ reduce using rule 119 (arr_reference -> .) ]
  ! SEMICOLON       [ reduce using rule 119 (arr_reference -> .) ]

    expression                     shift and go to state 41
    n_return_void                  shift and go to state 42
    expression_or                  shift and go to state 43
    expression_rel                 shift and go to state 44
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 49
    value                          shift and go to state 51
    function_call                  shift and go to state 52
    literal                        shift and go to state 53
    reference                      shift and go to state 54
    input                          shift and go to state 55
    arr_reference                  shift and go to state 32

state 19

    (129) statement_aux -> assign .

    SEMICOLON       reduce using rule 129 (statement_aux -> assign .)


state 20

    (130) statement_aux -> declare .

    SEMICOLON       reduce using rule 130 (statement_aux -> declare .)


state 21

    (131) statement_aux -> function_call .

    SEMICOLON       reduce using rule 131 (statement_aux -> function_call .)


state 22

    (132) statement_aux -> print .

    SEMICOLON       reduce using rule 132 (statement_aux -> print .)


state 23

    (141) whileloop -> WHILE . p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (27) p_n_pre_condition_loop_1 -> .

    LPARENTHESIS    reduce using rule 27 (p_n_pre_condition_loop_1 -> .)

    p_n_pre_condition_loop_1       shift and go to state 64

state 24

    (125) assign -> type . NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (122) declare -> type . NAME n_variable_instantiate
    (123) declare -> type . NAME n_arr_instantiate_name LBRACKET INT n_arr_instantiate_size RBRACKET n_arr_instantiate
    (124) declare -> type . NAME n_arr_instantiate_name LBRACKET INT n_arr_instantiate_size RBRACKET LBRACKET INT n_arr_instantiate_size RBRACKET n_matrix_instantiate

    NAME            shift and go to state 65


state 25

    (126) assign -> reference . EQUAL n_seen_equal_op expression

    EQUAL           shift and go to state 66


state 26

    (127) print -> PRINT . LPARENTHESIS expression n_print RPARENTHESIS

    LPARENTHESIS    shift and go to state 67


state 27

    (59) type -> INT_TYPE . n_seen_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 68

state 28

    (60) type -> STRING_TYPE . n_seen_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 69

state 29

    (61) type -> DOUBLE_TYPE . n_seen_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 70

state 30

    (62) type -> FLOAT_TYPE . n_seen_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 71

state 31

    (63) type -> BOOL_TYPE . n_seen_type
    (1) n_seen_type -> .

    NAME            reduce using rule 1 (n_seen_type -> .)

    n_seen_type                    shift and go to state 72

state 32

    (118) reference -> arr_reference .

    EQUAL           reduce using rule 118 (reference -> arr_reference .)
    TIMES           reduce using rule 118 (reference -> arr_reference .)
    DIVIDE          reduce using rule 118 (reference -> arr_reference .)
    MODULUS         reduce using rule 118 (reference -> arr_reference .)
    PLUS            reduce using rule 118 (reference -> arr_reference .)
    MINUS           reduce using rule 118 (reference -> arr_reference .)
    GREATERTHAN     reduce using rule 118 (reference -> arr_reference .)
    LESSTHAN        reduce using rule 118 (reference -> arr_reference .)
    EQUALEQUAL      reduce using rule 118 (reference -> arr_reference .)
    LESSTHANOREQUAL reduce using rule 118 (reference -> arr_reference .)
    GREATERTHANOREQUAL reduce using rule 118 (reference -> arr_reference .)
    NOTEQUAL        reduce using rule 118 (reference -> arr_reference .)
    OR              reduce using rule 118 (reference -> arr_reference .)
    AND             reduce using rule 118 (reference -> arr_reference .)
    SEMICOLON       reduce using rule 118 (reference -> arr_reference .)
    RPARENTHESIS    reduce using rule 118 (reference -> arr_reference .)
    RBRACKET        reduce using rule 118 (reference -> arr_reference .)
    COMMA           reduce using rule 118 (reference -> arr_reference .)


state 33

    (56) program -> program_aux codeblock n_end .

    $end            reduce using rule 56 (program -> program_aux codeblock n_end .)


state 34

    (134) codeblock -> codeblock_aux codeblock .

    $end            reduce using rule 134 (codeblock -> codeblock_aux codeblock .)
    RCURLY          reduce using rule 134 (codeblock -> codeblock_aux codeblock .)


state 35

    (128) statement -> statement_aux SEMICOLON .

    IF              reduce using rule 128 (statement -> statement_aux SEMICOLON .)
    RETURN          reduce using rule 128 (statement -> statement_aux SEMICOLON .)
    WHILE           reduce using rule 128 (statement -> statement_aux SEMICOLON .)
    NAME            reduce using rule 128 (statement -> statement_aux SEMICOLON .)
    PRINT           reduce using rule 128 (statement -> statement_aux SEMICOLON .)
    INT_TYPE        reduce using rule 128 (statement -> statement_aux SEMICOLON .)
    STRING_TYPE     reduce using rule 128 (statement -> statement_aux SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 128 (statement -> statement_aux SEMICOLON .)
    FLOAT_TYPE      reduce using rule 128 (statement -> statement_aux SEMICOLON .)
    BOOL_TYPE       reduce using rule 128 (statement -> statement_aux SEMICOLON .)
    FUNCTION        reduce using rule 128 (statement -> statement_aux SEMICOLON .)
    EQUAL           reduce using rule 128 (statement -> statement_aux SEMICOLON .)
    $end            reduce using rule 128 (statement -> statement_aux SEMICOLON .)
    RCURLY          reduce using rule 128 (statement -> statement_aux SEMICOLON .)


state 36

    (81) function_definition -> n_before_function_definition FUNCTION . NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end

    NAME            shift and go to state 73


state 37

    (84) function_call -> NAME n_function_call_1 . LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (85) function_call -> NAME n_function_call_1 . LPARENTHESIS RPARENTHESIS n_function_call_6

    LPARENTHESIS    shift and go to state 74


state 38

    (117) reference -> NAME n_variable_reference . n_math_expression_1_name
    (12) n_math_expression_1_name -> .

    EQUAL           reduce using rule 12 (n_math_expression_1_name -> .)
    TIMES           reduce using rule 12 (n_math_expression_1_name -> .)
    DIVIDE          reduce using rule 12 (n_math_expression_1_name -> .)
    MODULUS         reduce using rule 12 (n_math_expression_1_name -> .)
    PLUS            reduce using rule 12 (n_math_expression_1_name -> .)
    MINUS           reduce using rule 12 (n_math_expression_1_name -> .)
    GREATERTHAN     reduce using rule 12 (n_math_expression_1_name -> .)
    LESSTHAN        reduce using rule 12 (n_math_expression_1_name -> .)
    EQUALEQUAL      reduce using rule 12 (n_math_expression_1_name -> .)
    LESSTHANOREQUAL reduce using rule 12 (n_math_expression_1_name -> .)
    GREATERTHANOREQUAL reduce using rule 12 (n_math_expression_1_name -> .)
    NOTEQUAL        reduce using rule 12 (n_math_expression_1_name -> .)
    OR              reduce using rule 12 (n_math_expression_1_name -> .)
    AND             reduce using rule 12 (n_math_expression_1_name -> .)
    SEMICOLON       reduce using rule 12 (n_math_expression_1_name -> .)
    RPARENTHESIS    reduce using rule 12 (n_math_expression_1_name -> .)
    RBRACKET        reduce using rule 12 (n_math_expression_1_name -> .)
    COMMA           reduce using rule 12 (n_math_expression_1_name -> .)

    n_math_expression_1_name       shift and go to state 75

state 39

    (120) arr_reference -> NAME n_arr_reference_name . LBRACKET expression RBRACKET n_arr_reference
    (121) arr_reference -> NAME n_arr_reference_name . LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference

    LBRACKET        shift and go to state 76


state 40

    (142) condition_if -> IF LPARENTHESIS . expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (93) expression -> . expression_or
    (94) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (95) expression_or -> . expression_rel
    (96) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (97) expression_rel -> . exp
    (98) expression_rel -> . exp relational_operator exp n_math_expression_9
    (99) exp -> . termino n_math_expression_4
    (100) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (101) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (102) termino -> . factor n_math_expression_5
    (103) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (104) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (105) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (106) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (107) factor -> . PLUS value
    (108) factor -> . MINUS value
    (109) factor -> . value
    (113) value -> . function_call
    (114) value -> . literal
    (115) value -> . reference
    (116) value -> . input
    (84) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (85) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (70) literal -> . FLOAT n_math_expression_1_float
    (71) literal -> . INT n_math_expression_1_int
    (72) literal -> . STRING n_math_expression_1_string
    (73) literal -> . TRUE n_math_expression_1_bool
    (74) literal -> . FALSE n_math_expression_1_bool
    (117) reference -> . NAME n_variable_reference n_math_expression_1_name
    (118) reference -> . arr_reference
    (110) input -> . INPUTSTRING LPARENTHESIS RPARENTHESIS n_input_string
    (111) input -> . INPUTINT LPARENTHESIS RPARENTHESIS n_input_int
    (112) input -> . INPUTFLOAT LPARENTHESIS RPARENTHESIS n_input_float
    (119) arr_reference -> .
    (120) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference
    (121) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    NAME            shift and go to state 15
    FLOAT           shift and go to state 56
    INT             shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    INPUTSTRING     shift and go to state 61
    INPUTINT        shift and go to state 62
    INPUTFLOAT      shift and go to state 63
    TIMES           reduce using rule 119 (arr_reference -> .)
    DIVIDE          reduce using rule 119 (arr_reference -> .)
    MODULUS         reduce using rule 119 (arr_reference -> .)
    GREATERTHAN     reduce using rule 119 (arr_reference -> .)
    LESSTHAN        reduce using rule 119 (arr_reference -> .)
    EQUALEQUAL      reduce using rule 119 (arr_reference -> .)
    LESSTHANOREQUAL reduce using rule 119 (arr_reference -> .)
    GREATERTHANOREQUAL reduce using rule 119 (arr_reference -> .)
    NOTEQUAL        reduce using rule 119 (arr_reference -> .)
    OR              reduce using rule 119 (arr_reference -> .)
    AND             reduce using rule 119 (arr_reference -> .)
    RPARENTHESIS    reduce using rule 119 (arr_reference -> .)

  ! PLUS            [ reduce using rule 119 (arr_reference -> .) ]
  ! MINUS           [ reduce using rule 119 (arr_reference -> .) ]

    expression                     shift and go to state 77
    expression_or                  shift and go to state 43
    expression_rel                 shift and go to state 44
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 49
    value                          shift and go to state 51
    function_call                  shift and go to state 52
    literal                        shift and go to state 53
    reference                      shift and go to state 54
    input                          shift and go to state 55
    arr_reference                  shift and go to state 32

state 41

    (82) return -> RETURN expression . n_return SEMICOLON
    (41) n_return -> .

    SEMICOLON       reduce using rule 41 (n_return -> .)

    n_return                       shift and go to state 78

state 42

    (83) return -> RETURN n_return_void . SEMICOLON

    SEMICOLON       shift and go to state 79


state 43

    (93) expression -> expression_or .
    (94) expression -> expression_or . AND n_math_expression_10 expression n_math_expression_11

    SEMICOLON       reduce using rule 93 (expression -> expression_or .)
    RPARENTHESIS    reduce using rule 93 (expression -> expression_or .)
    RBRACKET        reduce using rule 93 (expression -> expression_or .)
    COMMA           reduce using rule 93 (expression -> expression_or .)
    AND             shift and go to state 80


state 44

    (95) expression_or -> expression_rel .
    (96) expression_or -> expression_rel . OR n_math_expression_10 expression_or n_math_expression_12

    AND             reduce using rule 95 (expression_or -> expression_rel .)
    SEMICOLON       reduce using rule 95 (expression_or -> expression_rel .)
    RPARENTHESIS    reduce using rule 95 (expression_or -> expression_rel .)
    RBRACKET        reduce using rule 95 (expression_or -> expression_rel .)
    COMMA           reduce using rule 95 (expression_or -> expression_rel .)
    OR              shift and go to state 81


state 45

    (97) expression_rel -> exp .
    (98) expression_rel -> exp . relational_operator exp n_math_expression_9
    (64) relational_operator -> . GREATERTHAN n_math_expression_8
    (65) relational_operator -> . LESSTHAN n_math_expression_8
    (66) relational_operator -> . EQUALEQUAL n_math_expression_8
    (67) relational_operator -> . LESSTHANOREQUAL n_math_expression_8
    (68) relational_operator -> . GREATERTHANOREQUAL n_math_expression_8
    (69) relational_operator -> . NOTEQUAL n_math_expression_8

    OR              reduce using rule 97 (expression_rel -> exp .)
    AND             reduce using rule 97 (expression_rel -> exp .)
    SEMICOLON       reduce using rule 97 (expression_rel -> exp .)
    RPARENTHESIS    reduce using rule 97 (expression_rel -> exp .)
    RBRACKET        reduce using rule 97 (expression_rel -> exp .)
    COMMA           reduce using rule 97 (expression_rel -> exp .)
    GREATERTHAN     shift and go to state 83
    LESSTHAN        shift and go to state 84
    EQUALEQUAL      shift and go to state 85
    LESSTHANOREQUAL shift and go to state 86
    GREATERTHANOREQUAL shift and go to state 87
    NOTEQUAL        shift and go to state 88

    relational_operator            shift and go to state 82

state 46

    (99) exp -> termino . n_math_expression_4
    (100) exp -> termino . n_math_expression_4 PLUS n_math_expression_2 exp
    (101) exp -> termino . n_math_expression_4 MINUS n_math_expression_2 exp
    (15) n_math_expression_4 -> .

    PLUS            reduce using rule 15 (n_math_expression_4 -> .)
    MINUS           reduce using rule 15 (n_math_expression_4 -> .)
    GREATERTHAN     reduce using rule 15 (n_math_expression_4 -> .)
    LESSTHAN        reduce using rule 15 (n_math_expression_4 -> .)
    EQUALEQUAL      reduce using rule 15 (n_math_expression_4 -> .)
    LESSTHANOREQUAL reduce using rule 15 (n_math_expression_4 -> .)
    GREATERTHANOREQUAL reduce using rule 15 (n_math_expression_4 -> .)
    NOTEQUAL        reduce using rule 15 (n_math_expression_4 -> .)
    OR              reduce using rule 15 (n_math_expression_4 -> .)
    AND             reduce using rule 15 (n_math_expression_4 -> .)
    SEMICOLON       reduce using rule 15 (n_math_expression_4 -> .)
    RPARENTHESIS    reduce using rule 15 (n_math_expression_4 -> .)
    RBRACKET        reduce using rule 15 (n_math_expression_4 -> .)
    COMMA           reduce using rule 15 (n_math_expression_4 -> .)

    n_math_expression_4            shift and go to state 89

state 47

    (107) factor -> PLUS . value
    (113) value -> . function_call
    (114) value -> . literal
    (115) value -> . reference
    (116) value -> . input
    (84) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (85) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (70) literal -> . FLOAT n_math_expression_1_float
    (71) literal -> . INT n_math_expression_1_int
    (72) literal -> . STRING n_math_expression_1_string
    (73) literal -> . TRUE n_math_expression_1_bool
    (74) literal -> . FALSE n_math_expression_1_bool
    (117) reference -> . NAME n_variable_reference n_math_expression_1_name
    (118) reference -> . arr_reference
    (110) input -> . INPUTSTRING LPARENTHESIS RPARENTHESIS n_input_string
    (111) input -> . INPUTINT LPARENTHESIS RPARENTHESIS n_input_int
    (112) input -> . INPUTFLOAT LPARENTHESIS RPARENTHESIS n_input_float
    (119) arr_reference -> .
    (120) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference
    (121) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference

    NAME            shift and go to state 15
    FLOAT           shift and go to state 56
    INT             shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    INPUTSTRING     shift and go to state 61
    INPUTINT        shift and go to state 62
    INPUTFLOAT      shift and go to state 63
    TIMES           reduce using rule 119 (arr_reference -> .)
    DIVIDE          reduce using rule 119 (arr_reference -> .)
    MODULUS         reduce using rule 119 (arr_reference -> .)
    PLUS            reduce using rule 119 (arr_reference -> .)
    MINUS           reduce using rule 119 (arr_reference -> .)
    GREATERTHAN     reduce using rule 119 (arr_reference -> .)
    LESSTHAN        reduce using rule 119 (arr_reference -> .)
    EQUALEQUAL      reduce using rule 119 (arr_reference -> .)
    LESSTHANOREQUAL reduce using rule 119 (arr_reference -> .)
    GREATERTHANOREQUAL reduce using rule 119 (arr_reference -> .)
    NOTEQUAL        reduce using rule 119 (arr_reference -> .)
    OR              reduce using rule 119 (arr_reference -> .)
    AND             reduce using rule 119 (arr_reference -> .)
    SEMICOLON       reduce using rule 119 (arr_reference -> .)
    RPARENTHESIS    reduce using rule 119 (arr_reference -> .)
    RBRACKET        reduce using rule 119 (arr_reference -> .)
    COMMA           reduce using rule 119 (arr_reference -> .)

    value                          shift and go to state 90
    function_call                  shift and go to state 52
    literal                        shift and go to state 53
    reference                      shift and go to state 54
    input                          shift and go to state 55
    arr_reference                  shift and go to state 32

state 48

    (108) factor -> MINUS . value
    (113) value -> . function_call
    (114) value -> . literal
    (115) value -> . reference
    (116) value -> . input
    (84) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (85) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (70) literal -> . FLOAT n_math_expression_1_float
    (71) literal -> . INT n_math_expression_1_int
    (72) literal -> . STRING n_math_expression_1_string
    (73) literal -> . TRUE n_math_expression_1_bool
    (74) literal -> . FALSE n_math_expression_1_bool
    (117) reference -> . NAME n_variable_reference n_math_expression_1_name
    (118) reference -> . arr_reference
    (110) input -> . INPUTSTRING LPARENTHESIS RPARENTHESIS n_input_string
    (111) input -> . INPUTINT LPARENTHESIS RPARENTHESIS n_input_int
    (112) input -> . INPUTFLOAT LPARENTHESIS RPARENTHESIS n_input_float
    (119) arr_reference -> .
    (120) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference
    (121) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference

    NAME            shift and go to state 15
    FLOAT           shift and go to state 56
    INT             shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    INPUTSTRING     shift and go to state 61
    INPUTINT        shift and go to state 62
    INPUTFLOAT      shift and go to state 63
    TIMES           reduce using rule 119 (arr_reference -> .)
    DIVIDE          reduce using rule 119 (arr_reference -> .)
    MODULUS         reduce using rule 119 (arr_reference -> .)
    PLUS            reduce using rule 119 (arr_reference -> .)
    MINUS           reduce using rule 119 (arr_reference -> .)
    GREATERTHAN     reduce using rule 119 (arr_reference -> .)
    LESSTHAN        reduce using rule 119 (arr_reference -> .)
    EQUALEQUAL      reduce using rule 119 (arr_reference -> .)
    LESSTHANOREQUAL reduce using rule 119 (arr_reference -> .)
    GREATERTHANOREQUAL reduce using rule 119 (arr_reference -> .)
    NOTEQUAL        reduce using rule 119 (arr_reference -> .)
    OR              reduce using rule 119 (arr_reference -> .)
    AND             reduce using rule 119 (arr_reference -> .)
    SEMICOLON       reduce using rule 119 (arr_reference -> .)
    RPARENTHESIS    reduce using rule 119 (arr_reference -> .)
    RBRACKET        reduce using rule 119 (arr_reference -> .)
    COMMA           reduce using rule 119 (arr_reference -> .)

    value                          shift and go to state 91
    function_call                  shift and go to state 52
    literal                        shift and go to state 53
    reference                      shift and go to state 54
    input                          shift and go to state 55
    arr_reference                  shift and go to state 32

state 49

    (102) termino -> factor . n_math_expression_5
    (103) termino -> factor . n_math_expression_5 TIMES n_math_expression_3 termino
    (104) termino -> factor . n_math_expression_5 DIVIDE n_math_expression_3 termino
    (105) termino -> factor . n_math_expression_5 MODULUS n_math_expression_3 termino
    (16) n_math_expression_5 -> .

    TIMES           reduce using rule 16 (n_math_expression_5 -> .)
    DIVIDE          reduce using rule 16 (n_math_expression_5 -> .)
    MODULUS         reduce using rule 16 (n_math_expression_5 -> .)
    PLUS            reduce using rule 16 (n_math_expression_5 -> .)
    MINUS           reduce using rule 16 (n_math_expression_5 -> .)
    GREATERTHAN     reduce using rule 16 (n_math_expression_5 -> .)
    LESSTHAN        reduce using rule 16 (n_math_expression_5 -> .)
    EQUALEQUAL      reduce using rule 16 (n_math_expression_5 -> .)
    LESSTHANOREQUAL reduce using rule 16 (n_math_expression_5 -> .)
    GREATERTHANOREQUAL reduce using rule 16 (n_math_expression_5 -> .)
    NOTEQUAL        reduce using rule 16 (n_math_expression_5 -> .)
    OR              reduce using rule 16 (n_math_expression_5 -> .)
    AND             reduce using rule 16 (n_math_expression_5 -> .)
    SEMICOLON       reduce using rule 16 (n_math_expression_5 -> .)
    RPARENTHESIS    reduce using rule 16 (n_math_expression_5 -> .)
    RBRACKET        reduce using rule 16 (n_math_expression_5 -> .)
    COMMA           reduce using rule 16 (n_math_expression_5 -> .)

    n_math_expression_5            shift and go to state 92

state 50

    (106) factor -> LPARENTHESIS . n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (17) n_math_expression_6 -> .

    LPARENTHESIS    reduce using rule 17 (n_math_expression_6 -> .)
    PLUS            reduce using rule 17 (n_math_expression_6 -> .)
    MINUS           reduce using rule 17 (n_math_expression_6 -> .)
    NAME            reduce using rule 17 (n_math_expression_6 -> .)
    FLOAT           reduce using rule 17 (n_math_expression_6 -> .)
    INT             reduce using rule 17 (n_math_expression_6 -> .)
    STRING          reduce using rule 17 (n_math_expression_6 -> .)
    TRUE            reduce using rule 17 (n_math_expression_6 -> .)
    FALSE           reduce using rule 17 (n_math_expression_6 -> .)
    INPUTSTRING     reduce using rule 17 (n_math_expression_6 -> .)
    INPUTINT        reduce using rule 17 (n_math_expression_6 -> .)
    INPUTFLOAT      reduce using rule 17 (n_math_expression_6 -> .)
    RPARENTHESIS    reduce using rule 17 (n_math_expression_6 -> .)
    AND             reduce using rule 17 (n_math_expression_6 -> .)
    OR              reduce using rule 17 (n_math_expression_6 -> .)
    GREATERTHAN     reduce using rule 17 (n_math_expression_6 -> .)
    LESSTHAN        reduce using rule 17 (n_math_expression_6 -> .)
    EQUALEQUAL      reduce using rule 17 (n_math_expression_6 -> .)
    LESSTHANOREQUAL reduce using rule 17 (n_math_expression_6 -> .)
    GREATERTHANOREQUAL reduce using rule 17 (n_math_expression_6 -> .)
    NOTEQUAL        reduce using rule 17 (n_math_expression_6 -> .)
    TIMES           reduce using rule 17 (n_math_expression_6 -> .)
    DIVIDE          reduce using rule 17 (n_math_expression_6 -> .)
    MODULUS         reduce using rule 17 (n_math_expression_6 -> .)

    n_math_expression_6            shift and go to state 93

state 51

    (109) factor -> value .

    TIMES           reduce using rule 109 (factor -> value .)
    DIVIDE          reduce using rule 109 (factor -> value .)
    MODULUS         reduce using rule 109 (factor -> value .)
    PLUS            reduce using rule 109 (factor -> value .)
    MINUS           reduce using rule 109 (factor -> value .)
    GREATERTHAN     reduce using rule 109 (factor -> value .)
    LESSTHAN        reduce using rule 109 (factor -> value .)
    EQUALEQUAL      reduce using rule 109 (factor -> value .)
    LESSTHANOREQUAL reduce using rule 109 (factor -> value .)
    GREATERTHANOREQUAL reduce using rule 109 (factor -> value .)
    NOTEQUAL        reduce using rule 109 (factor -> value .)
    OR              reduce using rule 109 (factor -> value .)
    AND             reduce using rule 109 (factor -> value .)
    SEMICOLON       reduce using rule 109 (factor -> value .)
    RPARENTHESIS    reduce using rule 109 (factor -> value .)
    RBRACKET        reduce using rule 109 (factor -> value .)
    COMMA           reduce using rule 109 (factor -> value .)


state 52

    (113) value -> function_call .

    TIMES           reduce using rule 113 (value -> function_call .)
    DIVIDE          reduce using rule 113 (value -> function_call .)
    MODULUS         reduce using rule 113 (value -> function_call .)
    PLUS            reduce using rule 113 (value -> function_call .)
    MINUS           reduce using rule 113 (value -> function_call .)
    GREATERTHAN     reduce using rule 113 (value -> function_call .)
    LESSTHAN        reduce using rule 113 (value -> function_call .)
    EQUALEQUAL      reduce using rule 113 (value -> function_call .)
    LESSTHANOREQUAL reduce using rule 113 (value -> function_call .)
    GREATERTHANOREQUAL reduce using rule 113 (value -> function_call .)
    NOTEQUAL        reduce using rule 113 (value -> function_call .)
    OR              reduce using rule 113 (value -> function_call .)
    AND             reduce using rule 113 (value -> function_call .)
    SEMICOLON       reduce using rule 113 (value -> function_call .)
    RPARENTHESIS    reduce using rule 113 (value -> function_call .)
    RBRACKET        reduce using rule 113 (value -> function_call .)
    COMMA           reduce using rule 113 (value -> function_call .)


state 53

    (114) value -> literal .

    TIMES           reduce using rule 114 (value -> literal .)
    DIVIDE          reduce using rule 114 (value -> literal .)
    MODULUS         reduce using rule 114 (value -> literal .)
    PLUS            reduce using rule 114 (value -> literal .)
    MINUS           reduce using rule 114 (value -> literal .)
    GREATERTHAN     reduce using rule 114 (value -> literal .)
    LESSTHAN        reduce using rule 114 (value -> literal .)
    EQUALEQUAL      reduce using rule 114 (value -> literal .)
    LESSTHANOREQUAL reduce using rule 114 (value -> literal .)
    GREATERTHANOREQUAL reduce using rule 114 (value -> literal .)
    NOTEQUAL        reduce using rule 114 (value -> literal .)
    OR              reduce using rule 114 (value -> literal .)
    AND             reduce using rule 114 (value -> literal .)
    SEMICOLON       reduce using rule 114 (value -> literal .)
    RPARENTHESIS    reduce using rule 114 (value -> literal .)
    RBRACKET        reduce using rule 114 (value -> literal .)
    COMMA           reduce using rule 114 (value -> literal .)


state 54

    (115) value -> reference .

    TIMES           reduce using rule 115 (value -> reference .)
    DIVIDE          reduce using rule 115 (value -> reference .)
    MODULUS         reduce using rule 115 (value -> reference .)
    PLUS            reduce using rule 115 (value -> reference .)
    MINUS           reduce using rule 115 (value -> reference .)
    GREATERTHAN     reduce using rule 115 (value -> reference .)
    LESSTHAN        reduce using rule 115 (value -> reference .)
    EQUALEQUAL      reduce using rule 115 (value -> reference .)
    LESSTHANOREQUAL reduce using rule 115 (value -> reference .)
    GREATERTHANOREQUAL reduce using rule 115 (value -> reference .)
    NOTEQUAL        reduce using rule 115 (value -> reference .)
    OR              reduce using rule 115 (value -> reference .)
    AND             reduce using rule 115 (value -> reference .)
    SEMICOLON       reduce using rule 115 (value -> reference .)
    RPARENTHESIS    reduce using rule 115 (value -> reference .)
    RBRACKET        reduce using rule 115 (value -> reference .)
    COMMA           reduce using rule 115 (value -> reference .)


state 55

    (116) value -> input .

    TIMES           reduce using rule 116 (value -> input .)
    DIVIDE          reduce using rule 116 (value -> input .)
    MODULUS         reduce using rule 116 (value -> input .)
    PLUS            reduce using rule 116 (value -> input .)
    MINUS           reduce using rule 116 (value -> input .)
    GREATERTHAN     reduce using rule 116 (value -> input .)
    LESSTHAN        reduce using rule 116 (value -> input .)
    EQUALEQUAL      reduce using rule 116 (value -> input .)
    LESSTHANOREQUAL reduce using rule 116 (value -> input .)
    GREATERTHANOREQUAL reduce using rule 116 (value -> input .)
    NOTEQUAL        reduce using rule 116 (value -> input .)
    OR              reduce using rule 116 (value -> input .)
    AND             reduce using rule 116 (value -> input .)
    SEMICOLON       reduce using rule 116 (value -> input .)
    RPARENTHESIS    reduce using rule 116 (value -> input .)
    RBRACKET        reduce using rule 116 (value -> input .)
    COMMA           reduce using rule 116 (value -> input .)


state 56

    (70) literal -> FLOAT . n_math_expression_1_float
    (9) n_math_expression_1_float -> .

    TIMES           reduce using rule 9 (n_math_expression_1_float -> .)
    DIVIDE          reduce using rule 9 (n_math_expression_1_float -> .)
    MODULUS         reduce using rule 9 (n_math_expression_1_float -> .)
    PLUS            reduce using rule 9 (n_math_expression_1_float -> .)
    MINUS           reduce using rule 9 (n_math_expression_1_float -> .)
    GREATERTHAN     reduce using rule 9 (n_math_expression_1_float -> .)
    LESSTHAN        reduce using rule 9 (n_math_expression_1_float -> .)
    EQUALEQUAL      reduce using rule 9 (n_math_expression_1_float -> .)
    LESSTHANOREQUAL reduce using rule 9 (n_math_expression_1_float -> .)
    GREATERTHANOREQUAL reduce using rule 9 (n_math_expression_1_float -> .)
    NOTEQUAL        reduce using rule 9 (n_math_expression_1_float -> .)
    OR              reduce using rule 9 (n_math_expression_1_float -> .)
    AND             reduce using rule 9 (n_math_expression_1_float -> .)
    SEMICOLON       reduce using rule 9 (n_math_expression_1_float -> .)
    RPARENTHESIS    reduce using rule 9 (n_math_expression_1_float -> .)
    RBRACKET        reduce using rule 9 (n_math_expression_1_float -> .)
    COMMA           reduce using rule 9 (n_math_expression_1_float -> .)

    n_math_expression_1_float      shift and go to state 94

state 57

    (71) literal -> INT . n_math_expression_1_int
    (8) n_math_expression_1_int -> .

    TIMES           reduce using rule 8 (n_math_expression_1_int -> .)
    DIVIDE          reduce using rule 8 (n_math_expression_1_int -> .)
    MODULUS         reduce using rule 8 (n_math_expression_1_int -> .)
    PLUS            reduce using rule 8 (n_math_expression_1_int -> .)
    MINUS           reduce using rule 8 (n_math_expression_1_int -> .)
    GREATERTHAN     reduce using rule 8 (n_math_expression_1_int -> .)
    LESSTHAN        reduce using rule 8 (n_math_expression_1_int -> .)
    EQUALEQUAL      reduce using rule 8 (n_math_expression_1_int -> .)
    LESSTHANOREQUAL reduce using rule 8 (n_math_expression_1_int -> .)
    GREATERTHANOREQUAL reduce using rule 8 (n_math_expression_1_int -> .)
    NOTEQUAL        reduce using rule 8 (n_math_expression_1_int -> .)
    OR              reduce using rule 8 (n_math_expression_1_int -> .)
    AND             reduce using rule 8 (n_math_expression_1_int -> .)
    SEMICOLON       reduce using rule 8 (n_math_expression_1_int -> .)
    RPARENTHESIS    reduce using rule 8 (n_math_expression_1_int -> .)
    RBRACKET        reduce using rule 8 (n_math_expression_1_int -> .)
    COMMA           reduce using rule 8 (n_math_expression_1_int -> .)

    n_math_expression_1_int        shift and go to state 95

state 58

    (72) literal -> STRING . n_math_expression_1_string
    (10) n_math_expression_1_string -> .

    TIMES           reduce using rule 10 (n_math_expression_1_string -> .)
    DIVIDE          reduce using rule 10 (n_math_expression_1_string -> .)
    MODULUS         reduce using rule 10 (n_math_expression_1_string -> .)
    PLUS            reduce using rule 10 (n_math_expression_1_string -> .)
    MINUS           reduce using rule 10 (n_math_expression_1_string -> .)
    GREATERTHAN     reduce using rule 10 (n_math_expression_1_string -> .)
    LESSTHAN        reduce using rule 10 (n_math_expression_1_string -> .)
    EQUALEQUAL      reduce using rule 10 (n_math_expression_1_string -> .)
    LESSTHANOREQUAL reduce using rule 10 (n_math_expression_1_string -> .)
    GREATERTHANOREQUAL reduce using rule 10 (n_math_expression_1_string -> .)
    NOTEQUAL        reduce using rule 10 (n_math_expression_1_string -> .)
    OR              reduce using rule 10 (n_math_expression_1_string -> .)
    AND             reduce using rule 10 (n_math_expression_1_string -> .)
    SEMICOLON       reduce using rule 10 (n_math_expression_1_string -> .)
    RPARENTHESIS    reduce using rule 10 (n_math_expression_1_string -> .)
    RBRACKET        reduce using rule 10 (n_math_expression_1_string -> .)
    COMMA           reduce using rule 10 (n_math_expression_1_string -> .)

    n_math_expression_1_string     shift and go to state 96

state 59

    (73) literal -> TRUE . n_math_expression_1_bool
    (11) n_math_expression_1_bool -> .

    TIMES           reduce using rule 11 (n_math_expression_1_bool -> .)
    DIVIDE          reduce using rule 11 (n_math_expression_1_bool -> .)
    MODULUS         reduce using rule 11 (n_math_expression_1_bool -> .)
    PLUS            reduce using rule 11 (n_math_expression_1_bool -> .)
    MINUS           reduce using rule 11 (n_math_expression_1_bool -> .)
    GREATERTHAN     reduce using rule 11 (n_math_expression_1_bool -> .)
    LESSTHAN        reduce using rule 11 (n_math_expression_1_bool -> .)
    EQUALEQUAL      reduce using rule 11 (n_math_expression_1_bool -> .)
    LESSTHANOREQUAL reduce using rule 11 (n_math_expression_1_bool -> .)
    GREATERTHANOREQUAL reduce using rule 11 (n_math_expression_1_bool -> .)
    NOTEQUAL        reduce using rule 11 (n_math_expression_1_bool -> .)
    OR              reduce using rule 11 (n_math_expression_1_bool -> .)
    AND             reduce using rule 11 (n_math_expression_1_bool -> .)
    SEMICOLON       reduce using rule 11 (n_math_expression_1_bool -> .)
    RPARENTHESIS    reduce using rule 11 (n_math_expression_1_bool -> .)
    RBRACKET        reduce using rule 11 (n_math_expression_1_bool -> .)
    COMMA           reduce using rule 11 (n_math_expression_1_bool -> .)

    n_math_expression_1_bool       shift and go to state 97

state 60

    (74) literal -> FALSE . n_math_expression_1_bool
    (11) n_math_expression_1_bool -> .

    TIMES           reduce using rule 11 (n_math_expression_1_bool -> .)
    DIVIDE          reduce using rule 11 (n_math_expression_1_bool -> .)
    MODULUS         reduce using rule 11 (n_math_expression_1_bool -> .)
    PLUS            reduce using rule 11 (n_math_expression_1_bool -> .)
    MINUS           reduce using rule 11 (n_math_expression_1_bool -> .)
    GREATERTHAN     reduce using rule 11 (n_math_expression_1_bool -> .)
    LESSTHAN        reduce using rule 11 (n_math_expression_1_bool -> .)
    EQUALEQUAL      reduce using rule 11 (n_math_expression_1_bool -> .)
    LESSTHANOREQUAL reduce using rule 11 (n_math_expression_1_bool -> .)
    GREATERTHANOREQUAL reduce using rule 11 (n_math_expression_1_bool -> .)
    NOTEQUAL        reduce using rule 11 (n_math_expression_1_bool -> .)
    OR              reduce using rule 11 (n_math_expression_1_bool -> .)
    AND             reduce using rule 11 (n_math_expression_1_bool -> .)
    SEMICOLON       reduce using rule 11 (n_math_expression_1_bool -> .)
    RPARENTHESIS    reduce using rule 11 (n_math_expression_1_bool -> .)
    RBRACKET        reduce using rule 11 (n_math_expression_1_bool -> .)
    COMMA           reduce using rule 11 (n_math_expression_1_bool -> .)

    n_math_expression_1_bool       shift and go to state 98

state 61

    (110) input -> INPUTSTRING . LPARENTHESIS RPARENTHESIS n_input_string

    LPARENTHESIS    shift and go to state 99


state 62

    (111) input -> INPUTINT . LPARENTHESIS RPARENTHESIS n_input_int

    LPARENTHESIS    shift and go to state 100


state 63

    (112) input -> INPUTFLOAT . LPARENTHESIS RPARENTHESIS n_input_float

    LPARENTHESIS    shift and go to state 101


state 64

    (141) whileloop -> WHILE p_n_pre_condition_loop_1 . LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope

    LPARENTHESIS    shift and go to state 102


state 65

    (125) assign -> type NAME . n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (122) declare -> type NAME . n_variable_instantiate
    (123) declare -> type NAME . n_arr_instantiate_name LBRACKET INT n_arr_instantiate_size RBRACKET n_arr_instantiate
    (124) declare -> type NAME . n_arr_instantiate_name LBRACKET INT n_arr_instantiate_size RBRACKET LBRACKET INT n_arr_instantiate_size RBRACKET n_matrix_instantiate
    (6) n_variable_instantiate -> .
    (49) n_arr_instantiate_name -> .

    EQUAL           reduce using rule 6 (n_variable_instantiate -> .)
    SEMICOLON       reduce using rule 6 (n_variable_instantiate -> .)
    LBRACKET        reduce using rule 49 (n_arr_instantiate_name -> .)

    n_variable_instantiate         shift and go to state 103
    n_arr_instantiate_name         shift and go to state 104

state 66

    (126) assign -> reference EQUAL . n_seen_equal_op expression
    (30) n_seen_equal_op -> .

    LPARENTHESIS    reduce using rule 30 (n_seen_equal_op -> .)
    PLUS            reduce using rule 30 (n_seen_equal_op -> .)
    MINUS           reduce using rule 30 (n_seen_equal_op -> .)
    NAME            reduce using rule 30 (n_seen_equal_op -> .)
    FLOAT           reduce using rule 30 (n_seen_equal_op -> .)
    INT             reduce using rule 30 (n_seen_equal_op -> .)
    STRING          reduce using rule 30 (n_seen_equal_op -> .)
    TRUE            reduce using rule 30 (n_seen_equal_op -> .)
    FALSE           reduce using rule 30 (n_seen_equal_op -> .)
    INPUTSTRING     reduce using rule 30 (n_seen_equal_op -> .)
    INPUTINT        reduce using rule 30 (n_seen_equal_op -> .)
    INPUTFLOAT      reduce using rule 30 (n_seen_equal_op -> .)
    AND             reduce using rule 30 (n_seen_equal_op -> .)
    OR              reduce using rule 30 (n_seen_equal_op -> .)
    GREATERTHAN     reduce using rule 30 (n_seen_equal_op -> .)
    LESSTHAN        reduce using rule 30 (n_seen_equal_op -> .)
    EQUALEQUAL      reduce using rule 30 (n_seen_equal_op -> .)
    LESSTHANOREQUAL reduce using rule 30 (n_seen_equal_op -> .)
    GREATERTHANOREQUAL reduce using rule 30 (n_seen_equal_op -> .)
    NOTEQUAL        reduce using rule 30 (n_seen_equal_op -> .)
    TIMES           reduce using rule 30 (n_seen_equal_op -> .)
    DIVIDE          reduce using rule 30 (n_seen_equal_op -> .)
    MODULUS         reduce using rule 30 (n_seen_equal_op -> .)
    SEMICOLON       reduce using rule 30 (n_seen_equal_op -> .)

    n_seen_equal_op                shift and go to state 105

state 67

    (127) print -> PRINT LPARENTHESIS . expression n_print RPARENTHESIS
    (93) expression -> . expression_or
    (94) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (95) expression_or -> . expression_rel
    (96) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (97) expression_rel -> . exp
    (98) expression_rel -> . exp relational_operator exp n_math_expression_9
    (99) exp -> . termino n_math_expression_4
    (100) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (101) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (102) termino -> . factor n_math_expression_5
    (103) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (104) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (105) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (106) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (107) factor -> . PLUS value
    (108) factor -> . MINUS value
    (109) factor -> . value
    (113) value -> . function_call
    (114) value -> . literal
    (115) value -> . reference
    (116) value -> . input
    (84) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (85) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (70) literal -> . FLOAT n_math_expression_1_float
    (71) literal -> . INT n_math_expression_1_int
    (72) literal -> . STRING n_math_expression_1_string
    (73) literal -> . TRUE n_math_expression_1_bool
    (74) literal -> . FALSE n_math_expression_1_bool
    (117) reference -> . NAME n_variable_reference n_math_expression_1_name
    (118) reference -> . arr_reference
    (110) input -> . INPUTSTRING LPARENTHESIS RPARENTHESIS n_input_string
    (111) input -> . INPUTINT LPARENTHESIS RPARENTHESIS n_input_int
    (112) input -> . INPUTFLOAT LPARENTHESIS RPARENTHESIS n_input_float
    (119) arr_reference -> .
    (120) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference
    (121) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    NAME            shift and go to state 15
    FLOAT           shift and go to state 56
    INT             shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    INPUTSTRING     shift and go to state 61
    INPUTINT        shift and go to state 62
    INPUTFLOAT      shift and go to state 63
    TIMES           reduce using rule 119 (arr_reference -> .)
    DIVIDE          reduce using rule 119 (arr_reference -> .)
    MODULUS         reduce using rule 119 (arr_reference -> .)
    GREATERTHAN     reduce using rule 119 (arr_reference -> .)
    LESSTHAN        reduce using rule 119 (arr_reference -> .)
    EQUALEQUAL      reduce using rule 119 (arr_reference -> .)
    LESSTHANOREQUAL reduce using rule 119 (arr_reference -> .)
    GREATERTHANOREQUAL reduce using rule 119 (arr_reference -> .)
    NOTEQUAL        reduce using rule 119 (arr_reference -> .)
    OR              reduce using rule 119 (arr_reference -> .)
    AND             reduce using rule 119 (arr_reference -> .)
    RPARENTHESIS    reduce using rule 119 (arr_reference -> .)

  ! PLUS            [ reduce using rule 119 (arr_reference -> .) ]
  ! MINUS           [ reduce using rule 119 (arr_reference -> .) ]

    expression                     shift and go to state 106
    expression_or                  shift and go to state 43
    expression_rel                 shift and go to state 44
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 49
    value                          shift and go to state 51
    function_call                  shift and go to state 52
    literal                        shift and go to state 53
    reference                      shift and go to state 54
    input                          shift and go to state 55
    arr_reference                  shift and go to state 32

state 68

    (59) type -> INT_TYPE n_seen_type .

    NAME            reduce using rule 59 (type -> INT_TYPE n_seen_type .)


state 69

    (60) type -> STRING_TYPE n_seen_type .

    NAME            reduce using rule 60 (type -> STRING_TYPE n_seen_type .)


state 70

    (61) type -> DOUBLE_TYPE n_seen_type .

    NAME            reduce using rule 61 (type -> DOUBLE_TYPE n_seen_type .)


state 71

    (62) type -> FLOAT_TYPE n_seen_type .

    NAME            reduce using rule 62 (type -> FLOAT_TYPE n_seen_type .)


state 72

    (63) type -> BOOL_TYPE n_seen_type .

    NAME            reduce using rule 63 (type -> BOOL_TYPE n_seen_type .)


state 73

    (81) function_definition -> n_before_function_definition FUNCTION NAME . n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end
    (3) n_open_new_scope_function -> .

    INT_TYPE        reduce using rule 3 (n_open_new_scope_function -> .)
    STRING_TYPE     reduce using rule 3 (n_open_new_scope_function -> .)
    DOUBLE_TYPE     reduce using rule 3 (n_open_new_scope_function -> .)
    FLOAT_TYPE      reduce using rule 3 (n_open_new_scope_function -> .)
    BOOL_TYPE       reduce using rule 3 (n_open_new_scope_function -> .)
    DOUBLEDOT       reduce using rule 3 (n_open_new_scope_function -> .)

    n_open_new_scope_function      shift and go to state 107

state 74

    (84) function_call -> NAME n_function_call_1 LPARENTHESIS . n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (85) function_call -> NAME n_function_call_1 LPARENTHESIS . RPARENTHESIS n_function_call_6
    (36) n_function_call_2 -> .

  ! shift/reduce conflict for RPARENTHESIS resolved as shift
    RPARENTHESIS    shift and go to state 109
    LPARENTHESIS    reduce using rule 36 (n_function_call_2 -> .)
    PLUS            reduce using rule 36 (n_function_call_2 -> .)
    MINUS           reduce using rule 36 (n_function_call_2 -> .)
    NAME            reduce using rule 36 (n_function_call_2 -> .)
    FLOAT           reduce using rule 36 (n_function_call_2 -> .)
    INT             reduce using rule 36 (n_function_call_2 -> .)
    STRING          reduce using rule 36 (n_function_call_2 -> .)
    TRUE            reduce using rule 36 (n_function_call_2 -> .)
    FALSE           reduce using rule 36 (n_function_call_2 -> .)
    INPUTSTRING     reduce using rule 36 (n_function_call_2 -> .)
    INPUTINT        reduce using rule 36 (n_function_call_2 -> .)
    INPUTFLOAT      reduce using rule 36 (n_function_call_2 -> .)
    COMMA           reduce using rule 36 (n_function_call_2 -> .)
    AND             reduce using rule 36 (n_function_call_2 -> .)
    OR              reduce using rule 36 (n_function_call_2 -> .)
    GREATERTHAN     reduce using rule 36 (n_function_call_2 -> .)
    LESSTHAN        reduce using rule 36 (n_function_call_2 -> .)
    EQUALEQUAL      reduce using rule 36 (n_function_call_2 -> .)
    LESSTHANOREQUAL reduce using rule 36 (n_function_call_2 -> .)
    GREATERTHANOREQUAL reduce using rule 36 (n_function_call_2 -> .)
    NOTEQUAL        reduce using rule 36 (n_function_call_2 -> .)
    TIMES           reduce using rule 36 (n_function_call_2 -> .)
    DIVIDE          reduce using rule 36 (n_function_call_2 -> .)
    MODULUS         reduce using rule 36 (n_function_call_2 -> .)

  ! RPARENTHESIS    [ reduce using rule 36 (n_function_call_2 -> .) ]

    n_function_call_2              shift and go to state 108

state 75

    (117) reference -> NAME n_variable_reference n_math_expression_1_name .

    EQUAL           reduce using rule 117 (reference -> NAME n_variable_reference n_math_expression_1_name .)
    TIMES           reduce using rule 117 (reference -> NAME n_variable_reference n_math_expression_1_name .)
    DIVIDE          reduce using rule 117 (reference -> NAME n_variable_reference n_math_expression_1_name .)
    MODULUS         reduce using rule 117 (reference -> NAME n_variable_reference n_math_expression_1_name .)
    PLUS            reduce using rule 117 (reference -> NAME n_variable_reference n_math_expression_1_name .)
    MINUS           reduce using rule 117 (reference -> NAME n_variable_reference n_math_expression_1_name .)
    GREATERTHAN     reduce using rule 117 (reference -> NAME n_variable_reference n_math_expression_1_name .)
    LESSTHAN        reduce using rule 117 (reference -> NAME n_variable_reference n_math_expression_1_name .)
    EQUALEQUAL      reduce using rule 117 (reference -> NAME n_variable_reference n_math_expression_1_name .)
    LESSTHANOREQUAL reduce using rule 117 (reference -> NAME n_variable_reference n_math_expression_1_name .)
    GREATERTHANOREQUAL reduce using rule 117 (reference -> NAME n_variable_reference n_math_expression_1_name .)
    NOTEQUAL        reduce using rule 117 (reference -> NAME n_variable_reference n_math_expression_1_name .)
    OR              reduce using rule 117 (reference -> NAME n_variable_reference n_math_expression_1_name .)
    AND             reduce using rule 117 (reference -> NAME n_variable_reference n_math_expression_1_name .)
    SEMICOLON       reduce using rule 117 (reference -> NAME n_variable_reference n_math_expression_1_name .)
    RPARENTHESIS    reduce using rule 117 (reference -> NAME n_variable_reference n_math_expression_1_name .)
    RBRACKET        reduce using rule 117 (reference -> NAME n_variable_reference n_math_expression_1_name .)
    COMMA           reduce using rule 117 (reference -> NAME n_variable_reference n_math_expression_1_name .)


state 76

    (120) arr_reference -> NAME n_arr_reference_name LBRACKET . expression RBRACKET n_arr_reference
    (121) arr_reference -> NAME n_arr_reference_name LBRACKET . expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference
    (93) expression -> . expression_or
    (94) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (95) expression_or -> . expression_rel
    (96) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (97) expression_rel -> . exp
    (98) expression_rel -> . exp relational_operator exp n_math_expression_9
    (99) exp -> . termino n_math_expression_4
    (100) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (101) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (102) termino -> . factor n_math_expression_5
    (103) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (104) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (105) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (106) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (107) factor -> . PLUS value
    (108) factor -> . MINUS value
    (109) factor -> . value
    (113) value -> . function_call
    (114) value -> . literal
    (115) value -> . reference
    (116) value -> . input
    (84) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (85) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (70) literal -> . FLOAT n_math_expression_1_float
    (71) literal -> . INT n_math_expression_1_int
    (72) literal -> . STRING n_math_expression_1_string
    (73) literal -> . TRUE n_math_expression_1_bool
    (74) literal -> . FALSE n_math_expression_1_bool
    (117) reference -> . NAME n_variable_reference n_math_expression_1_name
    (118) reference -> . arr_reference
    (110) input -> . INPUTSTRING LPARENTHESIS RPARENTHESIS n_input_string
    (111) input -> . INPUTINT LPARENTHESIS RPARENTHESIS n_input_int
    (112) input -> . INPUTFLOAT LPARENTHESIS RPARENTHESIS n_input_float
    (119) arr_reference -> .
    (120) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference
    (121) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    NAME            shift and go to state 15
    FLOAT           shift and go to state 56
    INT             shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    INPUTSTRING     shift and go to state 61
    INPUTINT        shift and go to state 62
    INPUTFLOAT      shift and go to state 63
    TIMES           reduce using rule 119 (arr_reference -> .)
    DIVIDE          reduce using rule 119 (arr_reference -> .)
    MODULUS         reduce using rule 119 (arr_reference -> .)
    GREATERTHAN     reduce using rule 119 (arr_reference -> .)
    LESSTHAN        reduce using rule 119 (arr_reference -> .)
    EQUALEQUAL      reduce using rule 119 (arr_reference -> .)
    LESSTHANOREQUAL reduce using rule 119 (arr_reference -> .)
    GREATERTHANOREQUAL reduce using rule 119 (arr_reference -> .)
    NOTEQUAL        reduce using rule 119 (arr_reference -> .)
    OR              reduce using rule 119 (arr_reference -> .)
    AND             reduce using rule 119 (arr_reference -> .)
    RBRACKET        reduce using rule 119 (arr_reference -> .)

  ! PLUS            [ reduce using rule 119 (arr_reference -> .) ]
  ! MINUS           [ reduce using rule 119 (arr_reference -> .) ]

    expression                     shift and go to state 110
    expression_or                  shift and go to state 43
    expression_rel                 shift and go to state 44
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 49
    value                          shift and go to state 51
    function_call                  shift and go to state 52
    literal                        shift and go to state 53
    reference                      shift and go to state 54
    input                          shift and go to state 55
    arr_reference                  shift and go to state 32

state 77

    (142) condition_if -> IF LPARENTHESIS expression . RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2

    RPARENTHESIS    shift and go to state 111


state 78

    (82) return -> RETURN expression n_return . SEMICOLON

    SEMICOLON       shift and go to state 112


state 79

    (83) return -> RETURN n_return_void SEMICOLON .

    IF              reduce using rule 83 (return -> RETURN n_return_void SEMICOLON .)
    RETURN          reduce using rule 83 (return -> RETURN n_return_void SEMICOLON .)
    WHILE           reduce using rule 83 (return -> RETURN n_return_void SEMICOLON .)
    NAME            reduce using rule 83 (return -> RETURN n_return_void SEMICOLON .)
    PRINT           reduce using rule 83 (return -> RETURN n_return_void SEMICOLON .)
    INT_TYPE        reduce using rule 83 (return -> RETURN n_return_void SEMICOLON .)
    STRING_TYPE     reduce using rule 83 (return -> RETURN n_return_void SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 83 (return -> RETURN n_return_void SEMICOLON .)
    FLOAT_TYPE      reduce using rule 83 (return -> RETURN n_return_void SEMICOLON .)
    BOOL_TYPE       reduce using rule 83 (return -> RETURN n_return_void SEMICOLON .)
    FUNCTION        reduce using rule 83 (return -> RETURN n_return_void SEMICOLON .)
    EQUAL           reduce using rule 83 (return -> RETURN n_return_void SEMICOLON .)
    $end            reduce using rule 83 (return -> RETURN n_return_void SEMICOLON .)
    RCURLY          reduce using rule 83 (return -> RETURN n_return_void SEMICOLON .)


state 80

    (94) expression -> expression_or AND . n_math_expression_10 expression n_math_expression_11
    (21) n_math_expression_10 -> .

    LPARENTHESIS    reduce using rule 21 (n_math_expression_10 -> .)
    PLUS            reduce using rule 21 (n_math_expression_10 -> .)
    MINUS           reduce using rule 21 (n_math_expression_10 -> .)
    NAME            reduce using rule 21 (n_math_expression_10 -> .)
    FLOAT           reduce using rule 21 (n_math_expression_10 -> .)
    INT             reduce using rule 21 (n_math_expression_10 -> .)
    STRING          reduce using rule 21 (n_math_expression_10 -> .)
    TRUE            reduce using rule 21 (n_math_expression_10 -> .)
    FALSE           reduce using rule 21 (n_math_expression_10 -> .)
    INPUTSTRING     reduce using rule 21 (n_math_expression_10 -> .)
    INPUTINT        reduce using rule 21 (n_math_expression_10 -> .)
    INPUTFLOAT      reduce using rule 21 (n_math_expression_10 -> .)
    AND             reduce using rule 21 (n_math_expression_10 -> .)
    OR              reduce using rule 21 (n_math_expression_10 -> .)
    GREATERTHAN     reduce using rule 21 (n_math_expression_10 -> .)
    LESSTHAN        reduce using rule 21 (n_math_expression_10 -> .)
    EQUALEQUAL      reduce using rule 21 (n_math_expression_10 -> .)
    LESSTHANOREQUAL reduce using rule 21 (n_math_expression_10 -> .)
    GREATERTHANOREQUAL reduce using rule 21 (n_math_expression_10 -> .)
    NOTEQUAL        reduce using rule 21 (n_math_expression_10 -> .)
    TIMES           reduce using rule 21 (n_math_expression_10 -> .)
    DIVIDE          reduce using rule 21 (n_math_expression_10 -> .)
    MODULUS         reduce using rule 21 (n_math_expression_10 -> .)
    SEMICOLON       reduce using rule 21 (n_math_expression_10 -> .)
    RPARENTHESIS    reduce using rule 21 (n_math_expression_10 -> .)
    RBRACKET        reduce using rule 21 (n_math_expression_10 -> .)
    COMMA           reduce using rule 21 (n_math_expression_10 -> .)

    n_math_expression_10           shift and go to state 113

state 81

    (96) expression_or -> expression_rel OR . n_math_expression_10 expression_or n_math_expression_12
    (21) n_math_expression_10 -> .

    LPARENTHESIS    reduce using rule 21 (n_math_expression_10 -> .)
    PLUS            reduce using rule 21 (n_math_expression_10 -> .)
    MINUS           reduce using rule 21 (n_math_expression_10 -> .)
    NAME            reduce using rule 21 (n_math_expression_10 -> .)
    FLOAT           reduce using rule 21 (n_math_expression_10 -> .)
    INT             reduce using rule 21 (n_math_expression_10 -> .)
    STRING          reduce using rule 21 (n_math_expression_10 -> .)
    TRUE            reduce using rule 21 (n_math_expression_10 -> .)
    FALSE           reduce using rule 21 (n_math_expression_10 -> .)
    INPUTSTRING     reduce using rule 21 (n_math_expression_10 -> .)
    INPUTINT        reduce using rule 21 (n_math_expression_10 -> .)
    INPUTFLOAT      reduce using rule 21 (n_math_expression_10 -> .)
    OR              reduce using rule 21 (n_math_expression_10 -> .)
    GREATERTHAN     reduce using rule 21 (n_math_expression_10 -> .)
    LESSTHAN        reduce using rule 21 (n_math_expression_10 -> .)
    EQUALEQUAL      reduce using rule 21 (n_math_expression_10 -> .)
    LESSTHANOREQUAL reduce using rule 21 (n_math_expression_10 -> .)
    GREATERTHANOREQUAL reduce using rule 21 (n_math_expression_10 -> .)
    NOTEQUAL        reduce using rule 21 (n_math_expression_10 -> .)
    TIMES           reduce using rule 21 (n_math_expression_10 -> .)
    DIVIDE          reduce using rule 21 (n_math_expression_10 -> .)
    MODULUS         reduce using rule 21 (n_math_expression_10 -> .)
    AND             reduce using rule 21 (n_math_expression_10 -> .)
    SEMICOLON       reduce using rule 21 (n_math_expression_10 -> .)
    RPARENTHESIS    reduce using rule 21 (n_math_expression_10 -> .)
    RBRACKET        reduce using rule 21 (n_math_expression_10 -> .)
    COMMA           reduce using rule 21 (n_math_expression_10 -> .)

    n_math_expression_10           shift and go to state 114

state 82

    (98) expression_rel -> exp relational_operator . exp n_math_expression_9
    (99) exp -> . termino n_math_expression_4
    (100) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (101) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (102) termino -> . factor n_math_expression_5
    (103) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (104) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (105) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (106) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (107) factor -> . PLUS value
    (108) factor -> . MINUS value
    (109) factor -> . value
    (113) value -> . function_call
    (114) value -> . literal
    (115) value -> . reference
    (116) value -> . input
    (84) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (85) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (70) literal -> . FLOAT n_math_expression_1_float
    (71) literal -> . INT n_math_expression_1_int
    (72) literal -> . STRING n_math_expression_1_string
    (73) literal -> . TRUE n_math_expression_1_bool
    (74) literal -> . FALSE n_math_expression_1_bool
    (117) reference -> . NAME n_variable_reference n_math_expression_1_name
    (118) reference -> . arr_reference
    (110) input -> . INPUTSTRING LPARENTHESIS RPARENTHESIS n_input_string
    (111) input -> . INPUTINT LPARENTHESIS RPARENTHESIS n_input_int
    (112) input -> . INPUTFLOAT LPARENTHESIS RPARENTHESIS n_input_float
    (119) arr_reference -> .
    (120) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference
    (121) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    NAME            shift and go to state 15
    FLOAT           shift and go to state 56
    INT             shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    INPUTSTRING     shift and go to state 61
    INPUTINT        shift and go to state 62
    INPUTFLOAT      shift and go to state 63
    TIMES           reduce using rule 119 (arr_reference -> .)
    DIVIDE          reduce using rule 119 (arr_reference -> .)
    MODULUS         reduce using rule 119 (arr_reference -> .)
    OR              reduce using rule 119 (arr_reference -> .)
    AND             reduce using rule 119 (arr_reference -> .)
    SEMICOLON       reduce using rule 119 (arr_reference -> .)
    RPARENTHESIS    reduce using rule 119 (arr_reference -> .)
    RBRACKET        reduce using rule 119 (arr_reference -> .)
    COMMA           reduce using rule 119 (arr_reference -> .)

  ! PLUS            [ reduce using rule 119 (arr_reference -> .) ]
  ! MINUS           [ reduce using rule 119 (arr_reference -> .) ]

    exp                            shift and go to state 115
    termino                        shift and go to state 46
    factor                         shift and go to state 49
    value                          shift and go to state 51
    function_call                  shift and go to state 52
    literal                        shift and go to state 53
    reference                      shift and go to state 54
    input                          shift and go to state 55
    arr_reference                  shift and go to state 32

state 83

    (64) relational_operator -> GREATERTHAN . n_math_expression_8
    (19) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 19 (n_math_expression_8 -> .)
    PLUS            reduce using rule 19 (n_math_expression_8 -> .)
    MINUS           reduce using rule 19 (n_math_expression_8 -> .)
    NAME            reduce using rule 19 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 19 (n_math_expression_8 -> .)
    INT             reduce using rule 19 (n_math_expression_8 -> .)
    STRING          reduce using rule 19 (n_math_expression_8 -> .)
    TRUE            reduce using rule 19 (n_math_expression_8 -> .)
    FALSE           reduce using rule 19 (n_math_expression_8 -> .)
    INPUTSTRING     reduce using rule 19 (n_math_expression_8 -> .)
    INPUTINT        reduce using rule 19 (n_math_expression_8 -> .)
    INPUTFLOAT      reduce using rule 19 (n_math_expression_8 -> .)
    TIMES           reduce using rule 19 (n_math_expression_8 -> .)
    DIVIDE          reduce using rule 19 (n_math_expression_8 -> .)
    MODULUS         reduce using rule 19 (n_math_expression_8 -> .)
    OR              reduce using rule 19 (n_math_expression_8 -> .)
    AND             reduce using rule 19 (n_math_expression_8 -> .)
    SEMICOLON       reduce using rule 19 (n_math_expression_8 -> .)
    RPARENTHESIS    reduce using rule 19 (n_math_expression_8 -> .)
    RBRACKET        reduce using rule 19 (n_math_expression_8 -> .)
    COMMA           reduce using rule 19 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 116

state 84

    (65) relational_operator -> LESSTHAN . n_math_expression_8
    (19) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 19 (n_math_expression_8 -> .)
    PLUS            reduce using rule 19 (n_math_expression_8 -> .)
    MINUS           reduce using rule 19 (n_math_expression_8 -> .)
    NAME            reduce using rule 19 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 19 (n_math_expression_8 -> .)
    INT             reduce using rule 19 (n_math_expression_8 -> .)
    STRING          reduce using rule 19 (n_math_expression_8 -> .)
    TRUE            reduce using rule 19 (n_math_expression_8 -> .)
    FALSE           reduce using rule 19 (n_math_expression_8 -> .)
    INPUTSTRING     reduce using rule 19 (n_math_expression_8 -> .)
    INPUTINT        reduce using rule 19 (n_math_expression_8 -> .)
    INPUTFLOAT      reduce using rule 19 (n_math_expression_8 -> .)
    TIMES           reduce using rule 19 (n_math_expression_8 -> .)
    DIVIDE          reduce using rule 19 (n_math_expression_8 -> .)
    MODULUS         reduce using rule 19 (n_math_expression_8 -> .)
    OR              reduce using rule 19 (n_math_expression_8 -> .)
    AND             reduce using rule 19 (n_math_expression_8 -> .)
    SEMICOLON       reduce using rule 19 (n_math_expression_8 -> .)
    RPARENTHESIS    reduce using rule 19 (n_math_expression_8 -> .)
    RBRACKET        reduce using rule 19 (n_math_expression_8 -> .)
    COMMA           reduce using rule 19 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 117

state 85

    (66) relational_operator -> EQUALEQUAL . n_math_expression_8
    (19) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 19 (n_math_expression_8 -> .)
    PLUS            reduce using rule 19 (n_math_expression_8 -> .)
    MINUS           reduce using rule 19 (n_math_expression_8 -> .)
    NAME            reduce using rule 19 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 19 (n_math_expression_8 -> .)
    INT             reduce using rule 19 (n_math_expression_8 -> .)
    STRING          reduce using rule 19 (n_math_expression_8 -> .)
    TRUE            reduce using rule 19 (n_math_expression_8 -> .)
    FALSE           reduce using rule 19 (n_math_expression_8 -> .)
    INPUTSTRING     reduce using rule 19 (n_math_expression_8 -> .)
    INPUTINT        reduce using rule 19 (n_math_expression_8 -> .)
    INPUTFLOAT      reduce using rule 19 (n_math_expression_8 -> .)
    TIMES           reduce using rule 19 (n_math_expression_8 -> .)
    DIVIDE          reduce using rule 19 (n_math_expression_8 -> .)
    MODULUS         reduce using rule 19 (n_math_expression_8 -> .)
    OR              reduce using rule 19 (n_math_expression_8 -> .)
    AND             reduce using rule 19 (n_math_expression_8 -> .)
    SEMICOLON       reduce using rule 19 (n_math_expression_8 -> .)
    RPARENTHESIS    reduce using rule 19 (n_math_expression_8 -> .)
    RBRACKET        reduce using rule 19 (n_math_expression_8 -> .)
    COMMA           reduce using rule 19 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 118

state 86

    (67) relational_operator -> LESSTHANOREQUAL . n_math_expression_8
    (19) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 19 (n_math_expression_8 -> .)
    PLUS            reduce using rule 19 (n_math_expression_8 -> .)
    MINUS           reduce using rule 19 (n_math_expression_8 -> .)
    NAME            reduce using rule 19 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 19 (n_math_expression_8 -> .)
    INT             reduce using rule 19 (n_math_expression_8 -> .)
    STRING          reduce using rule 19 (n_math_expression_8 -> .)
    TRUE            reduce using rule 19 (n_math_expression_8 -> .)
    FALSE           reduce using rule 19 (n_math_expression_8 -> .)
    INPUTSTRING     reduce using rule 19 (n_math_expression_8 -> .)
    INPUTINT        reduce using rule 19 (n_math_expression_8 -> .)
    INPUTFLOAT      reduce using rule 19 (n_math_expression_8 -> .)
    TIMES           reduce using rule 19 (n_math_expression_8 -> .)
    DIVIDE          reduce using rule 19 (n_math_expression_8 -> .)
    MODULUS         reduce using rule 19 (n_math_expression_8 -> .)
    OR              reduce using rule 19 (n_math_expression_8 -> .)
    AND             reduce using rule 19 (n_math_expression_8 -> .)
    SEMICOLON       reduce using rule 19 (n_math_expression_8 -> .)
    RPARENTHESIS    reduce using rule 19 (n_math_expression_8 -> .)
    RBRACKET        reduce using rule 19 (n_math_expression_8 -> .)
    COMMA           reduce using rule 19 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 119

state 87

    (68) relational_operator -> GREATERTHANOREQUAL . n_math_expression_8
    (19) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 19 (n_math_expression_8 -> .)
    PLUS            reduce using rule 19 (n_math_expression_8 -> .)
    MINUS           reduce using rule 19 (n_math_expression_8 -> .)
    NAME            reduce using rule 19 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 19 (n_math_expression_8 -> .)
    INT             reduce using rule 19 (n_math_expression_8 -> .)
    STRING          reduce using rule 19 (n_math_expression_8 -> .)
    TRUE            reduce using rule 19 (n_math_expression_8 -> .)
    FALSE           reduce using rule 19 (n_math_expression_8 -> .)
    INPUTSTRING     reduce using rule 19 (n_math_expression_8 -> .)
    INPUTINT        reduce using rule 19 (n_math_expression_8 -> .)
    INPUTFLOAT      reduce using rule 19 (n_math_expression_8 -> .)
    TIMES           reduce using rule 19 (n_math_expression_8 -> .)
    DIVIDE          reduce using rule 19 (n_math_expression_8 -> .)
    MODULUS         reduce using rule 19 (n_math_expression_8 -> .)
    OR              reduce using rule 19 (n_math_expression_8 -> .)
    AND             reduce using rule 19 (n_math_expression_8 -> .)
    SEMICOLON       reduce using rule 19 (n_math_expression_8 -> .)
    RPARENTHESIS    reduce using rule 19 (n_math_expression_8 -> .)
    RBRACKET        reduce using rule 19 (n_math_expression_8 -> .)
    COMMA           reduce using rule 19 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 120

state 88

    (69) relational_operator -> NOTEQUAL . n_math_expression_8
    (19) n_math_expression_8 -> .

    LPARENTHESIS    reduce using rule 19 (n_math_expression_8 -> .)
    PLUS            reduce using rule 19 (n_math_expression_8 -> .)
    MINUS           reduce using rule 19 (n_math_expression_8 -> .)
    NAME            reduce using rule 19 (n_math_expression_8 -> .)
    FLOAT           reduce using rule 19 (n_math_expression_8 -> .)
    INT             reduce using rule 19 (n_math_expression_8 -> .)
    STRING          reduce using rule 19 (n_math_expression_8 -> .)
    TRUE            reduce using rule 19 (n_math_expression_8 -> .)
    FALSE           reduce using rule 19 (n_math_expression_8 -> .)
    INPUTSTRING     reduce using rule 19 (n_math_expression_8 -> .)
    INPUTINT        reduce using rule 19 (n_math_expression_8 -> .)
    INPUTFLOAT      reduce using rule 19 (n_math_expression_8 -> .)
    TIMES           reduce using rule 19 (n_math_expression_8 -> .)
    DIVIDE          reduce using rule 19 (n_math_expression_8 -> .)
    MODULUS         reduce using rule 19 (n_math_expression_8 -> .)
    OR              reduce using rule 19 (n_math_expression_8 -> .)
    AND             reduce using rule 19 (n_math_expression_8 -> .)
    SEMICOLON       reduce using rule 19 (n_math_expression_8 -> .)
    RPARENTHESIS    reduce using rule 19 (n_math_expression_8 -> .)
    RBRACKET        reduce using rule 19 (n_math_expression_8 -> .)
    COMMA           reduce using rule 19 (n_math_expression_8 -> .)

    n_math_expression_8            shift and go to state 121

state 89

    (99) exp -> termino n_math_expression_4 .
    (100) exp -> termino n_math_expression_4 . PLUS n_math_expression_2 exp
    (101) exp -> termino n_math_expression_4 . MINUS n_math_expression_2 exp

    GREATERTHAN     reduce using rule 99 (exp -> termino n_math_expression_4 .)
    LESSTHAN        reduce using rule 99 (exp -> termino n_math_expression_4 .)
    EQUALEQUAL      reduce using rule 99 (exp -> termino n_math_expression_4 .)
    LESSTHANOREQUAL reduce using rule 99 (exp -> termino n_math_expression_4 .)
    GREATERTHANOREQUAL reduce using rule 99 (exp -> termino n_math_expression_4 .)
    NOTEQUAL        reduce using rule 99 (exp -> termino n_math_expression_4 .)
    OR              reduce using rule 99 (exp -> termino n_math_expression_4 .)
    AND             reduce using rule 99 (exp -> termino n_math_expression_4 .)
    SEMICOLON       reduce using rule 99 (exp -> termino n_math_expression_4 .)
    RPARENTHESIS    reduce using rule 99 (exp -> termino n_math_expression_4 .)
    RBRACKET        reduce using rule 99 (exp -> termino n_math_expression_4 .)
    COMMA           reduce using rule 99 (exp -> termino n_math_expression_4 .)
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123


state 90

    (107) factor -> PLUS value .

    TIMES           reduce using rule 107 (factor -> PLUS value .)
    DIVIDE          reduce using rule 107 (factor -> PLUS value .)
    MODULUS         reduce using rule 107 (factor -> PLUS value .)
    PLUS            reduce using rule 107 (factor -> PLUS value .)
    MINUS           reduce using rule 107 (factor -> PLUS value .)
    GREATERTHAN     reduce using rule 107 (factor -> PLUS value .)
    LESSTHAN        reduce using rule 107 (factor -> PLUS value .)
    EQUALEQUAL      reduce using rule 107 (factor -> PLUS value .)
    LESSTHANOREQUAL reduce using rule 107 (factor -> PLUS value .)
    GREATERTHANOREQUAL reduce using rule 107 (factor -> PLUS value .)
    NOTEQUAL        reduce using rule 107 (factor -> PLUS value .)
    OR              reduce using rule 107 (factor -> PLUS value .)
    AND             reduce using rule 107 (factor -> PLUS value .)
    SEMICOLON       reduce using rule 107 (factor -> PLUS value .)
    RPARENTHESIS    reduce using rule 107 (factor -> PLUS value .)
    RBRACKET        reduce using rule 107 (factor -> PLUS value .)
    COMMA           reduce using rule 107 (factor -> PLUS value .)


state 91

    (108) factor -> MINUS value .

    TIMES           reduce using rule 108 (factor -> MINUS value .)
    DIVIDE          reduce using rule 108 (factor -> MINUS value .)
    MODULUS         reduce using rule 108 (factor -> MINUS value .)
    PLUS            reduce using rule 108 (factor -> MINUS value .)
    MINUS           reduce using rule 108 (factor -> MINUS value .)
    GREATERTHAN     reduce using rule 108 (factor -> MINUS value .)
    LESSTHAN        reduce using rule 108 (factor -> MINUS value .)
    EQUALEQUAL      reduce using rule 108 (factor -> MINUS value .)
    LESSTHANOREQUAL reduce using rule 108 (factor -> MINUS value .)
    GREATERTHANOREQUAL reduce using rule 108 (factor -> MINUS value .)
    NOTEQUAL        reduce using rule 108 (factor -> MINUS value .)
    OR              reduce using rule 108 (factor -> MINUS value .)
    AND             reduce using rule 108 (factor -> MINUS value .)
    SEMICOLON       reduce using rule 108 (factor -> MINUS value .)
    RPARENTHESIS    reduce using rule 108 (factor -> MINUS value .)
    RBRACKET        reduce using rule 108 (factor -> MINUS value .)
    COMMA           reduce using rule 108 (factor -> MINUS value .)


state 92

    (102) termino -> factor n_math_expression_5 .
    (103) termino -> factor n_math_expression_5 . TIMES n_math_expression_3 termino
    (104) termino -> factor n_math_expression_5 . DIVIDE n_math_expression_3 termino
    (105) termino -> factor n_math_expression_5 . MODULUS n_math_expression_3 termino

    PLUS            reduce using rule 102 (termino -> factor n_math_expression_5 .)
    MINUS           reduce using rule 102 (termino -> factor n_math_expression_5 .)
    GREATERTHAN     reduce using rule 102 (termino -> factor n_math_expression_5 .)
    LESSTHAN        reduce using rule 102 (termino -> factor n_math_expression_5 .)
    EQUALEQUAL      reduce using rule 102 (termino -> factor n_math_expression_5 .)
    LESSTHANOREQUAL reduce using rule 102 (termino -> factor n_math_expression_5 .)
    GREATERTHANOREQUAL reduce using rule 102 (termino -> factor n_math_expression_5 .)
    NOTEQUAL        reduce using rule 102 (termino -> factor n_math_expression_5 .)
    OR              reduce using rule 102 (termino -> factor n_math_expression_5 .)
    AND             reduce using rule 102 (termino -> factor n_math_expression_5 .)
    SEMICOLON       reduce using rule 102 (termino -> factor n_math_expression_5 .)
    RPARENTHESIS    reduce using rule 102 (termino -> factor n_math_expression_5 .)
    RBRACKET        reduce using rule 102 (termino -> factor n_math_expression_5 .)
    COMMA           reduce using rule 102 (termino -> factor n_math_expression_5 .)
    TIMES           shift and go to state 124
    DIVIDE          shift and go to state 125
    MODULUS         shift and go to state 126


state 93

    (106) factor -> LPARENTHESIS n_math_expression_6 . expression RPARENTHESIS n_math_expression_7
    (93) expression -> . expression_or
    (94) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (95) expression_or -> . expression_rel
    (96) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (97) expression_rel -> . exp
    (98) expression_rel -> . exp relational_operator exp n_math_expression_9
    (99) exp -> . termino n_math_expression_4
    (100) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (101) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (102) termino -> . factor n_math_expression_5
    (103) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (104) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (105) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (106) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (107) factor -> . PLUS value
    (108) factor -> . MINUS value
    (109) factor -> . value
    (113) value -> . function_call
    (114) value -> . literal
    (115) value -> . reference
    (116) value -> . input
    (84) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (85) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (70) literal -> . FLOAT n_math_expression_1_float
    (71) literal -> . INT n_math_expression_1_int
    (72) literal -> . STRING n_math_expression_1_string
    (73) literal -> . TRUE n_math_expression_1_bool
    (74) literal -> . FALSE n_math_expression_1_bool
    (117) reference -> . NAME n_variable_reference n_math_expression_1_name
    (118) reference -> . arr_reference
    (110) input -> . INPUTSTRING LPARENTHESIS RPARENTHESIS n_input_string
    (111) input -> . INPUTINT LPARENTHESIS RPARENTHESIS n_input_int
    (112) input -> . INPUTFLOAT LPARENTHESIS RPARENTHESIS n_input_float
    (119) arr_reference -> .
    (120) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference
    (121) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    NAME            shift and go to state 15
    FLOAT           shift and go to state 56
    INT             shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    INPUTSTRING     shift and go to state 61
    INPUTINT        shift and go to state 62
    INPUTFLOAT      shift and go to state 63
    TIMES           reduce using rule 119 (arr_reference -> .)
    DIVIDE          reduce using rule 119 (arr_reference -> .)
    MODULUS         reduce using rule 119 (arr_reference -> .)
    GREATERTHAN     reduce using rule 119 (arr_reference -> .)
    LESSTHAN        reduce using rule 119 (arr_reference -> .)
    EQUALEQUAL      reduce using rule 119 (arr_reference -> .)
    LESSTHANOREQUAL reduce using rule 119 (arr_reference -> .)
    GREATERTHANOREQUAL reduce using rule 119 (arr_reference -> .)
    NOTEQUAL        reduce using rule 119 (arr_reference -> .)
    OR              reduce using rule 119 (arr_reference -> .)
    AND             reduce using rule 119 (arr_reference -> .)
    RPARENTHESIS    reduce using rule 119 (arr_reference -> .)

  ! PLUS            [ reduce using rule 119 (arr_reference -> .) ]
  ! MINUS           [ reduce using rule 119 (arr_reference -> .) ]

    expression                     shift and go to state 127
    expression_or                  shift and go to state 43
    expression_rel                 shift and go to state 44
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 49
    value                          shift and go to state 51
    function_call                  shift and go to state 52
    literal                        shift and go to state 53
    reference                      shift and go to state 54
    input                          shift and go to state 55
    arr_reference                  shift and go to state 32

state 94

    (70) literal -> FLOAT n_math_expression_1_float .

    TIMES           reduce using rule 70 (literal -> FLOAT n_math_expression_1_float .)
    DIVIDE          reduce using rule 70 (literal -> FLOAT n_math_expression_1_float .)
    MODULUS         reduce using rule 70 (literal -> FLOAT n_math_expression_1_float .)
    PLUS            reduce using rule 70 (literal -> FLOAT n_math_expression_1_float .)
    MINUS           reduce using rule 70 (literal -> FLOAT n_math_expression_1_float .)
    GREATERTHAN     reduce using rule 70 (literal -> FLOAT n_math_expression_1_float .)
    LESSTHAN        reduce using rule 70 (literal -> FLOAT n_math_expression_1_float .)
    EQUALEQUAL      reduce using rule 70 (literal -> FLOAT n_math_expression_1_float .)
    LESSTHANOREQUAL reduce using rule 70 (literal -> FLOAT n_math_expression_1_float .)
    GREATERTHANOREQUAL reduce using rule 70 (literal -> FLOAT n_math_expression_1_float .)
    NOTEQUAL        reduce using rule 70 (literal -> FLOAT n_math_expression_1_float .)
    OR              reduce using rule 70 (literal -> FLOAT n_math_expression_1_float .)
    AND             reduce using rule 70 (literal -> FLOAT n_math_expression_1_float .)
    SEMICOLON       reduce using rule 70 (literal -> FLOAT n_math_expression_1_float .)
    RPARENTHESIS    reduce using rule 70 (literal -> FLOAT n_math_expression_1_float .)
    RBRACKET        reduce using rule 70 (literal -> FLOAT n_math_expression_1_float .)
    COMMA           reduce using rule 70 (literal -> FLOAT n_math_expression_1_float .)


state 95

    (71) literal -> INT n_math_expression_1_int .

    TIMES           reduce using rule 71 (literal -> INT n_math_expression_1_int .)
    DIVIDE          reduce using rule 71 (literal -> INT n_math_expression_1_int .)
    MODULUS         reduce using rule 71 (literal -> INT n_math_expression_1_int .)
    PLUS            reduce using rule 71 (literal -> INT n_math_expression_1_int .)
    MINUS           reduce using rule 71 (literal -> INT n_math_expression_1_int .)
    GREATERTHAN     reduce using rule 71 (literal -> INT n_math_expression_1_int .)
    LESSTHAN        reduce using rule 71 (literal -> INT n_math_expression_1_int .)
    EQUALEQUAL      reduce using rule 71 (literal -> INT n_math_expression_1_int .)
    LESSTHANOREQUAL reduce using rule 71 (literal -> INT n_math_expression_1_int .)
    GREATERTHANOREQUAL reduce using rule 71 (literal -> INT n_math_expression_1_int .)
    NOTEQUAL        reduce using rule 71 (literal -> INT n_math_expression_1_int .)
    OR              reduce using rule 71 (literal -> INT n_math_expression_1_int .)
    AND             reduce using rule 71 (literal -> INT n_math_expression_1_int .)
    SEMICOLON       reduce using rule 71 (literal -> INT n_math_expression_1_int .)
    RPARENTHESIS    reduce using rule 71 (literal -> INT n_math_expression_1_int .)
    RBRACKET        reduce using rule 71 (literal -> INT n_math_expression_1_int .)
    COMMA           reduce using rule 71 (literal -> INT n_math_expression_1_int .)


state 96

    (72) literal -> STRING n_math_expression_1_string .

    TIMES           reduce using rule 72 (literal -> STRING n_math_expression_1_string .)
    DIVIDE          reduce using rule 72 (literal -> STRING n_math_expression_1_string .)
    MODULUS         reduce using rule 72 (literal -> STRING n_math_expression_1_string .)
    PLUS            reduce using rule 72 (literal -> STRING n_math_expression_1_string .)
    MINUS           reduce using rule 72 (literal -> STRING n_math_expression_1_string .)
    GREATERTHAN     reduce using rule 72 (literal -> STRING n_math_expression_1_string .)
    LESSTHAN        reduce using rule 72 (literal -> STRING n_math_expression_1_string .)
    EQUALEQUAL      reduce using rule 72 (literal -> STRING n_math_expression_1_string .)
    LESSTHANOREQUAL reduce using rule 72 (literal -> STRING n_math_expression_1_string .)
    GREATERTHANOREQUAL reduce using rule 72 (literal -> STRING n_math_expression_1_string .)
    NOTEQUAL        reduce using rule 72 (literal -> STRING n_math_expression_1_string .)
    OR              reduce using rule 72 (literal -> STRING n_math_expression_1_string .)
    AND             reduce using rule 72 (literal -> STRING n_math_expression_1_string .)
    SEMICOLON       reduce using rule 72 (literal -> STRING n_math_expression_1_string .)
    RPARENTHESIS    reduce using rule 72 (literal -> STRING n_math_expression_1_string .)
    RBRACKET        reduce using rule 72 (literal -> STRING n_math_expression_1_string .)
    COMMA           reduce using rule 72 (literal -> STRING n_math_expression_1_string .)


state 97

    (73) literal -> TRUE n_math_expression_1_bool .

    TIMES           reduce using rule 73 (literal -> TRUE n_math_expression_1_bool .)
    DIVIDE          reduce using rule 73 (literal -> TRUE n_math_expression_1_bool .)
    MODULUS         reduce using rule 73 (literal -> TRUE n_math_expression_1_bool .)
    PLUS            reduce using rule 73 (literal -> TRUE n_math_expression_1_bool .)
    MINUS           reduce using rule 73 (literal -> TRUE n_math_expression_1_bool .)
    GREATERTHAN     reduce using rule 73 (literal -> TRUE n_math_expression_1_bool .)
    LESSTHAN        reduce using rule 73 (literal -> TRUE n_math_expression_1_bool .)
    EQUALEQUAL      reduce using rule 73 (literal -> TRUE n_math_expression_1_bool .)
    LESSTHANOREQUAL reduce using rule 73 (literal -> TRUE n_math_expression_1_bool .)
    GREATERTHANOREQUAL reduce using rule 73 (literal -> TRUE n_math_expression_1_bool .)
    NOTEQUAL        reduce using rule 73 (literal -> TRUE n_math_expression_1_bool .)
    OR              reduce using rule 73 (literal -> TRUE n_math_expression_1_bool .)
    AND             reduce using rule 73 (literal -> TRUE n_math_expression_1_bool .)
    SEMICOLON       reduce using rule 73 (literal -> TRUE n_math_expression_1_bool .)
    RPARENTHESIS    reduce using rule 73 (literal -> TRUE n_math_expression_1_bool .)
    RBRACKET        reduce using rule 73 (literal -> TRUE n_math_expression_1_bool .)
    COMMA           reduce using rule 73 (literal -> TRUE n_math_expression_1_bool .)


state 98

    (74) literal -> FALSE n_math_expression_1_bool .

    TIMES           reduce using rule 74 (literal -> FALSE n_math_expression_1_bool .)
    DIVIDE          reduce using rule 74 (literal -> FALSE n_math_expression_1_bool .)
    MODULUS         reduce using rule 74 (literal -> FALSE n_math_expression_1_bool .)
    PLUS            reduce using rule 74 (literal -> FALSE n_math_expression_1_bool .)
    MINUS           reduce using rule 74 (literal -> FALSE n_math_expression_1_bool .)
    GREATERTHAN     reduce using rule 74 (literal -> FALSE n_math_expression_1_bool .)
    LESSTHAN        reduce using rule 74 (literal -> FALSE n_math_expression_1_bool .)
    EQUALEQUAL      reduce using rule 74 (literal -> FALSE n_math_expression_1_bool .)
    LESSTHANOREQUAL reduce using rule 74 (literal -> FALSE n_math_expression_1_bool .)
    GREATERTHANOREQUAL reduce using rule 74 (literal -> FALSE n_math_expression_1_bool .)
    NOTEQUAL        reduce using rule 74 (literal -> FALSE n_math_expression_1_bool .)
    OR              reduce using rule 74 (literal -> FALSE n_math_expression_1_bool .)
    AND             reduce using rule 74 (literal -> FALSE n_math_expression_1_bool .)
    SEMICOLON       reduce using rule 74 (literal -> FALSE n_math_expression_1_bool .)
    RPARENTHESIS    reduce using rule 74 (literal -> FALSE n_math_expression_1_bool .)
    RBRACKET        reduce using rule 74 (literal -> FALSE n_math_expression_1_bool .)
    COMMA           reduce using rule 74 (literal -> FALSE n_math_expression_1_bool .)


state 99

    (110) input -> INPUTSTRING LPARENTHESIS . RPARENTHESIS n_input_string

    RPARENTHESIS    shift and go to state 128


state 100

    (111) input -> INPUTINT LPARENTHESIS . RPARENTHESIS n_input_int

    RPARENTHESIS    shift and go to state 129


state 101

    (112) input -> INPUTFLOAT LPARENTHESIS . RPARENTHESIS n_input_float

    RPARENTHESIS    shift and go to state 130


state 102

    (141) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS . expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (93) expression -> . expression_or
    (94) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (95) expression_or -> . expression_rel
    (96) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (97) expression_rel -> . exp
    (98) expression_rel -> . exp relational_operator exp n_math_expression_9
    (99) exp -> . termino n_math_expression_4
    (100) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (101) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (102) termino -> . factor n_math_expression_5
    (103) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (104) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (105) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (106) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (107) factor -> . PLUS value
    (108) factor -> . MINUS value
    (109) factor -> . value
    (113) value -> . function_call
    (114) value -> . literal
    (115) value -> . reference
    (116) value -> . input
    (84) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (85) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (70) literal -> . FLOAT n_math_expression_1_float
    (71) literal -> . INT n_math_expression_1_int
    (72) literal -> . STRING n_math_expression_1_string
    (73) literal -> . TRUE n_math_expression_1_bool
    (74) literal -> . FALSE n_math_expression_1_bool
    (117) reference -> . NAME n_variable_reference n_math_expression_1_name
    (118) reference -> . arr_reference
    (110) input -> . INPUTSTRING LPARENTHESIS RPARENTHESIS n_input_string
    (111) input -> . INPUTINT LPARENTHESIS RPARENTHESIS n_input_int
    (112) input -> . INPUTFLOAT LPARENTHESIS RPARENTHESIS n_input_float
    (119) arr_reference -> .
    (120) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference
    (121) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    NAME            shift and go to state 15
    FLOAT           shift and go to state 56
    INT             shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    INPUTSTRING     shift and go to state 61
    INPUTINT        shift and go to state 62
    INPUTFLOAT      shift and go to state 63
    TIMES           reduce using rule 119 (arr_reference -> .)
    DIVIDE          reduce using rule 119 (arr_reference -> .)
    MODULUS         reduce using rule 119 (arr_reference -> .)
    GREATERTHAN     reduce using rule 119 (arr_reference -> .)
    LESSTHAN        reduce using rule 119 (arr_reference -> .)
    EQUALEQUAL      reduce using rule 119 (arr_reference -> .)
    LESSTHANOREQUAL reduce using rule 119 (arr_reference -> .)
    GREATERTHANOREQUAL reduce using rule 119 (arr_reference -> .)
    NOTEQUAL        reduce using rule 119 (arr_reference -> .)
    OR              reduce using rule 119 (arr_reference -> .)
    AND             reduce using rule 119 (arr_reference -> .)
    RPARENTHESIS    reduce using rule 119 (arr_reference -> .)

  ! PLUS            [ reduce using rule 119 (arr_reference -> .) ]
  ! MINUS           [ reduce using rule 119 (arr_reference -> .) ]

    expression                     shift and go to state 131
    expression_or                  shift and go to state 43
    expression_rel                 shift and go to state 44
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 49
    value                          shift and go to state 51
    function_call                  shift and go to state 52
    literal                        shift and go to state 53
    reference                      shift and go to state 54
    input                          shift and go to state 55
    arr_reference                  shift and go to state 32

state 103

    (125) assign -> type NAME n_variable_instantiate . n_math_expression_1_name EQUAL n_seen_equal_op expression
    (122) declare -> type NAME n_variable_instantiate .
    (12) n_math_expression_1_name -> .

    SEMICOLON       reduce using rule 122 (declare -> type NAME n_variable_instantiate .)
    EQUAL           reduce using rule 12 (n_math_expression_1_name -> .)

    n_math_expression_1_name       shift and go to state 132

state 104

    (123) declare -> type NAME n_arr_instantiate_name . LBRACKET INT n_arr_instantiate_size RBRACKET n_arr_instantiate
    (124) declare -> type NAME n_arr_instantiate_name . LBRACKET INT n_arr_instantiate_size RBRACKET LBRACKET INT n_arr_instantiate_size RBRACKET n_matrix_instantiate

    LBRACKET        shift and go to state 133


state 105

    (126) assign -> reference EQUAL n_seen_equal_op . expression
    (93) expression -> . expression_or
    (94) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (95) expression_or -> . expression_rel
    (96) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (97) expression_rel -> . exp
    (98) expression_rel -> . exp relational_operator exp n_math_expression_9
    (99) exp -> . termino n_math_expression_4
    (100) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (101) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (102) termino -> . factor n_math_expression_5
    (103) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (104) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (105) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (106) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (107) factor -> . PLUS value
    (108) factor -> . MINUS value
    (109) factor -> . value
    (113) value -> . function_call
    (114) value -> . literal
    (115) value -> . reference
    (116) value -> . input
    (84) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (85) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (70) literal -> . FLOAT n_math_expression_1_float
    (71) literal -> . INT n_math_expression_1_int
    (72) literal -> . STRING n_math_expression_1_string
    (73) literal -> . TRUE n_math_expression_1_bool
    (74) literal -> . FALSE n_math_expression_1_bool
    (117) reference -> . NAME n_variable_reference n_math_expression_1_name
    (118) reference -> . arr_reference
    (110) input -> . INPUTSTRING LPARENTHESIS RPARENTHESIS n_input_string
    (111) input -> . INPUTINT LPARENTHESIS RPARENTHESIS n_input_int
    (112) input -> . INPUTFLOAT LPARENTHESIS RPARENTHESIS n_input_float
    (119) arr_reference -> .
    (120) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference
    (121) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    NAME            shift and go to state 15
    FLOAT           shift and go to state 56
    INT             shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    INPUTSTRING     shift and go to state 61
    INPUTINT        shift and go to state 62
    INPUTFLOAT      shift and go to state 63
    TIMES           reduce using rule 119 (arr_reference -> .)
    DIVIDE          reduce using rule 119 (arr_reference -> .)
    MODULUS         reduce using rule 119 (arr_reference -> .)
    GREATERTHAN     reduce using rule 119 (arr_reference -> .)
    LESSTHAN        reduce using rule 119 (arr_reference -> .)
    EQUALEQUAL      reduce using rule 119 (arr_reference -> .)
    LESSTHANOREQUAL reduce using rule 119 (arr_reference -> .)
    GREATERTHANOREQUAL reduce using rule 119 (arr_reference -> .)
    NOTEQUAL        reduce using rule 119 (arr_reference -> .)
    OR              reduce using rule 119 (arr_reference -> .)
    AND             reduce using rule 119 (arr_reference -> .)
    SEMICOLON       reduce using rule 119 (arr_reference -> .)

  ! PLUS            [ reduce using rule 119 (arr_reference -> .) ]
  ! MINUS           [ reduce using rule 119 (arr_reference -> .) ]

    reference                      shift and go to state 54
    expression                     shift and go to state 134
    expression_or                  shift and go to state 43
    expression_rel                 shift and go to state 44
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 49
    value                          shift and go to state 51
    function_call                  shift and go to state 52
    literal                        shift and go to state 53
    input                          shift and go to state 55
    arr_reference                  shift and go to state 32

state 106

    (127) print -> PRINT LPARENTHESIS expression . n_print RPARENTHESIS
    (43) n_print -> .

    RPARENTHESIS    reduce using rule 43 (n_print -> .)

    n_print                        shift and go to state 135

state 107

    (81) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function . parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end
    (88) parameter_list -> . empty
    (89) parameter_list -> . parameter
    (90) parameter_list -> . parameter COMMA parameter_list
    (55) empty -> .
    (92) parameter -> . type NAME n_variable_instantiate_param
    (59) type -> . INT_TYPE n_seen_type
    (60) type -> . STRING_TYPE n_seen_type
    (61) type -> . DOUBLE_TYPE n_seen_type
    (62) type -> . FLOAT_TYPE n_seen_type
    (63) type -> . BOOL_TYPE n_seen_type

    DOUBLEDOT       reduce using rule 55 (empty -> .)
    INT_TYPE        shift and go to state 27
    STRING_TYPE     shift and go to state 28
    DOUBLE_TYPE     shift and go to state 29
    FLOAT_TYPE      shift and go to state 30
    BOOL_TYPE       shift and go to state 31

    parameter_list                 shift and go to state 136
    empty                          shift and go to state 137
    parameter                      shift and go to state 138
    type                           shift and go to state 139

state 108

    (84) function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 . arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (86) arg_list -> . arg
    (87) arg_list -> . arg COMMA n_function_call_4 arg_list
    (91) arg -> . expression n_function_call_3
    (93) expression -> . expression_or
    (94) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (95) expression_or -> . expression_rel
    (96) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (97) expression_rel -> . exp
    (98) expression_rel -> . exp relational_operator exp n_math_expression_9
    (99) exp -> . termino n_math_expression_4
    (100) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (101) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (102) termino -> . factor n_math_expression_5
    (103) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (104) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (105) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (106) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (107) factor -> . PLUS value
    (108) factor -> . MINUS value
    (109) factor -> . value
    (113) value -> . function_call
    (114) value -> . literal
    (115) value -> . reference
    (116) value -> . input
    (84) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (85) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (70) literal -> . FLOAT n_math_expression_1_float
    (71) literal -> . INT n_math_expression_1_int
    (72) literal -> . STRING n_math_expression_1_string
    (73) literal -> . TRUE n_math_expression_1_bool
    (74) literal -> . FALSE n_math_expression_1_bool
    (117) reference -> . NAME n_variable_reference n_math_expression_1_name
    (118) reference -> . arr_reference
    (110) input -> . INPUTSTRING LPARENTHESIS RPARENTHESIS n_input_string
    (111) input -> . INPUTINT LPARENTHESIS RPARENTHESIS n_input_int
    (112) input -> . INPUTFLOAT LPARENTHESIS RPARENTHESIS n_input_float
    (119) arr_reference -> .
    (120) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference
    (121) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    NAME            shift and go to state 15
    FLOAT           shift and go to state 56
    INT             shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    INPUTSTRING     shift and go to state 61
    INPUTINT        shift and go to state 62
    INPUTFLOAT      shift and go to state 63
    TIMES           reduce using rule 119 (arr_reference -> .)
    DIVIDE          reduce using rule 119 (arr_reference -> .)
    MODULUS         reduce using rule 119 (arr_reference -> .)
    GREATERTHAN     reduce using rule 119 (arr_reference -> .)
    LESSTHAN        reduce using rule 119 (arr_reference -> .)
    EQUALEQUAL      reduce using rule 119 (arr_reference -> .)
    LESSTHANOREQUAL reduce using rule 119 (arr_reference -> .)
    GREATERTHANOREQUAL reduce using rule 119 (arr_reference -> .)
    NOTEQUAL        reduce using rule 119 (arr_reference -> .)
    OR              reduce using rule 119 (arr_reference -> .)
    AND             reduce using rule 119 (arr_reference -> .)
    COMMA           reduce using rule 119 (arr_reference -> .)
    RPARENTHESIS    reduce using rule 119 (arr_reference -> .)

  ! PLUS            [ reduce using rule 119 (arr_reference -> .) ]
  ! MINUS           [ reduce using rule 119 (arr_reference -> .) ]

    arg_list                       shift and go to state 140
    arg                            shift and go to state 141
    expression                     shift and go to state 142
    expression_or                  shift and go to state 43
    expression_rel                 shift and go to state 44
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 49
    value                          shift and go to state 51
    function_call                  shift and go to state 52
    literal                        shift and go to state 53
    reference                      shift and go to state 54
    input                          shift and go to state 55
    arr_reference                  shift and go to state 32

state 109

    (85) function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS . n_function_call_6
    (40) n_function_call_6 -> .

    SEMICOLON       reduce using rule 40 (n_function_call_6 -> .)
    TIMES           reduce using rule 40 (n_function_call_6 -> .)
    DIVIDE          reduce using rule 40 (n_function_call_6 -> .)
    MODULUS         reduce using rule 40 (n_function_call_6 -> .)
    PLUS            reduce using rule 40 (n_function_call_6 -> .)
    MINUS           reduce using rule 40 (n_function_call_6 -> .)
    GREATERTHAN     reduce using rule 40 (n_function_call_6 -> .)
    LESSTHAN        reduce using rule 40 (n_function_call_6 -> .)
    EQUALEQUAL      reduce using rule 40 (n_function_call_6 -> .)
    LESSTHANOREQUAL reduce using rule 40 (n_function_call_6 -> .)
    GREATERTHANOREQUAL reduce using rule 40 (n_function_call_6 -> .)
    NOTEQUAL        reduce using rule 40 (n_function_call_6 -> .)
    OR              reduce using rule 40 (n_function_call_6 -> .)
    AND             reduce using rule 40 (n_function_call_6 -> .)
    RPARENTHESIS    reduce using rule 40 (n_function_call_6 -> .)
    RBRACKET        reduce using rule 40 (n_function_call_6 -> .)
    COMMA           reduce using rule 40 (n_function_call_6 -> .)

    n_function_call_6              shift and go to state 143

state 110

    (120) arr_reference -> NAME n_arr_reference_name LBRACKET expression . RBRACKET n_arr_reference
    (121) arr_reference -> NAME n_arr_reference_name LBRACKET expression . RBRACKET LBRACKET expression RBRACKET n_matrix_reference

    RBRACKET        shift and go to state 144


state 111

    (142) condition_if -> IF LPARENTHESIS expression RPARENTHESIS . LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2

    LCURLY          shift and go to state 145


state 112

    (82) return -> RETURN expression n_return SEMICOLON .

    IF              reduce using rule 82 (return -> RETURN expression n_return SEMICOLON .)
    RETURN          reduce using rule 82 (return -> RETURN expression n_return SEMICOLON .)
    WHILE           reduce using rule 82 (return -> RETURN expression n_return SEMICOLON .)
    NAME            reduce using rule 82 (return -> RETURN expression n_return SEMICOLON .)
    PRINT           reduce using rule 82 (return -> RETURN expression n_return SEMICOLON .)
    INT_TYPE        reduce using rule 82 (return -> RETURN expression n_return SEMICOLON .)
    STRING_TYPE     reduce using rule 82 (return -> RETURN expression n_return SEMICOLON .)
    DOUBLE_TYPE     reduce using rule 82 (return -> RETURN expression n_return SEMICOLON .)
    FLOAT_TYPE      reduce using rule 82 (return -> RETURN expression n_return SEMICOLON .)
    BOOL_TYPE       reduce using rule 82 (return -> RETURN expression n_return SEMICOLON .)
    FUNCTION        reduce using rule 82 (return -> RETURN expression n_return SEMICOLON .)
    EQUAL           reduce using rule 82 (return -> RETURN expression n_return SEMICOLON .)
    $end            reduce using rule 82 (return -> RETURN expression n_return SEMICOLON .)
    RCURLY          reduce using rule 82 (return -> RETURN expression n_return SEMICOLON .)


state 113

    (94) expression -> expression_or AND n_math_expression_10 . expression n_math_expression_11
    (93) expression -> . expression_or
    (94) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (95) expression_or -> . expression_rel
    (96) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (97) expression_rel -> . exp
    (98) expression_rel -> . exp relational_operator exp n_math_expression_9
    (99) exp -> . termino n_math_expression_4
    (100) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (101) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (102) termino -> . factor n_math_expression_5
    (103) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (104) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (105) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (106) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (107) factor -> . PLUS value
    (108) factor -> . MINUS value
    (109) factor -> . value
    (113) value -> . function_call
    (114) value -> . literal
    (115) value -> . reference
    (116) value -> . input
    (84) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (85) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (70) literal -> . FLOAT n_math_expression_1_float
    (71) literal -> . INT n_math_expression_1_int
    (72) literal -> . STRING n_math_expression_1_string
    (73) literal -> . TRUE n_math_expression_1_bool
    (74) literal -> . FALSE n_math_expression_1_bool
    (117) reference -> . NAME n_variable_reference n_math_expression_1_name
    (118) reference -> . arr_reference
    (110) input -> . INPUTSTRING LPARENTHESIS RPARENTHESIS n_input_string
    (111) input -> . INPUTINT LPARENTHESIS RPARENTHESIS n_input_int
    (112) input -> . INPUTFLOAT LPARENTHESIS RPARENTHESIS n_input_float
    (119) arr_reference -> .
    (120) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference
    (121) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    NAME            shift and go to state 15
    FLOAT           shift and go to state 56
    INT             shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    INPUTSTRING     shift and go to state 61
    INPUTINT        shift and go to state 62
    INPUTFLOAT      shift and go to state 63
    TIMES           reduce using rule 119 (arr_reference -> .)
    DIVIDE          reduce using rule 119 (arr_reference -> .)
    MODULUS         reduce using rule 119 (arr_reference -> .)
    GREATERTHAN     reduce using rule 119 (arr_reference -> .)
    LESSTHAN        reduce using rule 119 (arr_reference -> .)
    EQUALEQUAL      reduce using rule 119 (arr_reference -> .)
    LESSTHANOREQUAL reduce using rule 119 (arr_reference -> .)
    GREATERTHANOREQUAL reduce using rule 119 (arr_reference -> .)
    NOTEQUAL        reduce using rule 119 (arr_reference -> .)
    OR              reduce using rule 119 (arr_reference -> .)
    AND             reduce using rule 119 (arr_reference -> .)
    SEMICOLON       reduce using rule 119 (arr_reference -> .)
    RPARENTHESIS    reduce using rule 119 (arr_reference -> .)
    RBRACKET        reduce using rule 119 (arr_reference -> .)
    COMMA           reduce using rule 119 (arr_reference -> .)

  ! PLUS            [ reduce using rule 119 (arr_reference -> .) ]
  ! MINUS           [ reduce using rule 119 (arr_reference -> .) ]

    expression_or                  shift and go to state 43
    expression                     shift and go to state 146
    expression_rel                 shift and go to state 44
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 49
    value                          shift and go to state 51
    function_call                  shift and go to state 52
    literal                        shift and go to state 53
    reference                      shift and go to state 54
    input                          shift and go to state 55
    arr_reference                  shift and go to state 32

state 114

    (96) expression_or -> expression_rel OR n_math_expression_10 . expression_or n_math_expression_12
    (95) expression_or -> . expression_rel
    (96) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (97) expression_rel -> . exp
    (98) expression_rel -> . exp relational_operator exp n_math_expression_9
    (99) exp -> . termino n_math_expression_4
    (100) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (101) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (102) termino -> . factor n_math_expression_5
    (103) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (104) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (105) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (106) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (107) factor -> . PLUS value
    (108) factor -> . MINUS value
    (109) factor -> . value
    (113) value -> . function_call
    (114) value -> . literal
    (115) value -> . reference
    (116) value -> . input
    (84) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (85) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (70) literal -> . FLOAT n_math_expression_1_float
    (71) literal -> . INT n_math_expression_1_int
    (72) literal -> . STRING n_math_expression_1_string
    (73) literal -> . TRUE n_math_expression_1_bool
    (74) literal -> . FALSE n_math_expression_1_bool
    (117) reference -> . NAME n_variable_reference n_math_expression_1_name
    (118) reference -> . arr_reference
    (110) input -> . INPUTSTRING LPARENTHESIS RPARENTHESIS n_input_string
    (111) input -> . INPUTINT LPARENTHESIS RPARENTHESIS n_input_int
    (112) input -> . INPUTFLOAT LPARENTHESIS RPARENTHESIS n_input_float
    (119) arr_reference -> .
    (120) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference
    (121) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    NAME            shift and go to state 15
    FLOAT           shift and go to state 56
    INT             shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    INPUTSTRING     shift and go to state 61
    INPUTINT        shift and go to state 62
    INPUTFLOAT      shift and go to state 63
    TIMES           reduce using rule 119 (arr_reference -> .)
    DIVIDE          reduce using rule 119 (arr_reference -> .)
    MODULUS         reduce using rule 119 (arr_reference -> .)
    GREATERTHAN     reduce using rule 119 (arr_reference -> .)
    LESSTHAN        reduce using rule 119 (arr_reference -> .)
    EQUALEQUAL      reduce using rule 119 (arr_reference -> .)
    LESSTHANOREQUAL reduce using rule 119 (arr_reference -> .)
    GREATERTHANOREQUAL reduce using rule 119 (arr_reference -> .)
    NOTEQUAL        reduce using rule 119 (arr_reference -> .)
    OR              reduce using rule 119 (arr_reference -> .)
    AND             reduce using rule 119 (arr_reference -> .)
    SEMICOLON       reduce using rule 119 (arr_reference -> .)
    RPARENTHESIS    reduce using rule 119 (arr_reference -> .)
    RBRACKET        reduce using rule 119 (arr_reference -> .)
    COMMA           reduce using rule 119 (arr_reference -> .)

  ! PLUS            [ reduce using rule 119 (arr_reference -> .) ]
  ! MINUS           [ reduce using rule 119 (arr_reference -> .) ]

    expression_rel                 shift and go to state 44
    expression_or                  shift and go to state 147
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 49
    value                          shift and go to state 51
    function_call                  shift and go to state 52
    literal                        shift and go to state 53
    reference                      shift and go to state 54
    input                          shift and go to state 55
    arr_reference                  shift and go to state 32

state 115

    (98) expression_rel -> exp relational_operator exp . n_math_expression_9
    (20) n_math_expression_9 -> .

    OR              reduce using rule 20 (n_math_expression_9 -> .)
    AND             reduce using rule 20 (n_math_expression_9 -> .)
    SEMICOLON       reduce using rule 20 (n_math_expression_9 -> .)
    RPARENTHESIS    reduce using rule 20 (n_math_expression_9 -> .)
    RBRACKET        reduce using rule 20 (n_math_expression_9 -> .)
    COMMA           reduce using rule 20 (n_math_expression_9 -> .)

    n_math_expression_9            shift and go to state 148

state 116

    (64) relational_operator -> GREATERTHAN n_math_expression_8 .

    LPARENTHESIS    reduce using rule 64 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    PLUS            reduce using rule 64 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    MINUS           reduce using rule 64 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    NAME            reduce using rule 64 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    FLOAT           reduce using rule 64 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    INT             reduce using rule 64 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    STRING          reduce using rule 64 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    TRUE            reduce using rule 64 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    FALSE           reduce using rule 64 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    INPUTSTRING     reduce using rule 64 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    INPUTINT        reduce using rule 64 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    INPUTFLOAT      reduce using rule 64 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    TIMES           reduce using rule 64 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    DIVIDE          reduce using rule 64 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    MODULUS         reduce using rule 64 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    OR              reduce using rule 64 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    AND             reduce using rule 64 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    SEMICOLON       reduce using rule 64 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    RPARENTHESIS    reduce using rule 64 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    RBRACKET        reduce using rule 64 (relational_operator -> GREATERTHAN n_math_expression_8 .)
    COMMA           reduce using rule 64 (relational_operator -> GREATERTHAN n_math_expression_8 .)


state 117

    (65) relational_operator -> LESSTHAN n_math_expression_8 .

    LPARENTHESIS    reduce using rule 65 (relational_operator -> LESSTHAN n_math_expression_8 .)
    PLUS            reduce using rule 65 (relational_operator -> LESSTHAN n_math_expression_8 .)
    MINUS           reduce using rule 65 (relational_operator -> LESSTHAN n_math_expression_8 .)
    NAME            reduce using rule 65 (relational_operator -> LESSTHAN n_math_expression_8 .)
    FLOAT           reduce using rule 65 (relational_operator -> LESSTHAN n_math_expression_8 .)
    INT             reduce using rule 65 (relational_operator -> LESSTHAN n_math_expression_8 .)
    STRING          reduce using rule 65 (relational_operator -> LESSTHAN n_math_expression_8 .)
    TRUE            reduce using rule 65 (relational_operator -> LESSTHAN n_math_expression_8 .)
    FALSE           reduce using rule 65 (relational_operator -> LESSTHAN n_math_expression_8 .)
    INPUTSTRING     reduce using rule 65 (relational_operator -> LESSTHAN n_math_expression_8 .)
    INPUTINT        reduce using rule 65 (relational_operator -> LESSTHAN n_math_expression_8 .)
    INPUTFLOAT      reduce using rule 65 (relational_operator -> LESSTHAN n_math_expression_8 .)
    TIMES           reduce using rule 65 (relational_operator -> LESSTHAN n_math_expression_8 .)
    DIVIDE          reduce using rule 65 (relational_operator -> LESSTHAN n_math_expression_8 .)
    MODULUS         reduce using rule 65 (relational_operator -> LESSTHAN n_math_expression_8 .)
    OR              reduce using rule 65 (relational_operator -> LESSTHAN n_math_expression_8 .)
    AND             reduce using rule 65 (relational_operator -> LESSTHAN n_math_expression_8 .)
    SEMICOLON       reduce using rule 65 (relational_operator -> LESSTHAN n_math_expression_8 .)
    RPARENTHESIS    reduce using rule 65 (relational_operator -> LESSTHAN n_math_expression_8 .)
    RBRACKET        reduce using rule 65 (relational_operator -> LESSTHAN n_math_expression_8 .)
    COMMA           reduce using rule 65 (relational_operator -> LESSTHAN n_math_expression_8 .)


state 118

    (66) relational_operator -> EQUALEQUAL n_math_expression_8 .

    LPARENTHESIS    reduce using rule 66 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    PLUS            reduce using rule 66 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    MINUS           reduce using rule 66 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    NAME            reduce using rule 66 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    FLOAT           reduce using rule 66 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    INT             reduce using rule 66 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    STRING          reduce using rule 66 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    TRUE            reduce using rule 66 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    FALSE           reduce using rule 66 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    INPUTSTRING     reduce using rule 66 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    INPUTINT        reduce using rule 66 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    INPUTFLOAT      reduce using rule 66 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    TIMES           reduce using rule 66 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    DIVIDE          reduce using rule 66 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    MODULUS         reduce using rule 66 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    OR              reduce using rule 66 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    AND             reduce using rule 66 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    SEMICOLON       reduce using rule 66 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    RPARENTHESIS    reduce using rule 66 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    RBRACKET        reduce using rule 66 (relational_operator -> EQUALEQUAL n_math_expression_8 .)
    COMMA           reduce using rule 66 (relational_operator -> EQUALEQUAL n_math_expression_8 .)


state 119

    (67) relational_operator -> LESSTHANOREQUAL n_math_expression_8 .

    LPARENTHESIS    reduce using rule 67 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    PLUS            reduce using rule 67 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    MINUS           reduce using rule 67 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    NAME            reduce using rule 67 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    FLOAT           reduce using rule 67 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    INT             reduce using rule 67 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    STRING          reduce using rule 67 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    TRUE            reduce using rule 67 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    FALSE           reduce using rule 67 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    INPUTSTRING     reduce using rule 67 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    INPUTINT        reduce using rule 67 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    INPUTFLOAT      reduce using rule 67 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    TIMES           reduce using rule 67 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    DIVIDE          reduce using rule 67 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    MODULUS         reduce using rule 67 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    OR              reduce using rule 67 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    AND             reduce using rule 67 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    SEMICOLON       reduce using rule 67 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    RPARENTHESIS    reduce using rule 67 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    RBRACKET        reduce using rule 67 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)
    COMMA           reduce using rule 67 (relational_operator -> LESSTHANOREQUAL n_math_expression_8 .)


state 120

    (68) relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .

    LPARENTHESIS    reduce using rule 68 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    PLUS            reduce using rule 68 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    MINUS           reduce using rule 68 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    NAME            reduce using rule 68 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    FLOAT           reduce using rule 68 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    INT             reduce using rule 68 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    STRING          reduce using rule 68 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    TRUE            reduce using rule 68 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    FALSE           reduce using rule 68 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    INPUTSTRING     reduce using rule 68 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    INPUTINT        reduce using rule 68 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    INPUTFLOAT      reduce using rule 68 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    TIMES           reduce using rule 68 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    DIVIDE          reduce using rule 68 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    MODULUS         reduce using rule 68 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    OR              reduce using rule 68 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    AND             reduce using rule 68 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    SEMICOLON       reduce using rule 68 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    RPARENTHESIS    reduce using rule 68 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    RBRACKET        reduce using rule 68 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)
    COMMA           reduce using rule 68 (relational_operator -> GREATERTHANOREQUAL n_math_expression_8 .)


state 121

    (69) relational_operator -> NOTEQUAL n_math_expression_8 .

    LPARENTHESIS    reduce using rule 69 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    PLUS            reduce using rule 69 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    MINUS           reduce using rule 69 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    NAME            reduce using rule 69 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    FLOAT           reduce using rule 69 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    INT             reduce using rule 69 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    STRING          reduce using rule 69 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    TRUE            reduce using rule 69 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    FALSE           reduce using rule 69 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    INPUTSTRING     reduce using rule 69 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    INPUTINT        reduce using rule 69 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    INPUTFLOAT      reduce using rule 69 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    TIMES           reduce using rule 69 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    DIVIDE          reduce using rule 69 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    MODULUS         reduce using rule 69 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    OR              reduce using rule 69 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    AND             reduce using rule 69 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    SEMICOLON       reduce using rule 69 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    RPARENTHESIS    reduce using rule 69 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    RBRACKET        reduce using rule 69 (relational_operator -> NOTEQUAL n_math_expression_8 .)
    COMMA           reduce using rule 69 (relational_operator -> NOTEQUAL n_math_expression_8 .)


state 122

    (100) exp -> termino n_math_expression_4 PLUS . n_math_expression_2 exp
    (13) n_math_expression_2 -> .

    LPARENTHESIS    reduce using rule 13 (n_math_expression_2 -> .)
    PLUS            reduce using rule 13 (n_math_expression_2 -> .)
    MINUS           reduce using rule 13 (n_math_expression_2 -> .)
    NAME            reduce using rule 13 (n_math_expression_2 -> .)
    FLOAT           reduce using rule 13 (n_math_expression_2 -> .)
    INT             reduce using rule 13 (n_math_expression_2 -> .)
    STRING          reduce using rule 13 (n_math_expression_2 -> .)
    TRUE            reduce using rule 13 (n_math_expression_2 -> .)
    FALSE           reduce using rule 13 (n_math_expression_2 -> .)
    INPUTSTRING     reduce using rule 13 (n_math_expression_2 -> .)
    INPUTINT        reduce using rule 13 (n_math_expression_2 -> .)
    INPUTFLOAT      reduce using rule 13 (n_math_expression_2 -> .)
    TIMES           reduce using rule 13 (n_math_expression_2 -> .)
    DIVIDE          reduce using rule 13 (n_math_expression_2 -> .)
    MODULUS         reduce using rule 13 (n_math_expression_2 -> .)
    GREATERTHAN     reduce using rule 13 (n_math_expression_2 -> .)
    LESSTHAN        reduce using rule 13 (n_math_expression_2 -> .)
    EQUALEQUAL      reduce using rule 13 (n_math_expression_2 -> .)
    LESSTHANOREQUAL reduce using rule 13 (n_math_expression_2 -> .)
    GREATERTHANOREQUAL reduce using rule 13 (n_math_expression_2 -> .)
    NOTEQUAL        reduce using rule 13 (n_math_expression_2 -> .)
    OR              reduce using rule 13 (n_math_expression_2 -> .)
    AND             reduce using rule 13 (n_math_expression_2 -> .)
    SEMICOLON       reduce using rule 13 (n_math_expression_2 -> .)
    RPARENTHESIS    reduce using rule 13 (n_math_expression_2 -> .)
    RBRACKET        reduce using rule 13 (n_math_expression_2 -> .)
    COMMA           reduce using rule 13 (n_math_expression_2 -> .)

    n_math_expression_2            shift and go to state 149

state 123

    (101) exp -> termino n_math_expression_4 MINUS . n_math_expression_2 exp
    (13) n_math_expression_2 -> .

    LPARENTHESIS    reduce using rule 13 (n_math_expression_2 -> .)
    PLUS            reduce using rule 13 (n_math_expression_2 -> .)
    MINUS           reduce using rule 13 (n_math_expression_2 -> .)
    NAME            reduce using rule 13 (n_math_expression_2 -> .)
    FLOAT           reduce using rule 13 (n_math_expression_2 -> .)
    INT             reduce using rule 13 (n_math_expression_2 -> .)
    STRING          reduce using rule 13 (n_math_expression_2 -> .)
    TRUE            reduce using rule 13 (n_math_expression_2 -> .)
    FALSE           reduce using rule 13 (n_math_expression_2 -> .)
    INPUTSTRING     reduce using rule 13 (n_math_expression_2 -> .)
    INPUTINT        reduce using rule 13 (n_math_expression_2 -> .)
    INPUTFLOAT      reduce using rule 13 (n_math_expression_2 -> .)
    TIMES           reduce using rule 13 (n_math_expression_2 -> .)
    DIVIDE          reduce using rule 13 (n_math_expression_2 -> .)
    MODULUS         reduce using rule 13 (n_math_expression_2 -> .)
    GREATERTHAN     reduce using rule 13 (n_math_expression_2 -> .)
    LESSTHAN        reduce using rule 13 (n_math_expression_2 -> .)
    EQUALEQUAL      reduce using rule 13 (n_math_expression_2 -> .)
    LESSTHANOREQUAL reduce using rule 13 (n_math_expression_2 -> .)
    GREATERTHANOREQUAL reduce using rule 13 (n_math_expression_2 -> .)
    NOTEQUAL        reduce using rule 13 (n_math_expression_2 -> .)
    OR              reduce using rule 13 (n_math_expression_2 -> .)
    AND             reduce using rule 13 (n_math_expression_2 -> .)
    SEMICOLON       reduce using rule 13 (n_math_expression_2 -> .)
    RPARENTHESIS    reduce using rule 13 (n_math_expression_2 -> .)
    RBRACKET        reduce using rule 13 (n_math_expression_2 -> .)
    COMMA           reduce using rule 13 (n_math_expression_2 -> .)

    n_math_expression_2            shift and go to state 150

state 124

    (103) termino -> factor n_math_expression_5 TIMES . n_math_expression_3 termino
    (14) n_math_expression_3 -> .

    LPARENTHESIS    reduce using rule 14 (n_math_expression_3 -> .)
    PLUS            reduce using rule 14 (n_math_expression_3 -> .)
    MINUS           reduce using rule 14 (n_math_expression_3 -> .)
    NAME            reduce using rule 14 (n_math_expression_3 -> .)
    FLOAT           reduce using rule 14 (n_math_expression_3 -> .)
    INT             reduce using rule 14 (n_math_expression_3 -> .)
    STRING          reduce using rule 14 (n_math_expression_3 -> .)
    TRUE            reduce using rule 14 (n_math_expression_3 -> .)
    FALSE           reduce using rule 14 (n_math_expression_3 -> .)
    INPUTSTRING     reduce using rule 14 (n_math_expression_3 -> .)
    INPUTINT        reduce using rule 14 (n_math_expression_3 -> .)
    INPUTFLOAT      reduce using rule 14 (n_math_expression_3 -> .)
    TIMES           reduce using rule 14 (n_math_expression_3 -> .)
    DIVIDE          reduce using rule 14 (n_math_expression_3 -> .)
    MODULUS         reduce using rule 14 (n_math_expression_3 -> .)
    GREATERTHAN     reduce using rule 14 (n_math_expression_3 -> .)
    LESSTHAN        reduce using rule 14 (n_math_expression_3 -> .)
    EQUALEQUAL      reduce using rule 14 (n_math_expression_3 -> .)
    LESSTHANOREQUAL reduce using rule 14 (n_math_expression_3 -> .)
    GREATERTHANOREQUAL reduce using rule 14 (n_math_expression_3 -> .)
    NOTEQUAL        reduce using rule 14 (n_math_expression_3 -> .)
    OR              reduce using rule 14 (n_math_expression_3 -> .)
    AND             reduce using rule 14 (n_math_expression_3 -> .)
    SEMICOLON       reduce using rule 14 (n_math_expression_3 -> .)
    RPARENTHESIS    reduce using rule 14 (n_math_expression_3 -> .)
    RBRACKET        reduce using rule 14 (n_math_expression_3 -> .)
    COMMA           reduce using rule 14 (n_math_expression_3 -> .)

    n_math_expression_3            shift and go to state 151

state 125

    (104) termino -> factor n_math_expression_5 DIVIDE . n_math_expression_3 termino
    (14) n_math_expression_3 -> .

    LPARENTHESIS    reduce using rule 14 (n_math_expression_3 -> .)
    PLUS            reduce using rule 14 (n_math_expression_3 -> .)
    MINUS           reduce using rule 14 (n_math_expression_3 -> .)
    NAME            reduce using rule 14 (n_math_expression_3 -> .)
    FLOAT           reduce using rule 14 (n_math_expression_3 -> .)
    INT             reduce using rule 14 (n_math_expression_3 -> .)
    STRING          reduce using rule 14 (n_math_expression_3 -> .)
    TRUE            reduce using rule 14 (n_math_expression_3 -> .)
    FALSE           reduce using rule 14 (n_math_expression_3 -> .)
    INPUTSTRING     reduce using rule 14 (n_math_expression_3 -> .)
    INPUTINT        reduce using rule 14 (n_math_expression_3 -> .)
    INPUTFLOAT      reduce using rule 14 (n_math_expression_3 -> .)
    TIMES           reduce using rule 14 (n_math_expression_3 -> .)
    DIVIDE          reduce using rule 14 (n_math_expression_3 -> .)
    MODULUS         reduce using rule 14 (n_math_expression_3 -> .)
    GREATERTHAN     reduce using rule 14 (n_math_expression_3 -> .)
    LESSTHAN        reduce using rule 14 (n_math_expression_3 -> .)
    EQUALEQUAL      reduce using rule 14 (n_math_expression_3 -> .)
    LESSTHANOREQUAL reduce using rule 14 (n_math_expression_3 -> .)
    GREATERTHANOREQUAL reduce using rule 14 (n_math_expression_3 -> .)
    NOTEQUAL        reduce using rule 14 (n_math_expression_3 -> .)
    OR              reduce using rule 14 (n_math_expression_3 -> .)
    AND             reduce using rule 14 (n_math_expression_3 -> .)
    SEMICOLON       reduce using rule 14 (n_math_expression_3 -> .)
    RPARENTHESIS    reduce using rule 14 (n_math_expression_3 -> .)
    RBRACKET        reduce using rule 14 (n_math_expression_3 -> .)
    COMMA           reduce using rule 14 (n_math_expression_3 -> .)

    n_math_expression_3            shift and go to state 152

state 126

    (105) termino -> factor n_math_expression_5 MODULUS . n_math_expression_3 termino
    (14) n_math_expression_3 -> .

    LPARENTHESIS    reduce using rule 14 (n_math_expression_3 -> .)
    PLUS            reduce using rule 14 (n_math_expression_3 -> .)
    MINUS           reduce using rule 14 (n_math_expression_3 -> .)
    NAME            reduce using rule 14 (n_math_expression_3 -> .)
    FLOAT           reduce using rule 14 (n_math_expression_3 -> .)
    INT             reduce using rule 14 (n_math_expression_3 -> .)
    STRING          reduce using rule 14 (n_math_expression_3 -> .)
    TRUE            reduce using rule 14 (n_math_expression_3 -> .)
    FALSE           reduce using rule 14 (n_math_expression_3 -> .)
    INPUTSTRING     reduce using rule 14 (n_math_expression_3 -> .)
    INPUTINT        reduce using rule 14 (n_math_expression_3 -> .)
    INPUTFLOAT      reduce using rule 14 (n_math_expression_3 -> .)
    TIMES           reduce using rule 14 (n_math_expression_3 -> .)
    DIVIDE          reduce using rule 14 (n_math_expression_3 -> .)
    MODULUS         reduce using rule 14 (n_math_expression_3 -> .)
    GREATERTHAN     reduce using rule 14 (n_math_expression_3 -> .)
    LESSTHAN        reduce using rule 14 (n_math_expression_3 -> .)
    EQUALEQUAL      reduce using rule 14 (n_math_expression_3 -> .)
    LESSTHANOREQUAL reduce using rule 14 (n_math_expression_3 -> .)
    GREATERTHANOREQUAL reduce using rule 14 (n_math_expression_3 -> .)
    NOTEQUAL        reduce using rule 14 (n_math_expression_3 -> .)
    OR              reduce using rule 14 (n_math_expression_3 -> .)
    AND             reduce using rule 14 (n_math_expression_3 -> .)
    SEMICOLON       reduce using rule 14 (n_math_expression_3 -> .)
    RPARENTHESIS    reduce using rule 14 (n_math_expression_3 -> .)
    RBRACKET        reduce using rule 14 (n_math_expression_3 -> .)
    COMMA           reduce using rule 14 (n_math_expression_3 -> .)

    n_math_expression_3            shift and go to state 153

state 127

    (106) factor -> LPARENTHESIS n_math_expression_6 expression . RPARENTHESIS n_math_expression_7

    RPARENTHESIS    shift and go to state 154


state 128

    (110) input -> INPUTSTRING LPARENTHESIS RPARENTHESIS . n_input_string
    (44) n_input_string -> .

    TIMES           reduce using rule 44 (n_input_string -> .)
    DIVIDE          reduce using rule 44 (n_input_string -> .)
    MODULUS         reduce using rule 44 (n_input_string -> .)
    PLUS            reduce using rule 44 (n_input_string -> .)
    MINUS           reduce using rule 44 (n_input_string -> .)
    GREATERTHAN     reduce using rule 44 (n_input_string -> .)
    LESSTHAN        reduce using rule 44 (n_input_string -> .)
    EQUALEQUAL      reduce using rule 44 (n_input_string -> .)
    LESSTHANOREQUAL reduce using rule 44 (n_input_string -> .)
    GREATERTHANOREQUAL reduce using rule 44 (n_input_string -> .)
    NOTEQUAL        reduce using rule 44 (n_input_string -> .)
    OR              reduce using rule 44 (n_input_string -> .)
    AND             reduce using rule 44 (n_input_string -> .)
    SEMICOLON       reduce using rule 44 (n_input_string -> .)
    RPARENTHESIS    reduce using rule 44 (n_input_string -> .)
    RBRACKET        reduce using rule 44 (n_input_string -> .)
    COMMA           reduce using rule 44 (n_input_string -> .)

    n_input_string                 shift and go to state 155

state 129

    (111) input -> INPUTINT LPARENTHESIS RPARENTHESIS . n_input_int
    (45) n_input_int -> .

    TIMES           reduce using rule 45 (n_input_int -> .)
    DIVIDE          reduce using rule 45 (n_input_int -> .)
    MODULUS         reduce using rule 45 (n_input_int -> .)
    PLUS            reduce using rule 45 (n_input_int -> .)
    MINUS           reduce using rule 45 (n_input_int -> .)
    GREATERTHAN     reduce using rule 45 (n_input_int -> .)
    LESSTHAN        reduce using rule 45 (n_input_int -> .)
    EQUALEQUAL      reduce using rule 45 (n_input_int -> .)
    LESSTHANOREQUAL reduce using rule 45 (n_input_int -> .)
    GREATERTHANOREQUAL reduce using rule 45 (n_input_int -> .)
    NOTEQUAL        reduce using rule 45 (n_input_int -> .)
    OR              reduce using rule 45 (n_input_int -> .)
    AND             reduce using rule 45 (n_input_int -> .)
    SEMICOLON       reduce using rule 45 (n_input_int -> .)
    RPARENTHESIS    reduce using rule 45 (n_input_int -> .)
    RBRACKET        reduce using rule 45 (n_input_int -> .)
    COMMA           reduce using rule 45 (n_input_int -> .)

    n_input_int                    shift and go to state 156

state 130

    (112) input -> INPUTFLOAT LPARENTHESIS RPARENTHESIS . n_input_float
    (46) n_input_float -> .

    TIMES           reduce using rule 46 (n_input_float -> .)
    DIVIDE          reduce using rule 46 (n_input_float -> .)
    MODULUS         reduce using rule 46 (n_input_float -> .)
    PLUS            reduce using rule 46 (n_input_float -> .)
    MINUS           reduce using rule 46 (n_input_float -> .)
    GREATERTHAN     reduce using rule 46 (n_input_float -> .)
    LESSTHAN        reduce using rule 46 (n_input_float -> .)
    EQUALEQUAL      reduce using rule 46 (n_input_float -> .)
    LESSTHANOREQUAL reduce using rule 46 (n_input_float -> .)
    GREATERTHANOREQUAL reduce using rule 46 (n_input_float -> .)
    NOTEQUAL        reduce using rule 46 (n_input_float -> .)
    OR              reduce using rule 46 (n_input_float -> .)
    AND             reduce using rule 46 (n_input_float -> .)
    SEMICOLON       reduce using rule 46 (n_input_float -> .)
    RPARENTHESIS    reduce using rule 46 (n_input_float -> .)
    RBRACKET        reduce using rule 46 (n_input_float -> .)
    COMMA           reduce using rule 46 (n_input_float -> .)

    n_input_float                  shift and go to state 157

state 131

    (141) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression . RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope

    RPARENTHESIS    shift and go to state 158


state 132

    (125) assign -> type NAME n_variable_instantiate n_math_expression_1_name . EQUAL n_seen_equal_op expression

    EQUAL           shift and go to state 159


state 133

    (123) declare -> type NAME n_arr_instantiate_name LBRACKET . INT n_arr_instantiate_size RBRACKET n_arr_instantiate
    (124) declare -> type NAME n_arr_instantiate_name LBRACKET . INT n_arr_instantiate_size RBRACKET LBRACKET INT n_arr_instantiate_size RBRACKET n_matrix_instantiate

    INT             shift and go to state 160


state 134

    (126) assign -> reference EQUAL n_seen_equal_op expression .

    SEMICOLON       reduce using rule 126 (assign -> reference EQUAL n_seen_equal_op expression .)


state 135

    (127) print -> PRINT LPARENTHESIS expression n_print . RPARENTHESIS

    RPARENTHESIS    shift and go to state 161


state 136

    (81) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list . DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end

    DOUBLEDOT       shift and go to state 162


state 137

    (88) parameter_list -> empty .

    DOUBLEDOT       reduce using rule 88 (parameter_list -> empty .)


state 138

    (89) parameter_list -> parameter .
    (90) parameter_list -> parameter . COMMA parameter_list

    DOUBLEDOT       reduce using rule 89 (parameter_list -> parameter .)
    COMMA           shift and go to state 163


state 139

    (92) parameter -> type . NAME n_variable_instantiate_param

    NAME            shift and go to state 164


state 140

    (84) function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list . RPARENTHESIS n_function_call_5 n_function_call_6

    RPARENTHESIS    shift and go to state 165


state 141

    (86) arg_list -> arg .
    (87) arg_list -> arg . COMMA n_function_call_4 arg_list

    RPARENTHESIS    reduce using rule 86 (arg_list -> arg .)
    COMMA           shift and go to state 166


state 142

    (91) arg -> expression . n_function_call_3
    (37) n_function_call_3 -> .

    COMMA           reduce using rule 37 (n_function_call_3 -> .)
    RPARENTHESIS    reduce using rule 37 (n_function_call_3 -> .)

    n_function_call_3              shift and go to state 167

state 143

    (85) function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .

    SEMICOLON       reduce using rule 85 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    TIMES           reduce using rule 85 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    DIVIDE          reduce using rule 85 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    MODULUS         reduce using rule 85 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    PLUS            reduce using rule 85 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    MINUS           reduce using rule 85 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    GREATERTHAN     reduce using rule 85 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    LESSTHAN        reduce using rule 85 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    EQUALEQUAL      reduce using rule 85 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    LESSTHANOREQUAL reduce using rule 85 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    GREATERTHANOREQUAL reduce using rule 85 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    NOTEQUAL        reduce using rule 85 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    OR              reduce using rule 85 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    AND             reduce using rule 85 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    RPARENTHESIS    reduce using rule 85 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    RBRACKET        reduce using rule 85 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)
    COMMA           reduce using rule 85 (function_call -> NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6 .)


state 144

    (120) arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET . n_arr_reference
    (121) arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET . LBRACKET expression RBRACKET n_matrix_reference
    (47) n_arr_reference -> .

    LBRACKET        shift and go to state 168
    EQUAL           reduce using rule 47 (n_arr_reference -> .)
    TIMES           reduce using rule 47 (n_arr_reference -> .)
    DIVIDE          reduce using rule 47 (n_arr_reference -> .)
    MODULUS         reduce using rule 47 (n_arr_reference -> .)
    PLUS            reduce using rule 47 (n_arr_reference -> .)
    MINUS           reduce using rule 47 (n_arr_reference -> .)
    GREATERTHAN     reduce using rule 47 (n_arr_reference -> .)
    LESSTHAN        reduce using rule 47 (n_arr_reference -> .)
    EQUALEQUAL      reduce using rule 47 (n_arr_reference -> .)
    LESSTHANOREQUAL reduce using rule 47 (n_arr_reference -> .)
    GREATERTHANOREQUAL reduce using rule 47 (n_arr_reference -> .)
    NOTEQUAL        reduce using rule 47 (n_arr_reference -> .)
    OR              reduce using rule 47 (n_arr_reference -> .)
    AND             reduce using rule 47 (n_arr_reference -> .)
    SEMICOLON       reduce using rule 47 (n_arr_reference -> .)
    RPARENTHESIS    reduce using rule 47 (n_arr_reference -> .)
    RBRACKET        reduce using rule 47 (n_arr_reference -> .)
    COMMA           reduce using rule 47 (n_arr_reference -> .)

    n_arr_reference                shift and go to state 169

state 145

    (142) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY . n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (24) n_two_way_conditional_1 -> .

    IF              reduce using rule 24 (n_two_way_conditional_1 -> .)
    RETURN          reduce using rule 24 (n_two_way_conditional_1 -> .)
    WHILE           reduce using rule 24 (n_two_way_conditional_1 -> .)
    NAME            reduce using rule 24 (n_two_way_conditional_1 -> .)
    PRINT           reduce using rule 24 (n_two_way_conditional_1 -> .)
    INT_TYPE        reduce using rule 24 (n_two_way_conditional_1 -> .)
    STRING_TYPE     reduce using rule 24 (n_two_way_conditional_1 -> .)
    DOUBLE_TYPE     reduce using rule 24 (n_two_way_conditional_1 -> .)
    FLOAT_TYPE      reduce using rule 24 (n_two_way_conditional_1 -> .)
    BOOL_TYPE       reduce using rule 24 (n_two_way_conditional_1 -> .)
    RCURLY          reduce using rule 24 (n_two_way_conditional_1 -> .)
    FUNCTION        reduce using rule 24 (n_two_way_conditional_1 -> .)
    EQUAL           reduce using rule 24 (n_two_way_conditional_1 -> .)

    n_two_way_conditional_1        shift and go to state 170

state 146

    (94) expression -> expression_or AND n_math_expression_10 expression . n_math_expression_11
    (22) n_math_expression_11 -> .

    SEMICOLON       reduce using rule 22 (n_math_expression_11 -> .)
    RPARENTHESIS    reduce using rule 22 (n_math_expression_11 -> .)
    RBRACKET        reduce using rule 22 (n_math_expression_11 -> .)
    COMMA           reduce using rule 22 (n_math_expression_11 -> .)

    n_math_expression_11           shift and go to state 171

state 147

    (96) expression_or -> expression_rel OR n_math_expression_10 expression_or . n_math_expression_12
    (23) n_math_expression_12 -> .

    AND             reduce using rule 23 (n_math_expression_12 -> .)
    SEMICOLON       reduce using rule 23 (n_math_expression_12 -> .)
    RPARENTHESIS    reduce using rule 23 (n_math_expression_12 -> .)
    RBRACKET        reduce using rule 23 (n_math_expression_12 -> .)
    COMMA           reduce using rule 23 (n_math_expression_12 -> .)

    n_math_expression_12           shift and go to state 172

state 148

    (98) expression_rel -> exp relational_operator exp n_math_expression_9 .

    OR              reduce using rule 98 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    AND             reduce using rule 98 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    SEMICOLON       reduce using rule 98 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    RPARENTHESIS    reduce using rule 98 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    RBRACKET        reduce using rule 98 (expression_rel -> exp relational_operator exp n_math_expression_9 .)
    COMMA           reduce using rule 98 (expression_rel -> exp relational_operator exp n_math_expression_9 .)


state 149

    (100) exp -> termino n_math_expression_4 PLUS n_math_expression_2 . exp
    (99) exp -> . termino n_math_expression_4
    (100) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (101) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (102) termino -> . factor n_math_expression_5
    (103) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (104) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (105) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (106) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (107) factor -> . PLUS value
    (108) factor -> . MINUS value
    (109) factor -> . value
    (113) value -> . function_call
    (114) value -> . literal
    (115) value -> . reference
    (116) value -> . input
    (84) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (85) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (70) literal -> . FLOAT n_math_expression_1_float
    (71) literal -> . INT n_math_expression_1_int
    (72) literal -> . STRING n_math_expression_1_string
    (73) literal -> . TRUE n_math_expression_1_bool
    (74) literal -> . FALSE n_math_expression_1_bool
    (117) reference -> . NAME n_variable_reference n_math_expression_1_name
    (118) reference -> . arr_reference
    (110) input -> . INPUTSTRING LPARENTHESIS RPARENTHESIS n_input_string
    (111) input -> . INPUTINT LPARENTHESIS RPARENTHESIS n_input_int
    (112) input -> . INPUTFLOAT LPARENTHESIS RPARENTHESIS n_input_float
    (119) arr_reference -> .
    (120) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference
    (121) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    NAME            shift and go to state 15
    FLOAT           shift and go to state 56
    INT             shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    INPUTSTRING     shift and go to state 61
    INPUTINT        shift and go to state 62
    INPUTFLOAT      shift and go to state 63
    TIMES           reduce using rule 119 (arr_reference -> .)
    DIVIDE          reduce using rule 119 (arr_reference -> .)
    MODULUS         reduce using rule 119 (arr_reference -> .)
    GREATERTHAN     reduce using rule 119 (arr_reference -> .)
    LESSTHAN        reduce using rule 119 (arr_reference -> .)
    EQUALEQUAL      reduce using rule 119 (arr_reference -> .)
    LESSTHANOREQUAL reduce using rule 119 (arr_reference -> .)
    GREATERTHANOREQUAL reduce using rule 119 (arr_reference -> .)
    NOTEQUAL        reduce using rule 119 (arr_reference -> .)
    OR              reduce using rule 119 (arr_reference -> .)
    AND             reduce using rule 119 (arr_reference -> .)
    SEMICOLON       reduce using rule 119 (arr_reference -> .)
    RPARENTHESIS    reduce using rule 119 (arr_reference -> .)
    RBRACKET        reduce using rule 119 (arr_reference -> .)
    COMMA           reduce using rule 119 (arr_reference -> .)

  ! PLUS            [ reduce using rule 119 (arr_reference -> .) ]
  ! MINUS           [ reduce using rule 119 (arr_reference -> .) ]

    termino                        shift and go to state 46
    exp                            shift and go to state 173
    factor                         shift and go to state 49
    value                          shift and go to state 51
    function_call                  shift and go to state 52
    literal                        shift and go to state 53
    reference                      shift and go to state 54
    input                          shift and go to state 55
    arr_reference                  shift and go to state 32

state 150

    (101) exp -> termino n_math_expression_4 MINUS n_math_expression_2 . exp
    (99) exp -> . termino n_math_expression_4
    (100) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (101) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (102) termino -> . factor n_math_expression_5
    (103) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (104) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (105) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (106) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (107) factor -> . PLUS value
    (108) factor -> . MINUS value
    (109) factor -> . value
    (113) value -> . function_call
    (114) value -> . literal
    (115) value -> . reference
    (116) value -> . input
    (84) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (85) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (70) literal -> . FLOAT n_math_expression_1_float
    (71) literal -> . INT n_math_expression_1_int
    (72) literal -> . STRING n_math_expression_1_string
    (73) literal -> . TRUE n_math_expression_1_bool
    (74) literal -> . FALSE n_math_expression_1_bool
    (117) reference -> . NAME n_variable_reference n_math_expression_1_name
    (118) reference -> . arr_reference
    (110) input -> . INPUTSTRING LPARENTHESIS RPARENTHESIS n_input_string
    (111) input -> . INPUTINT LPARENTHESIS RPARENTHESIS n_input_int
    (112) input -> . INPUTFLOAT LPARENTHESIS RPARENTHESIS n_input_float
    (119) arr_reference -> .
    (120) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference
    (121) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    NAME            shift and go to state 15
    FLOAT           shift and go to state 56
    INT             shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    INPUTSTRING     shift and go to state 61
    INPUTINT        shift and go to state 62
    INPUTFLOAT      shift and go to state 63
    TIMES           reduce using rule 119 (arr_reference -> .)
    DIVIDE          reduce using rule 119 (arr_reference -> .)
    MODULUS         reduce using rule 119 (arr_reference -> .)
    GREATERTHAN     reduce using rule 119 (arr_reference -> .)
    LESSTHAN        reduce using rule 119 (arr_reference -> .)
    EQUALEQUAL      reduce using rule 119 (arr_reference -> .)
    LESSTHANOREQUAL reduce using rule 119 (arr_reference -> .)
    GREATERTHANOREQUAL reduce using rule 119 (arr_reference -> .)
    NOTEQUAL        reduce using rule 119 (arr_reference -> .)
    OR              reduce using rule 119 (arr_reference -> .)
    AND             reduce using rule 119 (arr_reference -> .)
    SEMICOLON       reduce using rule 119 (arr_reference -> .)
    RPARENTHESIS    reduce using rule 119 (arr_reference -> .)
    RBRACKET        reduce using rule 119 (arr_reference -> .)
    COMMA           reduce using rule 119 (arr_reference -> .)

  ! PLUS            [ reduce using rule 119 (arr_reference -> .) ]
  ! MINUS           [ reduce using rule 119 (arr_reference -> .) ]

    termino                        shift and go to state 46
    exp                            shift and go to state 174
    factor                         shift and go to state 49
    value                          shift and go to state 51
    function_call                  shift and go to state 52
    literal                        shift and go to state 53
    reference                      shift and go to state 54
    input                          shift and go to state 55
    arr_reference                  shift and go to state 32

state 151

    (103) termino -> factor n_math_expression_5 TIMES n_math_expression_3 . termino
    (102) termino -> . factor n_math_expression_5
    (103) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (104) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (105) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (106) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (107) factor -> . PLUS value
    (108) factor -> . MINUS value
    (109) factor -> . value
    (113) value -> . function_call
    (114) value -> . literal
    (115) value -> . reference
    (116) value -> . input
    (84) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (85) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (70) literal -> . FLOAT n_math_expression_1_float
    (71) literal -> . INT n_math_expression_1_int
    (72) literal -> . STRING n_math_expression_1_string
    (73) literal -> . TRUE n_math_expression_1_bool
    (74) literal -> . FALSE n_math_expression_1_bool
    (117) reference -> . NAME n_variable_reference n_math_expression_1_name
    (118) reference -> . arr_reference
    (110) input -> . INPUTSTRING LPARENTHESIS RPARENTHESIS n_input_string
    (111) input -> . INPUTINT LPARENTHESIS RPARENTHESIS n_input_int
    (112) input -> . INPUTFLOAT LPARENTHESIS RPARENTHESIS n_input_float
    (119) arr_reference -> .
    (120) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference
    (121) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    NAME            shift and go to state 15
    FLOAT           shift and go to state 56
    INT             shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    INPUTSTRING     shift and go to state 61
    INPUTINT        shift and go to state 62
    INPUTFLOAT      shift and go to state 63
    TIMES           reduce using rule 119 (arr_reference -> .)
    DIVIDE          reduce using rule 119 (arr_reference -> .)
    MODULUS         reduce using rule 119 (arr_reference -> .)
    GREATERTHAN     reduce using rule 119 (arr_reference -> .)
    LESSTHAN        reduce using rule 119 (arr_reference -> .)
    EQUALEQUAL      reduce using rule 119 (arr_reference -> .)
    LESSTHANOREQUAL reduce using rule 119 (arr_reference -> .)
    GREATERTHANOREQUAL reduce using rule 119 (arr_reference -> .)
    NOTEQUAL        reduce using rule 119 (arr_reference -> .)
    OR              reduce using rule 119 (arr_reference -> .)
    AND             reduce using rule 119 (arr_reference -> .)
    SEMICOLON       reduce using rule 119 (arr_reference -> .)
    RPARENTHESIS    reduce using rule 119 (arr_reference -> .)
    RBRACKET        reduce using rule 119 (arr_reference -> .)
    COMMA           reduce using rule 119 (arr_reference -> .)

  ! PLUS            [ reduce using rule 119 (arr_reference -> .) ]
  ! MINUS           [ reduce using rule 119 (arr_reference -> .) ]

    factor                         shift and go to state 49
    termino                        shift and go to state 175
    value                          shift and go to state 51
    function_call                  shift and go to state 52
    literal                        shift and go to state 53
    reference                      shift and go to state 54
    input                          shift and go to state 55
    arr_reference                  shift and go to state 32

state 152

    (104) termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 . termino
    (102) termino -> . factor n_math_expression_5
    (103) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (104) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (105) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (106) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (107) factor -> . PLUS value
    (108) factor -> . MINUS value
    (109) factor -> . value
    (113) value -> . function_call
    (114) value -> . literal
    (115) value -> . reference
    (116) value -> . input
    (84) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (85) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (70) literal -> . FLOAT n_math_expression_1_float
    (71) literal -> . INT n_math_expression_1_int
    (72) literal -> . STRING n_math_expression_1_string
    (73) literal -> . TRUE n_math_expression_1_bool
    (74) literal -> . FALSE n_math_expression_1_bool
    (117) reference -> . NAME n_variable_reference n_math_expression_1_name
    (118) reference -> . arr_reference
    (110) input -> . INPUTSTRING LPARENTHESIS RPARENTHESIS n_input_string
    (111) input -> . INPUTINT LPARENTHESIS RPARENTHESIS n_input_int
    (112) input -> . INPUTFLOAT LPARENTHESIS RPARENTHESIS n_input_float
    (119) arr_reference -> .
    (120) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference
    (121) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    NAME            shift and go to state 15
    FLOAT           shift and go to state 56
    INT             shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    INPUTSTRING     shift and go to state 61
    INPUTINT        shift and go to state 62
    INPUTFLOAT      shift and go to state 63
    TIMES           reduce using rule 119 (arr_reference -> .)
    DIVIDE          reduce using rule 119 (arr_reference -> .)
    MODULUS         reduce using rule 119 (arr_reference -> .)
    GREATERTHAN     reduce using rule 119 (arr_reference -> .)
    LESSTHAN        reduce using rule 119 (arr_reference -> .)
    EQUALEQUAL      reduce using rule 119 (arr_reference -> .)
    LESSTHANOREQUAL reduce using rule 119 (arr_reference -> .)
    GREATERTHANOREQUAL reduce using rule 119 (arr_reference -> .)
    NOTEQUAL        reduce using rule 119 (arr_reference -> .)
    OR              reduce using rule 119 (arr_reference -> .)
    AND             reduce using rule 119 (arr_reference -> .)
    SEMICOLON       reduce using rule 119 (arr_reference -> .)
    RPARENTHESIS    reduce using rule 119 (arr_reference -> .)
    RBRACKET        reduce using rule 119 (arr_reference -> .)
    COMMA           reduce using rule 119 (arr_reference -> .)

  ! PLUS            [ reduce using rule 119 (arr_reference -> .) ]
  ! MINUS           [ reduce using rule 119 (arr_reference -> .) ]

    factor                         shift and go to state 49
    termino                        shift and go to state 176
    value                          shift and go to state 51
    function_call                  shift and go to state 52
    literal                        shift and go to state 53
    reference                      shift and go to state 54
    input                          shift and go to state 55
    arr_reference                  shift and go to state 32

state 153

    (105) termino -> factor n_math_expression_5 MODULUS n_math_expression_3 . termino
    (102) termino -> . factor n_math_expression_5
    (103) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (104) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (105) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (106) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (107) factor -> . PLUS value
    (108) factor -> . MINUS value
    (109) factor -> . value
    (113) value -> . function_call
    (114) value -> . literal
    (115) value -> . reference
    (116) value -> . input
    (84) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (85) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (70) literal -> . FLOAT n_math_expression_1_float
    (71) literal -> . INT n_math_expression_1_int
    (72) literal -> . STRING n_math_expression_1_string
    (73) literal -> . TRUE n_math_expression_1_bool
    (74) literal -> . FALSE n_math_expression_1_bool
    (117) reference -> . NAME n_variable_reference n_math_expression_1_name
    (118) reference -> . arr_reference
    (110) input -> . INPUTSTRING LPARENTHESIS RPARENTHESIS n_input_string
    (111) input -> . INPUTINT LPARENTHESIS RPARENTHESIS n_input_int
    (112) input -> . INPUTFLOAT LPARENTHESIS RPARENTHESIS n_input_float
    (119) arr_reference -> .
    (120) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference
    (121) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    NAME            shift and go to state 15
    FLOAT           shift and go to state 56
    INT             shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    INPUTSTRING     shift and go to state 61
    INPUTINT        shift and go to state 62
    INPUTFLOAT      shift and go to state 63
    TIMES           reduce using rule 119 (arr_reference -> .)
    DIVIDE          reduce using rule 119 (arr_reference -> .)
    MODULUS         reduce using rule 119 (arr_reference -> .)
    GREATERTHAN     reduce using rule 119 (arr_reference -> .)
    LESSTHAN        reduce using rule 119 (arr_reference -> .)
    EQUALEQUAL      reduce using rule 119 (arr_reference -> .)
    LESSTHANOREQUAL reduce using rule 119 (arr_reference -> .)
    GREATERTHANOREQUAL reduce using rule 119 (arr_reference -> .)
    NOTEQUAL        reduce using rule 119 (arr_reference -> .)
    OR              reduce using rule 119 (arr_reference -> .)
    AND             reduce using rule 119 (arr_reference -> .)
    SEMICOLON       reduce using rule 119 (arr_reference -> .)
    RPARENTHESIS    reduce using rule 119 (arr_reference -> .)
    RBRACKET        reduce using rule 119 (arr_reference -> .)
    COMMA           reduce using rule 119 (arr_reference -> .)

  ! PLUS            [ reduce using rule 119 (arr_reference -> .) ]
  ! MINUS           [ reduce using rule 119 (arr_reference -> .) ]

    factor                         shift and go to state 49
    termino                        shift and go to state 177
    value                          shift and go to state 51
    function_call                  shift and go to state 52
    literal                        shift and go to state 53
    reference                      shift and go to state 54
    input                          shift and go to state 55
    arr_reference                  shift and go to state 32

state 154

    (106) factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS . n_math_expression_7
    (18) n_math_expression_7 -> .

    TIMES           reduce using rule 18 (n_math_expression_7 -> .)
    DIVIDE          reduce using rule 18 (n_math_expression_7 -> .)
    MODULUS         reduce using rule 18 (n_math_expression_7 -> .)
    PLUS            reduce using rule 18 (n_math_expression_7 -> .)
    MINUS           reduce using rule 18 (n_math_expression_7 -> .)
    GREATERTHAN     reduce using rule 18 (n_math_expression_7 -> .)
    LESSTHAN        reduce using rule 18 (n_math_expression_7 -> .)
    EQUALEQUAL      reduce using rule 18 (n_math_expression_7 -> .)
    LESSTHANOREQUAL reduce using rule 18 (n_math_expression_7 -> .)
    GREATERTHANOREQUAL reduce using rule 18 (n_math_expression_7 -> .)
    NOTEQUAL        reduce using rule 18 (n_math_expression_7 -> .)
    OR              reduce using rule 18 (n_math_expression_7 -> .)
    AND             reduce using rule 18 (n_math_expression_7 -> .)
    SEMICOLON       reduce using rule 18 (n_math_expression_7 -> .)
    RPARENTHESIS    reduce using rule 18 (n_math_expression_7 -> .)
    RBRACKET        reduce using rule 18 (n_math_expression_7 -> .)
    COMMA           reduce using rule 18 (n_math_expression_7 -> .)

    n_math_expression_7            shift and go to state 178

state 155

    (110) input -> INPUTSTRING LPARENTHESIS RPARENTHESIS n_input_string .

    TIMES           reduce using rule 110 (input -> INPUTSTRING LPARENTHESIS RPARENTHESIS n_input_string .)
    DIVIDE          reduce using rule 110 (input -> INPUTSTRING LPARENTHESIS RPARENTHESIS n_input_string .)
    MODULUS         reduce using rule 110 (input -> INPUTSTRING LPARENTHESIS RPARENTHESIS n_input_string .)
    PLUS            reduce using rule 110 (input -> INPUTSTRING LPARENTHESIS RPARENTHESIS n_input_string .)
    MINUS           reduce using rule 110 (input -> INPUTSTRING LPARENTHESIS RPARENTHESIS n_input_string .)
    GREATERTHAN     reduce using rule 110 (input -> INPUTSTRING LPARENTHESIS RPARENTHESIS n_input_string .)
    LESSTHAN        reduce using rule 110 (input -> INPUTSTRING LPARENTHESIS RPARENTHESIS n_input_string .)
    EQUALEQUAL      reduce using rule 110 (input -> INPUTSTRING LPARENTHESIS RPARENTHESIS n_input_string .)
    LESSTHANOREQUAL reduce using rule 110 (input -> INPUTSTRING LPARENTHESIS RPARENTHESIS n_input_string .)
    GREATERTHANOREQUAL reduce using rule 110 (input -> INPUTSTRING LPARENTHESIS RPARENTHESIS n_input_string .)
    NOTEQUAL        reduce using rule 110 (input -> INPUTSTRING LPARENTHESIS RPARENTHESIS n_input_string .)
    OR              reduce using rule 110 (input -> INPUTSTRING LPARENTHESIS RPARENTHESIS n_input_string .)
    AND             reduce using rule 110 (input -> INPUTSTRING LPARENTHESIS RPARENTHESIS n_input_string .)
    SEMICOLON       reduce using rule 110 (input -> INPUTSTRING LPARENTHESIS RPARENTHESIS n_input_string .)
    RPARENTHESIS    reduce using rule 110 (input -> INPUTSTRING LPARENTHESIS RPARENTHESIS n_input_string .)
    RBRACKET        reduce using rule 110 (input -> INPUTSTRING LPARENTHESIS RPARENTHESIS n_input_string .)
    COMMA           reduce using rule 110 (input -> INPUTSTRING LPARENTHESIS RPARENTHESIS n_input_string .)


state 156

    (111) input -> INPUTINT LPARENTHESIS RPARENTHESIS n_input_int .

    TIMES           reduce using rule 111 (input -> INPUTINT LPARENTHESIS RPARENTHESIS n_input_int .)
    DIVIDE          reduce using rule 111 (input -> INPUTINT LPARENTHESIS RPARENTHESIS n_input_int .)
    MODULUS         reduce using rule 111 (input -> INPUTINT LPARENTHESIS RPARENTHESIS n_input_int .)
    PLUS            reduce using rule 111 (input -> INPUTINT LPARENTHESIS RPARENTHESIS n_input_int .)
    MINUS           reduce using rule 111 (input -> INPUTINT LPARENTHESIS RPARENTHESIS n_input_int .)
    GREATERTHAN     reduce using rule 111 (input -> INPUTINT LPARENTHESIS RPARENTHESIS n_input_int .)
    LESSTHAN        reduce using rule 111 (input -> INPUTINT LPARENTHESIS RPARENTHESIS n_input_int .)
    EQUALEQUAL      reduce using rule 111 (input -> INPUTINT LPARENTHESIS RPARENTHESIS n_input_int .)
    LESSTHANOREQUAL reduce using rule 111 (input -> INPUTINT LPARENTHESIS RPARENTHESIS n_input_int .)
    GREATERTHANOREQUAL reduce using rule 111 (input -> INPUTINT LPARENTHESIS RPARENTHESIS n_input_int .)
    NOTEQUAL        reduce using rule 111 (input -> INPUTINT LPARENTHESIS RPARENTHESIS n_input_int .)
    OR              reduce using rule 111 (input -> INPUTINT LPARENTHESIS RPARENTHESIS n_input_int .)
    AND             reduce using rule 111 (input -> INPUTINT LPARENTHESIS RPARENTHESIS n_input_int .)
    SEMICOLON       reduce using rule 111 (input -> INPUTINT LPARENTHESIS RPARENTHESIS n_input_int .)
    RPARENTHESIS    reduce using rule 111 (input -> INPUTINT LPARENTHESIS RPARENTHESIS n_input_int .)
    RBRACKET        reduce using rule 111 (input -> INPUTINT LPARENTHESIS RPARENTHESIS n_input_int .)
    COMMA           reduce using rule 111 (input -> INPUTINT LPARENTHESIS RPARENTHESIS n_input_int .)


state 157

    (112) input -> INPUTFLOAT LPARENTHESIS RPARENTHESIS n_input_float .

    TIMES           reduce using rule 112 (input -> INPUTFLOAT LPARENTHESIS RPARENTHESIS n_input_float .)
    DIVIDE          reduce using rule 112 (input -> INPUTFLOAT LPARENTHESIS RPARENTHESIS n_input_float .)
    MODULUS         reduce using rule 112 (input -> INPUTFLOAT LPARENTHESIS RPARENTHESIS n_input_float .)
    PLUS            reduce using rule 112 (input -> INPUTFLOAT LPARENTHESIS RPARENTHESIS n_input_float .)
    MINUS           reduce using rule 112 (input -> INPUTFLOAT LPARENTHESIS RPARENTHESIS n_input_float .)
    GREATERTHAN     reduce using rule 112 (input -> INPUTFLOAT LPARENTHESIS RPARENTHESIS n_input_float .)
    LESSTHAN        reduce using rule 112 (input -> INPUTFLOAT LPARENTHESIS RPARENTHESIS n_input_float .)
    EQUALEQUAL      reduce using rule 112 (input -> INPUTFLOAT LPARENTHESIS RPARENTHESIS n_input_float .)
    LESSTHANOREQUAL reduce using rule 112 (input -> INPUTFLOAT LPARENTHESIS RPARENTHESIS n_input_float .)
    GREATERTHANOREQUAL reduce using rule 112 (input -> INPUTFLOAT LPARENTHESIS RPARENTHESIS n_input_float .)
    NOTEQUAL        reduce using rule 112 (input -> INPUTFLOAT LPARENTHESIS RPARENTHESIS n_input_float .)
    OR              reduce using rule 112 (input -> INPUTFLOAT LPARENTHESIS RPARENTHESIS n_input_float .)
    AND             reduce using rule 112 (input -> INPUTFLOAT LPARENTHESIS RPARENTHESIS n_input_float .)
    SEMICOLON       reduce using rule 112 (input -> INPUTFLOAT LPARENTHESIS RPARENTHESIS n_input_float .)
    RPARENTHESIS    reduce using rule 112 (input -> INPUTFLOAT LPARENTHESIS RPARENTHESIS n_input_float .)
    RBRACKET        reduce using rule 112 (input -> INPUTFLOAT LPARENTHESIS RPARENTHESIS n_input_float .)
    COMMA           reduce using rule 112 (input -> INPUTFLOAT LPARENTHESIS RPARENTHESIS n_input_float .)


state 158

    (141) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS . p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (28) p_n_pre_condition_loop_2 -> .

    LCURLY          reduce using rule 28 (p_n_pre_condition_loop_2 -> .)

    p_n_pre_condition_loop_2       shift and go to state 179

state 159

    (125) assign -> type NAME n_variable_instantiate n_math_expression_1_name EQUAL . n_seen_equal_op expression
    (30) n_seen_equal_op -> .

    LPARENTHESIS    reduce using rule 30 (n_seen_equal_op -> .)
    PLUS            reduce using rule 30 (n_seen_equal_op -> .)
    MINUS           reduce using rule 30 (n_seen_equal_op -> .)
    NAME            reduce using rule 30 (n_seen_equal_op -> .)
    FLOAT           reduce using rule 30 (n_seen_equal_op -> .)
    INT             reduce using rule 30 (n_seen_equal_op -> .)
    STRING          reduce using rule 30 (n_seen_equal_op -> .)
    TRUE            reduce using rule 30 (n_seen_equal_op -> .)
    FALSE           reduce using rule 30 (n_seen_equal_op -> .)
    INPUTSTRING     reduce using rule 30 (n_seen_equal_op -> .)
    INPUTINT        reduce using rule 30 (n_seen_equal_op -> .)
    INPUTFLOAT      reduce using rule 30 (n_seen_equal_op -> .)
    AND             reduce using rule 30 (n_seen_equal_op -> .)
    OR              reduce using rule 30 (n_seen_equal_op -> .)
    GREATERTHAN     reduce using rule 30 (n_seen_equal_op -> .)
    LESSTHAN        reduce using rule 30 (n_seen_equal_op -> .)
    EQUALEQUAL      reduce using rule 30 (n_seen_equal_op -> .)
    LESSTHANOREQUAL reduce using rule 30 (n_seen_equal_op -> .)
    GREATERTHANOREQUAL reduce using rule 30 (n_seen_equal_op -> .)
    NOTEQUAL        reduce using rule 30 (n_seen_equal_op -> .)
    TIMES           reduce using rule 30 (n_seen_equal_op -> .)
    DIVIDE          reduce using rule 30 (n_seen_equal_op -> .)
    MODULUS         reduce using rule 30 (n_seen_equal_op -> .)
    SEMICOLON       reduce using rule 30 (n_seen_equal_op -> .)

    n_seen_equal_op                shift and go to state 180

state 160

    (123) declare -> type NAME n_arr_instantiate_name LBRACKET INT . n_arr_instantiate_size RBRACKET n_arr_instantiate
    (124) declare -> type NAME n_arr_instantiate_name LBRACKET INT . n_arr_instantiate_size RBRACKET LBRACKET INT n_arr_instantiate_size RBRACKET n_matrix_instantiate
    (51) n_arr_instantiate_size -> .

    RBRACKET        reduce using rule 51 (n_arr_instantiate_size -> .)

    n_arr_instantiate_size         shift and go to state 181

state 161

    (127) print -> PRINT LPARENTHESIS expression n_print RPARENTHESIS .

    SEMICOLON       reduce using rule 127 (print -> PRINT LPARENTHESIS expression n_print RPARENTHESIS .)


state 162

    (81) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT . function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end
    (75) function_type -> . VOID n_function_type
    (76) function_type -> . INT_TYPE n_function_type
    (77) function_type -> . STRING_TYPE n_function_type
    (78) function_type -> . DOUBLE_TYPE n_function_type
    (79) function_type -> . FLOAT_TYPE n_function_type
    (80) function_type -> . BOOL_TYPE n_function_type

    VOID            shift and go to state 183
    INT_TYPE        shift and go to state 184
    STRING_TYPE     shift and go to state 185
    DOUBLE_TYPE     shift and go to state 186
    FLOAT_TYPE      shift and go to state 187
    BOOL_TYPE       shift and go to state 188

    function_type                  shift and go to state 182

state 163

    (90) parameter_list -> parameter COMMA . parameter_list
    (88) parameter_list -> . empty
    (89) parameter_list -> . parameter
    (90) parameter_list -> . parameter COMMA parameter_list
    (55) empty -> .
    (92) parameter -> . type NAME n_variable_instantiate_param
    (59) type -> . INT_TYPE n_seen_type
    (60) type -> . STRING_TYPE n_seen_type
    (61) type -> . DOUBLE_TYPE n_seen_type
    (62) type -> . FLOAT_TYPE n_seen_type
    (63) type -> . BOOL_TYPE n_seen_type

    DOUBLEDOT       reduce using rule 55 (empty -> .)
    INT_TYPE        shift and go to state 27
    STRING_TYPE     shift and go to state 28
    DOUBLE_TYPE     shift and go to state 29
    FLOAT_TYPE      shift and go to state 30
    BOOL_TYPE       shift and go to state 31

    parameter                      shift and go to state 138
    parameter_list                 shift and go to state 189
    empty                          shift and go to state 137
    type                           shift and go to state 139

state 164

    (92) parameter -> type NAME . n_variable_instantiate_param
    (7) n_variable_instantiate_param -> .

    COMMA           reduce using rule 7 (n_variable_instantiate_param -> .)
    DOUBLEDOT       reduce using rule 7 (n_variable_instantiate_param -> .)

    n_variable_instantiate_param   shift and go to state 190

state 165

    (84) function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS . n_function_call_5 n_function_call_6
    (39) n_function_call_5 -> .

    SEMICOLON       reduce using rule 39 (n_function_call_5 -> .)
    TIMES           reduce using rule 39 (n_function_call_5 -> .)
    DIVIDE          reduce using rule 39 (n_function_call_5 -> .)
    MODULUS         reduce using rule 39 (n_function_call_5 -> .)
    PLUS            reduce using rule 39 (n_function_call_5 -> .)
    MINUS           reduce using rule 39 (n_function_call_5 -> .)
    GREATERTHAN     reduce using rule 39 (n_function_call_5 -> .)
    LESSTHAN        reduce using rule 39 (n_function_call_5 -> .)
    EQUALEQUAL      reduce using rule 39 (n_function_call_5 -> .)
    LESSTHANOREQUAL reduce using rule 39 (n_function_call_5 -> .)
    GREATERTHANOREQUAL reduce using rule 39 (n_function_call_5 -> .)
    NOTEQUAL        reduce using rule 39 (n_function_call_5 -> .)
    OR              reduce using rule 39 (n_function_call_5 -> .)
    AND             reduce using rule 39 (n_function_call_5 -> .)
    RPARENTHESIS    reduce using rule 39 (n_function_call_5 -> .)
    RBRACKET        reduce using rule 39 (n_function_call_5 -> .)
    COMMA           reduce using rule 39 (n_function_call_5 -> .)

    n_function_call_5              shift and go to state 191

state 166

    (87) arg_list -> arg COMMA . n_function_call_4 arg_list
    (38) n_function_call_4 -> .

    LPARENTHESIS    reduce using rule 38 (n_function_call_4 -> .)
    PLUS            reduce using rule 38 (n_function_call_4 -> .)
    MINUS           reduce using rule 38 (n_function_call_4 -> .)
    NAME            reduce using rule 38 (n_function_call_4 -> .)
    FLOAT           reduce using rule 38 (n_function_call_4 -> .)
    INT             reduce using rule 38 (n_function_call_4 -> .)
    STRING          reduce using rule 38 (n_function_call_4 -> .)
    TRUE            reduce using rule 38 (n_function_call_4 -> .)
    FALSE           reduce using rule 38 (n_function_call_4 -> .)
    INPUTSTRING     reduce using rule 38 (n_function_call_4 -> .)
    INPUTINT        reduce using rule 38 (n_function_call_4 -> .)
    INPUTFLOAT      reduce using rule 38 (n_function_call_4 -> .)
    COMMA           reduce using rule 38 (n_function_call_4 -> .)
    AND             reduce using rule 38 (n_function_call_4 -> .)
    OR              reduce using rule 38 (n_function_call_4 -> .)
    GREATERTHAN     reduce using rule 38 (n_function_call_4 -> .)
    LESSTHAN        reduce using rule 38 (n_function_call_4 -> .)
    EQUALEQUAL      reduce using rule 38 (n_function_call_4 -> .)
    LESSTHANOREQUAL reduce using rule 38 (n_function_call_4 -> .)
    GREATERTHANOREQUAL reduce using rule 38 (n_function_call_4 -> .)
    NOTEQUAL        reduce using rule 38 (n_function_call_4 -> .)
    TIMES           reduce using rule 38 (n_function_call_4 -> .)
    DIVIDE          reduce using rule 38 (n_function_call_4 -> .)
    MODULUS         reduce using rule 38 (n_function_call_4 -> .)
    RPARENTHESIS    reduce using rule 38 (n_function_call_4 -> .)

    n_function_call_4              shift and go to state 192

state 167

    (91) arg -> expression n_function_call_3 .

    COMMA           reduce using rule 91 (arg -> expression n_function_call_3 .)
    RPARENTHESIS    reduce using rule 91 (arg -> expression n_function_call_3 .)


state 168

    (121) arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET . expression RBRACKET n_matrix_reference
    (93) expression -> . expression_or
    (94) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (95) expression_or -> . expression_rel
    (96) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (97) expression_rel -> . exp
    (98) expression_rel -> . exp relational_operator exp n_math_expression_9
    (99) exp -> . termino n_math_expression_4
    (100) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (101) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (102) termino -> . factor n_math_expression_5
    (103) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (104) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (105) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (106) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (107) factor -> . PLUS value
    (108) factor -> . MINUS value
    (109) factor -> . value
    (113) value -> . function_call
    (114) value -> . literal
    (115) value -> . reference
    (116) value -> . input
    (84) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (85) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (70) literal -> . FLOAT n_math_expression_1_float
    (71) literal -> . INT n_math_expression_1_int
    (72) literal -> . STRING n_math_expression_1_string
    (73) literal -> . TRUE n_math_expression_1_bool
    (74) literal -> . FALSE n_math_expression_1_bool
    (117) reference -> . NAME n_variable_reference n_math_expression_1_name
    (118) reference -> . arr_reference
    (110) input -> . INPUTSTRING LPARENTHESIS RPARENTHESIS n_input_string
    (111) input -> . INPUTINT LPARENTHESIS RPARENTHESIS n_input_int
    (112) input -> . INPUTFLOAT LPARENTHESIS RPARENTHESIS n_input_float
    (119) arr_reference -> .
    (120) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference
    (121) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    NAME            shift and go to state 15
    FLOAT           shift and go to state 56
    INT             shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    INPUTSTRING     shift and go to state 61
    INPUTINT        shift and go to state 62
    INPUTFLOAT      shift and go to state 63
    TIMES           reduce using rule 119 (arr_reference -> .)
    DIVIDE          reduce using rule 119 (arr_reference -> .)
    MODULUS         reduce using rule 119 (arr_reference -> .)
    GREATERTHAN     reduce using rule 119 (arr_reference -> .)
    LESSTHAN        reduce using rule 119 (arr_reference -> .)
    EQUALEQUAL      reduce using rule 119 (arr_reference -> .)
    LESSTHANOREQUAL reduce using rule 119 (arr_reference -> .)
    GREATERTHANOREQUAL reduce using rule 119 (arr_reference -> .)
    NOTEQUAL        reduce using rule 119 (arr_reference -> .)
    OR              reduce using rule 119 (arr_reference -> .)
    AND             reduce using rule 119 (arr_reference -> .)
    RBRACKET        reduce using rule 119 (arr_reference -> .)

  ! PLUS            [ reduce using rule 119 (arr_reference -> .) ]
  ! MINUS           [ reduce using rule 119 (arr_reference -> .) ]

    expression                     shift and go to state 193
    expression_or                  shift and go to state 43
    expression_rel                 shift and go to state 44
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 49
    value                          shift and go to state 51
    function_call                  shift and go to state 52
    literal                        shift and go to state 53
    reference                      shift and go to state 54
    input                          shift and go to state 55
    arr_reference                  shift and go to state 32

state 169

    (120) arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference .

    EQUAL           reduce using rule 120 (arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference .)
    TIMES           reduce using rule 120 (arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference .)
    DIVIDE          reduce using rule 120 (arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference .)
    MODULUS         reduce using rule 120 (arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference .)
    PLUS            reduce using rule 120 (arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference .)
    MINUS           reduce using rule 120 (arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference .)
    GREATERTHAN     reduce using rule 120 (arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference .)
    LESSTHAN        reduce using rule 120 (arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference .)
    EQUALEQUAL      reduce using rule 120 (arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference .)
    LESSTHANOREQUAL reduce using rule 120 (arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference .)
    GREATERTHANOREQUAL reduce using rule 120 (arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference .)
    NOTEQUAL        reduce using rule 120 (arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference .)
    OR              reduce using rule 120 (arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference .)
    AND             reduce using rule 120 (arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference .)
    SEMICOLON       reduce using rule 120 (arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference .)
    RPARENTHESIS    reduce using rule 120 (arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference .)
    RBRACKET        reduce using rule 120 (arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference .)
    COMMA           reduce using rule 120 (arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference .)


state 170

    (142) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 . n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (2) n_open_new_scope -> .

    IF              reduce using rule 2 (n_open_new_scope -> .)
    RETURN          reduce using rule 2 (n_open_new_scope -> .)
    WHILE           reduce using rule 2 (n_open_new_scope -> .)
    NAME            reduce using rule 2 (n_open_new_scope -> .)
    PRINT           reduce using rule 2 (n_open_new_scope -> .)
    INT_TYPE        reduce using rule 2 (n_open_new_scope -> .)
    STRING_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    DOUBLE_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    FLOAT_TYPE      reduce using rule 2 (n_open_new_scope -> .)
    BOOL_TYPE       reduce using rule 2 (n_open_new_scope -> .)
    RCURLY          reduce using rule 2 (n_open_new_scope -> .)
    FUNCTION        reduce using rule 2 (n_open_new_scope -> .)
    EQUAL           reduce using rule 2 (n_open_new_scope -> .)

    n_open_new_scope               shift and go to state 194

state 171

    (94) expression -> expression_or AND n_math_expression_10 expression n_math_expression_11 .

    SEMICOLON       reduce using rule 94 (expression -> expression_or AND n_math_expression_10 expression n_math_expression_11 .)
    RPARENTHESIS    reduce using rule 94 (expression -> expression_or AND n_math_expression_10 expression n_math_expression_11 .)
    RBRACKET        reduce using rule 94 (expression -> expression_or AND n_math_expression_10 expression n_math_expression_11 .)
    COMMA           reduce using rule 94 (expression -> expression_or AND n_math_expression_10 expression n_math_expression_11 .)


state 172

    (96) expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .

    AND             reduce using rule 96 (expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .)
    SEMICOLON       reduce using rule 96 (expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .)
    RPARENTHESIS    reduce using rule 96 (expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .)
    RBRACKET        reduce using rule 96 (expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .)
    COMMA           reduce using rule 96 (expression_or -> expression_rel OR n_math_expression_10 expression_or n_math_expression_12 .)


state 173

    (100) exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .

    GREATERTHAN     reduce using rule 100 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    LESSTHAN        reduce using rule 100 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    EQUALEQUAL      reduce using rule 100 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    LESSTHANOREQUAL reduce using rule 100 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    GREATERTHANOREQUAL reduce using rule 100 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    NOTEQUAL        reduce using rule 100 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    OR              reduce using rule 100 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    AND             reduce using rule 100 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    SEMICOLON       reduce using rule 100 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    RPARENTHESIS    reduce using rule 100 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    RBRACKET        reduce using rule 100 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)
    COMMA           reduce using rule 100 (exp -> termino n_math_expression_4 PLUS n_math_expression_2 exp .)


state 174

    (101) exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .

    GREATERTHAN     reduce using rule 101 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    LESSTHAN        reduce using rule 101 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    EQUALEQUAL      reduce using rule 101 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    LESSTHANOREQUAL reduce using rule 101 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    GREATERTHANOREQUAL reduce using rule 101 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    NOTEQUAL        reduce using rule 101 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    OR              reduce using rule 101 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    AND             reduce using rule 101 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    SEMICOLON       reduce using rule 101 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    RPARENTHESIS    reduce using rule 101 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    RBRACKET        reduce using rule 101 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)
    COMMA           reduce using rule 101 (exp -> termino n_math_expression_4 MINUS n_math_expression_2 exp .)


state 175

    (103) termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .

    PLUS            reduce using rule 103 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    MINUS           reduce using rule 103 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    GREATERTHAN     reduce using rule 103 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    LESSTHAN        reduce using rule 103 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    EQUALEQUAL      reduce using rule 103 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    LESSTHANOREQUAL reduce using rule 103 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    GREATERTHANOREQUAL reduce using rule 103 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    NOTEQUAL        reduce using rule 103 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    OR              reduce using rule 103 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    AND             reduce using rule 103 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    SEMICOLON       reduce using rule 103 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    RPARENTHESIS    reduce using rule 103 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    RBRACKET        reduce using rule 103 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)
    COMMA           reduce using rule 103 (termino -> factor n_math_expression_5 TIMES n_math_expression_3 termino .)


state 176

    (104) termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .

    PLUS            reduce using rule 104 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    MINUS           reduce using rule 104 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    GREATERTHAN     reduce using rule 104 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    LESSTHAN        reduce using rule 104 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    EQUALEQUAL      reduce using rule 104 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    LESSTHANOREQUAL reduce using rule 104 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    GREATERTHANOREQUAL reduce using rule 104 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    NOTEQUAL        reduce using rule 104 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    OR              reduce using rule 104 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    AND             reduce using rule 104 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    SEMICOLON       reduce using rule 104 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    RPARENTHESIS    reduce using rule 104 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    RBRACKET        reduce using rule 104 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)
    COMMA           reduce using rule 104 (termino -> factor n_math_expression_5 DIVIDE n_math_expression_3 termino .)


state 177

    (105) termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .

    PLUS            reduce using rule 105 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    MINUS           reduce using rule 105 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    GREATERTHAN     reduce using rule 105 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    LESSTHAN        reduce using rule 105 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    EQUALEQUAL      reduce using rule 105 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    LESSTHANOREQUAL reduce using rule 105 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    GREATERTHANOREQUAL reduce using rule 105 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    NOTEQUAL        reduce using rule 105 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    OR              reduce using rule 105 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    AND             reduce using rule 105 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    SEMICOLON       reduce using rule 105 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    RPARENTHESIS    reduce using rule 105 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    RBRACKET        reduce using rule 105 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)
    COMMA           reduce using rule 105 (termino -> factor n_math_expression_5 MODULUS n_math_expression_3 termino .)


state 178

    (106) factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .

    TIMES           reduce using rule 106 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    DIVIDE          reduce using rule 106 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    MODULUS         reduce using rule 106 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    PLUS            reduce using rule 106 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    MINUS           reduce using rule 106 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    GREATERTHAN     reduce using rule 106 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    LESSTHAN        reduce using rule 106 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    EQUALEQUAL      reduce using rule 106 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    LESSTHANOREQUAL reduce using rule 106 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    GREATERTHANOREQUAL reduce using rule 106 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    NOTEQUAL        reduce using rule 106 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    OR              reduce using rule 106 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    AND             reduce using rule 106 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    SEMICOLON       reduce using rule 106 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    RPARENTHESIS    reduce using rule 106 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    RBRACKET        reduce using rule 106 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)
    COMMA           reduce using rule 106 (factor -> LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7 .)


state 179

    (141) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 . LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope

    LCURLY          shift and go to state 195


state 180

    (125) assign -> type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op . expression
    (93) expression -> . expression_or
    (94) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (95) expression_or -> . expression_rel
    (96) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (97) expression_rel -> . exp
    (98) expression_rel -> . exp relational_operator exp n_math_expression_9
    (99) exp -> . termino n_math_expression_4
    (100) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (101) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (102) termino -> . factor n_math_expression_5
    (103) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (104) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (105) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (106) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (107) factor -> . PLUS value
    (108) factor -> . MINUS value
    (109) factor -> . value
    (113) value -> . function_call
    (114) value -> . literal
    (115) value -> . reference
    (116) value -> . input
    (84) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (85) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (70) literal -> . FLOAT n_math_expression_1_float
    (71) literal -> . INT n_math_expression_1_int
    (72) literal -> . STRING n_math_expression_1_string
    (73) literal -> . TRUE n_math_expression_1_bool
    (74) literal -> . FALSE n_math_expression_1_bool
    (117) reference -> . NAME n_variable_reference n_math_expression_1_name
    (118) reference -> . arr_reference
    (110) input -> . INPUTSTRING LPARENTHESIS RPARENTHESIS n_input_string
    (111) input -> . INPUTINT LPARENTHESIS RPARENTHESIS n_input_int
    (112) input -> . INPUTFLOAT LPARENTHESIS RPARENTHESIS n_input_float
    (119) arr_reference -> .
    (120) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference
    (121) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    NAME            shift and go to state 15
    FLOAT           shift and go to state 56
    INT             shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    INPUTSTRING     shift and go to state 61
    INPUTINT        shift and go to state 62
    INPUTFLOAT      shift and go to state 63
    TIMES           reduce using rule 119 (arr_reference -> .)
    DIVIDE          reduce using rule 119 (arr_reference -> .)
    MODULUS         reduce using rule 119 (arr_reference -> .)
    GREATERTHAN     reduce using rule 119 (arr_reference -> .)
    LESSTHAN        reduce using rule 119 (arr_reference -> .)
    EQUALEQUAL      reduce using rule 119 (arr_reference -> .)
    LESSTHANOREQUAL reduce using rule 119 (arr_reference -> .)
    GREATERTHANOREQUAL reduce using rule 119 (arr_reference -> .)
    NOTEQUAL        reduce using rule 119 (arr_reference -> .)
    OR              reduce using rule 119 (arr_reference -> .)
    AND             reduce using rule 119 (arr_reference -> .)
    SEMICOLON       reduce using rule 119 (arr_reference -> .)

  ! PLUS            [ reduce using rule 119 (arr_reference -> .) ]
  ! MINUS           [ reduce using rule 119 (arr_reference -> .) ]

    expression                     shift and go to state 196
    expression_or                  shift and go to state 43
    expression_rel                 shift and go to state 44
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 49
    value                          shift and go to state 51
    function_call                  shift and go to state 52
    literal                        shift and go to state 53
    reference                      shift and go to state 54
    input                          shift and go to state 55
    arr_reference                  shift and go to state 32

state 181

    (123) declare -> type NAME n_arr_instantiate_name LBRACKET INT n_arr_instantiate_size . RBRACKET n_arr_instantiate
    (124) declare -> type NAME n_arr_instantiate_name LBRACKET INT n_arr_instantiate_size . RBRACKET LBRACKET INT n_arr_instantiate_size RBRACKET n_matrix_instantiate

    RBRACKET        shift and go to state 197


state 182

    (81) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type . LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end

    LCURLY          shift and go to state 198


state 183

    (75) function_type -> VOID . n_function_type
    (34) n_function_type -> .

    LCURLY          reduce using rule 34 (n_function_type -> .)

    n_function_type                shift and go to state 199

state 184

    (76) function_type -> INT_TYPE . n_function_type
    (34) n_function_type -> .

    LCURLY          reduce using rule 34 (n_function_type -> .)

    n_function_type                shift and go to state 200

state 185

    (77) function_type -> STRING_TYPE . n_function_type
    (34) n_function_type -> .

    LCURLY          reduce using rule 34 (n_function_type -> .)

    n_function_type                shift and go to state 201

state 186

    (78) function_type -> DOUBLE_TYPE . n_function_type
    (34) n_function_type -> .

    LCURLY          reduce using rule 34 (n_function_type -> .)

    n_function_type                shift and go to state 202

state 187

    (79) function_type -> FLOAT_TYPE . n_function_type
    (34) n_function_type -> .

    LCURLY          reduce using rule 34 (n_function_type -> .)

    n_function_type                shift and go to state 203

state 188

    (80) function_type -> BOOL_TYPE . n_function_type
    (34) n_function_type -> .

    LCURLY          reduce using rule 34 (n_function_type -> .)

    n_function_type                shift and go to state 204

state 189

    (90) parameter_list -> parameter COMMA parameter_list .

    DOUBLEDOT       reduce using rule 90 (parameter_list -> parameter COMMA parameter_list .)


state 190

    (92) parameter -> type NAME n_variable_instantiate_param .

    COMMA           reduce using rule 92 (parameter -> type NAME n_variable_instantiate_param .)
    DOUBLEDOT       reduce using rule 92 (parameter -> type NAME n_variable_instantiate_param .)


state 191

    (84) function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 . n_function_call_6
    (40) n_function_call_6 -> .

    SEMICOLON       reduce using rule 40 (n_function_call_6 -> .)
    TIMES           reduce using rule 40 (n_function_call_6 -> .)
    DIVIDE          reduce using rule 40 (n_function_call_6 -> .)
    MODULUS         reduce using rule 40 (n_function_call_6 -> .)
    PLUS            reduce using rule 40 (n_function_call_6 -> .)
    MINUS           reduce using rule 40 (n_function_call_6 -> .)
    GREATERTHAN     reduce using rule 40 (n_function_call_6 -> .)
    LESSTHAN        reduce using rule 40 (n_function_call_6 -> .)
    EQUALEQUAL      reduce using rule 40 (n_function_call_6 -> .)
    LESSTHANOREQUAL reduce using rule 40 (n_function_call_6 -> .)
    GREATERTHANOREQUAL reduce using rule 40 (n_function_call_6 -> .)
    NOTEQUAL        reduce using rule 40 (n_function_call_6 -> .)
    OR              reduce using rule 40 (n_function_call_6 -> .)
    AND             reduce using rule 40 (n_function_call_6 -> .)
    RPARENTHESIS    reduce using rule 40 (n_function_call_6 -> .)
    RBRACKET        reduce using rule 40 (n_function_call_6 -> .)
    COMMA           reduce using rule 40 (n_function_call_6 -> .)

    n_function_call_6              shift and go to state 205

state 192

    (87) arg_list -> arg COMMA n_function_call_4 . arg_list
    (86) arg_list -> . arg
    (87) arg_list -> . arg COMMA n_function_call_4 arg_list
    (91) arg -> . expression n_function_call_3
    (93) expression -> . expression_or
    (94) expression -> . expression_or AND n_math_expression_10 expression n_math_expression_11
    (95) expression_or -> . expression_rel
    (96) expression_or -> . expression_rel OR n_math_expression_10 expression_or n_math_expression_12
    (97) expression_rel -> . exp
    (98) expression_rel -> . exp relational_operator exp n_math_expression_9
    (99) exp -> . termino n_math_expression_4
    (100) exp -> . termino n_math_expression_4 PLUS n_math_expression_2 exp
    (101) exp -> . termino n_math_expression_4 MINUS n_math_expression_2 exp
    (102) termino -> . factor n_math_expression_5
    (103) termino -> . factor n_math_expression_5 TIMES n_math_expression_3 termino
    (104) termino -> . factor n_math_expression_5 DIVIDE n_math_expression_3 termino
    (105) termino -> . factor n_math_expression_5 MODULUS n_math_expression_3 termino
    (106) factor -> . LPARENTHESIS n_math_expression_6 expression RPARENTHESIS n_math_expression_7
    (107) factor -> . PLUS value
    (108) factor -> . MINUS value
    (109) factor -> . value
    (113) value -> . function_call
    (114) value -> . literal
    (115) value -> . reference
    (116) value -> . input
    (84) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (85) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (70) literal -> . FLOAT n_math_expression_1_float
    (71) literal -> . INT n_math_expression_1_int
    (72) literal -> . STRING n_math_expression_1_string
    (73) literal -> . TRUE n_math_expression_1_bool
    (74) literal -> . FALSE n_math_expression_1_bool
    (117) reference -> . NAME n_variable_reference n_math_expression_1_name
    (118) reference -> . arr_reference
    (110) input -> . INPUTSTRING LPARENTHESIS RPARENTHESIS n_input_string
    (111) input -> . INPUTINT LPARENTHESIS RPARENTHESIS n_input_int
    (112) input -> . INPUTFLOAT LPARENTHESIS RPARENTHESIS n_input_float
    (119) arr_reference -> .
    (120) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference
    (121) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    LPARENTHESIS    shift and go to state 50
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    NAME            shift and go to state 15
    FLOAT           shift and go to state 56
    INT             shift and go to state 57
    STRING          shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    INPUTSTRING     shift and go to state 61
    INPUTINT        shift and go to state 62
    INPUTFLOAT      shift and go to state 63
    TIMES           reduce using rule 119 (arr_reference -> .)
    DIVIDE          reduce using rule 119 (arr_reference -> .)
    MODULUS         reduce using rule 119 (arr_reference -> .)
    GREATERTHAN     reduce using rule 119 (arr_reference -> .)
    LESSTHAN        reduce using rule 119 (arr_reference -> .)
    EQUALEQUAL      reduce using rule 119 (arr_reference -> .)
    LESSTHANOREQUAL reduce using rule 119 (arr_reference -> .)
    GREATERTHANOREQUAL reduce using rule 119 (arr_reference -> .)
    NOTEQUAL        reduce using rule 119 (arr_reference -> .)
    OR              reduce using rule 119 (arr_reference -> .)
    AND             reduce using rule 119 (arr_reference -> .)
    COMMA           reduce using rule 119 (arr_reference -> .)
    RPARENTHESIS    reduce using rule 119 (arr_reference -> .)

  ! PLUS            [ reduce using rule 119 (arr_reference -> .) ]
  ! MINUS           [ reduce using rule 119 (arr_reference -> .) ]

    arg                            shift and go to state 141
    arg_list                       shift and go to state 206
    expression                     shift and go to state 142
    expression_or                  shift and go to state 43
    expression_rel                 shift and go to state 44
    exp                            shift and go to state 45
    termino                        shift and go to state 46
    factor                         shift and go to state 49
    value                          shift and go to state 51
    function_call                  shift and go to state 52
    literal                        shift and go to state 53
    reference                      shift and go to state 54
    input                          shift and go to state 55
    arr_reference                  shift and go to state 32

state 193

    (121) arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression . RBRACKET n_matrix_reference

    RBRACKET        shift and go to state 207


state 194

    (142) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope . codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (133) codeblock -> . empty
    (134) codeblock -> . codeblock_aux codeblock
    (55) empty -> .
    (135) codeblock_aux -> . statement
    (136) codeblock_aux -> . function_definition
    (137) codeblock_aux -> . condition_if
    (138) codeblock_aux -> . loop
    (139) codeblock_aux -> . return
    (128) statement -> . statement_aux SEMICOLON
    (81) function_definition -> . n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end
    (142) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (140) loop -> . whileloop
    (82) return -> . RETURN expression n_return SEMICOLON
    (83) return -> . RETURN n_return_void SEMICOLON
    (129) statement_aux -> . assign
    (130) statement_aux -> . declare
    (131) statement_aux -> . function_call
    (132) statement_aux -> . print
    (31) n_before_function_definition -> .
    (141) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (125) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (126) assign -> . reference EQUAL n_seen_equal_op expression
    (122) declare -> . type NAME n_variable_instantiate
    (123) declare -> . type NAME n_arr_instantiate_name LBRACKET INT n_arr_instantiate_size RBRACKET n_arr_instantiate
    (124) declare -> . type NAME n_arr_instantiate_name LBRACKET INT n_arr_instantiate_size RBRACKET LBRACKET INT n_arr_instantiate_size RBRACKET n_matrix_instantiate
    (84) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (85) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (127) print -> . PRINT LPARENTHESIS expression n_print RPARENTHESIS
    (59) type -> . INT_TYPE n_seen_type
    (60) type -> . STRING_TYPE n_seen_type
    (61) type -> . DOUBLE_TYPE n_seen_type
    (62) type -> . FLOAT_TYPE n_seen_type
    (63) type -> . BOOL_TYPE n_seen_type
    (117) reference -> . NAME n_variable_reference n_math_expression_1_name
    (118) reference -> . arr_reference
    (119) arr_reference -> .
    (120) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference
    (121) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference

    RCURLY          reduce using rule 55 (empty -> .)
    IF              shift and go to state 16
    RETURN          shift and go to state 18
    FUNCTION        reduce using rule 31 (n_before_function_definition -> .)
    WHILE           shift and go to state 23
    NAME            shift and go to state 15
    PRINT           shift and go to state 26
    INT_TYPE        shift and go to state 27
    STRING_TYPE     shift and go to state 28
    DOUBLE_TYPE     shift and go to state 29
    FLOAT_TYPE      shift and go to state 30
    BOOL_TYPE       shift and go to state 31
    EQUAL           reduce using rule 119 (arr_reference -> .)

    codeblock                      shift and go to state 208
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    return                         shift and go to state 12
    statement_aux                  shift and go to state 13
    n_before_function_definition   shift and go to state 14
    whileloop                      shift and go to state 17
    assign                         shift and go to state 19
    declare                        shift and go to state 20
    function_call                  shift and go to state 21
    print                          shift and go to state 22
    type                           shift and go to state 24
    reference                      shift and go to state 25
    arr_reference                  shift and go to state 32

state 195

    (141) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY . n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (2) n_open_new_scope -> .

    IF              reduce using rule 2 (n_open_new_scope -> .)
    RETURN          reduce using rule 2 (n_open_new_scope -> .)
    WHILE           reduce using rule 2 (n_open_new_scope -> .)
    NAME            reduce using rule 2 (n_open_new_scope -> .)
    PRINT           reduce using rule 2 (n_open_new_scope -> .)
    INT_TYPE        reduce using rule 2 (n_open_new_scope -> .)
    STRING_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    DOUBLE_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    FLOAT_TYPE      reduce using rule 2 (n_open_new_scope -> .)
    BOOL_TYPE       reduce using rule 2 (n_open_new_scope -> .)
    RCURLY          reduce using rule 2 (n_open_new_scope -> .)
    FUNCTION        reduce using rule 2 (n_open_new_scope -> .)
    EQUAL           reduce using rule 2 (n_open_new_scope -> .)

    n_open_new_scope               shift and go to state 209

state 196

    (125) assign -> type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression .

    SEMICOLON       reduce using rule 125 (assign -> type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression .)


state 197

    (123) declare -> type NAME n_arr_instantiate_name LBRACKET INT n_arr_instantiate_size RBRACKET . n_arr_instantiate
    (124) declare -> type NAME n_arr_instantiate_name LBRACKET INT n_arr_instantiate_size RBRACKET . LBRACKET INT n_arr_instantiate_size RBRACKET n_matrix_instantiate
    (52) n_arr_instantiate -> .

    LBRACKET        shift and go to state 210
    SEMICOLON       reduce using rule 52 (n_arr_instantiate -> .)

    n_arr_instantiate              shift and go to state 211

state 198

    (81) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY . n_function_block_start codeblock RCURLY n_close_scope n_function_block_end
    (32) n_function_block_start -> .

    IF              reduce using rule 32 (n_function_block_start -> .)
    RETURN          reduce using rule 32 (n_function_block_start -> .)
    WHILE           reduce using rule 32 (n_function_block_start -> .)
    NAME            reduce using rule 32 (n_function_block_start -> .)
    PRINT           reduce using rule 32 (n_function_block_start -> .)
    INT_TYPE        reduce using rule 32 (n_function_block_start -> .)
    STRING_TYPE     reduce using rule 32 (n_function_block_start -> .)
    DOUBLE_TYPE     reduce using rule 32 (n_function_block_start -> .)
    FLOAT_TYPE      reduce using rule 32 (n_function_block_start -> .)
    BOOL_TYPE       reduce using rule 32 (n_function_block_start -> .)
    RCURLY          reduce using rule 32 (n_function_block_start -> .)
    FUNCTION        reduce using rule 32 (n_function_block_start -> .)
    EQUAL           reduce using rule 32 (n_function_block_start -> .)

    n_function_block_start         shift and go to state 212

state 199

    (75) function_type -> VOID n_function_type .

    LCURLY          reduce using rule 75 (function_type -> VOID n_function_type .)


state 200

    (76) function_type -> INT_TYPE n_function_type .

    LCURLY          reduce using rule 76 (function_type -> INT_TYPE n_function_type .)


state 201

    (77) function_type -> STRING_TYPE n_function_type .

    LCURLY          reduce using rule 77 (function_type -> STRING_TYPE n_function_type .)


state 202

    (78) function_type -> DOUBLE_TYPE n_function_type .

    LCURLY          reduce using rule 78 (function_type -> DOUBLE_TYPE n_function_type .)


state 203

    (79) function_type -> FLOAT_TYPE n_function_type .

    LCURLY          reduce using rule 79 (function_type -> FLOAT_TYPE n_function_type .)


state 204

    (80) function_type -> BOOL_TYPE n_function_type .

    LCURLY          reduce using rule 80 (function_type -> BOOL_TYPE n_function_type .)


state 205

    (84) function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .

    SEMICOLON       reduce using rule 84 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    TIMES           reduce using rule 84 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    DIVIDE          reduce using rule 84 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    MODULUS         reduce using rule 84 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    PLUS            reduce using rule 84 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    MINUS           reduce using rule 84 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    GREATERTHAN     reduce using rule 84 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    LESSTHAN        reduce using rule 84 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    EQUALEQUAL      reduce using rule 84 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    LESSTHANOREQUAL reduce using rule 84 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    GREATERTHANOREQUAL reduce using rule 84 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    NOTEQUAL        reduce using rule 84 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    OR              reduce using rule 84 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    AND             reduce using rule 84 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    RPARENTHESIS    reduce using rule 84 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    RBRACKET        reduce using rule 84 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)
    COMMA           reduce using rule 84 (function_call -> NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6 .)


state 206

    (87) arg_list -> arg COMMA n_function_call_4 arg_list .

    RPARENTHESIS    reduce using rule 87 (arg_list -> arg COMMA n_function_call_4 arg_list .)


state 207

    (121) arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET . n_matrix_reference
    (48) n_matrix_reference -> .

    EQUAL           reduce using rule 48 (n_matrix_reference -> .)
    TIMES           reduce using rule 48 (n_matrix_reference -> .)
    DIVIDE          reduce using rule 48 (n_matrix_reference -> .)
    MODULUS         reduce using rule 48 (n_matrix_reference -> .)
    PLUS            reduce using rule 48 (n_matrix_reference -> .)
    MINUS           reduce using rule 48 (n_matrix_reference -> .)
    GREATERTHAN     reduce using rule 48 (n_matrix_reference -> .)
    LESSTHAN        reduce using rule 48 (n_matrix_reference -> .)
    EQUALEQUAL      reduce using rule 48 (n_matrix_reference -> .)
    LESSTHANOREQUAL reduce using rule 48 (n_matrix_reference -> .)
    GREATERTHANOREQUAL reduce using rule 48 (n_matrix_reference -> .)
    NOTEQUAL        reduce using rule 48 (n_matrix_reference -> .)
    OR              reduce using rule 48 (n_matrix_reference -> .)
    AND             reduce using rule 48 (n_matrix_reference -> .)
    SEMICOLON       reduce using rule 48 (n_matrix_reference -> .)
    RPARENTHESIS    reduce using rule 48 (n_matrix_reference -> .)
    RBRACKET        reduce using rule 48 (n_matrix_reference -> .)
    COMMA           reduce using rule 48 (n_matrix_reference -> .)

    n_matrix_reference             shift and go to state 213

state 208

    (142) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock . RCURLY n_close_scope condition_else n_two_way_conditional_2

    RCURLY          shift and go to state 214


state 209

    (141) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope . codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (133) codeblock -> . empty
    (134) codeblock -> . codeblock_aux codeblock
    (55) empty -> .
    (135) codeblock_aux -> . statement
    (136) codeblock_aux -> . function_definition
    (137) codeblock_aux -> . condition_if
    (138) codeblock_aux -> . loop
    (139) codeblock_aux -> . return
    (128) statement -> . statement_aux SEMICOLON
    (81) function_definition -> . n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end
    (142) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (140) loop -> . whileloop
    (82) return -> . RETURN expression n_return SEMICOLON
    (83) return -> . RETURN n_return_void SEMICOLON
    (129) statement_aux -> . assign
    (130) statement_aux -> . declare
    (131) statement_aux -> . function_call
    (132) statement_aux -> . print
    (31) n_before_function_definition -> .
    (141) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (125) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (126) assign -> . reference EQUAL n_seen_equal_op expression
    (122) declare -> . type NAME n_variable_instantiate
    (123) declare -> . type NAME n_arr_instantiate_name LBRACKET INT n_arr_instantiate_size RBRACKET n_arr_instantiate
    (124) declare -> . type NAME n_arr_instantiate_name LBRACKET INT n_arr_instantiate_size RBRACKET LBRACKET INT n_arr_instantiate_size RBRACKET n_matrix_instantiate
    (84) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (85) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (127) print -> . PRINT LPARENTHESIS expression n_print RPARENTHESIS
    (59) type -> . INT_TYPE n_seen_type
    (60) type -> . STRING_TYPE n_seen_type
    (61) type -> . DOUBLE_TYPE n_seen_type
    (62) type -> . FLOAT_TYPE n_seen_type
    (63) type -> . BOOL_TYPE n_seen_type
    (117) reference -> . NAME n_variable_reference n_math_expression_1_name
    (118) reference -> . arr_reference
    (119) arr_reference -> .
    (120) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference
    (121) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference

    RCURLY          reduce using rule 55 (empty -> .)
    IF              shift and go to state 16
    RETURN          shift and go to state 18
    FUNCTION        reduce using rule 31 (n_before_function_definition -> .)
    WHILE           shift and go to state 23
    NAME            shift and go to state 15
    PRINT           shift and go to state 26
    INT_TYPE        shift and go to state 27
    STRING_TYPE     shift and go to state 28
    DOUBLE_TYPE     shift and go to state 29
    FLOAT_TYPE      shift and go to state 30
    BOOL_TYPE       shift and go to state 31
    EQUAL           reduce using rule 119 (arr_reference -> .)

    codeblock                      shift and go to state 215
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    return                         shift and go to state 12
    statement_aux                  shift and go to state 13
    n_before_function_definition   shift and go to state 14
    whileloop                      shift and go to state 17
    assign                         shift and go to state 19
    declare                        shift and go to state 20
    function_call                  shift and go to state 21
    print                          shift and go to state 22
    type                           shift and go to state 24
    reference                      shift and go to state 25
    arr_reference                  shift and go to state 32

state 210

    (124) declare -> type NAME n_arr_instantiate_name LBRACKET INT n_arr_instantiate_size RBRACKET LBRACKET . INT n_arr_instantiate_size RBRACKET n_matrix_instantiate

    INT             shift and go to state 216


state 211

    (123) declare -> type NAME n_arr_instantiate_name LBRACKET INT n_arr_instantiate_size RBRACKET n_arr_instantiate .

    SEMICOLON       reduce using rule 123 (declare -> type NAME n_arr_instantiate_name LBRACKET INT n_arr_instantiate_size RBRACKET n_arr_instantiate .)


state 212

    (81) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start . codeblock RCURLY n_close_scope n_function_block_end
    (133) codeblock -> . empty
    (134) codeblock -> . codeblock_aux codeblock
    (55) empty -> .
    (135) codeblock_aux -> . statement
    (136) codeblock_aux -> . function_definition
    (137) codeblock_aux -> . condition_if
    (138) codeblock_aux -> . loop
    (139) codeblock_aux -> . return
    (128) statement -> . statement_aux SEMICOLON
    (81) function_definition -> . n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end
    (142) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (140) loop -> . whileloop
    (82) return -> . RETURN expression n_return SEMICOLON
    (83) return -> . RETURN n_return_void SEMICOLON
    (129) statement_aux -> . assign
    (130) statement_aux -> . declare
    (131) statement_aux -> . function_call
    (132) statement_aux -> . print
    (31) n_before_function_definition -> .
    (141) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (125) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (126) assign -> . reference EQUAL n_seen_equal_op expression
    (122) declare -> . type NAME n_variable_instantiate
    (123) declare -> . type NAME n_arr_instantiate_name LBRACKET INT n_arr_instantiate_size RBRACKET n_arr_instantiate
    (124) declare -> . type NAME n_arr_instantiate_name LBRACKET INT n_arr_instantiate_size RBRACKET LBRACKET INT n_arr_instantiate_size RBRACKET n_matrix_instantiate
    (84) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (85) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (127) print -> . PRINT LPARENTHESIS expression n_print RPARENTHESIS
    (59) type -> . INT_TYPE n_seen_type
    (60) type -> . STRING_TYPE n_seen_type
    (61) type -> . DOUBLE_TYPE n_seen_type
    (62) type -> . FLOAT_TYPE n_seen_type
    (63) type -> . BOOL_TYPE n_seen_type
    (117) reference -> . NAME n_variable_reference n_math_expression_1_name
    (118) reference -> . arr_reference
    (119) arr_reference -> .
    (120) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference
    (121) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference

    RCURLY          reduce using rule 55 (empty -> .)
    IF              shift and go to state 16
    RETURN          shift and go to state 18
    FUNCTION        reduce using rule 31 (n_before_function_definition -> .)
    WHILE           shift and go to state 23
    NAME            shift and go to state 15
    PRINT           shift and go to state 26
    INT_TYPE        shift and go to state 27
    STRING_TYPE     shift and go to state 28
    DOUBLE_TYPE     shift and go to state 29
    FLOAT_TYPE      shift and go to state 30
    BOOL_TYPE       shift and go to state 31
    EQUAL           reduce using rule 119 (arr_reference -> .)

    n_before_function_definition   shift and go to state 14
    codeblock                      shift and go to state 217
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    return                         shift and go to state 12
    statement_aux                  shift and go to state 13
    whileloop                      shift and go to state 17
    assign                         shift and go to state 19
    declare                        shift and go to state 20
    function_call                  shift and go to state 21
    print                          shift and go to state 22
    type                           shift and go to state 24
    reference                      shift and go to state 25
    arr_reference                  shift and go to state 32

state 213

    (121) arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference .

    EQUAL           reduce using rule 121 (arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference .)
    TIMES           reduce using rule 121 (arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference .)
    DIVIDE          reduce using rule 121 (arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference .)
    MODULUS         reduce using rule 121 (arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference .)
    PLUS            reduce using rule 121 (arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference .)
    MINUS           reduce using rule 121 (arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference .)
    GREATERTHAN     reduce using rule 121 (arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference .)
    LESSTHAN        reduce using rule 121 (arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference .)
    EQUALEQUAL      reduce using rule 121 (arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference .)
    LESSTHANOREQUAL reduce using rule 121 (arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference .)
    GREATERTHANOREQUAL reduce using rule 121 (arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference .)
    NOTEQUAL        reduce using rule 121 (arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference .)
    OR              reduce using rule 121 (arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference .)
    AND             reduce using rule 121 (arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference .)
    SEMICOLON       reduce using rule 121 (arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference .)
    RPARENTHESIS    reduce using rule 121 (arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference .)
    RBRACKET        reduce using rule 121 (arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference .)
    COMMA           reduce using rule 121 (arr_reference -> NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference .)


state 214

    (142) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY . n_close_scope condition_else n_two_way_conditional_2
    (4) n_close_scope -> .

    ELSE            reduce using rule 4 (n_close_scope -> .)
    IF              reduce using rule 4 (n_close_scope -> .)
    RETURN          reduce using rule 4 (n_close_scope -> .)
    WHILE           reduce using rule 4 (n_close_scope -> .)
    NAME            reduce using rule 4 (n_close_scope -> .)
    PRINT           reduce using rule 4 (n_close_scope -> .)
    INT_TYPE        reduce using rule 4 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 4 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 4 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 4 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 4 (n_close_scope -> .)
    FUNCTION        reduce using rule 4 (n_close_scope -> .)
    EQUAL           reduce using rule 4 (n_close_scope -> .)
    $end            reduce using rule 4 (n_close_scope -> .)
    RCURLY          reduce using rule 4 (n_close_scope -> .)

    n_close_scope                  shift and go to state 218

state 215

    (141) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock . RCURLY p_n_pre_condition_loop_3 n_close_scope

    RCURLY          shift and go to state 219


state 216

    (124) declare -> type NAME n_arr_instantiate_name LBRACKET INT n_arr_instantiate_size RBRACKET LBRACKET INT . n_arr_instantiate_size RBRACKET n_matrix_instantiate
    (51) n_arr_instantiate_size -> .

    RBRACKET        reduce using rule 51 (n_arr_instantiate_size -> .)

    n_arr_instantiate_size         shift and go to state 220

state 217

    (81) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock . RCURLY n_close_scope n_function_block_end

    RCURLY          shift and go to state 221


state 218

    (142) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope . condition_else n_two_way_conditional_2
    (143) condition_else -> . ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope
    (144) condition_else -> . empty
    (55) empty -> .

    ELSE            shift and go to state 223
    IF              reduce using rule 55 (empty -> .)
    RETURN          reduce using rule 55 (empty -> .)
    WHILE           reduce using rule 55 (empty -> .)
    NAME            reduce using rule 55 (empty -> .)
    PRINT           reduce using rule 55 (empty -> .)
    INT_TYPE        reduce using rule 55 (empty -> .)
    STRING_TYPE     reduce using rule 55 (empty -> .)
    DOUBLE_TYPE     reduce using rule 55 (empty -> .)
    FLOAT_TYPE      reduce using rule 55 (empty -> .)
    BOOL_TYPE       reduce using rule 55 (empty -> .)
    FUNCTION        reduce using rule 55 (empty -> .)
    EQUAL           reduce using rule 55 (empty -> .)
    $end            reduce using rule 55 (empty -> .)
    RCURLY          reduce using rule 55 (empty -> .)

    condition_else                 shift and go to state 222
    empty                          shift and go to state 224

state 219

    (141) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY . p_n_pre_condition_loop_3 n_close_scope
    (29) p_n_pre_condition_loop_3 -> .

    IF              reduce using rule 29 (p_n_pre_condition_loop_3 -> .)
    RETURN          reduce using rule 29 (p_n_pre_condition_loop_3 -> .)
    WHILE           reduce using rule 29 (p_n_pre_condition_loop_3 -> .)
    NAME            reduce using rule 29 (p_n_pre_condition_loop_3 -> .)
    PRINT           reduce using rule 29 (p_n_pre_condition_loop_3 -> .)
    INT_TYPE        reduce using rule 29 (p_n_pre_condition_loop_3 -> .)
    STRING_TYPE     reduce using rule 29 (p_n_pre_condition_loop_3 -> .)
    DOUBLE_TYPE     reduce using rule 29 (p_n_pre_condition_loop_3 -> .)
    FLOAT_TYPE      reduce using rule 29 (p_n_pre_condition_loop_3 -> .)
    BOOL_TYPE       reduce using rule 29 (p_n_pre_condition_loop_3 -> .)
    FUNCTION        reduce using rule 29 (p_n_pre_condition_loop_3 -> .)
    EQUAL           reduce using rule 29 (p_n_pre_condition_loop_3 -> .)
    $end            reduce using rule 29 (p_n_pre_condition_loop_3 -> .)
    RCURLY          reduce using rule 29 (p_n_pre_condition_loop_3 -> .)

    p_n_pre_condition_loop_3       shift and go to state 225

state 220

    (124) declare -> type NAME n_arr_instantiate_name LBRACKET INT n_arr_instantiate_size RBRACKET LBRACKET INT n_arr_instantiate_size . RBRACKET n_matrix_instantiate

    RBRACKET        shift and go to state 226


state 221

    (81) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY . n_close_scope n_function_block_end
    (4) n_close_scope -> .

    IF              reduce using rule 4 (n_close_scope -> .)
    RETURN          reduce using rule 4 (n_close_scope -> .)
    WHILE           reduce using rule 4 (n_close_scope -> .)
    NAME            reduce using rule 4 (n_close_scope -> .)
    PRINT           reduce using rule 4 (n_close_scope -> .)
    INT_TYPE        reduce using rule 4 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 4 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 4 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 4 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 4 (n_close_scope -> .)
    FUNCTION        reduce using rule 4 (n_close_scope -> .)
    EQUAL           reduce using rule 4 (n_close_scope -> .)
    $end            reduce using rule 4 (n_close_scope -> .)
    RCURLY          reduce using rule 4 (n_close_scope -> .)

    n_close_scope                  shift and go to state 227

state 222

    (142) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else . n_two_way_conditional_2
    (25) n_two_way_conditional_2 -> .

    IF              reduce using rule 25 (n_two_way_conditional_2 -> .)
    RETURN          reduce using rule 25 (n_two_way_conditional_2 -> .)
    WHILE           reduce using rule 25 (n_two_way_conditional_2 -> .)
    NAME            reduce using rule 25 (n_two_way_conditional_2 -> .)
    PRINT           reduce using rule 25 (n_two_way_conditional_2 -> .)
    INT_TYPE        reduce using rule 25 (n_two_way_conditional_2 -> .)
    STRING_TYPE     reduce using rule 25 (n_two_way_conditional_2 -> .)
    DOUBLE_TYPE     reduce using rule 25 (n_two_way_conditional_2 -> .)
    FLOAT_TYPE      reduce using rule 25 (n_two_way_conditional_2 -> .)
    BOOL_TYPE       reduce using rule 25 (n_two_way_conditional_2 -> .)
    FUNCTION        reduce using rule 25 (n_two_way_conditional_2 -> .)
    EQUAL           reduce using rule 25 (n_two_way_conditional_2 -> .)
    $end            reduce using rule 25 (n_two_way_conditional_2 -> .)
    RCURLY          reduce using rule 25 (n_two_way_conditional_2 -> .)

    n_two_way_conditional_2        shift and go to state 228

state 223

    (143) condition_else -> ELSE . n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope
    (26) n_two_way_conditional_3 -> .

    LCURLY          reduce using rule 26 (n_two_way_conditional_3 -> .)

    n_two_way_conditional_3        shift and go to state 229

state 224

    (144) condition_else -> empty .

    IF              reduce using rule 144 (condition_else -> empty .)
    RETURN          reduce using rule 144 (condition_else -> empty .)
    WHILE           reduce using rule 144 (condition_else -> empty .)
    NAME            reduce using rule 144 (condition_else -> empty .)
    PRINT           reduce using rule 144 (condition_else -> empty .)
    INT_TYPE        reduce using rule 144 (condition_else -> empty .)
    STRING_TYPE     reduce using rule 144 (condition_else -> empty .)
    DOUBLE_TYPE     reduce using rule 144 (condition_else -> empty .)
    FLOAT_TYPE      reduce using rule 144 (condition_else -> empty .)
    BOOL_TYPE       reduce using rule 144 (condition_else -> empty .)
    FUNCTION        reduce using rule 144 (condition_else -> empty .)
    EQUAL           reduce using rule 144 (condition_else -> empty .)
    $end            reduce using rule 144 (condition_else -> empty .)
    RCURLY          reduce using rule 144 (condition_else -> empty .)


state 225

    (141) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 . n_close_scope
    (4) n_close_scope -> .

    IF              reduce using rule 4 (n_close_scope -> .)
    RETURN          reduce using rule 4 (n_close_scope -> .)
    WHILE           reduce using rule 4 (n_close_scope -> .)
    NAME            reduce using rule 4 (n_close_scope -> .)
    PRINT           reduce using rule 4 (n_close_scope -> .)
    INT_TYPE        reduce using rule 4 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 4 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 4 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 4 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 4 (n_close_scope -> .)
    FUNCTION        reduce using rule 4 (n_close_scope -> .)
    EQUAL           reduce using rule 4 (n_close_scope -> .)
    $end            reduce using rule 4 (n_close_scope -> .)
    RCURLY          reduce using rule 4 (n_close_scope -> .)

    n_close_scope                  shift and go to state 230

state 226

    (124) declare -> type NAME n_arr_instantiate_name LBRACKET INT n_arr_instantiate_size RBRACKET LBRACKET INT n_arr_instantiate_size RBRACKET . n_matrix_instantiate
    (53) n_matrix_instantiate -> .

    SEMICOLON       reduce using rule 53 (n_matrix_instantiate -> .)

    n_matrix_instantiate           shift and go to state 231

state 227

    (81) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope . n_function_block_end
    (33) n_function_block_end -> .

    IF              reduce using rule 33 (n_function_block_end -> .)
    RETURN          reduce using rule 33 (n_function_block_end -> .)
    WHILE           reduce using rule 33 (n_function_block_end -> .)
    NAME            reduce using rule 33 (n_function_block_end -> .)
    PRINT           reduce using rule 33 (n_function_block_end -> .)
    INT_TYPE        reduce using rule 33 (n_function_block_end -> .)
    STRING_TYPE     reduce using rule 33 (n_function_block_end -> .)
    DOUBLE_TYPE     reduce using rule 33 (n_function_block_end -> .)
    FLOAT_TYPE      reduce using rule 33 (n_function_block_end -> .)
    BOOL_TYPE       reduce using rule 33 (n_function_block_end -> .)
    FUNCTION        reduce using rule 33 (n_function_block_end -> .)
    EQUAL           reduce using rule 33 (n_function_block_end -> .)
    $end            reduce using rule 33 (n_function_block_end -> .)
    RCURLY          reduce using rule 33 (n_function_block_end -> .)

    n_function_block_end           shift and go to state 232

state 228

    (142) condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .

    IF              reduce using rule 142 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    RETURN          reduce using rule 142 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    WHILE           reduce using rule 142 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    NAME            reduce using rule 142 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    PRINT           reduce using rule 142 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    INT_TYPE        reduce using rule 142 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    STRING_TYPE     reduce using rule 142 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    DOUBLE_TYPE     reduce using rule 142 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    FLOAT_TYPE      reduce using rule 142 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    BOOL_TYPE       reduce using rule 142 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    FUNCTION        reduce using rule 142 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    EQUAL           reduce using rule 142 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    $end            reduce using rule 142 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)
    RCURLY          reduce using rule 142 (condition_if -> IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2 .)


state 229

    (143) condition_else -> ELSE n_two_way_conditional_3 . LCURLY n_open_new_scope codeblock RCURLY n_close_scope

    LCURLY          shift and go to state 233


state 230

    (141) whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .

    IF              reduce using rule 141 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    RETURN          reduce using rule 141 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    WHILE           reduce using rule 141 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    NAME            reduce using rule 141 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    PRINT           reduce using rule 141 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    INT_TYPE        reduce using rule 141 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    STRING_TYPE     reduce using rule 141 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    DOUBLE_TYPE     reduce using rule 141 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    FLOAT_TYPE      reduce using rule 141 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    BOOL_TYPE       reduce using rule 141 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    FUNCTION        reduce using rule 141 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    EQUAL           reduce using rule 141 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    $end            reduce using rule 141 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)
    RCURLY          reduce using rule 141 (whileloop -> WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope .)


state 231

    (124) declare -> type NAME n_arr_instantiate_name LBRACKET INT n_arr_instantiate_size RBRACKET LBRACKET INT n_arr_instantiate_size RBRACKET n_matrix_instantiate .

    SEMICOLON       reduce using rule 124 (declare -> type NAME n_arr_instantiate_name LBRACKET INT n_arr_instantiate_size RBRACKET LBRACKET INT n_arr_instantiate_size RBRACKET n_matrix_instantiate .)


state 232

    (81) function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end .

    IF              reduce using rule 81 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end .)
    RETURN          reduce using rule 81 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end .)
    WHILE           reduce using rule 81 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end .)
    NAME            reduce using rule 81 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end .)
    PRINT           reduce using rule 81 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end .)
    INT_TYPE        reduce using rule 81 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end .)
    STRING_TYPE     reduce using rule 81 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end .)
    DOUBLE_TYPE     reduce using rule 81 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end .)
    FLOAT_TYPE      reduce using rule 81 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end .)
    BOOL_TYPE       reduce using rule 81 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end .)
    FUNCTION        reduce using rule 81 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end .)
    EQUAL           reduce using rule 81 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end .)
    $end            reduce using rule 81 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end .)
    RCURLY          reduce using rule 81 (function_definition -> n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end .)


state 233

    (143) condition_else -> ELSE n_two_way_conditional_3 LCURLY . n_open_new_scope codeblock RCURLY n_close_scope
    (2) n_open_new_scope -> .

    IF              reduce using rule 2 (n_open_new_scope -> .)
    RETURN          reduce using rule 2 (n_open_new_scope -> .)
    WHILE           reduce using rule 2 (n_open_new_scope -> .)
    NAME            reduce using rule 2 (n_open_new_scope -> .)
    PRINT           reduce using rule 2 (n_open_new_scope -> .)
    INT_TYPE        reduce using rule 2 (n_open_new_scope -> .)
    STRING_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    DOUBLE_TYPE     reduce using rule 2 (n_open_new_scope -> .)
    FLOAT_TYPE      reduce using rule 2 (n_open_new_scope -> .)
    BOOL_TYPE       reduce using rule 2 (n_open_new_scope -> .)
    RCURLY          reduce using rule 2 (n_open_new_scope -> .)
    FUNCTION        reduce using rule 2 (n_open_new_scope -> .)
    EQUAL           reduce using rule 2 (n_open_new_scope -> .)

    n_open_new_scope               shift and go to state 234

state 234

    (143) condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope . codeblock RCURLY n_close_scope
    (133) codeblock -> . empty
    (134) codeblock -> . codeblock_aux codeblock
    (55) empty -> .
    (135) codeblock_aux -> . statement
    (136) codeblock_aux -> . function_definition
    (137) codeblock_aux -> . condition_if
    (138) codeblock_aux -> . loop
    (139) codeblock_aux -> . return
    (128) statement -> . statement_aux SEMICOLON
    (81) function_definition -> . n_before_function_definition FUNCTION NAME n_open_new_scope_function parameter_list DOUBLEDOT function_type LCURLY n_function_block_start codeblock RCURLY n_close_scope n_function_block_end
    (142) condition_if -> . IF LPARENTHESIS expression RPARENTHESIS LCURLY n_two_way_conditional_1 n_open_new_scope codeblock RCURLY n_close_scope condition_else n_two_way_conditional_2
    (140) loop -> . whileloop
    (82) return -> . RETURN expression n_return SEMICOLON
    (83) return -> . RETURN n_return_void SEMICOLON
    (129) statement_aux -> . assign
    (130) statement_aux -> . declare
    (131) statement_aux -> . function_call
    (132) statement_aux -> . print
    (31) n_before_function_definition -> .
    (141) whileloop -> . WHILE p_n_pre_condition_loop_1 LPARENTHESIS expression RPARENTHESIS p_n_pre_condition_loop_2 LCURLY n_open_new_scope codeblock RCURLY p_n_pre_condition_loop_3 n_close_scope
    (125) assign -> . type NAME n_variable_instantiate n_math_expression_1_name EQUAL n_seen_equal_op expression
    (126) assign -> . reference EQUAL n_seen_equal_op expression
    (122) declare -> . type NAME n_variable_instantiate
    (123) declare -> . type NAME n_arr_instantiate_name LBRACKET INT n_arr_instantiate_size RBRACKET n_arr_instantiate
    (124) declare -> . type NAME n_arr_instantiate_name LBRACKET INT n_arr_instantiate_size RBRACKET LBRACKET INT n_arr_instantiate_size RBRACKET n_matrix_instantiate
    (84) function_call -> . NAME n_function_call_1 LPARENTHESIS n_function_call_2 arg_list RPARENTHESIS n_function_call_5 n_function_call_6
    (85) function_call -> . NAME n_function_call_1 LPARENTHESIS RPARENTHESIS n_function_call_6
    (127) print -> . PRINT LPARENTHESIS expression n_print RPARENTHESIS
    (59) type -> . INT_TYPE n_seen_type
    (60) type -> . STRING_TYPE n_seen_type
    (61) type -> . DOUBLE_TYPE n_seen_type
    (62) type -> . FLOAT_TYPE n_seen_type
    (63) type -> . BOOL_TYPE n_seen_type
    (117) reference -> . NAME n_variable_reference n_math_expression_1_name
    (118) reference -> . arr_reference
    (119) arr_reference -> .
    (120) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET n_arr_reference
    (121) arr_reference -> . NAME n_arr_reference_name LBRACKET expression RBRACKET LBRACKET expression RBRACKET n_matrix_reference

    RCURLY          reduce using rule 55 (empty -> .)
    IF              shift and go to state 16
    RETURN          shift and go to state 18
    FUNCTION        reduce using rule 31 (n_before_function_definition -> .)
    WHILE           shift and go to state 23
    NAME            shift and go to state 15
    PRINT           shift and go to state 26
    INT_TYPE        shift and go to state 27
    STRING_TYPE     shift and go to state 28
    DOUBLE_TYPE     shift and go to state 29
    FLOAT_TYPE      shift and go to state 30
    BOOL_TYPE       shift and go to state 31
    EQUAL           reduce using rule 119 (arr_reference -> .)

    codeblock                      shift and go to state 235
    empty                          shift and go to state 6
    codeblock_aux                  shift and go to state 7
    statement                      shift and go to state 8
    function_definition            shift and go to state 9
    condition_if                   shift and go to state 10
    loop                           shift and go to state 11
    return                         shift and go to state 12
    statement_aux                  shift and go to state 13
    n_before_function_definition   shift and go to state 14
    whileloop                      shift and go to state 17
    assign                         shift and go to state 19
    declare                        shift and go to state 20
    function_call                  shift and go to state 21
    print                          shift and go to state 22
    type                           shift and go to state 24
    reference                      shift and go to state 25
    arr_reference                  shift and go to state 32

state 235

    (143) condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock . RCURLY n_close_scope

    RCURLY          shift and go to state 236


state 236

    (143) condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY . n_close_scope
    (4) n_close_scope -> .

    IF              reduce using rule 4 (n_close_scope -> .)
    RETURN          reduce using rule 4 (n_close_scope -> .)
    WHILE           reduce using rule 4 (n_close_scope -> .)
    NAME            reduce using rule 4 (n_close_scope -> .)
    PRINT           reduce using rule 4 (n_close_scope -> .)
    INT_TYPE        reduce using rule 4 (n_close_scope -> .)
    STRING_TYPE     reduce using rule 4 (n_close_scope -> .)
    DOUBLE_TYPE     reduce using rule 4 (n_close_scope -> .)
    FLOAT_TYPE      reduce using rule 4 (n_close_scope -> .)
    BOOL_TYPE       reduce using rule 4 (n_close_scope -> .)
    FUNCTION        reduce using rule 4 (n_close_scope -> .)
    EQUAL           reduce using rule 4 (n_close_scope -> .)
    $end            reduce using rule 4 (n_close_scope -> .)
    RCURLY          reduce using rule 4 (n_close_scope -> .)

    n_close_scope                  shift and go to state 237

state 237

    (143) condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .

    IF              reduce using rule 143 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    RETURN          reduce using rule 143 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    WHILE           reduce using rule 143 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    NAME            reduce using rule 143 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    PRINT           reduce using rule 143 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    INT_TYPE        reduce using rule 143 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    STRING_TYPE     reduce using rule 143 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    DOUBLE_TYPE     reduce using rule 143 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    FLOAT_TYPE      reduce using rule 143 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    BOOL_TYPE       reduce using rule 143 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    FUNCTION        reduce using rule 143 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    EQUAL           reduce using rule 143 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    $end            reduce using rule 143 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)
    RCURLY          reduce using rule 143 (condition_else -> ELSE n_two_way_conditional_3 LCURLY n_open_new_scope codeblock RCURLY n_close_scope .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 18 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 18 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 40 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 40 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 67 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 67 resolved as shift
WARNING: shift/reduce conflict for RPARENTHESIS in state 74 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 76 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 76 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 82 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 82 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 93 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 93 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 102 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 102 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 105 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 105 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 108 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 108 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 113 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 113 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 114 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 114 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 149 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 149 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 150 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 150 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 151 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 151 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 152 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 152 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 153 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 153 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 168 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 168 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 180 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 180 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 192 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 192 resolved as shift
WARNING: reduce/reduce conflict in state 18 resolved using rule (n_return_void -> <empty>)
WARNING: rejected rule (arr_reference -> <empty>) in state 18
